

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Sep 22 00:18:33 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 2.10
    41                           ; Generated 31/07/2019 GMT
    42                           ; 
    43                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F8722 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  002108                     __pidataCOMRAM:
    77                           	opt callstack 0
    78                           
    79                           ;initializer for _secondReadRB0
    80  002108  01                 	db	1
    81                           
    82                           ;initializer for _firstReadRB0
    83  002109  01                 	db	1
    84                           
    85                           ;initializer for _secondReadRA5
    86  00210A  01                 	db	1
    87                           
    88                           ;initializer for _firstReadRA5
    89  00210B  01                 	db	1
    90                           
    91                           	psect	nvCOMRAM
    92  000038                     __pnvCOMRAM:
    93                           	opt callstack 0
    94  000038                     _timer0ReloadVal:
    95                           	opt callstack 0
    96  000038                     	ds	3
    97  0000                     _TMR0	set	4054
    98  0000                     _LATCbits	set	3979
    99  0000                     _LATAbits	set	3977
   100  0000                     _TRISCbits	set	3988
   101  0000                     _LATFbits	set	3982
   102  0000                     _TRISFbits	set	3991
   103  0000                     _PORTBbits	set	3969
   104  0000                     _PORTAbits	set	3968
   105  0000                     _ADCON1	set	4033
   106  0000                     _TRISBbits	set	3987
   107  0000                     _TRISAbits	set	3986
   108  0000                     _TMR0L	set	4054
   109  0000                     _TMR0H	set	4055
   110  0000                     _T0CON	set	4053
   111  0000                     _INTCONbits	set	4082
   112  0000                     _OSCTUNE	set	3995
   113  0000                     _OSCCON	set	4051
   114                           
   115                           	psect	smallconst
   116  001000                     __psmallconst:
   117                           	opt callstack 0
   118  001000  00                 	db	0
   119  001001                     STR_5:
   120  001001  20                 	db	32
   121  001002  20                 	db	32
   122  001003  20                 	db	32
   123  001004  53                 	db	83	;'S'
   124  001005  54                 	db	84	;'T'
   125  001006  4F                 	db	79	;'O'
   126  001007  50                 	db	80	;'P'
   127  001008  20                 	db	32
   128  001009  57                 	db	87	;'W'
   129  00100A  41                 	db	65	;'A'
   130  00100B  54                 	db	84	;'T'
   131  00100C  43                 	db	67	;'C'
   132  00100D  48                 	db	72	;'H'
   133  00100E  20                 	db	32
   134  00100F  20                 	db	32
   135  001010  20                 	db	32
   136  001011  00                 	db	0
   137  001012                     STR_1:
   138  001012  20                 	db	32
   139  001013  20                 	db	32
   140  001014  4E                 	db	78	;'N'
   141  001015  4F                 	db	79	;'O'
   142  001016  52                 	db	82	;'R'
   143  001017  4D                 	db	77	;'M'
   144  001018  41                 	db	65	;'A'
   145  001019  4C                 	db	76	;'L'
   146  00101A  20                 	db	32
   147  00101B  43                 	db	67	;'C'
   148  00101C  4C                 	db	76	;'L'
   149  00101D  4F                 	db	79	;'O'
   150  00101E  43                 	db	67	;'C'
   151  00101F  4B                 	db	75	;'K'
   152  001020  20                 	db	32
   153  001021  20                 	db	32
   154  001022  00                 	db	0
   155  001023                     STR_2:
   156  001023  20                 	db	32
   157  001024  4D                 	db	77	;'M'
   158  001025  4F                 	db	79	;'O'
   159  001026  44                 	db	68	;'D'
   160  001027  49                 	db	73	;'I'
   161  001028  46                 	db	70	;'F'
   162  001029  49                 	db	73	;'I'
   163  00102A  45                 	db	69	;'E'
   164  00102B  53                 	db	83	;'S'
   165  00102C  20                 	db	32
   166  00102D  48                 	db	72	;'H'
   167  00102E  4F                 	db	79	;'O'
   168  00102F  55                 	db	85	;'U'
   169  001030  52                 	db	82	;'R'
   170  001031  20                 	db	32
   171  001032  00                 	db	0
   172  001033                     STR_3:
   173  001033  4D                 	db	77	;'M'
   174  001034  4F                 	db	79	;'O'
   175  001035  44                 	db	68	;'D'
   176  001036  49                 	db	73	;'I'
   177  001037  46                 	db	70	;'F'
   178  001038  49                 	db	73	;'I'
   179  001039  45                 	db	69	;'E'
   180  00103A  53                 	db	83	;'S'
   181  00103B  20                 	db	32
   182  00103C  4D                 	db	77	;'M'
   183  00103D  49                 	db	73	;'I'
   184  00103E  4E                 	db	78	;'N'
   185  00103F  55                 	db	85	;'U'
   186  001040  54                 	db	84	;'T'
   187  001041  45                 	db	69	;'E'
   188  001042  00                 	db	0
   189  0000                     
   190                           ; #config settings
   191  001043  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  002088                     __pcinit:
   195                           	opt callstack 0
   196  002088                     start_initialization:
   197                           	opt callstack 0
   198  002088                     __initialization:
   199                           	opt callstack 0
   200                           
   201                           ; Initialize objects allocated to COMRAM (4 bytes)
   202                           ; load TBLPTR registers with __pidataCOMRAM
   203  002088  0E08               	movlw	low __pidataCOMRAM
   204  00208A  6EF6               	movwf	tblptrl,c
   205  00208C  0E21               	movlw	high __pidataCOMRAM
   206  00208E  6EF7               	movwf	tblptrh,c
   207  002090  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   208  002092  6EF8               	movwf	tblptru,c
   209  002094  EE00  F034         	lfsr	0,__pdataCOMRAM
   210  002098  EE10 F004          	lfsr	1,4
   211  00209C                     copy_data0:
   212  00209C  0009               	tblrd		*+
   213  00209E  CFF5 FFEE          	movff	tablat,postinc0
   214  0020A2  50E5               	movf	postdec1,w,c
   215  0020A4  50E1               	movf	fsr1l,w,c
   216  0020A6  E1FA               	bnz	copy_data0
   217                           
   218                           ; Clear objects allocated to COMRAM (30 bytes)
   219  0020A8  EE00  F001         	lfsr	0,__pbssCOMRAM
   220  0020AC  0E1E               	movlw	30
   221  0020AE                     clear_0:
   222  0020AE  6AEE               	clrf	postinc0,c
   223  0020B0  06E8               	decf	wreg,f,c
   224  0020B2  E1FD               	bnz	clear_0
   225  0020B4                     end_of_initialization:
   226                           	opt callstack 0
   227  0020B4                     __end_of__initialization:
   228                           	opt callstack 0
   229  0020B4  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   230  0020B6  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   231  0020B8  0100               	movlb	0
   232  0020BA  EF08  F00A         	goto	_main	;jump to C main() function
   233                           
   234                           	psect	bssCOMRAM
   235  000001                     __pbssCOMRAM:
   236                           	opt callstack 0
   237  000001                     _miliSecSTW:
   238                           	opt callstack 0
   239  000001                     	ds	2
   240  000003                     _secSTW:
   241                           	opt callstack 0
   242  000003                     	ds	2
   243  000005                     _minSTW:
   244                           	opt callstack 0
   245  000005                     	ds	2
   246  000007                     _run:
   247                           	opt callstack 0
   248  000007                     	ds	2
   249  000009                     _blink:
   250                           	opt callstack 0
   251  000009                     	ds	2
   252  00000B                     _hr:
   253                           	opt callstack 0
   254  00000B                     	ds	2
   255  00000D                     _min:
   256                           	opt callstack 0
   257  00000D                     	ds	2
   258  00000F                     _sec:
   259                           	opt callstack 0
   260  00000F                     	ds	2
   261  000011                     _timerFlag:
   262                           	opt callstack 0
   263  000011                     	ds	2
   264  000013                     _count10ms:
   265                           	opt callstack 0
   266  000013                     	ds	2
   267  000015                     _increaseTime:
   268                           	opt callstack 0
   269  000015                     	ds	2
   270  000017                     _changeModePressed:
   271                           	opt callstack 0
   272  000017                     	ds	2
   273  000019                     _countAuto:
   274                           	opt callstack 0
   275  000019                     	ds	2
   276  00001B                     _countPressed:
   277                           	opt callstack 0
   278  00001B                     	ds	2
   279  00001D                     _stModify:
   280                           	opt callstack 0
   281  00001D                     	ds	1
   282  00001E                     _state:
   283                           	opt callstack 0
   284  00001E                     	ds	1
   285                           
   286                           	psect	dataCOMRAM
   287  000034                     __pdataCOMRAM:
   288                           	opt callstack 0
   289  000034                     _secondReadRB0:
   290                           	opt callstack 0
   291  000034                     	ds	1
   292  000035                     _firstReadRB0:
   293                           	opt callstack 0
   294  000035                     	ds	1
   295  000036                     _secondReadRA5:
   296                           	opt callstack 0
   297  000036                     	ds	1
   298  000037                     _firstReadRA5:
   299                           	opt callstack 0
   300  000037                     	ds	1
   301                           
   302                           	psect	cstackCOMRAM
   303  00001F                     __pcstackCOMRAM:
   304                           	opt callstack 0
   305  00001F                     ?_readRA5Button:
   306                           	opt callstack 0
   307  00001F                     ?_readRB0Button:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0x0
   311  00001F                     	ds	2
   312  000021                     readRA5Button@check:
   313                           	opt callstack 0
   314  000021                     readRB0Button@check:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0x2
   318  000021                     	ds	2
   319  000023                     button@checkRA5:
   320                           	opt callstack 0
   321                           
   322                           ; 2 bytes @ 0x4
   323  000023                     	ds	2
   324  000025                     button@checkRB0:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0x6
   328  000025                     	ds	2
   329  000027                     ??_modifyHour:
   330  000027                     ??_modifyMinute:
   331  000027                     ??_modifySecond:
   332  000027                     ??_stopWatch:
   333  000027                     ?___awdiv:
   334                           	opt callstack 0
   335  000027                     ?___awmod:
   336                           	opt callstack 0
   337  000027                     SendByteBBSPI@output:
   338                           	opt callstack 0
   339  000027                     ___awdiv@dividend:
   340                           	opt callstack 0
   341  000027                     ___awmod@dividend:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x8
   345  000027                     	ds	1
   346  000028                     SendByteBBSPI@bitcount:
   347                           	opt callstack 0
   348                           
   349                           ; 1 bytes @ 0x9
   350  000028                     	ds	1
   351  000029                     SendByteBBSPI@input:
   352                           	opt callstack 0
   353  000029                     ___awdiv@divisor:
   354                           	opt callstack 0
   355  000029                     ___awmod@divisor:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0xA
   359  000029                     	ds	1
   360  00002A                     WritePort_BBSPI@a:
   361                           	opt callstack 0
   362                           
   363                           ; 1 bytes @ 0xB
   364  00002A                     	ds	1
   365  00002B                     WritePort_BBSPI@port_add:
   366                           	opt callstack 0
   367  00002B                     ___awdiv@counter:
   368                           	opt callstack 0
   369  00002B                     ___awmod@counter:
   370                           	opt callstack 0
   371                           
   372                           ; 1 bytes @ 0xC
   373  00002B                     	ds	1
   374  00002C                     ??_LCDPutInst:
   375  00002C                     ??_LCDPutChar:
   376  00002C                     ___awdiv@sign:
   377                           	opt callstack 0
   378  00002C                     ___awmod@sign:
   379                           	opt callstack 0
   380                           
   381                           ; 1 bytes @ 0xD
   382  00002C                     	ds	1
   383  00002D                     LCDPutChar@ch:
   384                           	opt callstack 0
   385  00002D                     LCDPutInst@ch:
   386                           	opt callstack 0
   387  00002D                     ___awdiv@quotient:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0xE
   391  00002D                     	ds	1
   392  00002E                     LCDPutStr@ptr:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0xF
   396  00002E                     	ds	2
   397  000030                     ??_displayModify:
   398  000030                     
   399                           ; 1 bytes @ 0x11
   400  000030                     	ds	2
   401  000032                     ??_main:
   402                           
   403                           ; 1 bytes @ 0x13
   404  000032                     	ds	2
   405                           
   406 ;;
   407 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   408 ;;
   409 ;; *************** function _main *****************
   410 ;; Defined at:
   411 ;;		line 14 in file "main.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;		None
   416 ;; Return value:  Size  Location     Type
   417 ;;                  1    wreg      void 
   418 ;; Registers used:
   419 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   420 ;; Tracked objects:
   421 ;;		On entry : 0/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   428 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   429 ;;Total ram usage:        2 bytes
   430 ;; Hardware stack levels required when called:    8
   431 ;; This function calls:
   432 ;;		_buttonInitialize
   433 ;;		_displayClock
   434 ;;		_displayModify
   435 ;;		_displayStpWatch
   436 ;;		_modifyHour
   437 ;;		_modifyMinute
   438 ;;		_modifySecond
   439 ;;		_norClock
   440 ;;		_oscillationInitialize
   441 ;;		_stopWatch
   442 ;;		_timerInitialize
   443 ;; This function is called by:
   444 ;;		Startup code after reset
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text0
   449  001410                     __ptext0:
   450                           	opt callstack 0
   451  001410                     _main:
   452                           	opt callstack 23
   453  001410                     
   454                           ;main.c: 15:     oscillationInitialize();
   455  001410  EC7A  F010         	call	_oscillationInitialize	;wreg free
   456                           
   457                           ;main.c: 16:     timerInitialize();
   458  001414  EC5F  F010         	call	_timerInitialize	;wreg free
   459                           
   460                           ;main.c: 17:     buttonInitialize();
   461  001418  EC7F  F010         	call	_buttonInitialize	;wreg free
   462  00141C                     
   463                           ;main.c: 18:     state = norClk;
   464  00141C  0E00               	movlw	0
   465  00141E  6E1E               	movwf	_state^0,c
   466  001420                     
   467                           ;main.c: 19:     stModify = init;
   468  001420  0E00               	movlw	0
   469  001422  6E1D               	movwf	_stModify^0,c
   470                           
   471                           ;main.c: 20:     switch (state) {
   472  001424  EF7F  F00A         	goto	l2182
   473  001428                     l2140:
   474                           
   475                           ;main.c: 22:             norClock();
   476  001428  ECD2  F00E         	call	_norClock	;wreg free
   477  00142C                     
   478                           ;main.c: 23:             displayClock();
   479  00142C  EC50  F00D         	call	_displayClock	;wreg free
   480  001430                     
   481                           ;main.c: 24:             if (changeModePressed == 1) {
   482  001430  0417               	decf	_changeModePressed^0,w,c
   483  001432  1018               	iorwf	(_changeModePressed+1)^0,w,c
   484  001434  A4D8               	btfss	status,2,c
   485  001436  EF1F  F00A         	goto	u1031
   486  00143A  EF21  F00A         	goto	u1030
   487  00143E                     u1031:
   488  00143E  EFA0  F00A         	goto	l81
   489  001442                     u1030:
   490  001442                     
   491                           ;main.c: 25:                 changeModePressed = 0;
   492  001442  0E00               	movlw	0
   493  001444  6E18               	movwf	(_changeModePressed+1)^0,c
   494  001446  0E00               	movlw	0
   495  001448  6E17               	movwf	_changeModePressed^0,c
   496                           
   497                           ;main.c: 26:                 state = modHr;
   498  00144A  0E01               	movlw	1
   499  00144C  6E1E               	movwf	_state^0,c
   500  00144E  EFA0  F00A         	goto	l81
   501  001452                     l2148:
   502                           
   503                           ;main.c: 30:             modifyHour();
   504  001452  ECD2  F00B         	call	_modifyHour	;wreg free
   505  001456                     
   506                           ;main.c: 31:             displayModify();
   507  001456  EC22  F008         	call	_displayModify	;wreg free
   508  00145A                     
   509                           ;main.c: 32:             if (changeModePressed == 1) {
   510  00145A  0417               	decf	_changeModePressed^0,w,c
   511  00145C  1018               	iorwf	(_changeModePressed+1)^0,w,c
   512  00145E  A4D8               	btfss	status,2,c
   513  001460  EF34  F00A         	goto	u1041
   514  001464  EF36  F00A         	goto	u1040
   515  001468                     u1041:
   516  001468  EFA0  F00A         	goto	l81
   517  00146C                     u1040:
   518  00146C                     
   519                           ;main.c: 33:                 changeModePressed = 0;
   520  00146C  0E00               	movlw	0
   521  00146E  6E18               	movwf	(_changeModePressed+1)^0,c
   522  001470  0E00               	movlw	0
   523  001472  6E17               	movwf	_changeModePressed^0,c
   524                           
   525                           ;main.c: 34:                 state = modMin;
   526  001474  0E02               	movlw	2
   527  001476  6E1E               	movwf	_state^0,c
   528  001478  EFA0  F00A         	goto	l81
   529  00147C                     l2156:
   530                           
   531                           ;main.c: 38:             modifyMinute();
   532  00147C  EC3A  F00B         	call	_modifyMinute	;wreg free
   533  001480                     
   534                           ;main.c: 39:             displayModify();
   535  001480  EC22  F008         	call	_displayModify	;wreg free
   536  001484                     
   537                           ;main.c: 40:             if (changeModePressed == 1) {
   538  001484  0417               	decf	_changeModePressed^0,w,c
   539  001486  1018               	iorwf	(_changeModePressed+1)^0,w,c
   540  001488  A4D8               	btfss	status,2,c
   541  00148A  EF49  F00A         	goto	u1051
   542  00148E  EF4B  F00A         	goto	u1050
   543  001492                     u1051:
   544  001492  EFA0  F00A         	goto	l81
   545  001496                     u1050:
   546  001496                     
   547                           ;main.c: 41:                 changeModePressed = 0;
   548  001496  0E00               	movlw	0
   549  001498  6E18               	movwf	(_changeModePressed+1)^0,c
   550  00149A  0E00               	movlw	0
   551  00149C  6E17               	movwf	_changeModePressed^0,c
   552                           
   553                           ;main.c: 42:                 state = modSec;
   554  00149E  0E03               	movlw	3
   555  0014A0  6E1E               	movwf	_state^0,c
   556  0014A2  EFA0  F00A         	goto	l81
   557  0014A6                     l2164:
   558                           
   559                           ;main.c: 46:             modifySecond();
   560  0014A6  ECA2  F00A         	call	_modifySecond	;wreg free
   561  0014AA                     
   562                           ;main.c: 47:             displayModify();
   563  0014AA  EC22  F008         	call	_displayModify	;wreg free
   564  0014AE                     
   565                           ;main.c: 48:             if (changeModePressed == 1) {
   566  0014AE  0417               	decf	_changeModePressed^0,w,c
   567  0014B0  1018               	iorwf	(_changeModePressed+1)^0,w,c
   568  0014B2  A4D8               	btfss	status,2,c
   569  0014B4  EF5E  F00A         	goto	u1061
   570  0014B8  EF60  F00A         	goto	u1060
   571  0014BC                     u1061:
   572  0014BC  EFA0  F00A         	goto	l81
   573  0014C0                     u1060:
   574  0014C0                     
   575                           ;main.c: 49:                 changeModePressed = 0;
   576  0014C0  0E00               	movlw	0
   577  0014C2  6E18               	movwf	(_changeModePressed+1)^0,c
   578  0014C4  0E00               	movlw	0
   579  0014C6  6E17               	movwf	_changeModePressed^0,c
   580                           
   581                           ;main.c: 50:                 state = stpWatch;
   582  0014C8  0E04               	movlw	4
   583  0014CA  6E1E               	movwf	_state^0,c
   584  0014CC  EFA0  F00A         	goto	l81
   585  0014D0                     l2172:
   586                           
   587                           ;main.c: 54:             norClock();
   588  0014D0  ECD2  F00E         	call	_norClock	;wreg free
   589                           
   590                           ;main.c: 55:             stopWatch();
   591  0014D4  EC6A  F00C         	call	_stopWatch	;wreg free
   592  0014D8                     
   593                           ;main.c: 56:             displayStpWatch();
   594  0014D8  ECE9  F00C         	call	_displayStpWatch	;wreg free
   595  0014DC                     
   596                           ;main.c: 57:             if (changeModePressed == 1) {
   597  0014DC  0417               	decf	_changeModePressed^0,w,c
   598  0014DE  1018               	iorwf	(_changeModePressed+1)^0,w,c
   599  0014E0  A4D8               	btfss	status,2,c
   600  0014E2  EF75  F00A         	goto	u1071
   601  0014E6  EF77  F00A         	goto	u1070
   602  0014EA                     u1071:
   603  0014EA  EFA0  F00A         	goto	l81
   604  0014EE                     u1070:
   605  0014EE                     
   606                           ;main.c: 58:                 changeModePressed = 0;
   607  0014EE  0E00               	movlw	0
   608  0014F0  6E18               	movwf	(_changeModePressed+1)^0,c
   609  0014F2  0E00               	movlw	0
   610  0014F4  6E17               	movwf	_changeModePressed^0,c
   611                           
   612                           ;main.c: 59:                 state = norClk;
   613  0014F6  0E00               	movlw	0
   614  0014F8  6E1E               	movwf	_state^0,c
   615  0014FA  EFA0  F00A         	goto	l81
   616  0014FE                     l2182:
   617  0014FE  501E               	movf	_state^0,w,c
   618  001500  6E32               	movwf	??_main^0,c
   619  001502  6A33               	clrf	(??_main+1)^0,c
   620                           
   621                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   622                           ; Switch size 1, requested type "simple"
   623                           ; Number of cases is 1, Range of values is 0 to 0
   624                           ; switch strategies available:
   625                           ; Name         Instructions Cycles
   626                           ; simple_byte            4     3 (average)
   627                           ;	Chosen strategy is simple_byte
   628  001504  5033               	movf	(??_main+1)^0,w,c
   629  001506  0A00               	xorlw	0	; case 0
   630  001508  B4D8               	btfsc	status,2,c
   631  00150A  EF89  F00A         	goto	l2252
   632  00150E  EFA0  F00A         	goto	l81
   633  001512                     l2252:
   634                           
   635                           ; Switch size 1, requested type "simple"
   636                           ; Number of cases is 5, Range of values is 0 to 4
   637                           ; switch strategies available:
   638                           ; Name         Instructions Cycles
   639                           ; simple_byte           16     9 (average)
   640                           ;	Chosen strategy is simple_byte
   641  001512  5032               	movf	??_main^0,w,c
   642  001514  0A00               	xorlw	0	; case 0
   643  001516  B4D8               	btfsc	status,2,c
   644  001518  EF14  F00A         	goto	l2140
   645  00151C  0A01               	xorlw	1	; case 1
   646  00151E  B4D8               	btfsc	status,2,c
   647  001520  EF29  F00A         	goto	l2148
   648  001524  0A03               	xorlw	3	; case 2
   649  001526  B4D8               	btfsc	status,2,c
   650  001528  EF3E  F00A         	goto	l2156
   651  00152C  0A01               	xorlw	1	; case 3
   652  00152E  B4D8               	btfsc	status,2,c
   653  001530  EF53  F00A         	goto	l2164
   654  001534  0A07               	xorlw	7	; case 4
   655  001536  B4D8               	btfsc	status,2,c
   656  001538  EF68  F00A         	goto	l2172
   657  00153C  EFA0  F00A         	goto	l81
   658  001540                     l81:
   659  001540  EF07  F000         	goto	start
   660  001544                     __end_of_main:
   661                           	opt callstack 0
   662                           
   663 ;; *************** function _timerInitialize *****************
   664 ;; Defined at:
   665 ;;		line 8 in file "system.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;Total ram usage:        0 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    3
   686 ;; This function calls:
   687 ;;		Nothing
   688 ;; This function is called by:
   689 ;;		_main
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text1
   694  0020BE                     __ptext1:
   695                           	opt callstack 0
   696  0020BE                     _timerInitialize:
   697                           	opt callstack 27
   698  0020BE                     
   699                           ;system.c: 9:     INTCONbits.GIE = 1;
   700  0020BE  8EF2               	bsf	242,7,c	;volatile
   701                           
   702                           ;system.c: 11:     INTCONbits.TMR0IE = 1;
   703  0020C0  8AF2               	bsf	242,5,c	;volatile
   704  0020C2                     
   705                           ;system.c: 12:     T0CON = 0b10000001;
   706  0020C2  0E81               	movlw	129
   707  0020C4  6ED5               	movwf	213,c	;volatile
   708                           
   709                           ;system.c: 14:     TMR0H = 0xFD;
   710  0020C6  0EFD               	movlw	253
   711  0020C8  6ED7               	movwf	215,c	;volatile
   712                           
   713                           ;system.c: 15:     TMR0L = 0x8F;
   714  0020CA  0E8F               	movlw	143
   715  0020CC  6ED6               	movwf	214,c	;volatile
   716  0020CE                     
   717                           ;system.c: 16:     timer0ReloadVal = TMR0;
   718  0020CE  CFD6 F038          	movff	4054,_timer0ReloadVal	;volatile
   719  0020D2  CFD7 F039          	movff	4055,_timer0ReloadVal+1	;volatile
   720  0020D6  6A3A               	clrf	(_timer0ReloadVal+2)^0,c	;volatile
   721  0020D8  0012               	return		;funcret
   722  0020DA                     __end_of_timerInitialize:
   723                           	opt callstack 0
   724                           
   725 ;; *************** function _stopWatch *****************
   726 ;; Defined at:
   727 ;;		line 3 in file "stateStpWatch.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;		None
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, status,2, status,0
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   745 ;;Total ram usage:        2 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    3
   748 ;; This function calls:
   749 ;;		Nothing
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text2
   756  0018D4                     __ptext2:
   757                           	opt callstack 0
   758  0018D4                     _stopWatch:
   759                           	opt callstack 27
   760  0018D4                     
   761                           ;stateStpWatch.c: 4:     if (countPressed > 0) {
   762  0018D4  BE1C               	btfsc	(_countPressed+1)^0,7,c
   763  0018D6  EF75  F00C         	goto	u581
   764  0018DA  501C               	movf	(_countPressed+1)^0,w,c
   765  0018DC  E108               	bnz	u580
   766  0018DE  041B               	decf	_countPressed^0,w,c
   767  0018E0  A0D8               	btfss	status,0,c
   768  0018E2  EF75  F00C         	goto	u581
   769  0018E6  EF77  F00C         	goto	u580
   770  0018EA                     u581:
   771  0018EA  EF96  F00C         	goto	l1628
   772  0018EE                     u580:
   773  0018EE                     
   774                           ;stateStpWatch.c: 5:         if (run == 0) {
   775  0018EE  5007               	movf	_run^0,w,c
   776  0018F0  1008               	iorwf	(_run+1)^0,w,c
   777  0018F2  A4D8               	btfss	status,2,c
   778  0018F4  EF7E  F00C         	goto	u591
   779  0018F8  EF80  F00C         	goto	u590
   780  0018FC                     u591:
   781  0018FC  EF8C  F00C         	goto	l1626
   782  001900                     u590:
   783  001900                     
   784                           ;stateStpWatch.c: 6:             miliSecSTW = 0;
   785  001900  0E00               	movlw	0
   786  001902  6E02               	movwf	(_miliSecSTW+1)^0,c
   787  001904  0E00               	movlw	0
   788  001906  6E01               	movwf	_miliSecSTW^0,c
   789                           
   790                           ;stateStpWatch.c: 7:             secSTW = 0;
   791  001908  0E00               	movlw	0
   792  00190A  6E04               	movwf	(_secSTW+1)^0,c
   793  00190C  0E00               	movlw	0
   794  00190E  6E03               	movwf	_secSTW^0,c
   795                           
   796                           ;stateStpWatch.c: 8:             minSTW = 0;
   797  001910  0E00               	movlw	0
   798  001912  6E06               	movwf	(_minSTW+1)^0,c
   799  001914  0E00               	movlw	0
   800  001916  6E05               	movwf	_minSTW^0,c
   801  001918                     l1626:
   802                           
   803                           ;stateStpWatch.c: 10:         run = (run + 1) % 2;
   804  001918  0E01               	movlw	1
   805  00191A  2407               	addwf	_run^0,w,c
   806  00191C  6E27               	movwf	??_stopWatch^0,c
   807  00191E  0E00               	movlw	0
   808  001920  2008               	addwfc	(_run+1)^0,w,c
   809  001922  6E28               	movwf	(??_stopWatch+1)^0,c
   810  001924  0E01               	movlw	1
   811  001926  1427               	andwf	??_stopWatch^0,w,c
   812  001928  6E07               	movwf	_run^0,c
   813  00192A  6A08               	clrf	(_run+1)^0,c
   814  00192C                     l1628:
   815                           
   816                           ;stateStpWatch.c: 12:     if (run == 1) {
   817  00192C  0407               	decf	_run^0,w,c
   818  00192E  1008               	iorwf	(_run+1)^0,w,c
   819  001930  A4D8               	btfss	status,2,c
   820  001932  EF9D  F00C         	goto	u601
   821  001936  EF9F  F00C         	goto	u600
   822  00193A                     u601:
   823  00193A  EFE8  F00C         	goto	l455
   824  00193E                     u600:
   825  00193E                     
   826                           ;stateStpWatch.c: 13:         if (timerFlag == 1) {
   827  00193E  0411               	decf	_timerFlag^0,w,c
   828  001940  1012               	iorwf	(_timerFlag+1)^0,w,c
   829  001942  A4D8               	btfss	status,2,c
   830  001944  EFA6  F00C         	goto	u611
   831  001948  EFA8  F00C         	goto	u610
   832  00194C                     u611:
   833  00194C  EFE8  F00C         	goto	l455
   834  001950                     u610:
   835  001950                     
   836                           ;stateStpWatch.c: 14:             miliSecSTW++;
   837  001950  4A01               	infsnz	_miliSecSTW^0,f,c
   838  001952  2A02               	incf	(_miliSecSTW+1)^0,f,c
   839  001954                     
   840                           ;stateStpWatch.c: 15:             if (miliSecSTW >= 100) {
   841  001954  BE02               	btfsc	(_miliSecSTW+1)^0,7,c
   842  001956  EFB6  F00C         	goto	u621
   843  00195A  5002               	movf	(_miliSecSTW+1)^0,w,c
   844  00195C  E109               	bnz	u620
   845  00195E  0E64               	movlw	100
   846  001960  5C01               	subwf	_miliSecSTW^0,w,c
   847  001962  A0D8               	btfss	status,0,c
   848  001964  EFB6  F00C         	goto	u621
   849  001968  EFB8  F00C         	goto	u620
   850  00196C                     u621:
   851  00196C  EFBE  F00C         	goto	l1640
   852  001970                     u620:
   853  001970                     
   854                           ;stateStpWatch.c: 16:                 miliSecSTW = 0;
   855  001970  0E00               	movlw	0
   856  001972  6E02               	movwf	(_miliSecSTW+1)^0,c
   857  001974  0E00               	movlw	0
   858  001976  6E01               	movwf	_miliSecSTW^0,c
   859  001978                     
   860                           ;stateStpWatch.c: 17:                 secSTW++;
   861  001978  4A03               	infsnz	_secSTW^0,f,c
   862  00197A  2A04               	incf	(_secSTW+1)^0,f,c
   863  00197C                     l1640:
   864                           
   865                           ;stateStpWatch.c: 19:             if (secSTW >= 60) {
   866  00197C  BE04               	btfsc	(_secSTW+1)^0,7,c
   867  00197E  EFCA  F00C         	goto	u631
   868  001982  5004               	movf	(_secSTW+1)^0,w,c
   869  001984  E109               	bnz	u630
   870  001986  0E3C               	movlw	60
   871  001988  5C03               	subwf	_secSTW^0,w,c
   872  00198A  A0D8               	btfss	status,0,c
   873  00198C  EFCA  F00C         	goto	u631
   874  001990  EFCC  F00C         	goto	u630
   875  001994                     u631:
   876  001994  EFD2  F00C         	goto	l1646
   877  001998                     u630:
   878  001998                     
   879                           ;stateStpWatch.c: 20:                 secSTW = 0;
   880  001998  0E00               	movlw	0
   881  00199A  6E04               	movwf	(_secSTW+1)^0,c
   882  00199C  0E00               	movlw	0
   883  00199E  6E03               	movwf	_secSTW^0,c
   884  0019A0                     
   885                           ;stateStpWatch.c: 21:                 minSTW++;
   886  0019A0  4A05               	infsnz	_minSTW^0,f,c
   887  0019A2  2A06               	incf	(_minSTW+1)^0,f,c
   888  0019A4                     l1646:
   889                           
   890                           ;stateStpWatch.c: 23:             if (minSTW >= 60) {
   891  0019A4  BE06               	btfsc	(_minSTW+1)^0,7,c
   892  0019A6  EFDE  F00C         	goto	u641
   893  0019AA  5006               	movf	(_minSTW+1)^0,w,c
   894  0019AC  E109               	bnz	u640
   895  0019AE  0E3C               	movlw	60
   896  0019B0  5C05               	subwf	_minSTW^0,w,c
   897  0019B2  A0D8               	btfss	status,0,c
   898  0019B4  EFDE  F00C         	goto	u641
   899  0019B8  EFE0  F00C         	goto	u640
   900  0019BC                     u641:
   901  0019BC  EFE4  F00C         	goto	l454
   902  0019C0                     u640:
   903  0019C0                     
   904                           ;stateStpWatch.c: 24:                 minSTW = 0;
   905  0019C0  0E00               	movlw	0
   906  0019C2  6E06               	movwf	(_minSTW+1)^0,c
   907  0019C4  0E00               	movlw	0
   908  0019C6  6E05               	movwf	_minSTW^0,c
   909  0019C8                     l454:
   910                           
   911                           ;stateStpWatch.c: 26:             timerFlag = 0;
   912  0019C8  0E00               	movlw	0
   913  0019CA  6E12               	movwf	(_timerFlag+1)^0,c
   914  0019CC  0E00               	movlw	0
   915  0019CE  6E11               	movwf	_timerFlag^0,c
   916  0019D0                     l455:
   917  0019D0  0012               	return		;funcret
   918  0019D2                     __end_of_stopWatch:
   919                           	opt callstack 0
   920                           
   921 ;; *************** function _oscillationInitialize *****************
   922 ;; Defined at:
   923 ;;		line 3 in file "system.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;		None
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, status,2
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;Total ram usage:        0 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    3
   944 ;; This function calls:
   945 ;;		Nothing
   946 ;; This function is called by:
   947 ;;		_main
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text3
   952  0020F4                     __ptext3:
   953                           	opt callstack 0
   954  0020F4                     _oscillationInitialize:
   955                           	opt callstack 27
   956  0020F4                     
   957                           ;system.c: 4:     OSCCON = 0b01000111;
   958  0020F4  0E47               	movlw	71
   959  0020F6  6ED3               	movwf	211,c	;volatile
   960                           
   961                           ;system.c: 5:     OSCTUNE = 0b00001111;
   962  0020F8  0E0F               	movlw	15
   963  0020FA  6E9B               	movwf	155,c	;volatile
   964  0020FC  0012               	return		;funcret
   965  0020FE                     __end_of_oscillationInitialize:
   966                           	opt callstack 0
   967                           
   968 ;; *************** function _norClock *****************
   969 ;; Defined at:
   970 ;;		line 3 in file "stateClock.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;		None
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;Total ram usage:        0 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    3
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text4
   999  001DA4                     __ptext4:
  1000                           	opt callstack 0
  1001  001DA4                     _norClock:
  1002                           	opt callstack 27
  1003  001DA4                     
  1004                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1005  001DA4  BE14               	btfsc	(_count10ms+1)^0,7,c
  1006  001DA6  EFDE  F00E         	goto	u211
  1007  001DAA  5014               	movf	(_count10ms+1)^0,w,c
  1008  001DAC  E109               	bnz	u210
  1009  001DAE  0E64               	movlw	100
  1010  001DB0  5C13               	subwf	_count10ms^0,w,c
  1011  001DB2  A0D8               	btfss	status,0,c
  1012  001DB4  EFDE  F00E         	goto	u211
  1013  001DB8  EFE0  F00E         	goto	u210
  1014  001DBC                     u211:
  1015  001DBC  EF20  F00F         	goto	l291
  1016  001DC0                     u210:
  1017  001DC0                     
  1018                           ;stateClock.c: 5:         count10ms = 0;
  1019  001DC0  0E00               	movlw	0
  1020  001DC2  6E14               	movwf	(_count10ms+1)^0,c
  1021  001DC4  0E00               	movlw	0
  1022  001DC6  6E13               	movwf	_count10ms^0,c
  1023  001DC8                     
  1024                           ;stateClock.c: 6:         sec++;
  1025  001DC8  4A0F               	infsnz	_sec^0,f,c
  1026  001DCA  2A10               	incf	(_sec+1)^0,f,c
  1027  001DCC                     
  1028                           ;stateClock.c: 7:         if (sec >= 60) {
  1029  001DCC  BE10               	btfsc	(_sec+1)^0,7,c
  1030  001DCE  EFF2  F00E         	goto	u221
  1031  001DD2  5010               	movf	(_sec+1)^0,w,c
  1032  001DD4  E109               	bnz	u220
  1033  001DD6  0E3C               	movlw	60
  1034  001DD8  5C0F               	subwf	_sec^0,w,c
  1035  001DDA  A0D8               	btfss	status,0,c
  1036  001DDC  EFF2  F00E         	goto	u221
  1037  001DE0  EFF4  F00E         	goto	u220
  1038  001DE4                     u221:
  1039  001DE4  EFFA  F00E         	goto	l1362
  1040  001DE8                     u220:
  1041  001DE8                     
  1042                           ;stateClock.c: 8:             sec = 0;
  1043  001DE8  0E00               	movlw	0
  1044  001DEA  6E10               	movwf	(_sec+1)^0,c
  1045  001DEC  0E00               	movlw	0
  1046  001DEE  6E0F               	movwf	_sec^0,c
  1047  001DF0                     
  1048                           ;stateClock.c: 9:             min++;
  1049  001DF0  4A0D               	infsnz	_min^0,f,c
  1050  001DF2  2A0E               	incf	(_min+1)^0,f,c
  1051  001DF4                     l1362:
  1052                           
  1053                           ;stateClock.c: 11:         if (min >= 60) {
  1054  001DF4  BE0E               	btfsc	(_min+1)^0,7,c
  1055  001DF6  EF06  F00F         	goto	u231
  1056  001DFA  500E               	movf	(_min+1)^0,w,c
  1057  001DFC  E109               	bnz	u230
  1058  001DFE  0E3C               	movlw	60
  1059  001E00  5C0D               	subwf	_min^0,w,c
  1060  001E02  A0D8               	btfss	status,0,c
  1061  001E04  EF06  F00F         	goto	u231
  1062  001E08  EF08  F00F         	goto	u230
  1063  001E0C                     u231:
  1064  001E0C  EF0E  F00F         	goto	l1368
  1065  001E10                     u230:
  1066  001E10                     
  1067                           ;stateClock.c: 12:             min = 0;
  1068  001E10  0E00               	movlw	0
  1069  001E12  6E0E               	movwf	(_min+1)^0,c
  1070  001E14  0E00               	movlw	0
  1071  001E16  6E0D               	movwf	_min^0,c
  1072  001E18                     
  1073                           ;stateClock.c: 13:             hr++;
  1074  001E18  4A0B               	infsnz	_hr^0,f,c
  1075  001E1A  2A0C               	incf	(_hr+1)^0,f,c
  1076  001E1C                     l1368:
  1077                           
  1078                           ;stateClock.c: 15:         if (hr >= 24) {
  1079  001E1C  BE0C               	btfsc	(_hr+1)^0,7,c
  1080  001E1E  EF1A  F00F         	goto	u241
  1081  001E22  500C               	movf	(_hr+1)^0,w,c
  1082  001E24  E109               	bnz	u240
  1083  001E26  0E18               	movlw	24
  1084  001E28  5C0B               	subwf	_hr^0,w,c
  1085  001E2A  A0D8               	btfss	status,0,c
  1086  001E2C  EF1A  F00F         	goto	u241
  1087  001E30  EF1C  F00F         	goto	u240
  1088  001E34                     u241:
  1089  001E34  EF20  F00F         	goto	l291
  1090  001E38                     u240:
  1091  001E38                     
  1092                           ;stateClock.c: 16:             hr = 0;
  1093  001E38  0E00               	movlw	0
  1094  001E3A  6E0C               	movwf	(_hr+1)^0,c
  1095  001E3C  0E00               	movlw	0
  1096  001E3E  6E0B               	movwf	_hr^0,c
  1097  001E40                     l291:
  1098  001E40  0012               	return		;funcret
  1099  001E42                     __end_of_norClock:
  1100                           	opt callstack 0
  1101                           
  1102 ;; *************** function _modifySecond *****************
  1103 ;; Defined at:
  1104 ;;		line 68 in file "statesModify.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;Total ram usage:        2 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    3
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_main
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text5
  1133  001544                     __ptext5:
  1134                           	opt callstack 0
  1135  001544                     _modifySecond:
  1136                           	opt callstack 27
  1137  001544                     
  1138                           ;statesModify.c: 69:     switch (stModify) {
  1139  001544  EF0E  F00B         	goto	l1610
  1140  001548                     l1578:
  1141                           
  1142                           ;statesModify.c: 71:             if (changeModePressed == 1 && countPressed > 0) {
  1143  001548  0417               	decf	_changeModePressed^0,w,c
  1144  00154A  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1145  00154C  A4D8               	btfss	status,2,c
  1146  00154E  EFAB  F00A         	goto	u491
  1147  001552  EFAD  F00A         	goto	u490
  1148  001556                     u491:
  1149  001556  EF27  F00B         	goto	l1612
  1150  00155A                     u490:
  1151  00155A  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1152  00155C  EFB8  F00A         	goto	u501
  1153  001560  501C               	movf	(_countPressed+1)^0,w,c
  1154  001562  E108               	bnz	u500
  1155  001564  041B               	decf	_countPressed^0,w,c
  1156  001566  A0D8               	btfss	status,0,c
  1157  001568  EFB8  F00A         	goto	u501
  1158  00156C  EFBA  F00A         	goto	u500
  1159  001570                     u501:
  1160  001570  EF27  F00B         	goto	l1612
  1161  001574                     u500:
  1162  001574                     
  1163                           ;statesModify.c: 72:                 sec++;
  1164  001574  4A0F               	infsnz	_sec^0,f,c
  1165  001576  2A10               	incf	(_sec+1)^0,f,c
  1166  001578                     
  1167                           ;statesModify.c: 73:                 stModify = iNor;
  1168  001578  0E01               	movlw	1
  1169  00157A  6E1D               	movwf	_stModify^0,c
  1170  00157C  EF27  F00B         	goto	l1612
  1171  001580                     l1586:
  1172                           
  1173                           ;statesModify.c: 77:             if (countPressed == 0 || changeModePressed == 1) {
  1174  001580  501B               	movf	_countPressed^0,w,c
  1175  001582  101C               	iorwf	(_countPressed+1)^0,w,c
  1176  001584  B4D8               	btfsc	status,2,c
  1177  001586  EFC7  F00A         	goto	u511
  1178  00158A  EFC9  F00A         	goto	u510
  1179  00158E                     u511:
  1180  00158E  EFD2  F00A         	goto	l1590
  1181  001592                     u510:
  1182  001592  0417               	decf	_changeModePressed^0,w,c
  1183  001594  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1184  001596  A4D8               	btfss	status,2,c
  1185  001598  EFD0  F00A         	goto	u521
  1186  00159C  EFD2  F00A         	goto	u520
  1187  0015A0                     u521:
  1188  0015A0  EFD4  F00A         	goto	l1592
  1189  0015A4                     u520:
  1190  0015A4                     l1590:
  1191                           
  1192                           ;statesModify.c: 78:                 stModify = init;
  1193  0015A4  0E00               	movlw	0
  1194  0015A6  6E1D               	movwf	_stModify^0,c
  1195  0015A8                     l1592:
  1196                           
  1197                           ;statesModify.c: 80:             if (countAuto > 0) {
  1198  0015A8  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1199  0015AA  EFDF  F00A         	goto	u531
  1200  0015AE  501A               	movf	(_countAuto+1)^0,w,c
  1201  0015B0  E108               	bnz	u530
  1202  0015B2  0419               	decf	_countAuto^0,w,c
  1203  0015B4  A0D8               	btfss	status,0,c
  1204  0015B6  EFDF  F00A         	goto	u531
  1205  0015BA  EFE1  F00A         	goto	u530
  1206  0015BE                     u531:
  1207  0015BE  EF27  F00B         	goto	l1612
  1208  0015C2                     u530:
  1209  0015C2                     
  1210                           ;statesModify.c: 81:                 increaseTime = 1;
  1211  0015C2  0E00               	movlw	0
  1212  0015C4  6E16               	movwf	(_increaseTime+1)^0,c
  1213  0015C6  0E01               	movlw	1
  1214  0015C8  6E15               	movwf	_increaseTime^0,c
  1215                           
  1216                           ;statesModify.c: 82:                 stModify = iAuto;
  1217  0015CA  0E02               	movlw	2
  1218  0015CC  6E1D               	movwf	_stModify^0,c
  1219  0015CE  EF27  F00B         	goto	l1612
  1220  0015D2                     l1596:
  1221                           
  1222                           ;statesModify.c: 86:             if (countPressed == 0 || changeModePressed == 1) {
  1223  0015D2  501B               	movf	_countPressed^0,w,c
  1224  0015D4  101C               	iorwf	(_countPressed+1)^0,w,c
  1225  0015D6  B4D8               	btfsc	status,2,c
  1226  0015D8  EFF0  F00A         	goto	u541
  1227  0015DC  EFF2  F00A         	goto	u540
  1228  0015E0                     u541:
  1229  0015E0  EFFB  F00A         	goto	l1600
  1230  0015E4                     u540:
  1231  0015E4  0417               	decf	_changeModePressed^0,w,c
  1232  0015E6  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1233  0015E8  A4D8               	btfss	status,2,c
  1234  0015EA  EFF9  F00A         	goto	u551
  1235  0015EE  EFFB  F00A         	goto	u550
  1236  0015F2                     u551:
  1237  0015F2  EFFD  F00A         	goto	l1602
  1238  0015F6                     u550:
  1239  0015F6                     l1600:
  1240                           
  1241                           ;statesModify.c: 87:                 stModify = init;
  1242  0015F6  0E00               	movlw	0
  1243  0015F8  6E1D               	movwf	_stModify^0,c
  1244  0015FA                     l1602:
  1245                           
  1246                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1247  0015FA  0415               	decf	_increaseTime^0,w,c
  1248  0015FC  1016               	iorwf	(_increaseTime+1)^0,w,c
  1249  0015FE  A4D8               	btfss	status,2,c
  1250  001600  EF04  F00B         	goto	u561
  1251  001604  EF06  F00B         	goto	u560
  1252  001608                     u561:
  1253  001608  EF27  F00B         	goto	l1612
  1254  00160C                     u560:
  1255  00160C                     
  1256                           ;statesModify.c: 90:                 increaseTime = 0;
  1257  00160C  0E00               	movlw	0
  1258  00160E  6E16               	movwf	(_increaseTime+1)^0,c
  1259  001610  0E00               	movlw	0
  1260  001612  6E15               	movwf	_increaseTime^0,c
  1261  001614                     
  1262                           ;statesModify.c: 91:                 sec++;
  1263  001614  4A0F               	infsnz	_sec^0,f,c
  1264  001616  2A10               	incf	(_sec+1)^0,f,c
  1265  001618  EF27  F00B         	goto	l1612
  1266  00161C                     l1610:
  1267  00161C  501D               	movf	_stModify^0,w,c
  1268  00161E  6E27               	movwf	??_modifySecond^0,c
  1269  001620  6A28               	clrf	(??_modifySecond+1)^0,c
  1270                           
  1271                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1272                           ; Switch size 1, requested type "simple"
  1273                           ; Number of cases is 1, Range of values is 0 to 0
  1274                           ; switch strategies available:
  1275                           ; Name         Instructions Cycles
  1276                           ; simple_byte            4     3 (average)
  1277                           ;	Chosen strategy is simple_byte
  1278  001622  5028               	movf	(??_modifySecond+1)^0,w,c
  1279  001624  0A00               	xorlw	0	; case 0
  1280  001626  B4D8               	btfsc	status,2,c
  1281  001628  EF18  F00B         	goto	l2254
  1282  00162C  EF27  F00B         	goto	l1612
  1283  001630                     l2254:
  1284                           
  1285                           ; Switch size 1, requested type "simple"
  1286                           ; Number of cases is 3, Range of values is 0 to 2
  1287                           ; switch strategies available:
  1288                           ; Name         Instructions Cycles
  1289                           ; simple_byte           10     6 (average)
  1290                           ;	Chosen strategy is simple_byte
  1291  001630  5027               	movf	??_modifySecond^0,w,c
  1292  001632  0A00               	xorlw	0	; case 0
  1293  001634  B4D8               	btfsc	status,2,c
  1294  001636  EFA4  F00A         	goto	l1578
  1295  00163A  0A01               	xorlw	1	; case 1
  1296  00163C  B4D8               	btfsc	status,2,c
  1297  00163E  EFC0  F00A         	goto	l1586
  1298  001642  0A03               	xorlw	3	; case 2
  1299  001644  B4D8               	btfsc	status,2,c
  1300  001646  EFE9  F00A         	goto	l1596
  1301  00164A  EF27  F00B         	goto	l1612
  1302  00164E                     l1612:
  1303                           
  1304                           ;statesModify.c: 95:     if (sec >= 60) {
  1305  00164E  BE10               	btfsc	(_sec+1)^0,7,c
  1306  001650  EF33  F00B         	goto	u571
  1307  001654  5010               	movf	(_sec+1)^0,w,c
  1308  001656  E109               	bnz	u570
  1309  001658  0E3C               	movlw	60
  1310  00165A  5C0F               	subwf	_sec^0,w,c
  1311  00165C  A0D8               	btfss	status,0,c
  1312  00165E  EF33  F00B         	goto	u571
  1313  001662  EF35  F00B         	goto	u570
  1314  001666                     u571:
  1315  001666  EF39  F00B         	goto	l388
  1316  00166A                     u570:
  1317  00166A                     
  1318                           ;statesModify.c: 96:         sec = 0;
  1319  00166A  0E00               	movlw	0
  1320  00166C  6E10               	movwf	(_sec+1)^0,c
  1321  00166E  0E00               	movlw	0
  1322  001670  6E0F               	movwf	_sec^0,c
  1323  001672                     l388:
  1324  001672  0012               	return		;funcret
  1325  001674                     __end_of_modifySecond:
  1326                           	opt callstack 0
  1327                           
  1328 ;; *************** function _modifyMinute *****************
  1329 ;; Defined at:
  1330 ;;		line 36 in file "statesModify.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg, status,2, status,0
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;Total ram usage:        2 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    3
  1351 ;; This function calls:
  1352 ;;		Nothing
  1353 ;; This function is called by:
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text6
  1359  001674                     __ptext6:
  1360                           	opt callstack 0
  1361  001674                     _modifyMinute:
  1362                           	opt callstack 27
  1363  001674                     
  1364                           ;statesModify.c: 37:     switch (stModify) {
  1365  001674  EFA6  F00B         	goto	l1566
  1366  001678                     l1534:
  1367                           
  1368                           ;statesModify.c: 39:             if (changeModePressed == 1 && countPressed > 0) {
  1369  001678  0417               	decf	_changeModePressed^0,w,c
  1370  00167A  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1371  00167C  A4D8               	btfss	status,2,c
  1372  00167E  EF43  F00B         	goto	u401
  1373  001682  EF45  F00B         	goto	u400
  1374  001686                     u401:
  1375  001686  EFBF  F00B         	goto	l1568
  1376  00168A                     u400:
  1377  00168A  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1378  00168C  EF50  F00B         	goto	u411
  1379  001690  501C               	movf	(_countPressed+1)^0,w,c
  1380  001692  E108               	bnz	u410
  1381  001694  041B               	decf	_countPressed^0,w,c
  1382  001696  A0D8               	btfss	status,0,c
  1383  001698  EF50  F00B         	goto	u411
  1384  00169C  EF52  F00B         	goto	u410
  1385  0016A0                     u411:
  1386  0016A0  EFBF  F00B         	goto	l1568
  1387  0016A4                     u410:
  1388  0016A4                     
  1389                           ;statesModify.c: 40:                 min++;
  1390  0016A4  4A0D               	infsnz	_min^0,f,c
  1391  0016A6  2A0E               	incf	(_min+1)^0,f,c
  1392  0016A8                     
  1393                           ;statesModify.c: 41:                 stModify = iNor;
  1394  0016A8  0E01               	movlw	1
  1395  0016AA  6E1D               	movwf	_stModify^0,c
  1396  0016AC  EFBF  F00B         	goto	l1568
  1397  0016B0                     l1542:
  1398                           
  1399                           ;statesModify.c: 45:             if (countPressed == 0 || changeModePressed == 1) {
  1400  0016B0  501B               	movf	_countPressed^0,w,c
  1401  0016B2  101C               	iorwf	(_countPressed+1)^0,w,c
  1402  0016B4  B4D8               	btfsc	status,2,c
  1403  0016B6  EF5F  F00B         	goto	u421
  1404  0016BA  EF61  F00B         	goto	u420
  1405  0016BE                     u421:
  1406  0016BE  EF6A  F00B         	goto	l1546
  1407  0016C2                     u420:
  1408  0016C2  0417               	decf	_changeModePressed^0,w,c
  1409  0016C4  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1410  0016C6  A4D8               	btfss	status,2,c
  1411  0016C8  EF68  F00B         	goto	u431
  1412  0016CC  EF6A  F00B         	goto	u430
  1413  0016D0                     u431:
  1414  0016D0  EF6C  F00B         	goto	l1548
  1415  0016D4                     u430:
  1416  0016D4                     l1546:
  1417                           
  1418                           ;statesModify.c: 46:                 stModify = init;
  1419  0016D4  0E00               	movlw	0
  1420  0016D6  6E1D               	movwf	_stModify^0,c
  1421  0016D8                     l1548:
  1422                           
  1423                           ;statesModify.c: 48:             if (countAuto > 0) {
  1424  0016D8  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1425  0016DA  EF77  F00B         	goto	u441
  1426  0016DE  501A               	movf	(_countAuto+1)^0,w,c
  1427  0016E0  E108               	bnz	u440
  1428  0016E2  0419               	decf	_countAuto^0,w,c
  1429  0016E4  A0D8               	btfss	status,0,c
  1430  0016E6  EF77  F00B         	goto	u441
  1431  0016EA  EF79  F00B         	goto	u440
  1432  0016EE                     u441:
  1433  0016EE  EFBF  F00B         	goto	l1568
  1434  0016F2                     u440:
  1435  0016F2                     
  1436                           ;statesModify.c: 49:                 increaseTime = 1;
  1437  0016F2  0E00               	movlw	0
  1438  0016F4  6E16               	movwf	(_increaseTime+1)^0,c
  1439  0016F6  0E01               	movlw	1
  1440  0016F8  6E15               	movwf	_increaseTime^0,c
  1441                           
  1442                           ;statesModify.c: 50:                 stModify = iAuto;
  1443  0016FA  0E02               	movlw	2
  1444  0016FC  6E1D               	movwf	_stModify^0,c
  1445  0016FE  EFBF  F00B         	goto	l1568
  1446  001702                     l1552:
  1447                           
  1448                           ;statesModify.c: 54:             if (countPressed == 0 || changeModePressed == 1) {
  1449  001702  501B               	movf	_countPressed^0,w,c
  1450  001704  101C               	iorwf	(_countPressed+1)^0,w,c
  1451  001706  B4D8               	btfsc	status,2,c
  1452  001708  EF88  F00B         	goto	u451
  1453  00170C  EF8A  F00B         	goto	u450
  1454  001710                     u451:
  1455  001710  EF93  F00B         	goto	l1556
  1456  001714                     u450:
  1457  001714  0417               	decf	_changeModePressed^0,w,c
  1458  001716  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1459  001718  A4D8               	btfss	status,2,c
  1460  00171A  EF91  F00B         	goto	u461
  1461  00171E  EF93  F00B         	goto	u460
  1462  001722                     u461:
  1463  001722  EF95  F00B         	goto	l1558
  1464  001726                     u460:
  1465  001726                     l1556:
  1466                           
  1467                           ;statesModify.c: 55:                 stModify = init;
  1468  001726  0E00               	movlw	0
  1469  001728  6E1D               	movwf	_stModify^0,c
  1470  00172A                     l1558:
  1471                           
  1472                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1473  00172A  0415               	decf	_increaseTime^0,w,c
  1474  00172C  1016               	iorwf	(_increaseTime+1)^0,w,c
  1475  00172E  A4D8               	btfss	status,2,c
  1476  001730  EF9C  F00B         	goto	u471
  1477  001734  EF9E  F00B         	goto	u470
  1478  001738                     u471:
  1479  001738  EFBF  F00B         	goto	l1568
  1480  00173C                     u470:
  1481  00173C                     
  1482                           ;statesModify.c: 58:                 increaseTime = 0;
  1483  00173C  0E00               	movlw	0
  1484  00173E  6E16               	movwf	(_increaseTime+1)^0,c
  1485  001740  0E00               	movlw	0
  1486  001742  6E15               	movwf	_increaseTime^0,c
  1487  001744                     
  1488                           ;statesModify.c: 59:                 min++;
  1489  001744  4A0D               	infsnz	_min^0,f,c
  1490  001746  2A0E               	incf	(_min+1)^0,f,c
  1491  001748  EFBF  F00B         	goto	l1568
  1492  00174C                     l1566:
  1493  00174C  501D               	movf	_stModify^0,w,c
  1494  00174E  6E27               	movwf	??_modifyMinute^0,c
  1495  001750  6A28               	clrf	(??_modifyMinute+1)^0,c
  1496                           
  1497                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1498                           ; Switch size 1, requested type "simple"
  1499                           ; Number of cases is 1, Range of values is 0 to 0
  1500                           ; switch strategies available:
  1501                           ; Name         Instructions Cycles
  1502                           ; simple_byte            4     3 (average)
  1503                           ;	Chosen strategy is simple_byte
  1504  001752  5028               	movf	(??_modifyMinute+1)^0,w,c
  1505  001754  0A00               	xorlw	0	; case 0
  1506  001756  B4D8               	btfsc	status,2,c
  1507  001758  EFB0  F00B         	goto	l2256
  1508  00175C  EFBF  F00B         	goto	l1568
  1509  001760                     l2256:
  1510                           
  1511                           ; Switch size 1, requested type "simple"
  1512                           ; Number of cases is 3, Range of values is 0 to 2
  1513                           ; switch strategies available:
  1514                           ; Name         Instructions Cycles
  1515                           ; simple_byte           10     6 (average)
  1516                           ;	Chosen strategy is simple_byte
  1517  001760  5027               	movf	??_modifyMinute^0,w,c
  1518  001762  0A00               	xorlw	0	; case 0
  1519  001764  B4D8               	btfsc	status,2,c
  1520  001766  EF3C  F00B         	goto	l1534
  1521  00176A  0A01               	xorlw	1	; case 1
  1522  00176C  B4D8               	btfsc	status,2,c
  1523  00176E  EF58  F00B         	goto	l1542
  1524  001772  0A03               	xorlw	3	; case 2
  1525  001774  B4D8               	btfsc	status,2,c
  1526  001776  EF81  F00B         	goto	l1552
  1527  00177A  EFBF  F00B         	goto	l1568
  1528  00177E                     l1568:
  1529                           
  1530                           ;statesModify.c: 63:     if (min >= 60) {
  1531  00177E  BE0E               	btfsc	(_min+1)^0,7,c
  1532  001780  EFCB  F00B         	goto	u481
  1533  001784  500E               	movf	(_min+1)^0,w,c
  1534  001786  E109               	bnz	u480
  1535  001788  0E3C               	movlw	60
  1536  00178A  5C0D               	subwf	_min^0,w,c
  1537  00178C  A0D8               	btfss	status,0,c
  1538  00178E  EFCB  F00B         	goto	u481
  1539  001792  EFCD  F00B         	goto	u480
  1540  001796                     u481:
  1541  001796  EFD1  F00B         	goto	l370
  1542  00179A                     u480:
  1543  00179A                     
  1544                           ;statesModify.c: 64:         min = 0;
  1545  00179A  0E00               	movlw	0
  1546  00179C  6E0E               	movwf	(_min+1)^0,c
  1547  00179E  0E00               	movlw	0
  1548  0017A0  6E0D               	movwf	_min^0,c
  1549  0017A2                     l370:
  1550  0017A2  0012               	return		;funcret
  1551  0017A4                     __end_of_modifyMinute:
  1552                           	opt callstack 0
  1553                           
  1554 ;; *************** function _modifyHour *****************
  1555 ;; Defined at:
  1556 ;;		line 4 in file "statesModify.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;Total ram usage:        2 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    3
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text7
  1585  0017A4                     __ptext7:
  1586                           	opt callstack 0
  1587  0017A4                     _modifyHour:
  1588                           	opt callstack 27
  1589  0017A4                     
  1590                           ;statesModify.c: 5:     switch (stModify) {
  1591  0017A4  EF3E  F00C         	goto	l1428
  1592  0017A8                     l1396:
  1593                           
  1594                           ;statesModify.c: 7:             if (changeModePressed == 1 && countPressed > 0) {
  1595  0017A8  0417               	decf	_changeModePressed^0,w,c
  1596  0017AA  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1597  0017AC  A4D8               	btfss	status,2,c
  1598  0017AE  EFDB  F00B         	goto	u251
  1599  0017B2  EFDD  F00B         	goto	u250
  1600  0017B6                     u251:
  1601  0017B6  EF57  F00C         	goto	l1430
  1602  0017BA                     u250:
  1603  0017BA  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1604  0017BC  EFE8  F00B         	goto	u261
  1605  0017C0  501C               	movf	(_countPressed+1)^0,w,c
  1606  0017C2  E108               	bnz	u260
  1607  0017C4  041B               	decf	_countPressed^0,w,c
  1608  0017C6  A0D8               	btfss	status,0,c
  1609  0017C8  EFE8  F00B         	goto	u261
  1610  0017CC  EFEA  F00B         	goto	u260
  1611  0017D0                     u261:
  1612  0017D0  EF57  F00C         	goto	l1430
  1613  0017D4                     u260:
  1614  0017D4                     
  1615                           ;statesModify.c: 8:                 hr++;
  1616  0017D4  4A0B               	infsnz	_hr^0,f,c
  1617  0017D6  2A0C               	incf	(_hr+1)^0,f,c
  1618  0017D8                     
  1619                           ;statesModify.c: 9:                 stModify = iNor;
  1620  0017D8  0E01               	movlw	1
  1621  0017DA  6E1D               	movwf	_stModify^0,c
  1622  0017DC  EF57  F00C         	goto	l1430
  1623  0017E0                     l1404:
  1624                           
  1625                           ;statesModify.c: 13:             if (countPressed == 0 || changeModePressed == 1) {
  1626  0017E0  501B               	movf	_countPressed^0,w,c
  1627  0017E2  101C               	iorwf	(_countPressed+1)^0,w,c
  1628  0017E4  B4D8               	btfsc	status,2,c
  1629  0017E6  EFF7  F00B         	goto	u271
  1630  0017EA  EFF9  F00B         	goto	u270
  1631  0017EE                     u271:
  1632  0017EE  EF02  F00C         	goto	l1408
  1633  0017F2                     u270:
  1634  0017F2  0417               	decf	_changeModePressed^0,w,c
  1635  0017F4  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1636  0017F6  A4D8               	btfss	status,2,c
  1637  0017F8  EF00  F00C         	goto	u281
  1638  0017FC  EF02  F00C         	goto	u280
  1639  001800                     u281:
  1640  001800  EF04  F00C         	goto	l1410
  1641  001804                     u280:
  1642  001804                     l1408:
  1643                           
  1644                           ;statesModify.c: 14:                 stModify = init;
  1645  001804  0E00               	movlw	0
  1646  001806  6E1D               	movwf	_stModify^0,c
  1647  001808                     l1410:
  1648                           
  1649                           ;statesModify.c: 16:             if (countAuto > 0) {
  1650  001808  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1651  00180A  EF0F  F00C         	goto	u291
  1652  00180E  501A               	movf	(_countAuto+1)^0,w,c
  1653  001810  E108               	bnz	u290
  1654  001812  0419               	decf	_countAuto^0,w,c
  1655  001814  A0D8               	btfss	status,0,c
  1656  001816  EF0F  F00C         	goto	u291
  1657  00181A  EF11  F00C         	goto	u290
  1658  00181E                     u291:
  1659  00181E  EF57  F00C         	goto	l1430
  1660  001822                     u290:
  1661  001822                     
  1662                           ;statesModify.c: 17:                 increaseTime = 1;
  1663  001822  0E00               	movlw	0
  1664  001824  6E16               	movwf	(_increaseTime+1)^0,c
  1665  001826  0E01               	movlw	1
  1666  001828  6E15               	movwf	_increaseTime^0,c
  1667                           
  1668                           ;statesModify.c: 18:                 stModify = iAuto;
  1669  00182A  0E02               	movlw	2
  1670  00182C  6E1D               	movwf	_stModify^0,c
  1671  00182E  EF57  F00C         	goto	l1430
  1672  001832                     l1414:
  1673                           
  1674                           ;statesModify.c: 22:             if (countPressed == 0 || changeModePressed == 1) {
  1675  001832  501B               	movf	_countPressed^0,w,c
  1676  001834  101C               	iorwf	(_countPressed+1)^0,w,c
  1677  001836  B4D8               	btfsc	status,2,c
  1678  001838  EF20  F00C         	goto	u301
  1679  00183C  EF22  F00C         	goto	u300
  1680  001840                     u301:
  1681  001840  EF2B  F00C         	goto	l1418
  1682  001844                     u300:
  1683  001844  0417               	decf	_changeModePressed^0,w,c
  1684  001846  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1685  001848  A4D8               	btfss	status,2,c
  1686  00184A  EF29  F00C         	goto	u311
  1687  00184E  EF2B  F00C         	goto	u310
  1688  001852                     u311:
  1689  001852  EF2D  F00C         	goto	l1420
  1690  001856                     u310:
  1691  001856                     l1418:
  1692                           
  1693                           ;statesModify.c: 23:                 stModify = init;
  1694  001856  0E00               	movlw	0
  1695  001858  6E1D               	movwf	_stModify^0,c
  1696  00185A                     l1420:
  1697                           
  1698                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1699  00185A  0415               	decf	_increaseTime^0,w,c
  1700  00185C  1016               	iorwf	(_increaseTime+1)^0,w,c
  1701  00185E  A4D8               	btfss	status,2,c
  1702  001860  EF34  F00C         	goto	u321
  1703  001864  EF36  F00C         	goto	u320
  1704  001868                     u321:
  1705  001868  EF57  F00C         	goto	l1430
  1706  00186C                     u320:
  1707  00186C                     
  1708                           ;statesModify.c: 26:                 increaseTime = 0;
  1709  00186C  0E00               	movlw	0
  1710  00186E  6E16               	movwf	(_increaseTime+1)^0,c
  1711  001870  0E00               	movlw	0
  1712  001872  6E15               	movwf	_increaseTime^0,c
  1713  001874                     
  1714                           ;statesModify.c: 27:                 hr++;
  1715  001874  4A0B               	infsnz	_hr^0,f,c
  1716  001876  2A0C               	incf	(_hr+1)^0,f,c
  1717  001878  EF57  F00C         	goto	l1430
  1718  00187C                     l1428:
  1719  00187C  501D               	movf	_stModify^0,w,c
  1720  00187E  6E27               	movwf	??_modifyHour^0,c
  1721  001880  6A28               	clrf	(??_modifyHour+1)^0,c
  1722                           
  1723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1724                           ; Switch size 1, requested type "simple"
  1725                           ; Number of cases is 1, Range of values is 0 to 0
  1726                           ; switch strategies available:
  1727                           ; Name         Instructions Cycles
  1728                           ; simple_byte            4     3 (average)
  1729                           ;	Chosen strategy is simple_byte
  1730  001882  5028               	movf	(??_modifyHour+1)^0,w,c
  1731  001884  0A00               	xorlw	0	; case 0
  1732  001886  B4D8               	btfsc	status,2,c
  1733  001888  EF48  F00C         	goto	l2258
  1734  00188C  EF57  F00C         	goto	l1430
  1735  001890                     l2258:
  1736                           
  1737                           ; Switch size 1, requested type "simple"
  1738                           ; Number of cases is 3, Range of values is 0 to 2
  1739                           ; switch strategies available:
  1740                           ; Name         Instructions Cycles
  1741                           ; simple_byte           10     6 (average)
  1742                           ;	Chosen strategy is simple_byte
  1743  001890  5027               	movf	??_modifyHour^0,w,c
  1744  001892  0A00               	xorlw	0	; case 0
  1745  001894  B4D8               	btfsc	status,2,c
  1746  001896  EFD4  F00B         	goto	l1396
  1747  00189A  0A01               	xorlw	1	; case 1
  1748  00189C  B4D8               	btfsc	status,2,c
  1749  00189E  EFF0  F00B         	goto	l1404
  1750  0018A2  0A03               	xorlw	3	; case 2
  1751  0018A4  B4D8               	btfsc	status,2,c
  1752  0018A6  EF19  F00C         	goto	l1414
  1753  0018AA  EF57  F00C         	goto	l1430
  1754  0018AE                     l1430:
  1755                           
  1756                           ;statesModify.c: 31:     if (hr >= 24) {
  1757  0018AE  BE0C               	btfsc	(_hr+1)^0,7,c
  1758  0018B0  EF63  F00C         	goto	u331
  1759  0018B4  500C               	movf	(_hr+1)^0,w,c
  1760  0018B6  E109               	bnz	u330
  1761  0018B8  0E18               	movlw	24
  1762  0018BA  5C0B               	subwf	_hr^0,w,c
  1763  0018BC  A0D8               	btfss	status,0,c
  1764  0018BE  EF63  F00C         	goto	u331
  1765  0018C2  EF65  F00C         	goto	u330
  1766  0018C6                     u331:
  1767  0018C6  EF69  F00C         	goto	l352
  1768  0018CA                     u330:
  1769  0018CA                     
  1770                           ;statesModify.c: 32:         hr = 0;
  1771  0018CA  0E00               	movlw	0
  1772  0018CC  6E0C               	movwf	(_hr+1)^0,c
  1773  0018CE  0E00               	movlw	0
  1774  0018D0  6E0B               	movwf	_hr^0,c
  1775  0018D2                     l352:
  1776  0018D2  0012               	return		;funcret
  1777  0018D4                     __end_of_modifyHour:
  1778                           	opt callstack 0
  1779                           
  1780 ;; *************** function _displayStpWatch *****************
  1781 ;; Defined at:
  1782 ;;		line 31 in file "stateStpWatch.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;Total ram usage:        0 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    7
  1803 ;; This function calls:
  1804 ;;		_LCDPutChar
  1805 ;;		_LCDPutInst
  1806 ;;		_LCDPutStr
  1807 ;;		___awdiv
  1808 ;;		___awmod
  1809 ;; This function is called by:
  1810 ;;		_main
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text8
  1815  0019D2                     __ptext8:
  1816                           	opt callstack 0
  1817  0019D2                     _displayStpWatch:
  1818                           	opt callstack 23
  1819  0019D2                     
  1820                           ;stateStpWatch.c: 32:     LCDPutInst(0x80);
  1821  0019D2  0E80               	movlw	128
  1822  0019D4  EC8C  F00F         	call	_LCDPutInst
  1823  0019D8                     
  1824                           ;stateStpWatch.c: 33:     LCDPutStr("   STOP WATCH   ");
  1825  0019D8  0E01               	movlw	low STR_5
  1826  0019DA  6E2E               	movwf	LCDPutStr@ptr^0,c
  1827  0019DC  0E10               	movlw	high STR_5
  1828  0019DE  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  1829  0019E0  EC07  F010         	call	_LCDPutStr	;wreg free
  1830  0019E4                     
  1831                           ;stateStpWatch.c: 34:     LCDPutInst(0xC0);
  1832  0019E4  0EC0               	movlw	192
  1833  0019E6  EC8C  F00F         	call	_LCDPutInst
  1834  0019EA                     
  1835                           ;stateStpWatch.c: 35:     LCDPutChar(minSTW/10+'0');
  1836  0019EA  C005  F027         	movff	_minSTW,___awdiv@dividend
  1837  0019EE  C006  F028         	movff	_minSTW+1,___awdiv@dividend+1
  1838  0019F2  0E00               	movlw	0
  1839  0019F4  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1840  0019F6  0E0A               	movlw	10
  1841  0019F8  6E29               	movwf	___awdiv@divisor^0,c
  1842  0019FA  ECB7  F00D         	call	___awdiv	;wreg free
  1843  0019FE  5027               	movf	?___awdiv^0,w,c
  1844  001A00  0F30               	addlw	48
  1845  001A02  EC59  F00F         	call	_LCDPutChar
  1846  001A06                     
  1847                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW%10+'0');
  1848  001A06  C005  F027         	movff	_minSTW,___awmod@dividend
  1849  001A0A  C006  F028         	movff	_minSTW+1,___awmod@dividend+1
  1850  001A0E  0E00               	movlw	0
  1851  001A10  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1852  001A12  0E0A               	movlw	10
  1853  001A14  6E29               	movwf	___awmod@divisor^0,c
  1854  001A16  EC7A  F00E         	call	___awmod	;wreg free
  1855  001A1A  5027               	movf	?___awmod^0,w,c
  1856  001A1C  0F30               	addlw	48
  1857  001A1E  EC59  F00F         	call	_LCDPutChar
  1858  001A22                     
  1859                           ;stateStpWatch.c: 37:     LCDPutChar(':');
  1860  001A22  0E3A               	movlw	58
  1861  001A24  EC59  F00F         	call	_LCDPutChar
  1862  001A28                     
  1863                           ;stateStpWatch.c: 38:     LCDPutChar(secSTW/10+'0');
  1864  001A28  C003  F027         	movff	_secSTW,___awdiv@dividend
  1865  001A2C  C004  F028         	movff	_secSTW+1,___awdiv@dividend+1
  1866  001A30  0E00               	movlw	0
  1867  001A32  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1868  001A34  0E0A               	movlw	10
  1869  001A36  6E29               	movwf	___awdiv@divisor^0,c
  1870  001A38  ECB7  F00D         	call	___awdiv	;wreg free
  1871  001A3C  5027               	movf	?___awdiv^0,w,c
  1872  001A3E  0F30               	addlw	48
  1873  001A40  EC59  F00F         	call	_LCDPutChar
  1874  001A44                     
  1875                           ;stateStpWatch.c: 39:     LCDPutChar(secSTW%10+'0');
  1876  001A44  C003  F027         	movff	_secSTW,___awmod@dividend
  1877  001A48  C004  F028         	movff	_secSTW+1,___awmod@dividend+1
  1878  001A4C  0E00               	movlw	0
  1879  001A4E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1880  001A50  0E0A               	movlw	10
  1881  001A52  6E29               	movwf	___awmod@divisor^0,c
  1882  001A54  EC7A  F00E         	call	___awmod	;wreg free
  1883  001A58  5027               	movf	?___awmod^0,w,c
  1884  001A5A  0F30               	addlw	48
  1885  001A5C  EC59  F00F         	call	_LCDPutChar
  1886  001A60                     
  1887                           ;stateStpWatch.c: 40:     LCDPutChar(':');
  1888  001A60  0E3A               	movlw	58
  1889  001A62  EC59  F00F         	call	_LCDPutChar
  1890  001A66                     
  1891                           ;stateStpWatch.c: 41:     LCDPutChar(miliSecSTW/10+'0');
  1892  001A66  C001  F027         	movff	_miliSecSTW,___awdiv@dividend
  1893  001A6A  C002  F028         	movff	_miliSecSTW+1,___awdiv@dividend+1
  1894  001A6E  0E00               	movlw	0
  1895  001A70  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1896  001A72  0E0A               	movlw	10
  1897  001A74  6E29               	movwf	___awdiv@divisor^0,c
  1898  001A76  ECB7  F00D         	call	___awdiv	;wreg free
  1899  001A7A  5027               	movf	?___awdiv^0,w,c
  1900  001A7C  0F30               	addlw	48
  1901  001A7E  EC59  F00F         	call	_LCDPutChar
  1902  001A82                     
  1903                           ;stateStpWatch.c: 42:     LCDPutChar(miliSecSTW%10+'0');
  1904  001A82  C001  F027         	movff	_miliSecSTW,___awmod@dividend
  1905  001A86  C002  F028         	movff	_miliSecSTW+1,___awmod@dividend+1
  1906  001A8A  0E00               	movlw	0
  1907  001A8C  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1908  001A8E  0E0A               	movlw	10
  1909  001A90  6E29               	movwf	___awmod@divisor^0,c
  1910  001A92  EC7A  F00E         	call	___awmod	;wreg free
  1911  001A96  5027               	movf	?___awmod^0,w,c
  1912  001A98  0F30               	addlw	48
  1913  001A9A  EC59  F00F         	call	_LCDPutChar
  1914  001A9E  0012               	return		;funcret
  1915  001AA0                     __end_of_displayStpWatch:
  1916                           	opt callstack 0
  1917                           
  1918 ;; *************** function _displayModify *****************
  1919 ;; Defined at:
  1920 ;;		line 100 in file "statesModify.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;Total ram usage:        2 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    7
  1941 ;; This function calls:
  1942 ;;		_LCDPutChar
  1943 ;;		_LCDPutInst
  1944 ;;		_LCDPutStr
  1945 ;;		___awdiv
  1946 ;;		___awmod
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text9
  1953  001044                     __ptext9:
  1954                           	opt callstack 0
  1955  001044                     _displayModify:
  1956                           	opt callstack 23
  1957  001044                     
  1958                           ;statesModify.c: 101:     switch (state) {
  1959  001044  EFE6  F009         	goto	l2086
  1960  001048                     l2000:
  1961                           
  1962                           ;statesModify.c: 105:             LCDPutInst(0x80);
  1963  001048  0E80               	movlw	128
  1964  00104A  EC8C  F00F         	call	_LCDPutInst
  1965  00104E                     
  1966                           ;statesModify.c: 106:             LCDPutStr(" MODIFIES HOUR ");
  1967  00104E  0E23               	movlw	low STR_2
  1968  001050  6E2E               	movwf	LCDPutStr@ptr^0,c
  1969  001052  0E10               	movlw	high STR_2
  1970  001054  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  1971  001056  EC07  F010         	call	_LCDPutStr	;wreg free
  1972  00105A                     
  1973                           ;statesModify.c: 107:             LCDPutInst(0xC0);
  1974  00105A  0EC0               	movlw	192
  1975  00105C  EC8C  F00F         	call	_LCDPutInst
  1976  001060                     
  1977                           ;statesModify.c: 108:             if ((count10ms % (20 / 2)) == 0) {
  1978  001060  C013  F027         	movff	_count10ms,___awmod@dividend
  1979  001064  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  1980  001068  0E00               	movlw	0
  1981  00106A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1982  00106C  0E0A               	movlw	10
  1983  00106E  6E29               	movwf	___awmod@divisor^0,c
  1984  001070  EC7A  F00E         	call	___awmod	;wreg free
  1985  001074  5027               	movf	?___awmod^0,w,c
  1986  001076  1028               	iorwf	(?___awmod+1)^0,w,c
  1987  001078  A4D8               	btfss	status,2,c
  1988  00107A  EF41  F008         	goto	u931
  1989  00107E  EF43  F008         	goto	u930
  1990  001082                     u931:
  1991  001082  EF7A  F008         	goto	l2016
  1992  001086                     u930:
  1993  001086                     
  1994                           ;statesModify.c: 109:                 if (blink == 0) {
  1995  001086  5009               	movf	_blink^0,w,c
  1996  001088  100A               	iorwf	(_blink+1)^0,w,c
  1997  00108A  A4D8               	btfss	status,2,c
  1998  00108C  EF4A  F008         	goto	u941
  1999  001090  EF4C  F008         	goto	u940
  2000  001094                     u941:
  2001  001094  EF54  F008         	goto	l2012
  2002  001098                     u940:
  2003  001098                     
  2004                           ;statesModify.c: 110:                     LCDPutChar(' ');
  2005  001098  0E20               	movlw	32
  2006  00109A  EC59  F00F         	call	_LCDPutChar
  2007                           
  2008                           ;statesModify.c: 111:                     LCDPutChar(' ');
  2009  00109E  0E20               	movlw	32
  2010  0010A0  EC59  F00F         	call	_LCDPutChar
  2011                           
  2012                           ;statesModify.c: 112:                 }
  2013  0010A4  EF70  F008         	goto	l2014
  2014  0010A8                     l2012:
  2015                           
  2016                           ;statesModify.c: 114:                     LCDPutChar(hr/10+'0');
  2017  0010A8  C00B  F027         	movff	_hr,___awdiv@dividend
  2018  0010AC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2019  0010B0  0E00               	movlw	0
  2020  0010B2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2021  0010B4  0E0A               	movlw	10
  2022  0010B6  6E29               	movwf	___awdiv@divisor^0,c
  2023  0010B8  ECB7  F00D         	call	___awdiv	;wreg free
  2024  0010BC  5027               	movf	?___awdiv^0,w,c
  2025  0010BE  0F30               	addlw	48
  2026  0010C0  EC59  F00F         	call	_LCDPutChar
  2027                           
  2028                           ;statesModify.c: 115:                     LCDPutChar(hr%10+'0');
  2029  0010C4  C00B  F027         	movff	_hr,___awmod@dividend
  2030  0010C8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2031  0010CC  0E00               	movlw	0
  2032  0010CE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2033  0010D0  0E0A               	movlw	10
  2034  0010D2  6E29               	movwf	___awmod@divisor^0,c
  2035  0010D4  EC7A  F00E         	call	___awmod	;wreg free
  2036  0010D8  5027               	movf	?___awmod^0,w,c
  2037  0010DA  0F30               	addlw	48
  2038  0010DC  EC59  F00F         	call	_LCDPutChar
  2039  0010E0                     l2014:
  2040                           
  2041                           ;statesModify.c: 117:                 blink = (blink + 1) % 2;
  2042  0010E0  0E01               	movlw	1
  2043  0010E2  2409               	addwf	_blink^0,w,c
  2044  0010E4  6E30               	movwf	??_displayModify^0,c
  2045  0010E6  0E00               	movlw	0
  2046  0010E8  200A               	addwfc	(_blink+1)^0,w,c
  2047  0010EA  6E31               	movwf	(??_displayModify+1)^0,c
  2048  0010EC  0E01               	movlw	1
  2049  0010EE  1430               	andwf	??_displayModify^0,w,c
  2050  0010F0  6E09               	movwf	_blink^0,c
  2051  0010F2  6A0A               	clrf	(_blink+1)^0,c
  2052  0010F4                     l2016:
  2053                           
  2054                           ;statesModify.c: 119:             LCDPutChar(':');
  2055  0010F4  0E3A               	movlw	58
  2056  0010F6  EC59  F00F         	call	_LCDPutChar
  2057  0010FA                     
  2058                           ;statesModify.c: 120:             LCDPutChar(min/10+'0');
  2059  0010FA  C00D  F027         	movff	_min,___awdiv@dividend
  2060  0010FE  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2061  001102  0E00               	movlw	0
  2062  001104  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2063  001106  0E0A               	movlw	10
  2064  001108  6E29               	movwf	___awdiv@divisor^0,c
  2065  00110A  ECB7  F00D         	call	___awdiv	;wreg free
  2066  00110E  5027               	movf	?___awdiv^0,w,c
  2067  001110  0F30               	addlw	48
  2068  001112  EC59  F00F         	call	_LCDPutChar
  2069  001116                     
  2070                           ;statesModify.c: 121:             LCDPutChar(min%10+'0');
  2071  001116  C00D  F027         	movff	_min,___awmod@dividend
  2072  00111A  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2073  00111E  0E00               	movlw	0
  2074  001120  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2075  001122  0E0A               	movlw	10
  2076  001124  6E29               	movwf	___awmod@divisor^0,c
  2077  001126  EC7A  F00E         	call	___awmod	;wreg free
  2078  00112A  5027               	movf	?___awmod^0,w,c
  2079  00112C  0F30               	addlw	48
  2080  00112E  EC59  F00F         	call	_LCDPutChar
  2081  001132                     
  2082                           ;statesModify.c: 122:             LCDPutChar(':');
  2083  001132  0E3A               	movlw	58
  2084  001134  EC59  F00F         	call	_LCDPutChar
  2085  001138                     
  2086                           ;statesModify.c: 123:             LCDPutChar(sec/10+'0');
  2087  001138  C00F  F027         	movff	_sec,___awdiv@dividend
  2088  00113C  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2089  001140  0E00               	movlw	0
  2090  001142  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2091  001144  0E0A               	movlw	10
  2092  001146  6E29               	movwf	___awdiv@divisor^0,c
  2093  001148  ECB7  F00D         	call	___awdiv	;wreg free
  2094  00114C  5027               	movf	?___awdiv^0,w,c
  2095  00114E  0F30               	addlw	48
  2096  001150  EC59  F00F         	call	_LCDPutChar
  2097  001154                     
  2098                           ;statesModify.c: 124:             LCDPutChar(sec%10+'0');
  2099  001154  C00F  F027         	movff	_sec,___awmod@dividend
  2100  001158  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2101  00115C  0E00               	movlw	0
  2102  00115E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2103  001160  0E0A               	movlw	10
  2104  001162  6E29               	movwf	___awmod@divisor^0,c
  2105  001164  EC7A  F00E         	call	___awmod	;wreg free
  2106  001168  5027               	movf	?___awmod^0,w,c
  2107  00116A  0F30               	addlw	48
  2108  00116C  EC59  F00F         	call	_LCDPutChar
  2109                           
  2110                           ;statesModify.c: 125:             break;
  2111  001170  EF07  F00A         	goto	l407
  2112  001174                     l2028:
  2113                           
  2114                           ;statesModify.c: 127:             LCDPutInst(0x80);
  2115  001174  0E80               	movlw	128
  2116  001176  EC8C  F00F         	call	_LCDPutInst
  2117  00117A                     
  2118                           ;statesModify.c: 128:             LCDPutStr("MODIFIES MINUTE");
  2119  00117A  0E33               	movlw	low STR_3
  2120  00117C  6E2E               	movwf	LCDPutStr@ptr^0,c
  2121  00117E  0E10               	movlw	high STR_3
  2122  001180  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2123  001182  EC07  F010         	call	_LCDPutStr	;wreg free
  2124  001186                     
  2125                           ;statesModify.c: 129:             LCDPutInst(0xC0);
  2126  001186  0EC0               	movlw	192
  2127  001188  EC8C  F00F         	call	_LCDPutInst
  2128  00118C                     
  2129                           ;statesModify.c: 130:             LCDPutChar(hr/10+'0');
  2130  00118C  C00B  F027         	movff	_hr,___awdiv@dividend
  2131  001190  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2132  001194  0E00               	movlw	0
  2133  001196  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2134  001198  0E0A               	movlw	10
  2135  00119A  6E29               	movwf	___awdiv@divisor^0,c
  2136  00119C  ECB7  F00D         	call	___awdiv	;wreg free
  2137  0011A0  5027               	movf	?___awdiv^0,w,c
  2138  0011A2  0F30               	addlw	48
  2139  0011A4  EC59  F00F         	call	_LCDPutChar
  2140  0011A8                     
  2141                           ;statesModify.c: 131:             LCDPutChar(hr%10+'0');
  2142  0011A8  C00B  F027         	movff	_hr,___awmod@dividend
  2143  0011AC  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2144  0011B0  0E00               	movlw	0
  2145  0011B2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2146  0011B4  0E0A               	movlw	10
  2147  0011B6  6E29               	movwf	___awmod@divisor^0,c
  2148  0011B8  EC7A  F00E         	call	___awmod	;wreg free
  2149  0011BC  5027               	movf	?___awmod^0,w,c
  2150  0011BE  0F30               	addlw	48
  2151  0011C0  EC59  F00F         	call	_LCDPutChar
  2152  0011C4                     
  2153                           ;statesModify.c: 132:             LCDPutChar(':');
  2154  0011C4  0E3A               	movlw	58
  2155  0011C6  EC59  F00F         	call	_LCDPutChar
  2156  0011CA                     
  2157                           ;statesModify.c: 133:             if ((count10ms % (20 / 2)) == 0) {
  2158  0011CA  C013  F027         	movff	_count10ms,___awmod@dividend
  2159  0011CE  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2160  0011D2  0E00               	movlw	0
  2161  0011D4  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2162  0011D6  0E0A               	movlw	10
  2163  0011D8  6E29               	movwf	___awmod@divisor^0,c
  2164  0011DA  EC7A  F00E         	call	___awmod	;wreg free
  2165  0011DE  5027               	movf	?___awmod^0,w,c
  2166  0011E0  1028               	iorwf	(?___awmod+1)^0,w,c
  2167  0011E2  A4D8               	btfss	status,2,c
  2168  0011E4  EFF6  F008         	goto	u951
  2169  0011E8  EFF8  F008         	goto	u950
  2170  0011EC                     u951:
  2171  0011EC  EF2F  F009         	goto	l2050
  2172  0011F0                     u950:
  2173  0011F0                     
  2174                           ;statesModify.c: 134:                 if (blink == 0) {
  2175  0011F0  5009               	movf	_blink^0,w,c
  2176  0011F2  100A               	iorwf	(_blink+1)^0,w,c
  2177  0011F4  A4D8               	btfss	status,2,c
  2178  0011F6  EFFF  F008         	goto	u961
  2179  0011FA  EF01  F009         	goto	u960
  2180  0011FE                     u961:
  2181  0011FE  EF09  F009         	goto	l2046
  2182  001202                     u960:
  2183  001202                     
  2184                           ;statesModify.c: 135:                     LCDPutChar(' ');
  2185  001202  0E20               	movlw	32
  2186  001204  EC59  F00F         	call	_LCDPutChar
  2187                           
  2188                           ;statesModify.c: 136:                     LCDPutChar(' ');
  2189  001208  0E20               	movlw	32
  2190  00120A  EC59  F00F         	call	_LCDPutChar
  2191                           
  2192                           ;statesModify.c: 137:                 }
  2193  00120E  EF25  F009         	goto	l2048
  2194  001212                     l2046:
  2195                           
  2196                           ;statesModify.c: 139:                     LCDPutChar(min/10+'0');
  2197  001212  C00D  F027         	movff	_min,___awdiv@dividend
  2198  001216  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2199  00121A  0E00               	movlw	0
  2200  00121C  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2201  00121E  0E0A               	movlw	10
  2202  001220  6E29               	movwf	___awdiv@divisor^0,c
  2203  001222  ECB7  F00D         	call	___awdiv	;wreg free
  2204  001226  5027               	movf	?___awdiv^0,w,c
  2205  001228  0F30               	addlw	48
  2206  00122A  EC59  F00F         	call	_LCDPutChar
  2207                           
  2208                           ;statesModify.c: 140:                     LCDPutChar(min%10+'0');
  2209  00122E  C00D  F027         	movff	_min,___awmod@dividend
  2210  001232  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2211  001236  0E00               	movlw	0
  2212  001238  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2213  00123A  0E0A               	movlw	10
  2214  00123C  6E29               	movwf	___awmod@divisor^0,c
  2215  00123E  EC7A  F00E         	call	___awmod	;wreg free
  2216  001242  5027               	movf	?___awmod^0,w,c
  2217  001244  0F30               	addlw	48
  2218  001246  EC59  F00F         	call	_LCDPutChar
  2219  00124A                     l2048:
  2220                           
  2221                           ;statesModify.c: 142:                 blink = (blink + 1) % 2;
  2222  00124A  0E01               	movlw	1
  2223  00124C  2409               	addwf	_blink^0,w,c
  2224  00124E  6E30               	movwf	??_displayModify^0,c
  2225  001250  0E00               	movlw	0
  2226  001252  200A               	addwfc	(_blink+1)^0,w,c
  2227  001254  6E31               	movwf	(??_displayModify+1)^0,c
  2228  001256  0E01               	movlw	1
  2229  001258  1430               	andwf	??_displayModify^0,w,c
  2230  00125A  6E09               	movwf	_blink^0,c
  2231  00125C  6A0A               	clrf	(_blink+1)^0,c
  2232  00125E                     l2050:
  2233                           
  2234                           ;statesModify.c: 144:             LCDPutChar(':');
  2235  00125E  0E3A               	movlw	58
  2236  001260  EC59  F00F         	call	_LCDPutChar
  2237  001264                     
  2238                           ;statesModify.c: 145:             LCDPutChar(sec/10+'0');
  2239  001264  C00F  F027         	movff	_sec,___awdiv@dividend
  2240  001268  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2241  00126C  0E00               	movlw	0
  2242  00126E  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2243  001270  0E0A               	movlw	10
  2244  001272  6E29               	movwf	___awdiv@divisor^0,c
  2245  001274  ECB7  F00D         	call	___awdiv	;wreg free
  2246  001278  5027               	movf	?___awdiv^0,w,c
  2247  00127A  0F30               	addlw	48
  2248  00127C  EC59  F00F         	call	_LCDPutChar
  2249  001280                     
  2250                           ;statesModify.c: 146:             LCDPutChar(sec%10+'0');
  2251  001280  C00F  F027         	movff	_sec,___awmod@dividend
  2252  001284  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2253  001288  0E00               	movlw	0
  2254  00128A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2255  00128C  0E0A               	movlw	10
  2256  00128E  6E29               	movwf	___awmod@divisor^0,c
  2257  001290  EC7A  F00E         	call	___awmod	;wreg free
  2258  001294  5027               	movf	?___awmod^0,w,c
  2259  001296  0F30               	addlw	48
  2260  001298  EC59  F00F         	call	_LCDPutChar
  2261                           
  2262                           ;statesModify.c: 147:             break;
  2263  00129C  EF07  F00A         	goto	l407
  2264  0012A0                     l2056:
  2265                           
  2266                           ;statesModify.c: 149:             LCDPutInst(0x80);
  2267  0012A0  0E80               	movlw	128
  2268  0012A2  EC8C  F00F         	call	_LCDPutInst
  2269  0012A6                     
  2270                           ;statesModify.c: 150:             LCDPutStr("MODIFIES MINUTE");
  2271  0012A6  0E33               	movlw	low STR_3
  2272  0012A8  6E2E               	movwf	LCDPutStr@ptr^0,c
  2273  0012AA  0E10               	movlw	high STR_3
  2274  0012AC  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2275  0012AE  EC07  F010         	call	_LCDPutStr	;wreg free
  2276  0012B2                     
  2277                           ;statesModify.c: 151:             LCDPutInst(0xC0);
  2278  0012B2  0EC0               	movlw	192
  2279  0012B4  EC8C  F00F         	call	_LCDPutInst
  2280  0012B8                     
  2281                           ;statesModify.c: 152:             LCDPutChar(hr/10+'0');
  2282  0012B8  C00B  F027         	movff	_hr,___awdiv@dividend
  2283  0012BC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2284  0012C0  0E00               	movlw	0
  2285  0012C2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2286  0012C4  0E0A               	movlw	10
  2287  0012C6  6E29               	movwf	___awdiv@divisor^0,c
  2288  0012C8  ECB7  F00D         	call	___awdiv	;wreg free
  2289  0012CC  5027               	movf	?___awdiv^0,w,c
  2290  0012CE  0F30               	addlw	48
  2291  0012D0  EC59  F00F         	call	_LCDPutChar
  2292  0012D4                     
  2293                           ;statesModify.c: 153:             LCDPutChar(hr%10+'0');
  2294  0012D4  C00B  F027         	movff	_hr,___awmod@dividend
  2295  0012D8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2296  0012DC  0E00               	movlw	0
  2297  0012DE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2298  0012E0  0E0A               	movlw	10
  2299  0012E2  6E29               	movwf	___awmod@divisor^0,c
  2300  0012E4  EC7A  F00E         	call	___awmod	;wreg free
  2301  0012E8  5027               	movf	?___awmod^0,w,c
  2302  0012EA  0F30               	addlw	48
  2303  0012EC  EC59  F00F         	call	_LCDPutChar
  2304  0012F0                     
  2305                           ;statesModify.c: 154:             LCDPutChar(':');
  2306  0012F0  0E3A               	movlw	58
  2307  0012F2  EC59  F00F         	call	_LCDPutChar
  2308  0012F6                     
  2309                           ;statesModify.c: 155:             LCDPutChar(min/10+'0');
  2310  0012F6  C00D  F027         	movff	_min,___awdiv@dividend
  2311  0012FA  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2312  0012FE  0E00               	movlw	0
  2313  001300  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2314  001302  0E0A               	movlw	10
  2315  001304  6E29               	movwf	___awdiv@divisor^0,c
  2316  001306  ECB7  F00D         	call	___awdiv	;wreg free
  2317  00130A  5027               	movf	?___awdiv^0,w,c
  2318  00130C  0F30               	addlw	48
  2319  00130E  EC59  F00F         	call	_LCDPutChar
  2320  001312                     
  2321                           ;statesModify.c: 156:             LCDPutChar(min%10+'0');
  2322  001312  C00D  F027         	movff	_min,___awmod@dividend
  2323  001316  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2324  00131A  0E00               	movlw	0
  2325  00131C  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2326  00131E  0E0A               	movlw	10
  2327  001320  6E29               	movwf	___awmod@divisor^0,c
  2328  001322  EC7A  F00E         	call	___awmod	;wreg free
  2329  001326  5027               	movf	?___awmod^0,w,c
  2330  001328  0F30               	addlw	48
  2331  00132A  EC59  F00F         	call	_LCDPutChar
  2332  00132E                     
  2333                           ;statesModify.c: 157:             LCDPutChar(':');
  2334  00132E  0E3A               	movlw	58
  2335  001330  EC59  F00F         	call	_LCDPutChar
  2336  001334                     
  2337                           ;statesModify.c: 158:             if ((count10ms % (20 / 2)) == 0) {
  2338  001334  C013  F027         	movff	_count10ms,___awmod@dividend
  2339  001338  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2340  00133C  0E00               	movlw	0
  2341  00133E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2342  001340  0E0A               	movlw	10
  2343  001342  6E29               	movwf	___awmod@divisor^0,c
  2344  001344  EC7A  F00E         	call	___awmod	;wreg free
  2345  001348  5027               	movf	?___awmod^0,w,c
  2346  00134A  1028               	iorwf	(?___awmod+1)^0,w,c
  2347  00134C  A4D8               	btfss	status,2,c
  2348  00134E  EFAB  F009         	goto	u971
  2349  001352  EFAD  F009         	goto	u970
  2350  001356                     u971:
  2351  001356  EF07  F00A         	goto	l407
  2352  00135A                     u970:
  2353  00135A                     
  2354                           ;statesModify.c: 159:                 if (blink == 0) {
  2355  00135A  5009               	movf	_blink^0,w,c
  2356  00135C  100A               	iorwf	(_blink+1)^0,w,c
  2357  00135E  A4D8               	btfss	status,2,c
  2358  001360  EFB4  F009         	goto	u981
  2359  001364  EFB6  F009         	goto	u980
  2360  001368                     u981:
  2361  001368  EFBE  F009         	goto	l2080
  2362  00136C                     u980:
  2363  00136C                     
  2364                           ;statesModify.c: 160:                     LCDPutChar(' ');
  2365  00136C  0E20               	movlw	32
  2366  00136E  EC59  F00F         	call	_LCDPutChar
  2367                           
  2368                           ;statesModify.c: 161:                     LCDPutChar(' ');
  2369  001372  0E20               	movlw	32
  2370  001374  EC59  F00F         	call	_LCDPutChar
  2371                           
  2372                           ;statesModify.c: 162:                 }
  2373  001378  EFDA  F009         	goto	l2082
  2374  00137C                     l2080:
  2375                           
  2376                           ;statesModify.c: 164:                     LCDPutChar(sec/10+'0');
  2377  00137C  C00F  F027         	movff	_sec,___awdiv@dividend
  2378  001380  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2379  001384  0E00               	movlw	0
  2380  001386  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2381  001388  0E0A               	movlw	10
  2382  00138A  6E29               	movwf	___awdiv@divisor^0,c
  2383  00138C  ECB7  F00D         	call	___awdiv	;wreg free
  2384  001390  5027               	movf	?___awdiv^0,w,c
  2385  001392  0F30               	addlw	48
  2386  001394  EC59  F00F         	call	_LCDPutChar
  2387                           
  2388                           ;statesModify.c: 165:                     LCDPutChar(sec%10+'0');
  2389  001398  C00F  F027         	movff	_sec,___awmod@dividend
  2390  00139C  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2391  0013A0  0E00               	movlw	0
  2392  0013A2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2393  0013A4  0E0A               	movlw	10
  2394  0013A6  6E29               	movwf	___awmod@divisor^0,c
  2395  0013A8  EC7A  F00E         	call	___awmod	;wreg free
  2396  0013AC  5027               	movf	?___awmod^0,w,c
  2397  0013AE  0F30               	addlw	48
  2398  0013B0  EC59  F00F         	call	_LCDPutChar
  2399  0013B4                     l2082:
  2400                           
  2401                           ;statesModify.c: 167:                 blink = (blink + 1) % 2;
  2402  0013B4  0E01               	movlw	1
  2403  0013B6  2409               	addwf	_blink^0,w,c
  2404  0013B8  6E30               	movwf	??_displayModify^0,c
  2405  0013BA  0E00               	movlw	0
  2406  0013BC  200A               	addwfc	(_blink+1)^0,w,c
  2407  0013BE  6E31               	movwf	(??_displayModify+1)^0,c
  2408  0013C0  0E01               	movlw	1
  2409  0013C2  1430               	andwf	??_displayModify^0,w,c
  2410  0013C4  6E09               	movwf	_blink^0,c
  2411  0013C6  6A0A               	clrf	(_blink+1)^0,c
  2412  0013C8  EF07  F00A         	goto	l407
  2413  0013CC                     l2086:
  2414  0013CC  501E               	movf	_state^0,w,c
  2415  0013CE  6E30               	movwf	??_displayModify^0,c
  2416  0013D0  6A31               	clrf	(??_displayModify+1)^0,c
  2417                           
  2418                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2419                           ; Switch size 1, requested type "simple"
  2420                           ; Number of cases is 1, Range of values is 0 to 0
  2421                           ; switch strategies available:
  2422                           ; Name         Instructions Cycles
  2423                           ; simple_byte            4     3 (average)
  2424                           ;	Chosen strategy is simple_byte
  2425  0013D2  5031               	movf	(??_displayModify+1)^0,w,c
  2426  0013D4  0A00               	xorlw	0	; case 0
  2427  0013D6  B4D8               	btfsc	status,2,c
  2428  0013D8  EFF0  F009         	goto	l2260
  2429  0013DC  EF07  F00A         	goto	l407
  2430  0013E0                     l2260:
  2431                           
  2432                           ; Switch size 1, requested type "simple"
  2433                           ; Number of cases is 5, Range of values is 0 to 4
  2434                           ; switch strategies available:
  2435                           ; Name         Instructions Cycles
  2436                           ; simple_byte           16     9 (average)
  2437                           ;	Chosen strategy is simple_byte
  2438  0013E0  5030               	movf	??_displayModify^0,w,c
  2439  0013E2  0A00               	xorlw	0	; case 0
  2440  0013E4  B4D8               	btfsc	status,2,c
  2441  0013E6  EF07  F00A         	goto	l407
  2442  0013EA  0A01               	xorlw	1	; case 1
  2443  0013EC  B4D8               	btfsc	status,2,c
  2444  0013EE  EF24  F008         	goto	l2000
  2445  0013F2  0A03               	xorlw	3	; case 2
  2446  0013F4  B4D8               	btfsc	status,2,c
  2447  0013F6  EFBA  F008         	goto	l2028
  2448  0013FA  0A01               	xorlw	1	; case 3
  2449  0013FC  B4D8               	btfsc	status,2,c
  2450  0013FE  EF50  F009         	goto	l2056
  2451  001402  0A07               	xorlw	7	; case 4
  2452  001404  B4D8               	btfsc	status,2,c
  2453  001406  EF07  F00A         	goto	l407
  2454  00140A  EF07  F00A         	goto	l407
  2455  00140E                     l407:
  2456  00140E  0012               	return		;funcret
  2457  001410                     __end_of_displayModify:
  2458                           	opt callstack 0
  2459                           
  2460 ;; *************** function _displayClock *****************
  2461 ;; Defined at:
  2462 ;;		line 21 in file "stateClock.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;		None
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;Total ram usage:        0 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    7
  2483 ;; This function calls:
  2484 ;;		_LCDPutChar
  2485 ;;		_LCDPutInst
  2486 ;;		_LCDPutStr
  2487 ;;		___awdiv
  2488 ;;		___awmod
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text10
  2495  001AA0                     __ptext10:
  2496                           	opt callstack 0
  2497  001AA0                     _displayClock:
  2498                           	opt callstack 23
  2499  001AA0                     
  2500                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2501  001AA0  0E80               	movlw	128
  2502  001AA2  EC8C  F00F         	call	_LCDPutInst
  2503  001AA6                     
  2504                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2505  001AA6  0E12               	movlw	low STR_1
  2506  001AA8  6E2E               	movwf	LCDPutStr@ptr^0,c
  2507  001AAA  0E10               	movlw	high STR_1
  2508  001AAC  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2509  001AAE  EC07  F010         	call	_LCDPutStr	;wreg free
  2510  001AB2                     
  2511                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2512  001AB2  0EC0               	movlw	192
  2513  001AB4  EC8C  F00F         	call	_LCDPutInst
  2514  001AB8                     
  2515                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2516  001AB8  C00B  F027         	movff	_hr,___awdiv@dividend
  2517  001ABC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2518  001AC0  0E00               	movlw	0
  2519  001AC2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2520  001AC4  0E0A               	movlw	10
  2521  001AC6  6E29               	movwf	___awdiv@divisor^0,c
  2522  001AC8  ECB7  F00D         	call	___awdiv	;wreg free
  2523  001ACC  5027               	movf	?___awdiv^0,w,c
  2524  001ACE  0F30               	addlw	48
  2525  001AD0  EC59  F00F         	call	_LCDPutChar
  2526  001AD4                     
  2527                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2528  001AD4  C00B  F027         	movff	_hr,___awmod@dividend
  2529  001AD8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2530  001ADC  0E00               	movlw	0
  2531  001ADE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2532  001AE0  0E0A               	movlw	10
  2533  001AE2  6E29               	movwf	___awmod@divisor^0,c
  2534  001AE4  EC7A  F00E         	call	___awmod	;wreg free
  2535  001AE8  5027               	movf	?___awmod^0,w,c
  2536  001AEA  0F30               	addlw	48
  2537  001AEC  EC59  F00F         	call	_LCDPutChar
  2538  001AF0                     
  2539                           ;stateClock.c: 27:     LCDPutChar(':');
  2540  001AF0  0E3A               	movlw	58
  2541  001AF2  EC59  F00F         	call	_LCDPutChar
  2542  001AF6                     
  2543                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2544  001AF6  C00D  F027         	movff	_min,___awdiv@dividend
  2545  001AFA  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2546  001AFE  0E00               	movlw	0
  2547  001B00  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2548  001B02  0E0A               	movlw	10
  2549  001B04  6E29               	movwf	___awdiv@divisor^0,c
  2550  001B06  ECB7  F00D         	call	___awdiv	;wreg free
  2551  001B0A  5027               	movf	?___awdiv^0,w,c
  2552  001B0C  0F30               	addlw	48
  2553  001B0E  EC59  F00F         	call	_LCDPutChar
  2554  001B12                     
  2555                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2556  001B12  C00D  F027         	movff	_min,___awmod@dividend
  2557  001B16  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2558  001B1A  0E00               	movlw	0
  2559  001B1C  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2560  001B1E  0E0A               	movlw	10
  2561  001B20  6E29               	movwf	___awmod@divisor^0,c
  2562  001B22  EC7A  F00E         	call	___awmod	;wreg free
  2563  001B26  5027               	movf	?___awmod^0,w,c
  2564  001B28  0F30               	addlw	48
  2565  001B2A  EC59  F00F         	call	_LCDPutChar
  2566  001B2E                     
  2567                           ;stateClock.c: 30:     LCDPutChar(':');
  2568  001B2E  0E3A               	movlw	58
  2569  001B30  EC59  F00F         	call	_LCDPutChar
  2570  001B34                     
  2571                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2572  001B34  C00F  F027         	movff	_sec,___awdiv@dividend
  2573  001B38  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2574  001B3C  0E00               	movlw	0
  2575  001B3E  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2576  001B40  0E0A               	movlw	10
  2577  001B42  6E29               	movwf	___awdiv@divisor^0,c
  2578  001B44  ECB7  F00D         	call	___awdiv	;wreg free
  2579  001B48  5027               	movf	?___awdiv^0,w,c
  2580  001B4A  0F30               	addlw	48
  2581  001B4C  EC59  F00F         	call	_LCDPutChar
  2582  001B50                     
  2583                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2584  001B50  C00F  F027         	movff	_sec,___awmod@dividend
  2585  001B54  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2586  001B58  0E00               	movlw	0
  2587  001B5A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2588  001B5C  0E0A               	movlw	10
  2589  001B5E  6E29               	movwf	___awmod@divisor^0,c
  2590  001B60  EC7A  F00E         	call	___awmod	;wreg free
  2591  001B64  5027               	movf	?___awmod^0,w,c
  2592  001B66  0F30               	addlw	48
  2593  001B68  EC59  F00F         	call	_LCDPutChar
  2594  001B6C  0012               	return		;funcret
  2595  001B6E                     __end_of_displayClock:
  2596                           	opt callstack 0
  2597                           
  2598 ;; *************** function ___awmod *****************
  2599 ;; Defined at:
  2600 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;  dividend        2    8[COMRAM] int 
  2603 ;;  divisor         2   10[COMRAM] int 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  sign            1   13[COMRAM] unsigned char 
  2606 ;;  counter         1   12[COMRAM] unsigned char 
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  2    8[COMRAM] int 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, status,0
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;Total ram usage:        6 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    3
  2623 ;; This function calls:
  2624 ;;		Nothing
  2625 ;; This function is called by:
  2626 ;;		_displayClock
  2627 ;;		_displayModify
  2628 ;;		_displayStpWatch
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text11
  2633  001CF4                     __ptext11:
  2634                           	opt callstack 0
  2635  001CF4                     ___awmod:
  2636                           	opt callstack 26
  2637  001CF4  0E00               	movlw	0
  2638  001CF6  6E2C               	movwf	___awmod@sign^0,c
  2639  001CF8  BE28               	btfsc	(___awmod@dividend+1)^0,7,c
  2640  001CFA  EF83  F00E         	goto	u870
  2641  001CFE  EF81  F00E         	goto	u871
  2642  001D02                     u871:
  2643  001D02  EF89  F00E         	goto	l1948
  2644  001D06                     u870:
  2645  001D06  6C27               	negf	___awmod@dividend^0,c
  2646  001D08  1E28               	comf	(___awmod@dividend+1)^0,f,c
  2647  001D0A  B0D8               	btfsc	status,0,c
  2648  001D0C  2A28               	incf	(___awmod@dividend+1)^0,f,c
  2649  001D0E  0E01               	movlw	1
  2650  001D10  6E2C               	movwf	___awmod@sign^0,c
  2651  001D12                     l1948:
  2652  001D12  BE2A               	btfsc	(___awmod@divisor+1)^0,7,c
  2653  001D14  EF90  F00E         	goto	u880
  2654  001D18  EF8E  F00E         	goto	u881
  2655  001D1C                     u881:
  2656  001D1C  EF94  F00E         	goto	l1952
  2657  001D20                     u880:
  2658  001D20  6C29               	negf	___awmod@divisor^0,c
  2659  001D22  1E2A               	comf	(___awmod@divisor+1)^0,f,c
  2660  001D24  B0D8               	btfsc	status,0,c
  2661  001D26  2A2A               	incf	(___awmod@divisor+1)^0,f,c
  2662  001D28                     l1952:
  2663  001D28  5029               	movf	___awmod@divisor^0,w,c
  2664  001D2A  102A               	iorwf	(___awmod@divisor+1)^0,w,c
  2665  001D2C  B4D8               	btfsc	status,2,c
  2666  001D2E  EF9B  F00E         	goto	u891
  2667  001D32  EF9D  F00E         	goto	u890
  2668  001D36                     u891:
  2669  001D36  EFC1  F00E         	goto	l1968
  2670  001D3A                     u890:
  2671  001D3A  0E01               	movlw	1
  2672  001D3C  6E2B               	movwf	___awmod@counter^0,c
  2673  001D3E  EFA5  F00E         	goto	l1958
  2674  001D42                     l1956:
  2675  001D42  90D8               	bcf	status,0,c
  2676  001D44  3629               	rlcf	___awmod@divisor^0,f,c
  2677  001D46  362A               	rlcf	(___awmod@divisor+1)^0,f,c
  2678  001D48  2A2B               	incf	___awmod@counter^0,f,c
  2679  001D4A                     l1958:
  2680  001D4A  AE2A               	btfss	(___awmod@divisor+1)^0,7,c
  2681  001D4C  EFAA  F00E         	goto	u901
  2682  001D50  EFAC  F00E         	goto	u900
  2683  001D54                     u901:
  2684  001D54  EFA1  F00E         	goto	l1956
  2685  001D58                     u900:
  2686  001D58                     l1960:
  2687  001D58  5029               	movf	___awmod@divisor^0,w,c
  2688  001D5A  5C27               	subwf	___awmod@dividend^0,w,c
  2689  001D5C  502A               	movf	(___awmod@divisor+1)^0,w,c
  2690  001D5E  5828               	subwfb	(___awmod@dividend+1)^0,w,c
  2691  001D60  A0D8               	btfss	status,0,c
  2692  001D62  EFB5  F00E         	goto	u911
  2693  001D66  EFB7  F00E         	goto	u910
  2694  001D6A                     u911:
  2695  001D6A  EFBB  F00E         	goto	l1964
  2696  001D6E                     u910:
  2697  001D6E  5029               	movf	___awmod@divisor^0,w,c
  2698  001D70  5E27               	subwf	___awmod@dividend^0,f,c
  2699  001D72  502A               	movf	(___awmod@divisor+1)^0,w,c
  2700  001D74  5A28               	subwfb	(___awmod@dividend+1)^0,f,c
  2701  001D76                     l1964:
  2702  001D76  90D8               	bcf	status,0,c
  2703  001D78  322A               	rrcf	(___awmod@divisor+1)^0,f,c
  2704  001D7A  3229               	rrcf	___awmod@divisor^0,f,c
  2705  001D7C  2E2B               	decfsz	___awmod@counter^0,f,c
  2706  001D7E  EFAC  F00E         	goto	l1960
  2707  001D82                     l1968:
  2708  001D82  502C               	movf	___awmod@sign^0,w,c
  2709  001D84  B4D8               	btfsc	status,2,c
  2710  001D86  EFC7  F00E         	goto	u921
  2711  001D8A  EFC9  F00E         	goto	u920
  2712  001D8E                     u921:
  2713  001D8E  EFCD  F00E         	goto	l1972
  2714  001D92                     u920:
  2715  001D92  6C27               	negf	___awmod@dividend^0,c
  2716  001D94  1E28               	comf	(___awmod@dividend+1)^0,f,c
  2717  001D96  B0D8               	btfsc	status,0,c
  2718  001D98  2A28               	incf	(___awmod@dividend+1)^0,f,c
  2719  001D9A                     l1972:
  2720  001D9A  C027  F027         	movff	___awmod@dividend,?___awmod
  2721  001D9E  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  2722  001DA2  0012               	return		;funcret
  2723  001DA4                     __end_of___awmod:
  2724                           	opt callstack 0
  2725                           
  2726 ;; *************** function ___awdiv *****************
  2727 ;; Defined at:
  2728 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  dividend        2    8[COMRAM] int 
  2731 ;;  divisor         2   10[COMRAM] int 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  quotient        2   14[COMRAM] int 
  2734 ;;  sign            1   13[COMRAM] unsigned char 
  2735 ;;  counter         1   12[COMRAM] unsigned char 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2    8[COMRAM] int 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2745 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;Total ram usage:        8 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    3
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_displayClock
  2756 ;;		_displayModify
  2757 ;;		_displayStpWatch
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text12
  2762  001B6E                     __ptext12:
  2763                           	opt callstack 0
  2764  001B6E                     ___awdiv:
  2765                           	opt callstack 26
  2766  001B6E  0E00               	movlw	0
  2767  001B70  6E2C               	movwf	___awdiv@sign^0,c
  2768  001B72  BE2A               	btfsc	(___awdiv@divisor+1)^0,7,c
  2769  001B74  EFC0  F00D         	goto	u810
  2770  001B78  EFBE  F00D         	goto	u811
  2771  001B7C                     u811:
  2772  001B7C  EFC6  F00D         	goto	l1904
  2773  001B80                     u810:
  2774  001B80  6C29               	negf	___awdiv@divisor^0,c
  2775  001B82  1E2A               	comf	(___awdiv@divisor+1)^0,f,c
  2776  001B84  B0D8               	btfsc	status,0,c
  2777  001B86  2A2A               	incf	(___awdiv@divisor+1)^0,f,c
  2778  001B88  0E01               	movlw	1
  2779  001B8A  6E2C               	movwf	___awdiv@sign^0,c
  2780  001B8C                     l1904:
  2781  001B8C  BE28               	btfsc	(___awdiv@dividend+1)^0,7,c
  2782  001B8E  EFCD  F00D         	goto	u820
  2783  001B92  EFCB  F00D         	goto	u821
  2784  001B96                     u821:
  2785  001B96  EFD3  F00D         	goto	l1910
  2786  001B9A                     u820:
  2787  001B9A  6C27               	negf	___awdiv@dividend^0,c
  2788  001B9C  1E28               	comf	(___awdiv@dividend+1)^0,f,c
  2789  001B9E  B0D8               	btfsc	status,0,c
  2790  001BA0  2A28               	incf	(___awdiv@dividend+1)^0,f,c
  2791  001BA2  0E01               	movlw	1
  2792  001BA4  1A2C               	xorwf	___awdiv@sign^0,f,c
  2793  001BA6                     l1910:
  2794  001BA6  0E00               	movlw	0
  2795  001BA8  6E2E               	movwf	(___awdiv@quotient+1)^0,c
  2796  001BAA  0E00               	movlw	0
  2797  001BAC  6E2D               	movwf	___awdiv@quotient^0,c
  2798  001BAE  5029               	movf	___awdiv@divisor^0,w,c
  2799  001BB0  102A               	iorwf	(___awdiv@divisor+1)^0,w,c
  2800  001BB2  B4D8               	btfsc	status,2,c
  2801  001BB4  EFDE  F00D         	goto	u831
  2802  001BB8  EFE0  F00D         	goto	u830
  2803  001BBC                     u831:
  2804  001BBC  EF08  F00E         	goto	l1932
  2805  001BC0                     u830:
  2806  001BC0  0E01               	movlw	1
  2807  001BC2  6E2B               	movwf	___awdiv@counter^0,c
  2808  001BC4  EFE8  F00D         	goto	l1918
  2809  001BC8                     l1916:
  2810  001BC8  90D8               	bcf	status,0,c
  2811  001BCA  3629               	rlcf	___awdiv@divisor^0,f,c
  2812  001BCC  362A               	rlcf	(___awdiv@divisor+1)^0,f,c
  2813  001BCE  2A2B               	incf	___awdiv@counter^0,f,c
  2814  001BD0                     l1918:
  2815  001BD0  AE2A               	btfss	(___awdiv@divisor+1)^0,7,c
  2816  001BD2  EFED  F00D         	goto	u841
  2817  001BD6  EFEF  F00D         	goto	u840
  2818  001BDA                     u841:
  2819  001BDA  EFE4  F00D         	goto	l1916
  2820  001BDE                     u840:
  2821  001BDE                     l1920:
  2822  001BDE  90D8               	bcf	status,0,c
  2823  001BE0  362D               	rlcf	___awdiv@quotient^0,f,c
  2824  001BE2  362E               	rlcf	(___awdiv@quotient+1)^0,f,c
  2825  001BE4  5029               	movf	___awdiv@divisor^0,w,c
  2826  001BE6  5C27               	subwf	___awdiv@dividend^0,w,c
  2827  001BE8  502A               	movf	(___awdiv@divisor+1)^0,w,c
  2828  001BEA  5828               	subwfb	(___awdiv@dividend+1)^0,w,c
  2829  001BEC  A0D8               	btfss	status,0,c
  2830  001BEE  EFFB  F00D         	goto	u851
  2831  001BF2  EFFD  F00D         	goto	u850
  2832  001BF6                     u851:
  2833  001BF6  EF02  F00E         	goto	l1928
  2834  001BFA                     u850:
  2835  001BFA  5029               	movf	___awdiv@divisor^0,w,c
  2836  001BFC  5E27               	subwf	___awdiv@dividend^0,f,c
  2837  001BFE  502A               	movf	(___awdiv@divisor+1)^0,w,c
  2838  001C00  5A28               	subwfb	(___awdiv@dividend+1)^0,f,c
  2839  001C02  802D               	bsf	___awdiv@quotient^0,0,c
  2840  001C04                     l1928:
  2841  001C04  90D8               	bcf	status,0,c
  2842  001C06  322A               	rrcf	(___awdiv@divisor+1)^0,f,c
  2843  001C08  3229               	rrcf	___awdiv@divisor^0,f,c
  2844  001C0A  2E2B               	decfsz	___awdiv@counter^0,f,c
  2845  001C0C  EFEF  F00D         	goto	l1920
  2846  001C10                     l1932:
  2847  001C10  502C               	movf	___awdiv@sign^0,w,c
  2848  001C12  B4D8               	btfsc	status,2,c
  2849  001C14  EF0E  F00E         	goto	u861
  2850  001C18  EF10  F00E         	goto	u860
  2851  001C1C                     u861:
  2852  001C1C  EF14  F00E         	goto	l1936
  2853  001C20                     u860:
  2854  001C20  6C2D               	negf	___awdiv@quotient^0,c
  2855  001C22  1E2E               	comf	(___awdiv@quotient+1)^0,f,c
  2856  001C24  B0D8               	btfsc	status,0,c
  2857  001C26  2A2E               	incf	(___awdiv@quotient+1)^0,f,c
  2858  001C28                     l1936:
  2859  001C28  C02D  F027         	movff	___awdiv@quotient,?___awdiv
  2860  001C2C  C02E  F028         	movff	___awdiv@quotient+1,?___awdiv+1
  2861  001C30  0012               	return		;funcret
  2862  001C32                     __end_of___awdiv:
  2863                           	opt callstack 0
  2864                           
  2865 ;; *************** function _LCDPutStr *****************
  2866 ;; Defined at:
  2867 ;;		line 198 in file "BBSPI_LCD.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  2870 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  2871 ;;		 -> STR_1(17), 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;Total ram usage:        2 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    6
  2890 ;; This function calls:
  2891 ;;		_LCDPutChar
  2892 ;; This function is called by:
  2893 ;;		_displayClock
  2894 ;;		_displayModify
  2895 ;;		_displayStpWatch
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text13
  2900  00200E                     __ptext13:
  2901                           	opt callstack 0
  2902  00200E                     _LCDPutStr:
  2903                           	opt callstack 23
  2904  00200E                     
  2905                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  2906  00200E  EF15  F010         	goto	l1894
  2907  002012                     l1890:
  2908  002012  C02E  FFF6         	movff	LCDPutStr@ptr,tblptrl
  2909  002016  C02F  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  2910  00201A                     	if	0	;tblptru may be non-zero
  2911  00201A                     	endif
  2912  00201A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2913  00201A  0E00               	movlw	low (__mediumconst shr (0+16))
  2914  00201C  6EF8               	movwf	tblptru,c
  2915  00201E                     	endif
  2916  00201E  0008               	tblrd		*
  2917  002020  50F5               	movf	tablat,w,c
  2918  002022  EC59  F00F         	call	_LCDPutChar
  2919  002026  4A2E               	infsnz	LCDPutStr@ptr^0,f,c
  2920  002028  2A2F               	incf	(LCDPutStr@ptr+1)^0,f,c
  2921  00202A                     l1894:
  2922  00202A  C02E  FFF6         	movff	LCDPutStr@ptr,tblptrl
  2923  00202E  C02F  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  2924  002032                     	if	0	;tblptru may be non-zero
  2925  002032                     	endif
  2926  002032                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2927  002032  0E00               	movlw	low (__mediumconst shr (0+16))
  2928  002034  6EF8               	movwf	tblptru,c
  2929  002036                     	endif
  2930  002036  0008               	tblrd		*
  2931  002038  50F5               	movf	tablat,w,c
  2932  00203A  0900               	iorlw	0
  2933  00203C  A4D8               	btfss	status,2,c
  2934  00203E  EF23  F010         	goto	u801
  2935  002042  EF25  F010         	goto	u800
  2936  002046                     u801:
  2937  002046  EF09  F010         	goto	l1890
  2938  00204A                     u800:
  2939  00204A  0012               	return		;funcret
  2940  00204C                     __end_of_LCDPutStr:
  2941                           	opt callstack 0
  2942                           
  2943 ;; *************** function _LCDPutChar *****************
  2944 ;; Defined at:
  2945 ;;		line 160 in file "BBSPI_LCD.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  ch              1    wreg     unsigned char 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  ch              1   14[COMRAM] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;Total ram usage:        2 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    5
  2966 ;; This function calls:
  2967 ;;		_WritePort_BBSPI
  2968 ;; This function is called by:
  2969 ;;		_LCDPutStr
  2970 ;;		_displayClock
  2971 ;;		_displayModify
  2972 ;;		_displayStpWatch
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text14
  2977  001EB2                     __ptext14:
  2978                           	opt callstack 0
  2979  001EB2                     _LCDPutChar:
  2980                           	opt callstack 23
  2981                           
  2982                           ;incstack = 0
  2983                           ;LCDPutChar@ch stored from wreg
  2984  001EB2  6E2D               	movwf	LCDPutChar@ch^0,c
  2985  001EB4                     
  2986                           ;BBSPI_LCD.c: 160: void LCDPutChar (unsigned char ch);BBSPI_LCD.c: 161: {;BBSPI_LCD.c: 1
      +                          62:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2987  001EB4  0E11               	movlw	17
  2988  001EB6  6E2C               	movwf	??_LCDPutChar^0,c
  2989  001EB8  0E3A               	movlw	58
  2990  001EBA                     u1107:
  2991  001EBA  2EE8               	decfsz	wreg,f,c
  2992  001EBC  D7FE               	bra	u1107
  2993  001EBE  2E2C               	decfsz	??_LCDPutChar^0,f,c
  2994  001EC0  D7FC               	bra	u1107
  2995  001EC2  D000               	nop2	
  2996  001EC4                     
  2997                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  2998  001EC4  0E80               	movlw	128
  2999  001EC6  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3000  001EC8  0E12               	movlw	18
  3001  001ECA  EC6D  F010         	call	_WritePort_BBSPI
  3002  001ECE                     
  3003                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3004  001ECE  0E04               	movlw	4
  3005  001ED0  6E2C               	movwf	??_LCDPutChar^0,c
  3006  001ED2  0E3E               	movlw	62
  3007  001ED4                     u1117:
  3008  001ED4  2EE8               	decfsz	wreg,f,c
  3009  001ED6  D7FE               	bra	u1117
  3010  001ED8  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3011  001EDA  D7FC               	bra	u1117
  3012  001EDC                     
  3013                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3014  001EDC  C02D  F02A         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3015  001EE0  0E13               	movlw	19
  3016  001EE2  EC6D  F010         	call	_WritePort_BBSPI
  3017  001EE6                     
  3018                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3019  001EE6  0E04               	movlw	4
  3020  001EE8  6E2C               	movwf	??_LCDPutChar^0,c
  3021  001EEA  0E3E               	movlw	62
  3022  001EEC                     u1127:
  3023  001EEC  2EE8               	decfsz	wreg,f,c
  3024  001EEE  D7FE               	bra	u1127
  3025  001EF0  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3026  001EF2  D7FC               	bra	u1127
  3027  001EF4                     
  3028                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3029  001EF4  0EC0               	movlw	192
  3030  001EF6  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3031  001EF8  0E12               	movlw	18
  3032  001EFA  EC6D  F010         	call	_WritePort_BBSPI
  3033  001EFE                     
  3034                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3035  001EFE  0E04               	movlw	4
  3036  001F00  6E2C               	movwf	??_LCDPutChar^0,c
  3037  001F02  0E3E               	movlw	62
  3038  001F04                     u1137:
  3039  001F04  2EE8               	decfsz	wreg,f,c
  3040  001F06  D7FE               	bra	u1137
  3041  001F08  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3042  001F0A  D7FC               	bra	u1137
  3043  001F0C                     
  3044                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3045  001F0C  0E00               	movlw	0
  3046  001F0E  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3047  001F10  0E12               	movlw	18
  3048  001F12  EC6D  F010         	call	_WritePort_BBSPI
  3049  001F16  0012               	return		;funcret
  3050  001F18                     __end_of_LCDPutChar:
  3051                           	opt callstack 0
  3052                           
  3053 ;; *************** function _LCDPutInst *****************
  3054 ;; Defined at:
  3055 ;;		line 179 in file "BBSPI_LCD.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  ch              1    wreg     unsigned char 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  ch              1   14[COMRAM] unsigned char 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  1    wreg      void 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;Total ram usage:        2 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    5
  3076 ;; This function calls:
  3077 ;;		_WritePort_BBSPI
  3078 ;; This function is called by:
  3079 ;;		_displayClock
  3080 ;;		_displayModify
  3081 ;;		_displayStpWatch
  3082 ;;		_LCDInit
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text15
  3087  001F18                     __ptext15:
  3088                           	opt callstack 0
  3089  001F18                     _LCDPutInst:
  3090                           	opt callstack 24
  3091                           
  3092                           ;incstack = 0
  3093                           ;LCDPutInst@ch stored from wreg
  3094  001F18  6E2D               	movwf	LCDPutInst@ch^0,c
  3095  001F1A                     
  3096                           ;BBSPI_LCD.c: 179: void LCDPutInst (unsigned char ch);BBSPI_LCD.c: 180: {;BBSPI_LCD.c: 1
      +                          81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3097  001F1A  0E11               	movlw	17
  3098  001F1C  6E2C               	movwf	??_LCDPutInst^0,c
  3099  001F1E  0E3A               	movlw	58
  3100  001F20                     u1147:
  3101  001F20  2EE8               	decfsz	wreg,f,c
  3102  001F22  D7FE               	bra	u1147
  3103  001F24  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3104  001F26  D7FC               	bra	u1147
  3105  001F28  D000               	nop2	
  3106  001F2A                     
  3107                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3108  001F2A  0E00               	movlw	0
  3109  001F2C  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3110  001F2E  0E12               	movlw	18
  3111  001F30  EC6D  F010         	call	_WritePort_BBSPI
  3112  001F34                     
  3113                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3114  001F34  0E04               	movlw	4
  3115  001F36  6E2C               	movwf	??_LCDPutInst^0,c
  3116  001F38  0E3E               	movlw	62
  3117  001F3A                     u1157:
  3118  001F3A  2EE8               	decfsz	wreg,f,c
  3119  001F3C  D7FE               	bra	u1157
  3120  001F3E  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3121  001F40  D7FC               	bra	u1157
  3122  001F42                     
  3123                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3124  001F42  C02D  F02A         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3125  001F46  0E13               	movlw	19
  3126  001F48  EC6D  F010         	call	_WritePort_BBSPI
  3127  001F4C                     
  3128                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3129  001F4C  0E04               	movlw	4
  3130  001F4E  6E2C               	movwf	??_LCDPutInst^0,c
  3131  001F50  0E3E               	movlw	62
  3132  001F52                     u1167:
  3133  001F52  2EE8               	decfsz	wreg,f,c
  3134  001F54  D7FE               	bra	u1167
  3135  001F56  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3136  001F58  D7FC               	bra	u1167
  3137  001F5A                     
  3138                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3139  001F5A  0E40               	movlw	64
  3140  001F5C  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3141  001F5E  0E12               	movlw	18
  3142  001F60  EC6D  F010         	call	_WritePort_BBSPI
  3143  001F64                     
  3144                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3145  001F64  0E04               	movlw	4
  3146  001F66  6E2C               	movwf	??_LCDPutInst^0,c
  3147  001F68  0E3E               	movlw	62
  3148  001F6A                     u1177:
  3149  001F6A  2EE8               	decfsz	wreg,f,c
  3150  001F6C  D7FE               	bra	u1177
  3151  001F6E  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3152  001F70  D7FC               	bra	u1177
  3153  001F72                     
  3154                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3155  001F72  0E00               	movlw	0
  3156  001F74  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3157  001F76  0E12               	movlw	18
  3158  001F78  EC6D  F010         	call	_WritePort_BBSPI
  3159  001F7C  0012               	return		;funcret
  3160  001F7E                     __end_of_LCDPutInst:
  3161                           	opt callstack 0
  3162                           
  3163 ;; *************** function _WritePort_BBSPI *****************
  3164 ;; Defined at:
  3165 ;;		line 144 in file "BBSPI_LCD.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  port_add        1    wreg     unsigned char 
  3168 ;;  a               1   11[COMRAM] unsigned char 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  port_add        1   12[COMRAM] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3180 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;Total ram usage:        2 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    4
  3187 ;; This function calls:
  3188 ;;		_SendByteBBSPI
  3189 ;; This function is called by:
  3190 ;;		_LCDPutChar
  3191 ;;		_LCDPutInst
  3192 ;;		_LCDInit
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text16
  3197  0020DA                     __ptext16:
  3198                           	opt callstack 0
  3199  0020DA                     _WritePort_BBSPI:
  3200                           	opt callstack 23
  3201                           
  3202                           ;incstack = 0
  3203                           ;WritePort_BBSPI@port_add stored from wreg
  3204  0020DA  6E2B               	movwf	WritePort_BBSPI@port_add^0,c
  3205  0020DC                     
  3206                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3207  0020DC  9489               	bcf	137,2,c	;volatile
  3208  0020DE                     
  3209                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3210  0020DE  0E40               	movlw	64
  3211  0020E0  EC21  F00F         	call	_SendByteBBSPI
  3212                           
  3213                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3214  0020E4  502B               	movf	WritePort_BBSPI@port_add^0,w,c
  3215  0020E6  EC21  F00F         	call	_SendByteBBSPI
  3216                           
  3217                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3218  0020EA  502A               	movf	WritePort_BBSPI@a^0,w,c
  3219  0020EC  EC21  F00F         	call	_SendByteBBSPI
  3220  0020F0                     
  3221                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3222  0020F0  8489               	bsf	137,2,c	;volatile
  3223  0020F2  0012               	return		;funcret
  3224  0020F4                     __end_of_WritePort_BBSPI:
  3225                           	opt callstack 0
  3226                           
  3227 ;; *************** function _SendByteBBSPI *****************
  3228 ;; Defined at:
  3229 ;;		line 91 in file "BBSPI_LCD.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  output          1    wreg     unsigned char 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  output          1    8[COMRAM] unsigned char 
  3234 ;;  input           1   10[COMRAM] unsigned char 
  3235 ;;  bitcount        1    9[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;Total ram usage:        3 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    3
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_WritePort_BBSPI
  3256 ;;		_Port_BBSPIInit
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text17
  3261  001E42                     __ptext17:
  3262                           	opt callstack 0
  3263  001E42                     _SendByteBBSPI:
  3264                           	opt callstack 23
  3265                           
  3266                           ;incstack = 0
  3267                           ;SendByteBBSPI@output stored from wreg
  3268  001E42  6E27               	movwf	SendByteBBSPI@output^0,c
  3269  001E44                     
  3270                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3271  001E44  C027  F029         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3272  001E48                     
  3273                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3274  001E48  0E00               	movlw	0
  3275  001E4A  6E28               	movwf	SendByteBBSPI@bitcount^0,c
  3276  001E4C                     l186:
  3277                           
  3278                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3279  001E4C  AE27               	btfss	SendByteBBSPI@output^0,7,c
  3280  001E4E  EF2B  F00F         	goto	u11
  3281  001E52  EF2D  F00F         	goto	u10
  3282  001E56                     u11:
  3283  001E56  EF30  F00F         	goto	l188
  3284  001E5A                     u10:
  3285  001E5A                     
  3286                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3287  001E5A  8A8B               	bsf	139,5,c	;volatile
  3288  001E5C  EF31  F00F         	goto	l189
  3289  001E60                     l188:
  3290                           
  3291                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3292  001E60  9A8B               	bcf	139,5,c	;volatile
  3293  001E62                     l189:
  3294                           
  3295                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3296  001E62  A88B               	btfss	139,4,c	;volatile
  3297  001E64  EF36  F00F         	goto	u21
  3298  001E68  EF38  F00F         	goto	u20
  3299  001E6C                     u21:
  3300  001E6C  EF3C  F00F         	goto	l1146
  3301  001E70                     u20:
  3302  001E70                     
  3303                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3304  001E70  80D8               	bsf	status,0,c
  3305  001E72  3629               	rlcf	SendByteBBSPI@input^0,f,c
  3306  001E74  EF3F  F00F         	goto	l1148
  3307  001E78                     l1146:
  3308                           
  3309                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3310  001E78  5029               	movf	SendByteBBSPI@input^0,w,c
  3311  001E7A  2429               	addwf	SendByteBBSPI@input^0,w,c
  3312  001E7C  6E29               	movwf	SendByteBBSPI@input^0,c
  3313  001E7E                     l1148:
  3314                           
  3315                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3316  001E7E  868B               	bsf	139,3,c	;volatile
  3317  001E80                     
  3318                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3319  001E80  F000               	nop	
  3320  001E82  F000               	nop	
  3321  001E84  F000               	nop	
  3322  001E86  F000               	nop	
  3323  001E88  F000               	nop	
  3324  001E8A  F000               	nop	
  3325  001E8C                     
  3326                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3327  001E8C  F000               	nop	
  3328  001E8E  F000               	nop	
  3329  001E90  F000               	nop	
  3330  001E92  F000               	nop	
  3331  001E94  F000               	nop	
  3332  001E96  F000               	nop	
  3333  001E98                     
  3334                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3335  001E98  968B               	bcf	139,3,c	;volatile
  3336                           
  3337                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3338  001E9A  90D8               	bcf	status,0,c
  3339  001E9C  3627               	rlcf	SendByteBBSPI@output^0,f,c
  3340  001E9E                     
  3341                           ;BBSPI_LCD.c: 113:     }
  3342  001E9E  2A28               	incf	SendByteBBSPI@bitcount^0,f,c
  3343  001EA0  0E07               	movlw	7
  3344  001EA2  6428               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3345  001EA4  EF56  F00F         	goto	u31
  3346  001EA8  EF58  F00F         	goto	u30
  3347  001EAC                     u31:
  3348  001EAC  EF26  F00F         	goto	l186
  3349  001EB0                     u30:
  3350  001EB0  0012               	return		;funcret
  3351  001EB2                     __end_of_SendByteBBSPI:
  3352                           	opt callstack 0
  3353                           
  3354 ;; *************** function _buttonInitialize *****************
  3355 ;; Defined at:
  3356 ;;		line 19 in file "system.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;Total ram usage:        0 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    3
  3377 ;; This function calls:
  3378 ;;		Nothing
  3379 ;; This function is called by:
  3380 ;;		_main
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text18
  3385  0020FE                     __ptext18:
  3386                           	opt callstack 0
  3387  0020FE                     _buttonInitialize:
  3388                           	opt callstack 27
  3389  0020FE                     
  3390                           ;system.c: 20:     TRISAbits.TRISA5 = 1;
  3391  0020FE  8A92               	bsf	146,5,c	;volatile
  3392                           
  3393                           ;system.c: 21:     TRISBbits.TRISB0 = 1;
  3394  002100  8093               	bsf	147,0,c	;volatile
  3395  002102                     
  3396                           ;system.c: 22:     ADCON1 = 0b00001111;
  3397  002102  0E0F               	movlw	15
  3398  002104  6EC1               	movwf	193,c	;volatile
  3399  002106  0012               	return		;funcret
  3400  002108                     __end_of_buttonInitialize:
  3401                           	opt callstack 0
  3402                           
  3403 ;; *************** function _deviceInterrupt *****************
  3404 ;; Defined at:
  3405 ;;		line 3 in file "interrupt.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;Total ram usage:        0 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    2
  3426 ;; This function calls:
  3427 ;;		_button
  3428 ;; This function is called by:
  3429 ;;		Interrupt level 2
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	intcode
  3434  000008                     __pintcode:
  3435                           	opt callstack 0
  3436  000008                     _deviceInterrupt:
  3437                           	opt callstack 23
  3438                           
  3439                           ;incstack = 0
  3440  000008  823B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3441  00000A  ED26  F010         	call	int_func,f	;refresh shadow registers
  3442                           
  3443                           	psect	intcode_body
  3444  00204C                     __pintcode_body:
  3445                           	opt callstack 23
  3446  00204C                     int_func:
  3447                           	opt callstack 23
  3448  00204C  0006               	pop		; remove dummy address from shadow register refresh
  3449  00204E                     
  3450                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  3451  00204E  A4F2               	btfss	242,2,c	;volatile
  3452  002050  EF2C  F010         	goto	i2u108_41
  3453  002054  EF2E  F010         	goto	i2u108_40
  3454  002058                     i2u108_41:
  3455  002058  EF42  F010         	goto	i2l248
  3456  00205C                     i2u108_40:
  3457  00205C  AAF2               	btfss	242,5,c	;volatile
  3458  00205E  EF33  F010         	goto	i2u109_41
  3459  002062  EF35  F010         	goto	i2u109_40
  3460  002066                     i2u109_41:
  3461  002066  EF42  F010         	goto	i2l248
  3462  00206A                     i2u109_40:
  3463  00206A                     
  3464                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  3465  00206A  94F2               	bcf	242,2,c	;volatile
  3466  00206C                     
  3467                           ;interrupt.c: 7:         TMR0H = (timer0ReloadVal << 16);
  3468  00206C  0E00               	movlw	0
  3469  00206E  6ED7               	movwf	215,c	;volatile
  3470  002070                     
  3471                           ;interrupt.c: 8:         TMR0L = (uint8_t)timer0ReloadVal;
  3472  002070  C038  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  3473  002074                     
  3474                           ;interrupt.c: 9:         count10ms++;
  3475  002074  4A13               	infsnz	_count10ms^0,f,c
  3476  002076  2A14               	incf	(_count10ms+1)^0,f,c
  3477  002078                     
  3478                           ;interrupt.c: 10:         timerFlag = 1;
  3479  002078  0E00               	movlw	0
  3480  00207A  6E12               	movwf	(_timerFlag+1)^0,c
  3481  00207C  0E01               	movlw	1
  3482  00207E  6E11               	movwf	_timerFlag^0,c
  3483  002080                     
  3484                           ;interrupt.c: 11:         button();
  3485  002080  EC19  F00E         	call	_button	;wreg free
  3486  002084                     i2l248:
  3487  002084  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3488  002086  0011               	retfie		f
  3489  002088                     __end_of_deviceInterrupt:
  3490                           	opt callstack 0
  3491                           
  3492 ;; *************** function _button *****************
  3493 ;; Defined at:
  3494 ;;		line 27 in file "button.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  checkRB0        2    6[COMRAM] int 
  3499 ;;  checkRA5        2    4[COMRAM] int 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:        4 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    1
  3516 ;; This function calls:
  3517 ;;		_readRA5Button
  3518 ;;		_readRB0Button
  3519 ;; This function is called by:
  3520 ;;		_deviceInterrupt
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text20
  3525  001C32                     __ptext20:
  3526                           	opt callstack 0
  3527  001C32                     _button:
  3528                           	opt callstack 23
  3529  001C32                     
  3530                           ;button.c: 28:     int checkRA5 = readRA5Button();
  3531  001C32  ECE3  F00F         	call	_readRA5Button	;wreg free
  3532  001C36  C01F  F023         	movff	?_readRA5Button,button@checkRA5
  3533  001C3A  C020  F024         	movff	?_readRA5Button+1,button@checkRA5+1
  3534                           
  3535                           ;button.c: 29:     int checkRB0 = readRB0Button();
  3536  001C3E  ECBF  F00F         	call	_readRB0Button	;wreg free
  3537  001C42  C01F  F025         	movff	?_readRB0Button,button@checkRB0
  3538  001C46  C020  F026         	movff	?_readRB0Button+1,button@checkRB0+1
  3539  001C4A                     
  3540                           ;button.c: 30:     if (checkRA5 == 1) {
  3541  001C4A  0423               	decf	button@checkRA5^0,w,c
  3542  001C4C  1024               	iorwf	(button@checkRA5+1)^0,w,c
  3543  001C4E  A4D8               	btfss	status,2,c
  3544  001C50  EF2C  F00E         	goto	i2u99_41
  3545  001C54  EF2E  F00E         	goto	i2u99_40
  3546  001C58                     i2u99_41:
  3547  001C58  EF34  F00E         	goto	i2l2120
  3548  001C5C                     i2u99_40:
  3549  001C5C                     
  3550                           ;button.c: 31:         changeModePressed = 1;
  3551  001C5C  0E00               	movlw	0
  3552  001C5E  6E18               	movwf	(_changeModePressed+1)^0,c
  3553  001C60  0E01               	movlw	1
  3554  001C62  6E17               	movwf	_changeModePressed^0,c
  3555                           
  3556                           ;button.c: 32:     }
  3557  001C64  EF79  F00E         	goto	i2l153
  3558  001C68                     i2l2120:
  3559  001C68  0425               	decf	button@checkRB0^0,w,c
  3560  001C6A  1026               	iorwf	(button@checkRB0+1)^0,w,c
  3561  001C6C  A4D8               	btfss	status,2,c
  3562  001C6E  EF3B  F00E         	goto	i2u100_41
  3563  001C72  EF3D  F00E         	goto	i2u100_40
  3564  001C76                     i2u100_41:
  3565  001C76  EF67  F00E         	goto	i2l2132
  3566  001C7A                     i2u100_40:
  3567  001C7A                     
  3568                           ;button.c: 34:         countPressed++;
  3569  001C7A  4A1B               	infsnz	_countPressed^0,f,c
  3570  001C7C  2A1C               	incf	(_countPressed+1)^0,f,c
  3571  001C7E                     
  3572                           ;button.c: 35:         if (countPressed >= 100) {
  3573  001C7E  BE1C               	btfsc	(_countPressed+1)^0,7,c
  3574  001C80  EF4B  F00E         	goto	i2u101_41
  3575  001C84  501C               	movf	(_countPressed+1)^0,w,c
  3576  001C86  E109               	bnz	i2u101_40
  3577  001C88  0E64               	movlw	100
  3578  001C8A  5C1B               	subwf	_countPressed^0,w,c
  3579  001C8C  A0D8               	btfss	status,0,c
  3580  001C8E  EF4B  F00E         	goto	i2u101_41
  3581  001C92  EF4D  F00E         	goto	i2u101_40
  3582  001C96                     i2u101_41:
  3583  001C96  EF79  F00E         	goto	i2l153
  3584  001C9A                     i2u101_40:
  3585  001C9A                     
  3586                           ;button.c: 36:             countAuto++;
  3587  001C9A  4A19               	infsnz	_countAuto^0,f,c
  3588  001C9C  2A1A               	incf	(_countAuto+1)^0,f,c
  3589  001C9E                     
  3590                           ;button.c: 37:             if (countAuto > 20) {
  3591  001C9E  BE1A               	btfsc	(_countAuto+1)^0,7,c
  3592  001CA0  EF5B  F00E         	goto	i2u102_41
  3593  001CA4  501A               	movf	(_countAuto+1)^0,w,c
  3594  001CA6  E109               	bnz	i2u102_40
  3595  001CA8  0E15               	movlw	21
  3596  001CAA  5C19               	subwf	_countAuto^0,w,c
  3597  001CAC  A0D8               	btfss	status,0,c
  3598  001CAE  EF5B  F00E         	goto	i2u102_41
  3599  001CB2  EF5D  F00E         	goto	i2u102_40
  3600  001CB6                     i2u102_41:
  3601  001CB6  EF79  F00E         	goto	i2l152
  3602  001CBA                     i2u102_40:
  3603  001CBA                     
  3604                           ;button.c: 38:                 increaseTime = 1;
  3605  001CBA  0E00               	movlw	0
  3606  001CBC  6E16               	movwf	(_increaseTime+1)^0,c
  3607  001CBE  0E01               	movlw	1
  3608  001CC0  6E15               	movwf	_increaseTime^0,c
  3609                           
  3610                           ;button.c: 39:                 countAuto = 0;
  3611  001CC2  0E00               	movlw	0
  3612  001CC4  6E1A               	movwf	(_countAuto+1)^0,c
  3613  001CC6  0E00               	movlw	0
  3614  001CC8  6E19               	movwf	_countAuto^0,c
  3615  001CCA  EF79  F00E         	goto	i2l153
  3616  001CCE                     i2l2132:
  3617                           
  3618                           ;button.c: 44:         countPressed = 0;
  3619  001CCE  0E00               	movlw	0
  3620  001CD0  6E1C               	movwf	(_countPressed+1)^0,c
  3621  001CD2  0E00               	movlw	0
  3622  001CD4  6E1B               	movwf	_countPressed^0,c
  3623                           
  3624                           ;button.c: 45:         countAuto = 0;
  3625  001CD6  0E00               	movlw	0
  3626  001CD8  6E1A               	movwf	(_countAuto+1)^0,c
  3627  001CDA  0E00               	movlw	0
  3628  001CDC  6E19               	movwf	_countAuto^0,c
  3629                           
  3630                           ;button.c: 46:         changeModePressed = 0;
  3631  001CDE  0E00               	movlw	0
  3632  001CE0  6E18               	movwf	(_changeModePressed+1)^0,c
  3633  001CE2  0E00               	movlw	0
  3634  001CE4  6E17               	movwf	_changeModePressed^0,c
  3635                           
  3636                           ;button.c: 47:         increaseTime = 0;
  3637  001CE6  0E00               	movlw	0
  3638  001CE8  6E16               	movwf	(_increaseTime+1)^0,c
  3639  001CEA  0E00               	movlw	0
  3640  001CEC  6E15               	movwf	_increaseTime^0,c
  3641  001CEE  EF79  F00E         	goto	i2l153
  3642  001CF2                     i2l152:
  3643  001CF2                     i2l153:
  3644  001CF2  0012               	return		;funcret
  3645  001CF4                     __end_of_button:
  3646                           	opt callstack 0
  3647                           
  3648 ;; *************** function _readRB0Button *****************
  3649 ;; Defined at:
  3650 ;;		line 15 in file "button.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;  check           2    2[COMRAM] int 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  2    0[COMRAM] int 
  3657 ;; Registers used:
  3658 ;;		wreg, status,2, status,0
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3664 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;Total ram usage:        4 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; This function calls:
  3671 ;;		Nothing
  3672 ;; This function is called by:
  3673 ;;		_button
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           	psect	text21
  3678  001F7E                     __ptext21:
  3679                           	opt callstack 0
  3680  001F7E                     _readRB0Button:
  3681                           	opt callstack 23
  3682  001F7E                     
  3683                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  3684  001F7E  C034  F035         	movff	_secondReadRB0,_firstReadRB0
  3685  001F82                     
  3686                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  3687  001F82  0E00               	movlw	0
  3688  001F84  B081               	btfsc	129,0,c	;volatile
  3689  001F86  0E01               	movlw	1
  3690  001F88  6E34               	movwf	_secondReadRB0^0,c
  3691  001F8A                     
  3692                           ;button.c: 18:     int check = 0;
  3693  001F8A  0E00               	movlw	0
  3694  001F8C  6E22               	movwf	(readRB0Button@check+1)^0,c
  3695  001F8E  0E00               	movlw	0
  3696  001F90  6E21               	movwf	readRB0Button@check^0,c
  3697  001F92                     
  3698                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  3699  001F92  5034               	movf	_secondReadRB0^0,w,c
  3700  001F94  1835               	xorwf	_firstReadRB0^0,w,c
  3701  001F96  A4D8               	btfss	status,2,c
  3702  001F98  EFD0  F00F         	goto	i2u78_41
  3703  001F9C  EFD2  F00F         	goto	i2u78_40
  3704  001FA0                     i2u78_41:
  3705  001FA0  EFDE  F00F         	goto	i2l1868
  3706  001FA4                     i2u78_40:
  3707  001FA4                     
  3708                           ;button.c: 20:         if (firstReadRB0 == 0) {
  3709  001FA4  5035               	movf	_firstReadRB0^0,w,c
  3710  001FA6  A4D8               	btfss	status,2,c
  3711  001FA8  EFD8  F00F         	goto	i2u79_41
  3712  001FAC  EFDA  F00F         	goto	i2u79_40
  3713  001FB0                     i2u79_41:
  3714  001FB0  EFDE  F00F         	goto	i2l1868
  3715  001FB4                     i2u79_40:
  3716  001FB4                     
  3717                           ;button.c: 21:             check = 1;
  3718  001FB4  0E00               	movlw	0
  3719  001FB6  6E22               	movwf	(readRB0Button@check+1)^0,c
  3720  001FB8  0E01               	movlw	1
  3721  001FBA  6E21               	movwf	readRB0Button@check^0,c
  3722  001FBC                     i2l1868:
  3723                           
  3724                           ;button.c: 24:     return check;
  3725  001FBC  C021  F01F         	movff	readRB0Button@check,?_readRB0Button
  3726  001FC0  C022  F020         	movff	readRB0Button@check+1,?_readRB0Button+1
  3727  001FC4  0012               	return		;funcret
  3728  001FC6                     __end_of_readRB0Button:
  3729                           	opt callstack 0
  3730                           
  3731 ;; *************** function _readRA5Button *****************
  3732 ;; Defined at:
  3733 ;;		line 3 in file "button.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  check           2    2[COMRAM] int 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  2    0[COMRAM] int 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:        4 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_button
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text22
  3761  001FC6                     __ptext22:
  3762                           	opt callstack 0
  3763  001FC6                     _readRA5Button:
  3764                           	opt callstack 23
  3765  001FC6                     
  3766                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  3767  001FC6  C036  F037         	movff	_secondReadRA5,_firstReadRA5
  3768  001FCA                     
  3769                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  3770  001FCA  0E00               	movlw	0
  3771  001FCC  BA80               	btfsc	128,5,c	;volatile
  3772  001FCE  0E01               	movlw	1
  3773  001FD0  6E36               	movwf	_secondReadRA5^0,c
  3774  001FD2                     
  3775                           ;button.c: 6:     int check = 0;
  3776  001FD2  0E00               	movlw	0
  3777  001FD4  6E22               	movwf	(readRA5Button@check+1)^0,c
  3778  001FD6  0E00               	movlw	0
  3779  001FD8  6E21               	movwf	readRA5Button@check^0,c
  3780  001FDA                     
  3781                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  3782  001FDA  5036               	movf	_secondReadRA5^0,w,c
  3783  001FDC  1837               	xorwf	_firstReadRA5^0,w,c
  3784  001FDE  A4D8               	btfss	status,2,c
  3785  001FE0  EFF4  F00F         	goto	i2u76_41
  3786  001FE4  EFF6  F00F         	goto	i2u76_40
  3787  001FE8                     i2u76_41:
  3788  001FE8  EF02  F010         	goto	i2l1852
  3789  001FEC                     i2u76_40:
  3790  001FEC                     
  3791                           ;button.c: 8:         if (firstReadRA5 == 0) {
  3792  001FEC  5037               	movf	_firstReadRA5^0,w,c
  3793  001FEE  A4D8               	btfss	status,2,c
  3794  001FF0  EFFC  F00F         	goto	i2u77_41
  3795  001FF4  EFFE  F00F         	goto	i2u77_40
  3796  001FF8                     i2u77_41:
  3797  001FF8  EF02  F010         	goto	i2l1852
  3798  001FFC                     i2u77_40:
  3799  001FFC                     
  3800                           ;button.c: 9:             check = 1;
  3801  001FFC  0E00               	movlw	0
  3802  001FFE  6E22               	movwf	(readRA5Button@check+1)^0,c
  3803  002000  0E01               	movlw	1
  3804  002002  6E21               	movwf	readRA5Button@check^0,c
  3805  002004                     i2l1852:
  3806                           
  3807                           ;button.c: 12:    return check;
  3808  002004  C021  F01F         	movff	readRA5Button@check,?_readRA5Button
  3809  002008  C022  F020         	movff	readRA5Button@check+1,?_readRA5Button+1
  3810  00200C  0012               	return		;funcret
  3811  00200E                     __end_of_readRA5Button:
  3812                           	opt callstack 0
  3813                           
  3814                           	psect	rparam
  3815  0000                     
  3816                           	psect	temp
  3817  00003B                     btemp:
  3818                           	opt callstack 0
  3819  00003B                     	ds	1
  3820  0000                     int$flags	set	btemp
  3821  0000                     wtemp8	set	btemp+1
  3822  0000                     ttemp5	set	btemp+1
  3823  0000                     ttemp6	set	btemp+4
  3824  0000                     ttemp7	set	btemp+8
  3825                           tosu	equ	0xFFF
  3826                           tosh	equ	0xFFE
  3827                           tosl	equ	0xFFD
  3828                           stkptr	equ	0xFFC
  3829                           pclatu	equ	0xFFB
  3830                           pclath	equ	0xFFA
  3831                           pcl	equ	0xFF9
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           indf0	equ	0xFEF
  3839                           postinc0	equ	0xFEE
  3840                           postdec0	equ	0xFED
  3841                           preinc0	equ	0xFEC
  3842                           plusw0	equ	0xFEB
  3843                           fsr0h	equ	0xFEA
  3844                           fsr0l	equ	0xFE9
  3845                           wreg	equ	0xFE8
  3846                           indf1	equ	0xFE7
  3847                           postinc1	equ	0xFE6
  3848                           postdec1	equ	0xFE5
  3849                           preinc1	equ	0xFE4
  3850                           plusw1	equ	0xFE3
  3851                           fsr1h	equ	0xFE2
  3852                           fsr1l	equ	0xFE1
  3853                           bsr	equ	0xFE0
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           preinc2	equ	0xFDC
  3858                           plusw2	equ	0xFDB
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    0
    Data        4
    BSS         30
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModify
    _displayStpWatch->_LCDPutStr
    _displayModify->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   25671
                                             19 COMRAM     2     2      0
                   _buttonInitialize
                       _displayClock
                      _displayModify
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    8557
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModify                                        2     2      0    8557
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    8557
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2580
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModify
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      3A       1       61.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A      32        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Sep 22 00:18:33 2019

                   ?_LCDPutChar 001F                              l81 1540                              u10 1E5A  
                            u11 1E56                              u20 1E70                              u21 1E6C  
                            u30 1EB0                              u31 1EAC                    ___awdiv@sign 002C  
                   ?_LCDPutInst 001F                              _hr 000B                   ?_displayClock 001F  
               _timer0ReloadVal 0038           SendByteBBSPI@bitcount 0028                             l112 2106  
                           l201 1F16                             l210 204A                             l106 20FC  
                           l204 1F7C                             l109 20D8                             l407 140E  
                           l192 1EB0                             l352 18D2                             l186 1E4C  
                           l370 17A2                             l291 1E40                             l188 1E60  
                           l189 1E62                             l198 20F2                             l294 1B6C  
                           l454 19C8                             l455 19D0                             l705 1DA2  
                           l458 1A9E                             l388 1672                             l692 1C30  
                           u210 1DC0                             u211 1DBC                             u300 1844  
                           u220 1DE8                             u301 1840                             u221 1DE4  
                           u310 1856                             u230 1E10                             u311 1852  
                           u231 1E0C                             u320 186C                             u400 168A  
                           u240 1E38                             u321 1868                             u401 1686  
                           u241 1E34                             u330 18CA                             u250 17BA  
                           u410 16A4                             u331 18C6                             u251 17B6  
                           u411 16A0                             u260 17D4                             u420 16C2  
                           u500 1574                             u261 17D0                             u421 16BE  
                           u501 1570                             u270 17F2                             u430 16D4  
                           u510 1592                             u271 17EE                             u431 16D0  
                           u511 158E                             u280 1804                             u440 16F2  
                           u520 15A4                             u600 193E                             u281 1800  
                           u441 16EE                             u521 15A0                             u601 193A  
                           u290 1822                             u450 1714                             u530 15C2  
                           u610 1950                             u291 181E                             u451 1710  
                           u531 15BE                             u611 194C                             u460 1726  
                           u540 15E4                             u620 1970                             u461 1722  
                           u541 15E0                             u621 196C                             u470 173C  
                           u550 15F6                             u630 1998                             u471 1738  
                           u551 15F2                             u631 1994                             u800 204A  
                           u480 179A                             u560 160C                             u640 19C0  
                           u801 2046                             u481 1796                             u561 1608  
                           u641 19BC                             u810 1B80                             u570 166A  
                           u490 155A                             u811 1B7C                             u571 1666  
                           u491 1556                             u820 1B9A                             u900 1D58  
                           u580 18EE                             u821 1B96                             u901 1D54  
                           u581 18EA                             u830 1BC0                             u910 1D6E  
                           u590 1900                             u831 1BBC                             u911 1D6A  
                           u591 18FC                             u840 1BDE                             u920 1D92  
                           u841 1BDA                             u921 1D8E                             u850 1BFA  
                           u930 1086                             u851 1BF6                             u931 1082  
                           u860 1C20                             u940 1098                             u861 1C1C  
                           u941 1094                             u870 1D06                             u950 11F0  
                           u871 1D02                             u951 11EC                             u880 1D20  
                           u960 1202                             u881 1D1C                             u961 11FE  
                           u890 1D3A                             u970 135A                             u891 1D36  
                           u971 1356                             u980 136C                             u981 1368  
        __size_of_readRB0Button 0048                             _min 000D                             _sec 000F  
                           _run 0007         __end_of_displayStpWatch 1AA0                    ___awmod@sign 002C  
        __size_of_readRA5Button 0048                             wreg 000FE8                  ?_displayModify 001F  
                  __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000                            l2000 1048  
                          l2010 1098                            l2002 104E                            l2020 1116  
                          l2012 10A8                            l2004 105A                            l2100 1A06  
                          l1150 1E80                            l1142 1E5A                            l1134 1E44  
                          l2030 117A                            l2022 1132                            l2014 10E0  
                          l2006 1060                            l2110 1A66                            l2102 1A22  
                          l1160 1E8A                            l1152 1E82                            l1144 1E70  
                          l1136 1E48                            l2040 11CA                            l2032 1186  
                          l2024 1138                            l2008 1086                            l2016 10F4  
                          l2112 1A82                            l2104 1A28                            l1400 17D4  
                          l1170 1E94                            l1162 1E8C                            l1154 1E84  
                          l1146 1E78                            l2042 11F0                            l2050 125E  
                          l2034 118C                            l2026 1154                            l2018 10FA  
                          l2106 1A44                            l1410 1808                            l1402 17D8  
                          l1172 1E96                            l1164 1E8E                            l1156 1E86  
                          l1148 1E7E                            l2060 12B2                            l2052 1264  
                          l2044 1202                            l2036 11A8                            l2028 1174  
                          l2108 1A60                            l1420 185A                            l1412 1822  
                          l1404 17E0                            l1340 20BE                            l2140 1428  
                          l1174 1E98                            l1166 1E90                            l1158 1E88  
                          l2070 1312                            l2062 12B8                            l2054 1280  
                          l2046 1212                            l2038 11C4                            l1422 186C  
                          l1414 1832                            l1406 17F2                            l1430 18AE  
                          l1350 1DA4                            l1342 20C2                            l2150 1456  
                          l2142 142C                            l2134 1410                            l1176 1E9E  
                          l1168 1E92                            l2080 137C                            l2072 132E  
                          l2064 12D4                            l2056 12A0                            l2048 124A  
                          l1432 18CA                            l1424 1874                            l1416 1844  
                          l1408 1804                            l1600 15F6                            l1360 1DF0  
                          l1352 1DC0                            l1344 20CE                            l2160 1484  
                          l2152 145A                            l2144 1430                            l2136 141C  
                          l1346 20FE                            l1178 1EA0                            l2082 13B4  
                          l2074 1334                            l2066 12F0                            l2058 12A6  
                          l1418 1856                            l1602 15FA                            l1610 161C  
                          l1370 1E38                            l1362 1DF4                            l1354 1DC8  
                          l1338 20F4                            l2170 14C0                            l2162 1496  
                          l2154 146C                            l2146 1442                            l2138 1420  
                          l1348 2102                            l2260 13E0                            l2076 135A  
                          l2068 12F6                            l2092 19D2                            l1428 187C  
                          l1540 16A8                            l1532 1674                            l1604 160C  
                          l1612 164E                            l1364 1E10                            l1356 1DCC  
                          l1620 18D4                            l2252 1512                            l2172 14D0  
                          l2164 14A6                            l2156 147C                            l2148 1452  
                          l2078 136C                            l2086 13CC                            l2094 19D8  
                          l1550 16F2                            l1542 16B0                            l1534 1678  
                          l1614 166A                            l2254 1630                            l1606 1614  
                          l1366 1E18                            l1358 1DE8                            l1630 193E  
                          l1622 18EE                            l2174 14D8                            l2166 14AA  
                          l2158 1480                            l2182 14FE                            l2096 19E4  
                          l2256 1760                            l1560 173C                            l1552 1702  
                          l1544 16C2                            l1536 168A                            l1368 1E1C  
                          l1640 197C                            l1632 1950                            l1624 1900  
                          l2176 14DC                            l2168 14AE                            l2098 19EA  
                          l2258 1890                            l1394 17A4                            l1570 179A  
                          l1562 1744                            l1554 1714                            l1546 16D4  
                          l1538 16A4                            l1642 1998                            l1634 1954  
                          l1626 1918                            l2178 14EE                            l1820 20DE  
                          l1900 1B80                            l1396 17A8                            l1556 1726  
                          l1548 16D8                            l1580 155A                            l1644 19A0  
                          l1636 1970                            l1628 192C                            l1822 20F0  
                          l1830 1EDC                            l1910 1BA6                            l1902 1B88  
                          l1398 17BA                            l1558 172A                            l1566 174C  
                          l1590 15A4                            l1582 1574                            l1646 19A4  
                          l1638 1978                            l1832 1EE6                            l1824 1EB4  
                          l1920 1BDE                            l1912 1BAE                            l1904 1B8C  
                          l1568 177E                            l1592 15A8                            l1584 1578  
                          l1576 1544                            l1648 19C0                            l1818 20DC  
                          l1834 1EF4                            l1826 1EC4                            l1930 1C0A  
                          l1922 1BE4                            l1914 1BC0                            l1906 1B9A  
                          l1594 15C2                            l1586 1580                            l1578 1548  
                          l1836 1EFE                            l1828 1ECE                            l1924 1BFA  
                          l1916 1BC8                            l1932 1C10                            l1908 1BA2  
                          l1940 1CF4                            l1596 15D2                            l1588 1592  
                          l1838 1F0C                            l1934 1C20                            l1926 1C02  
                          l1918 1BD0                            l1950 1D20                            l1942 1CF8  
                          l1598 15E4                            l1880 1F4C                            l1872 1F1A  
                          l1936 1C28                            l1928 1C04                            l1960 1D58  
                          l1952 1D28                            l1944 1D06                            l1882 1F5A  
                          l1874 1F2A                            l1890 2012                            l1970 1D92  
                          l1962 1D6E                            l1954 1D3A                            l1946 1D0E  
                          l1884 1F64                            l1876 1F34                            l1892 2026  
                          l1972 1D9A                            l1964 1D76                            l1956 1D42  
                          l1948 1D12                            l1980 1AB2                            l1886 1F72  
                          l1878 1F42                            l1894 202A                            l1966 1D7C  
                          l1958 1D4A                            l1990 1B12                            l1982 1AB8  
                          l1888 200E                            l1896 1B6E                            l1968 1D82  
                          l1992 1B2E                            l1984 1AD4                            l1976 1AA0  
                          l1898 1B72                            l1994 1B34                            l1986 1AF0  
                          l1978 1AA6                            l1996 1B50                            l1988 1AF6  
                          l1998 1044                            STR_1 1012                            STR_2 1023  
                          STR_3 1033                            STR_4 1033                            STR_5 1001  
                          u1030 1442                            u1031 143E                            u1040 146C  
                          u1041 1468                            u1050 1496                            u1107 1EBA  
                          u1051 1492                            u1060 14C0                            u1117 1ED4  
                          u1061 14BC                            u1070 14EE                            u1127 1EEC  
                          u1071 14EA                            u1137 1F04                            u1147 1F20  
                          u1157 1F3A                            u1167 1F52                            u1177 1F6A  
                          _TMR0 000FD6                            _main 1410                            fsr1l 000FE1  
                          btemp 003B                ?_WritePort_BBSPI 002A                            start 000E  
            __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000               _changeModePressed 0017                 _deviceInterrupt 0008  
                ??_displayClock 0030                           ?_main 001F                 __end_of___awdiv 1C32  
               __end_of___awmod 1DA4                           _T0CON 000FD5                 ___awdiv@divisor 0029  
                         i2l144 1FC4                           i2l152 1CF2                           i2l153 1CF2  
                         i2l139 200C                           i2l248 2084                 ___awdiv@counter 002B  
                         _TMR0H 000FD7                           _TMR0L 000FD6                   __CFG_PWRT$OFF 000000  
                __CFG_FCMEN$OFF 000000                           _blink 0009                           _state 001E  
__size_of_oscillationInitialize 000A   __end_of_oscillationInitialize 20FE                  __CFG_BOREN$OFF 000000  
                         tablat 000FF5             __size_of_LCDPutChar 0066             __size_of_LCDPutInst 0066  
                         ttemp5 003C                           ttemp6 003F                           ttemp7 0043  
                         status 000FD8               ??_timerInitialize 0027                           wtemp8 003C  
                 _readRB0Button 1F7E                   _readRA5Button 1FC6                 __initialization 2088  
                  __end_of_main 1544                  __CFG_OSC$HSPLL 000000                          ??_main 0032  
                 __activetblptr 000003                    LCDPutChar@ch 002D               __end_of_LCDPutStr 204C  
               ??_displayModify 0030                ?_displayStpWatch 001F                          _ADCON1 000FC1  
              ___awdiv@dividend 0027                    LCDPutInst@ch 002D                          i2l2120 1C68  
                        i2l2130 1CBA                          i2l2122 1C7A                          i2l2114 1C32  
                        i2l2124 1C7E                          i2l2132 1CCE                          i2l2116 1C4A  
                        i2l2220 206A                          i2l2126 1C9A                          i2l2118 1C5C  
                        i2l2230 2080                          i2l2222 206C                          i2l2128 1C9E  
                        i2l2224 2070                          i2l2216 204E                          i2l2226 2074  
                        i2l2218 205C                          i2l2228 2078                          i2l1840 1FC6  
                        i2l1850 1FFC                          i2l1842 1FCA                          i2l1852 2004  
                        i2l1844 1FD2                          i2l1860 1F8A                          i2l1846 1FDA  
                        i2l1862 1F92                          i2l1848 1FEC                          i2l1864 1FA4  
                        i2l1856 1F7E                          i2l1866 1FB4                          i2l1858 1F82  
                        i2l1868 1FBC                          _OSCCON 000FD3                    LCDPutStr@ptr 002E  
                ?_readRB0Button 001F                  ?_readRA5Button 001F         __end_of_deviceInterrupt 2088  
                __CFG_XINST$OFF 000000                       ??___awdiv 002B                       ??___awmod 002B  
                        _minSTW 0005                          _secSTW 0003                          _button 1C32  
                        clear_0 20AE       __size_of_buttonInitialize 000A                ___awdiv@quotient 002D  
               ___awmod@divisor 0029                 ___awmod@counter 002B                __end_of_norClock 1E42  
                  __pdataCOMRAM 0034                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8            __end_of_displayClock 1B6E  
                    __accesstop 0060         __end_of__initialization 20B4                   ___rparam_used 000001  
        __size_of_SendByteBBSPI 0070                   ?_modifyMinute 001F                   ?_modifySecond 001F  
                __pcstackCOMRAM 001F                    ??_LCDPutChar 002C                    ??_LCDPutInst 002C  
               ??_readRB0Button 0021                 ??_readRA5Button 0021              __end_of_LCDPutChar 1F18  
                    __pnvCOMRAM 0038              __end_of_LCDPutInst 1F7E                ?_deviceInterrupt 001F  
                ??_modifyMinute 0027                  ??_modifySecond 0027                         ?_button 001F  
                 _SendByteBBSPI 1E42                 _timerInitialize 20BE                         _OSCTUNE 000F9B  
                       i2u76_40 1FEC                         i2u76_41 1FE8                         i2u77_40 1FFC  
                       i2u77_41 1FF8                         i2u78_40 1FA4                         i2u78_41 1FA0  
                       i2u79_40 1FB4                         i2u79_41 1FB0                         i2u99_40 1C5C  
                       i2u99_41 1C58              __size_of_stopWatch 00FE                WritePort_BBSPI@a 002A  
                     ?_norClock 001F                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 1B6E                         ___awmod 1CF4                      _miliSecSTW 0001  
      __size_of_WritePort_BBSPI 001A                    __psmallconst 1000                _buttonInitialize 20FE  
                       __pcinit 2088                 __size_of_button 00C2                         __ramtop 1000  
                       __ptext0 1410                         __ptext1 20BE                         __ptext2 18D4  
                       __ptext3 20F4                         __ptext4 1DA4                         __ptext5 1544  
                       __ptext6 1674                         __ptext7 17A4                         __ptext8 19D2  
                       __ptext9 1044                  ?_SendByteBBSPI 001F                ___awmod@dividend 0027  
                    _modifyHour 17A4           __size_of_displayClock 00CE                       _LCDPutStr 200E  
                __pintcode_body 204C            end_of_initialization 20B4                         int_func 204C  
         _oscillationInitialize 20F4                      ??_norClock 0027                         postdec1 000FE5  
                       postinc0 000FEE         __end_of_timerInitialize 20DA               __end_of_stopWatch 19D2  
                  _displayClock 1AA0                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _TRISAbits 000F92            __end_of_modifyMinute 17A4            __end_of_modifySecond 1674  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISFbits 000F97  
         __end_of_displayModify 1410                      ?_LCDPutStr 002E             SendByteBBSPI@output 0027  
      __size_of_displayStpWatch 00CE                   __pidataCOMRAM 2108                    _firstReadRB0 0035  
                  _firstReadRA5 0037                 ??_SendByteBBSPI 0027                   _secondReadRB0 0034  
                 _secondReadRA5 0036                  __end_of_button 1CF4               ??_WritePort_BBSPI 002B  
           start_initialization 2088                    _countPressed 001B                     ?_modifyHour 001F  
        ?_oscillationInitialize 001F                    _increaseTime 0015                        ??_button 0023  
              ?_timerInitialize 001F                     __pbssCOMRAM 0001              readRB0Button@check 0021  
                   ??_LCDPutStr 0030        __end_of_buttonInitialize 2108           __end_of_readRB0Button 1FC6  
         __end_of_readRA5Button 200E               ??_displayStpWatch 0030               __size_of_norClock 009E  
                     __pintcode 0008             __size_of_modifyHour 0130                  button@checkRB0 0025  
                button@checkRA5 0023                        ?___awdiv 0027                        ?___awmod 0027  
      __size_of_deviceInterrupt 2080           __size_of_modifyMinute 0130           __size_of_modifySecond 0130  
                     _count10ms 0013                     __smallconst 1000                       _countAuto 0019  
                      _LATAbits 000F89                        _LATCbits 000F8B                        _LATFbits 000F8E  
                      i2u100_40 1C7A                        i2u100_41 1C76                        i2u101_40 1C9A  
                      i2u101_41 1C96                        i2u102_40 1CBA                        i2u102_41 1CB6  
                      i2u108_40 205C                        i2u108_41 2058                        i2u109_40 206A  
                      i2u109_41 2066                    _modifyMinute 1674                    _modifySecond 1544  
                     _timerFlag 0011              SendByteBBSPI@input 0029                       _stopWatch 18D4  
                     copy_data0 209C                        __Hrparam 0000                        __Lrparam 0000  
               _WritePort_BBSPI 20DA                __size_of___awdiv 00C4                __size_of___awmod 00B0  
                    ?_stopWatch 001F               ??_deviceInterrupt 0027                    ??_modifyHour 0027  
            readRA5Button@check 0021                        __ptext10 1AA0                        __ptext11 1CF4  
                      __ptext20 1C32                        __ptext12 1B6E                        __ptext21 1F7E  
                      __ptext13 200E                        __ptext22 1FC6                        __ptext14 1EB2  
                      __ptext15 1F18         ??_oscillationInitialize 0027                        __ptext16 20DA  
                      __ptext17 1E42                        __ptext18 20FE                   __size_of_main 0134  
                      _norClock 1DA4                        _stModify 001D                        int$flags 003B  
        __size_of_displayModify 03CC              __end_of_modifyHour 18D4                      _LCDPutChar 1EB2  
                    _LCDPutInst 1F18           __end_of_SendByteBBSPI 1EB2                      _INTCONbits 000FF2  
               _displayStpWatch 19D2                        intlevel2 0000               ?_buttonInitialize 001F  
       __end_of_WritePort_BBSPI 20F4              ??_buttonInitialize 0027         WritePort_BBSPI@port_add 002B  
                   ??_stopWatch 0027        __size_of_timerInitialize 001C                   _displayModify 1044  
