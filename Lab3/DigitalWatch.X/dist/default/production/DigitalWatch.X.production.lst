

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Sep 22 17:55:44 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 2.10
    44                           ; Generated 31/07/2019 GMT
    45                           ; 
    46                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F8722 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  002198                     __pidataCOMRAM:
    80                           	opt callstack 0
    81                           
    82                           ;initializer for _secondReadRB0
    83  002198  01                 	db	1
    84                           
    85                           ;initializer for _firstReadRB0
    86  002199  01                 	db	1
    87                           
    88                           ;initializer for _secondReadRA5
    89  00219A  01                 	db	1
    90                           
    91                           ;initializer for _firstReadRA5
    92  00219B  01                 	db	1
    93                           
    94                           	psect	nvCOMRAM
    95  000038                     __pnvCOMRAM:
    96                           	opt callstack 0
    97  000038                     _timer0ReloadVal:
    98                           	opt callstack 0
    99  000038                     	ds	3
   100  0000                     _TMR0	set	4054
   101  0000                     _LATCbits	set	3979
   102  0000                     _LATAbits	set	3977
   103  0000                     _TRISCbits	set	3988
   104  0000                     _LATFbits	set	3982
   105  0000                     _TRISFbits	set	3991
   106  0000                     _PORTBbits	set	3969
   107  0000                     _PORTAbits	set	3968
   108  0000                     _ADCON1	set	4033
   109  0000                     _TRISBbits	set	3987
   110  0000                     _TRISAbits	set	3986
   111  0000                     _TMR0L	set	4054
   112  0000                     _TMR0H	set	4055
   113  0000                     _T0CON	set	4053
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCTUNE	set	3995
   116  0000                     _OSCCON	set	4051
   117                           
   118                           	psect	smallconst
   119  001000                     __psmallconst:
   120                           	opt callstack 0
   121  001000  00                 	db	0
   122  001001                     STR_5:
   123  001001  20                 	db	32
   124  001002  20                 	db	32
   125  001003  20                 	db	32
   126  001004  53                 	db	83	;'S'
   127  001005  54                 	db	84	;'T'
   128  001006  4F                 	db	79	;'O'
   129  001007  50                 	db	80	;'P'
   130  001008  20                 	db	32
   131  001009  57                 	db	87	;'W'
   132  00100A  41                 	db	65	;'A'
   133  00100B  54                 	db	84	;'T'
   134  00100C  43                 	db	67	;'C'
   135  00100D  48                 	db	72	;'H'
   136  00100E  20                 	db	32
   137  00100F  20                 	db	32
   138  001010  20                 	db	32
   139  001011  00                 	db	0
   140  001012                     STR_1:
   141  001012  20                 	db	32
   142  001013  20                 	db	32
   143  001014  4E                 	db	78	;'N'
   144  001015  4F                 	db	79	;'O'
   145  001016  52                 	db	82	;'R'
   146  001017  4D                 	db	77	;'M'
   147  001018  41                 	db	65	;'A'
   148  001019  4C                 	db	76	;'L'
   149  00101A  20                 	db	32
   150  00101B  43                 	db	67	;'C'
   151  00101C  4C                 	db	76	;'L'
   152  00101D  4F                 	db	79	;'O'
   153  00101E  43                 	db	67	;'C'
   154  00101F  4B                 	db	75	;'K'
   155  001020  20                 	db	32
   156  001021  20                 	db	32
   157  001022  00                 	db	0
   158  001023                     STR_2:
   159  001023  20                 	db	32
   160  001024  4D                 	db	77	;'M'
   161  001025  4F                 	db	79	;'O'
   162  001026  44                 	db	68	;'D'
   163  001027  49                 	db	73	;'I'
   164  001028  46                 	db	70	;'F'
   165  001029  49                 	db	73	;'I'
   166  00102A  45                 	db	69	;'E'
   167  00102B  53                 	db	83	;'S'
   168  00102C  20                 	db	32
   169  00102D  48                 	db	72	;'H'
   170  00102E  4F                 	db	79	;'O'
   171  00102F  55                 	db	85	;'U'
   172  001030  52                 	db	82	;'R'
   173  001031  20                 	db	32
   174  001032  00                 	db	0
   175  001033                     STR_3:
   176  001033  4D                 	db	77	;'M'
   177  001034  4F                 	db	79	;'O'
   178  001035  44                 	db	68	;'D'
   179  001036  49                 	db	73	;'I'
   180  001037  46                 	db	70	;'F'
   181  001038  49                 	db	73	;'I'
   182  001039  45                 	db	69	;'E'
   183  00103A  53                 	db	83	;'S'
   184  00103B  20                 	db	32
   185  00103C  4D                 	db	77	;'M'
   186  00103D  49                 	db	73	;'I'
   187  00103E  4E                 	db	78	;'N'
   188  00103F  55                 	db	85	;'U'
   189  001040  54                 	db	84	;'T'
   190  001041  45                 	db	69	;'E'
   191  001042  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  001043  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  0020EC                     __pcinit:
   198                           	opt callstack 0
   199  0020EC                     start_initialization:
   200                           	opt callstack 0
   201  0020EC                     __initialization:
   202                           	opt callstack 0
   203                           
   204                           ; Initialize objects allocated to COMRAM (4 bytes)
   205                           ; load TBLPTR registers with __pidataCOMRAM
   206  0020EC  0E98               	movlw	low __pidataCOMRAM
   207  0020EE  6EF6               	movwf	tblptrl,c
   208  0020F0  0E21               	movlw	high __pidataCOMRAM
   209  0020F2  6EF7               	movwf	tblptrh,c
   210  0020F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   211  0020F6  6EF8               	movwf	tblptru,c
   212  0020F8  EE00  F034         	lfsr	0,__pdataCOMRAM
   213  0020FC  EE10 F004          	lfsr	1,4
   214  002100                     copy_data0:
   215  002100  0009               	tblrd		*+
   216  002102  CFF5 FFEE          	movff	tablat,postinc0
   217  002106  50E5               	movf	postdec1,w,c
   218  002108  50E1               	movf	fsr1l,w,c
   219  00210A  E1FA               	bnz	copy_data0
   220                           
   221                           ; Clear objects allocated to COMRAM (30 bytes)
   222  00210C  EE00  F001         	lfsr	0,__pbssCOMRAM
   223  002110  0E1E               	movlw	30
   224  002112                     clear_0:
   225  002112  6AEE               	clrf	postinc0,c
   226  002114  06E8               	decf	wreg,f,c
   227  002116  E1FD               	bnz	clear_0
   228  002118                     end_of_initialization:
   229                           	opt callstack 0
   230  002118                     __end_of__initialization:
   231                           	opt callstack 0
   232  002118  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   233  00211A  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   234  00211C  0100               	movlb	0
   235  00211E  EF08  F00A         	goto	_main	;jump to C main() function
   236                           
   237                           	psect	bssCOMRAM
   238  000001                     __pbssCOMRAM:
   239                           	opt callstack 0
   240  000001                     _miliSecSTW:
   241                           	opt callstack 0
   242  000001                     	ds	2
   243  000003                     _secSTW:
   244                           	opt callstack 0
   245  000003                     	ds	2
   246  000005                     _minSTW:
   247                           	opt callstack 0
   248  000005                     	ds	2
   249  000007                     _run:
   250                           	opt callstack 0
   251  000007                     	ds	2
   252  000009                     _blink:
   253                           	opt callstack 0
   254  000009                     	ds	2
   255  00000B                     _hr:
   256                           	opt callstack 0
   257  00000B                     	ds	2
   258  00000D                     _min:
   259                           	opt callstack 0
   260  00000D                     	ds	2
   261  00000F                     _sec:
   262                           	opt callstack 0
   263  00000F                     	ds	2
   264  000011                     _timerFlag:
   265                           	opt callstack 0
   266  000011                     	ds	2
   267  000013                     _count10ms:
   268                           	opt callstack 0
   269  000013                     	ds	2
   270  000015                     _increaseTime:
   271                           	opt callstack 0
   272  000015                     	ds	2
   273  000017                     _changeModePressed:
   274                           	opt callstack 0
   275  000017                     	ds	2
   276  000019                     _countAuto:
   277                           	opt callstack 0
   278  000019                     	ds	2
   279  00001B                     _countPressed:
   280                           	opt callstack 0
   281  00001B                     	ds	2
   282  00001D                     _stModify:
   283                           	opt callstack 0
   284  00001D                     	ds	1
   285  00001E                     _state:
   286                           	opt callstack 0
   287  00001E                     	ds	1
   288                           
   289                           	psect	dataCOMRAM
   290  000034                     __pdataCOMRAM:
   291                           	opt callstack 0
   292  000034                     _secondReadRB0:
   293                           	opt callstack 0
   294  000034                     	ds	1
   295  000035                     _firstReadRB0:
   296                           	opt callstack 0
   297  000035                     	ds	1
   298  000036                     _secondReadRA5:
   299                           	opt callstack 0
   300  000036                     	ds	1
   301  000037                     _firstReadRA5:
   302                           	opt callstack 0
   303  000037                     	ds	1
   304                           
   305                           	psect	cstackCOMRAM
   306  00001F                     __pcstackCOMRAM:
   307                           	opt callstack 0
   308  00001F                     ?_readRA5Button:
   309                           	opt callstack 0
   310  00001F                     ?_readRB0Button:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x0
   314  00001F                     	ds	2
   315  000021                     readRA5Button@check:
   316                           	opt callstack 0
   317  000021                     readRB0Button@check:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x2
   321  000021                     	ds	2
   322  000023                     button@checkRA5:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x4
   326  000023                     	ds	2
   327  000025                     button@checkRB0:
   328                           	opt callstack 0
   329                           
   330                           ; 2 bytes @ 0x6
   331  000025                     	ds	2
   332  000027                     ??_modifyHour:
   333  000027                     ??_modifyMinute:
   334  000027                     ??_modifySecond:
   335  000027                     ??_stopWatch:
   336  000027                     ?___awdiv:
   337                           	opt callstack 0
   338  000027                     ?___awmod:
   339                           	opt callstack 0
   340  000027                     SendByteBBSPI@output:
   341                           	opt callstack 0
   342  000027                     ___awdiv@dividend:
   343                           	opt callstack 0
   344  000027                     ___awmod@dividend:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x8
   348  000027                     	ds	1
   349  000028                     SendByteBBSPI@bitcount:
   350                           	opt callstack 0
   351                           
   352                           ; 1 bytes @ 0x9
   353  000028                     	ds	1
   354  000029                     SendByteBBSPI@input:
   355                           	opt callstack 0
   356  000029                     ___awdiv@divisor:
   357                           	opt callstack 0
   358  000029                     ___awmod@divisor:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0xA
   362  000029                     	ds	1
   363  00002A                     Port_BBSPIInit@port_dir:
   364                           	opt callstack 0
   365  00002A                     WritePort_BBSPI@a:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0xB
   369  00002A                     	ds	1
   370  00002B                     WritePort_BBSPI@port_add:
   371                           	opt callstack 0
   372  00002B                     ___awdiv@counter:
   373                           	opt callstack 0
   374  00002B                     ___awmod@counter:
   375                           	opt callstack 0
   376                           
   377                           ; 1 bytes @ 0xC
   378  00002B                     	ds	1
   379  00002C                     ??_LCDPutInst:
   380  00002C                     ??_LCDPutChar:
   381  00002C                     ___awdiv@sign:
   382                           	opt callstack 0
   383  00002C                     ___awmod@sign:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0xD
   387  00002C                     	ds	1
   388  00002D                     LCDPutChar@ch:
   389                           	opt callstack 0
   390  00002D                     LCDPutInst@ch:
   391                           	opt callstack 0
   392  00002D                     ___awdiv@quotient:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0xE
   396  00002D                     	ds	1
   397  00002E                     ??_LCDInit:
   398  00002E                     LCDPutStr@ptr:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0xF
   402  00002E                     	ds	2
   403  000030                     ??_displayModify:
   404  000030                     
   405                           ; 1 bytes @ 0x11
   406  000030                     	ds	2
   407  000032                     ??_main:
   408                           
   409                           ; 1 bytes @ 0x13
   410  000032                     	ds	2
   411                           
   412 ;;
   413 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   414 ;;
   415 ;; *************** function _main *****************
   416 ;; Defined at:
   417 ;;		line 14 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels required when called:    8
   437 ;; This function calls:
   438 ;;		_LCDInit
   439 ;;		_buttonInitialize
   440 ;;		_displayClock
   441 ;;		_displayModify
   442 ;;		_displayStpWatch
   443 ;;		_modifyHour
   444 ;;		_modifyMinute
   445 ;;		_modifySecond
   446 ;;		_norClock
   447 ;;		_oscillationInitialize
   448 ;;		_stopWatch
   449 ;;		_timerInitialize
   450 ;; This function is called by:
   451 ;;		Startup code after reset
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           	psect	text0
   456  001410                     __ptext0:
   457                           	opt callstack 0
   458  001410                     _main:
   459                           	opt callstack 23
   460  001410                     
   461                           ;main.c: 15:     oscillationInitialize();
   462  001410  ECC2  F010         	call	_oscillationInitialize	;wreg free
   463                           
   464                           ;main.c: 16:     timerInitialize();
   465  001414  EC91  F010         	call	_timerInitialize	;wreg free
   466                           
   467                           ;main.c: 17:     buttonInitialize();
   468  001418  ECC7  F010         	call	_buttonInitialize	;wreg free
   469  00141C                     
   470                           ;main.c: 18:     LCDInit();
   471  00141C  ECC1  F00F         	call	_LCDInit	;wreg free
   472  001420                     
   473                           ;main.c: 19:     state = norClk;
   474  001420  0E00               	movlw	0
   475  001422  6E1E               	movwf	_state^0,c
   476  001424                     
   477                           ;main.c: 20:     stModify = init;
   478  001424  0E00               	movlw	0
   479  001426  6E1D               	movwf	_stModify^0,c
   480                           
   481                           ;main.c: 21:     switch (state) {
   482  001428  EF81  F00A         	goto	l2216
   483  00142C                     l2174:
   484                           
   485                           ;main.c: 23:             norClock();
   486  00142C  ECD4  F00E         	call	_norClock	;wreg free
   487  001430                     
   488                           ;main.c: 24:             displayClock();
   489  001430  EC52  F00D         	call	_displayClock	;wreg free
   490  001434                     
   491                           ;main.c: 25:             if (changeModePressed == 1) {
   492  001434  0417               	decf	_changeModePressed^0,w,c
   493  001436  1018               	iorwf	(_changeModePressed+1)^0,w,c
   494  001438  A4D8               	btfss	status,2,c
   495  00143A  EF21  F00A         	goto	u1031
   496  00143E  EF23  F00A         	goto	u1030
   497  001442                     u1031:
   498  001442  EFA2  F00A         	goto	l83
   499  001446                     u1030:
   500  001446                     
   501                           ;main.c: 26:                 changeModePressed = 0;
   502  001446  0E00               	movlw	0
   503  001448  6E18               	movwf	(_changeModePressed+1)^0,c
   504  00144A  0E00               	movlw	0
   505  00144C  6E17               	movwf	_changeModePressed^0,c
   506                           
   507                           ;main.c: 27:                 state = modHr;
   508  00144E  0E01               	movlw	1
   509  001450  6E1E               	movwf	_state^0,c
   510  001452  EFA2  F00A         	goto	l83
   511  001456                     l2182:
   512                           
   513                           ;main.c: 31:             modifyHour();
   514  001456  ECD4  F00B         	call	_modifyHour	;wreg free
   515  00145A                     
   516                           ;main.c: 32:             displayModify();
   517  00145A  EC22  F008         	call	_displayModify	;wreg free
   518  00145E                     
   519                           ;main.c: 33:             if (changeModePressed == 1) {
   520  00145E  0417               	decf	_changeModePressed^0,w,c
   521  001460  1018               	iorwf	(_changeModePressed+1)^0,w,c
   522  001462  A4D8               	btfss	status,2,c
   523  001464  EF36  F00A         	goto	u1041
   524  001468  EF38  F00A         	goto	u1040
   525  00146C                     u1041:
   526  00146C  EFA2  F00A         	goto	l83
   527  001470                     u1040:
   528  001470                     
   529                           ;main.c: 34:                 changeModePressed = 0;
   530  001470  0E00               	movlw	0
   531  001472  6E18               	movwf	(_changeModePressed+1)^0,c
   532  001474  0E00               	movlw	0
   533  001476  6E17               	movwf	_changeModePressed^0,c
   534                           
   535                           ;main.c: 35:                 state = modMin;
   536  001478  0E02               	movlw	2
   537  00147A  6E1E               	movwf	_state^0,c
   538  00147C  EFA2  F00A         	goto	l83
   539  001480                     l2190:
   540                           
   541                           ;main.c: 39:             modifyMinute();
   542  001480  EC3C  F00B         	call	_modifyMinute	;wreg free
   543  001484                     
   544                           ;main.c: 40:             displayModify();
   545  001484  EC22  F008         	call	_displayModify	;wreg free
   546  001488                     
   547                           ;main.c: 41:             if (changeModePressed == 1) {
   548  001488  0417               	decf	_changeModePressed^0,w,c
   549  00148A  1018               	iorwf	(_changeModePressed+1)^0,w,c
   550  00148C  A4D8               	btfss	status,2,c
   551  00148E  EF4B  F00A         	goto	u1051
   552  001492  EF4D  F00A         	goto	u1050
   553  001496                     u1051:
   554  001496  EFA2  F00A         	goto	l83
   555  00149A                     u1050:
   556  00149A                     
   557                           ;main.c: 42:                 changeModePressed = 0;
   558  00149A  0E00               	movlw	0
   559  00149C  6E18               	movwf	(_changeModePressed+1)^0,c
   560  00149E  0E00               	movlw	0
   561  0014A0  6E17               	movwf	_changeModePressed^0,c
   562                           
   563                           ;main.c: 43:                 state = modSec;
   564  0014A2  0E03               	movlw	3
   565  0014A4  6E1E               	movwf	_state^0,c
   566  0014A6  EFA2  F00A         	goto	l83
   567  0014AA                     l2198:
   568                           
   569                           ;main.c: 47:             modifySecond();
   570  0014AA  ECA4  F00A         	call	_modifySecond	;wreg free
   571  0014AE                     
   572                           ;main.c: 48:             displayModify();
   573  0014AE  EC22  F008         	call	_displayModify	;wreg free
   574  0014B2                     
   575                           ;main.c: 49:             if (changeModePressed == 1) {
   576  0014B2  0417               	decf	_changeModePressed^0,w,c
   577  0014B4  1018               	iorwf	(_changeModePressed+1)^0,w,c
   578  0014B6  A4D8               	btfss	status,2,c
   579  0014B8  EF60  F00A         	goto	u1061
   580  0014BC  EF62  F00A         	goto	u1060
   581  0014C0                     u1061:
   582  0014C0  EFA2  F00A         	goto	l83
   583  0014C4                     u1060:
   584  0014C4                     
   585                           ;main.c: 50:                 changeModePressed = 0;
   586  0014C4  0E00               	movlw	0
   587  0014C6  6E18               	movwf	(_changeModePressed+1)^0,c
   588  0014C8  0E00               	movlw	0
   589  0014CA  6E17               	movwf	_changeModePressed^0,c
   590                           
   591                           ;main.c: 51:                 state = stpWatch;
   592  0014CC  0E04               	movlw	4
   593  0014CE  6E1E               	movwf	_state^0,c
   594  0014D0  EFA2  F00A         	goto	l83
   595  0014D4                     l2206:
   596                           
   597                           ;main.c: 55:             norClock();
   598  0014D4  ECD4  F00E         	call	_norClock	;wreg free
   599                           
   600                           ;main.c: 56:             stopWatch();
   601  0014D8  EC6C  F00C         	call	_stopWatch	;wreg free
   602  0014DC                     
   603                           ;main.c: 57:             displayStpWatch();
   604  0014DC  ECEB  F00C         	call	_displayStpWatch	;wreg free
   605  0014E0                     
   606                           ;main.c: 58:             if (changeModePressed == 1) {
   607  0014E0  0417               	decf	_changeModePressed^0,w,c
   608  0014E2  1018               	iorwf	(_changeModePressed+1)^0,w,c
   609  0014E4  A4D8               	btfss	status,2,c
   610  0014E6  EF77  F00A         	goto	u1071
   611  0014EA  EF79  F00A         	goto	u1070
   612  0014EE                     u1071:
   613  0014EE  EFA2  F00A         	goto	l83
   614  0014F2                     u1070:
   615  0014F2                     
   616                           ;main.c: 59:                 changeModePressed = 0;
   617  0014F2  0E00               	movlw	0
   618  0014F4  6E18               	movwf	(_changeModePressed+1)^0,c
   619  0014F6  0E00               	movlw	0
   620  0014F8  6E17               	movwf	_changeModePressed^0,c
   621                           
   622                           ;main.c: 60:                 state = norClk;
   623  0014FA  0E00               	movlw	0
   624  0014FC  6E1E               	movwf	_state^0,c
   625  0014FE  EFA2  F00A         	goto	l83
   626  001502                     l2216:
   627  001502  501E               	movf	_state^0,w,c
   628  001504  6E32               	movwf	??_main^0,c
   629  001506  6A33               	clrf	(??_main+1)^0,c
   630                           
   631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   632                           ; Switch size 1, requested type "simple"
   633                           ; Number of cases is 1, Range of values is 0 to 0
   634                           ; switch strategies available:
   635                           ; Name         Instructions Cycles
   636                           ; simple_byte            4     3 (average)
   637                           ;	Chosen strategy is simple_byte
   638  001508  5033               	movf	(??_main+1)^0,w,c
   639  00150A  0A00               	xorlw	0	; case 0
   640  00150C  B4D8               	btfsc	status,2,c
   641  00150E  EF8B  F00A         	goto	l2258
   642  001512  EFA2  F00A         	goto	l83
   643  001516                     l2258:
   644                           
   645                           ; Switch size 1, requested type "simple"
   646                           ; Number of cases is 5, Range of values is 0 to 4
   647                           ; switch strategies available:
   648                           ; Name         Instructions Cycles
   649                           ; simple_byte           16     9 (average)
   650                           ;	Chosen strategy is simple_byte
   651  001516  5032               	movf	??_main^0,w,c
   652  001518  0A00               	xorlw	0	; case 0
   653  00151A  B4D8               	btfsc	status,2,c
   654  00151C  EF16  F00A         	goto	l2174
   655  001520  0A01               	xorlw	1	; case 1
   656  001522  B4D8               	btfsc	status,2,c
   657  001524  EF2B  F00A         	goto	l2182
   658  001528  0A03               	xorlw	3	; case 2
   659  00152A  B4D8               	btfsc	status,2,c
   660  00152C  EF40  F00A         	goto	l2190
   661  001530  0A01               	xorlw	1	; case 3
   662  001532  B4D8               	btfsc	status,2,c
   663  001534  EF55  F00A         	goto	l2198
   664  001538  0A07               	xorlw	7	; case 4
   665  00153A  B4D8               	btfsc	status,2,c
   666  00153C  EF6A  F00A         	goto	l2206
   667  001540  EFA2  F00A         	goto	l83
   668  001544                     l83:
   669  001544  EF07  F000         	goto	start
   670  001548                     __end_of_main:
   671                           	opt callstack 0
   672                           
   673 ;; *************** function _timerInitialize *****************
   674 ;; Defined at:
   675 ;;		line 8 in file "system.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, status,2
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    3
   696 ;; This function calls:
   697 ;;		Nothing
   698 ;; This function is called by:
   699 ;;		_main
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           	psect	text1
   704  002122                     __ptext1:
   705                           	opt callstack 0
   706  002122                     _timerInitialize:
   707                           	opt callstack 27
   708  002122                     
   709                           ;system.c: 9:     INTCONbits.GIE = 1;
   710  002122  8EF2               	bsf	242,7,c	;volatile
   711                           
   712                           ;system.c: 11:     INTCONbits.TMR0IE = 1;
   713  002124  8AF2               	bsf	242,5,c	;volatile
   714  002126                     
   715                           ;system.c: 12:     T0CON = 0b10000001;
   716  002126  0E81               	movlw	129
   717  002128  6ED5               	movwf	213,c	;volatile
   718                           
   719                           ;system.c: 14:     TMR0H = 0xFD;
   720  00212A  0EFD               	movlw	253
   721  00212C  6ED7               	movwf	215,c	;volatile
   722                           
   723                           ;system.c: 15:     TMR0L = 0x8F;
   724  00212E  0E8F               	movlw	143
   725  002130  6ED6               	movwf	214,c	;volatile
   726  002132                     
   727                           ;system.c: 16:     timer0ReloadVal = TMR0;
   728  002132  CFD6 F038          	movff	4054,_timer0ReloadVal	;volatile
   729  002136  CFD7 F039          	movff	4055,_timer0ReloadVal+1	;volatile
   730  00213A  6A3A               	clrf	(_timer0ReloadVal+2)^0,c	;volatile
   731  00213C  0012               	return		;funcret
   732  00213E                     __end_of_timerInitialize:
   733                           	opt callstack 0
   734                           
   735 ;; *************** function _stopWatch *****************
   736 ;; Defined at:
   737 ;;		line 3 in file "stateStpWatch.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;		None
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;Total ram usage:        2 bytes
   756 ;; Hardware stack levels used:    1
   757 ;; Hardware stack levels required when called:    3
   758 ;; This function calls:
   759 ;;		Nothing
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text2
   766  0018D8                     __ptext2:
   767                           	opt callstack 0
   768  0018D8                     _stopWatch:
   769                           	opt callstack 27
   770  0018D8                     
   771                           ;stateStpWatch.c: 4:     if (countPressed > 0) {
   772  0018D8  BE1C               	btfsc	(_countPressed+1)^0,7,c
   773  0018DA  EF77  F00C         	goto	u581
   774  0018DE  501C               	movf	(_countPressed+1)^0,w,c
   775  0018E0  E108               	bnz	u580
   776  0018E2  041B               	decf	_countPressed^0,w,c
   777  0018E4  A0D8               	btfss	status,0,c
   778  0018E6  EF77  F00C         	goto	u581
   779  0018EA  EF79  F00C         	goto	u580
   780  0018EE                     u581:
   781  0018EE  EF98  F00C         	goto	l1666
   782  0018F2                     u580:
   783  0018F2                     
   784                           ;stateStpWatch.c: 5:         if (run == 0) {
   785  0018F2  5007               	movf	_run^0,w,c
   786  0018F4  1008               	iorwf	(_run+1)^0,w,c
   787  0018F6  A4D8               	btfss	status,2,c
   788  0018F8  EF80  F00C         	goto	u591
   789  0018FC  EF82  F00C         	goto	u590
   790  001900                     u591:
   791  001900  EF8E  F00C         	goto	l1664
   792  001904                     u590:
   793  001904                     
   794                           ;stateStpWatch.c: 6:             miliSecSTW = 0;
   795  001904  0E00               	movlw	0
   796  001906  6E02               	movwf	(_miliSecSTW+1)^0,c
   797  001908  0E00               	movlw	0
   798  00190A  6E01               	movwf	_miliSecSTW^0,c
   799                           
   800                           ;stateStpWatch.c: 7:             secSTW = 0;
   801  00190C  0E00               	movlw	0
   802  00190E  6E04               	movwf	(_secSTW+1)^0,c
   803  001910  0E00               	movlw	0
   804  001912  6E03               	movwf	_secSTW^0,c
   805                           
   806                           ;stateStpWatch.c: 8:             minSTW = 0;
   807  001914  0E00               	movlw	0
   808  001916  6E06               	movwf	(_minSTW+1)^0,c
   809  001918  0E00               	movlw	0
   810  00191A  6E05               	movwf	_minSTW^0,c
   811  00191C                     l1664:
   812                           
   813                           ;stateStpWatch.c: 10:         run = (run + 1) % 2;
   814  00191C  0E01               	movlw	1
   815  00191E  2407               	addwf	_run^0,w,c
   816  001920  6E27               	movwf	??_stopWatch^0,c
   817  001922  0E00               	movlw	0
   818  001924  2008               	addwfc	(_run+1)^0,w,c
   819  001926  6E28               	movwf	(??_stopWatch+1)^0,c
   820  001928  0E01               	movlw	1
   821  00192A  1427               	andwf	??_stopWatch^0,w,c
   822  00192C  6E07               	movwf	_run^0,c
   823  00192E  6A08               	clrf	(_run+1)^0,c
   824  001930                     l1666:
   825                           
   826                           ;stateStpWatch.c: 12:     if (run == 1) {
   827  001930  0407               	decf	_run^0,w,c
   828  001932  1008               	iorwf	(_run+1)^0,w,c
   829  001934  A4D8               	btfss	status,2,c
   830  001936  EF9F  F00C         	goto	u601
   831  00193A  EFA1  F00C         	goto	u600
   832  00193E                     u601:
   833  00193E  EFEA  F00C         	goto	l457
   834  001942                     u600:
   835  001942                     
   836                           ;stateStpWatch.c: 13:         if (timerFlag == 1) {
   837  001942  0411               	decf	_timerFlag^0,w,c
   838  001944  1012               	iorwf	(_timerFlag+1)^0,w,c
   839  001946  A4D8               	btfss	status,2,c
   840  001948  EFA8  F00C         	goto	u611
   841  00194C  EFAA  F00C         	goto	u610
   842  001950                     u611:
   843  001950  EFEA  F00C         	goto	l457
   844  001954                     u610:
   845  001954                     
   846                           ;stateStpWatch.c: 14:             miliSecSTW++;
   847  001954  4A01               	infsnz	_miliSecSTW^0,f,c
   848  001956  2A02               	incf	(_miliSecSTW+1)^0,f,c
   849  001958                     
   850                           ;stateStpWatch.c: 15:             if (miliSecSTW >= 100) {
   851  001958  BE02               	btfsc	(_miliSecSTW+1)^0,7,c
   852  00195A  EFB8  F00C         	goto	u621
   853  00195E  5002               	movf	(_miliSecSTW+1)^0,w,c
   854  001960  E109               	bnz	u620
   855  001962  0E64               	movlw	100
   856  001964  5C01               	subwf	_miliSecSTW^0,w,c
   857  001966  A0D8               	btfss	status,0,c
   858  001968  EFB8  F00C         	goto	u621
   859  00196C  EFBA  F00C         	goto	u620
   860  001970                     u621:
   861  001970  EFC0  F00C         	goto	l1678
   862  001974                     u620:
   863  001974                     
   864                           ;stateStpWatch.c: 16:                 miliSecSTW = 0;
   865  001974  0E00               	movlw	0
   866  001976  6E02               	movwf	(_miliSecSTW+1)^0,c
   867  001978  0E00               	movlw	0
   868  00197A  6E01               	movwf	_miliSecSTW^0,c
   869  00197C                     
   870                           ;stateStpWatch.c: 17:                 secSTW++;
   871  00197C  4A03               	infsnz	_secSTW^0,f,c
   872  00197E  2A04               	incf	(_secSTW+1)^0,f,c
   873  001980                     l1678:
   874                           
   875                           ;stateStpWatch.c: 19:             if (secSTW >= 60) {
   876  001980  BE04               	btfsc	(_secSTW+1)^0,7,c
   877  001982  EFCC  F00C         	goto	u631
   878  001986  5004               	movf	(_secSTW+1)^0,w,c
   879  001988  E109               	bnz	u630
   880  00198A  0E3C               	movlw	60
   881  00198C  5C03               	subwf	_secSTW^0,w,c
   882  00198E  A0D8               	btfss	status,0,c
   883  001990  EFCC  F00C         	goto	u631
   884  001994  EFCE  F00C         	goto	u630
   885  001998                     u631:
   886  001998  EFD4  F00C         	goto	l1684
   887  00199C                     u630:
   888  00199C                     
   889                           ;stateStpWatch.c: 20:                 secSTW = 0;
   890  00199C  0E00               	movlw	0
   891  00199E  6E04               	movwf	(_secSTW+1)^0,c
   892  0019A0  0E00               	movlw	0
   893  0019A2  6E03               	movwf	_secSTW^0,c
   894  0019A4                     
   895                           ;stateStpWatch.c: 21:                 minSTW++;
   896  0019A4  4A05               	infsnz	_minSTW^0,f,c
   897  0019A6  2A06               	incf	(_minSTW+1)^0,f,c
   898  0019A8                     l1684:
   899                           
   900                           ;stateStpWatch.c: 23:             if (minSTW >= 60) {
   901  0019A8  BE06               	btfsc	(_minSTW+1)^0,7,c
   902  0019AA  EFE0  F00C         	goto	u641
   903  0019AE  5006               	movf	(_minSTW+1)^0,w,c
   904  0019B0  E109               	bnz	u640
   905  0019B2  0E3C               	movlw	60
   906  0019B4  5C05               	subwf	_minSTW^0,w,c
   907  0019B6  A0D8               	btfss	status,0,c
   908  0019B8  EFE0  F00C         	goto	u641
   909  0019BC  EFE2  F00C         	goto	u640
   910  0019C0                     u641:
   911  0019C0  EFE6  F00C         	goto	l456
   912  0019C4                     u640:
   913  0019C4                     
   914                           ;stateStpWatch.c: 24:                 minSTW = 0;
   915  0019C4  0E00               	movlw	0
   916  0019C6  6E06               	movwf	(_minSTW+1)^0,c
   917  0019C8  0E00               	movlw	0
   918  0019CA  6E05               	movwf	_minSTW^0,c
   919  0019CC                     l456:
   920                           
   921                           ;stateStpWatch.c: 26:             timerFlag = 0;
   922  0019CC  0E00               	movlw	0
   923  0019CE  6E12               	movwf	(_timerFlag+1)^0,c
   924  0019D0  0E00               	movlw	0
   925  0019D2  6E11               	movwf	_timerFlag^0,c
   926  0019D4                     l457:
   927  0019D4  0012               	return		;funcret
   928  0019D6                     __end_of_stopWatch:
   929                           	opt callstack 0
   930                           
   931 ;; *************** function _oscillationInitialize *****************
   932 ;; Defined at:
   933 ;;		line 3 in file "system.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;		None
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, status,2
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;Total ram usage:        0 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    3
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_main
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text3
   962  002184                     __ptext3:
   963                           	opt callstack 0
   964  002184                     _oscillationInitialize:
   965                           	opt callstack 27
   966  002184                     
   967                           ;system.c: 4:     OSCCON = 0b01000111;
   968  002184  0E47               	movlw	71
   969  002186  6ED3               	movwf	211,c	;volatile
   970                           
   971                           ;system.c: 5:     OSCTUNE = 0b00001111;
   972  002188  0E0F               	movlw	15
   973  00218A  6E9B               	movwf	155,c	;volatile
   974  00218C  0012               	return		;funcret
   975  00218E                     __end_of_oscillationInitialize:
   976                           	opt callstack 0
   977                           
   978 ;; *************** function _norClock *****************
   979 ;; Defined at:
   980 ;;		line 3 in file "stateClock.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, status,2, status,0
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    3
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text4
  1009  001DA8                     __ptext4:
  1010                           	opt callstack 0
  1011  001DA8                     _norClock:
  1012                           	opt callstack 27
  1013  001DA8                     
  1014                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1015  001DA8  BE14               	btfsc	(_count10ms+1)^0,7,c
  1016  001DAA  EFE0  F00E         	goto	u211
  1017  001DAE  5014               	movf	(_count10ms+1)^0,w,c
  1018  001DB0  E109               	bnz	u210
  1019  001DB2  0E64               	movlw	100
  1020  001DB4  5C13               	subwf	_count10ms^0,w,c
  1021  001DB6  A0D8               	btfss	status,0,c
  1022  001DB8  EFE0  F00E         	goto	u211
  1023  001DBC  EFE2  F00E         	goto	u210
  1024  001DC0                     u211:
  1025  001DC0  EF22  F00F         	goto	l293
  1026  001DC4                     u210:
  1027  001DC4                     
  1028                           ;stateClock.c: 5:         count10ms = 0;
  1029  001DC4  0E00               	movlw	0
  1030  001DC6  6E14               	movwf	(_count10ms+1)^0,c
  1031  001DC8  0E00               	movlw	0
  1032  001DCA  6E13               	movwf	_count10ms^0,c
  1033  001DCC                     
  1034                           ;stateClock.c: 6:         sec++;
  1035  001DCC  4A0F               	infsnz	_sec^0,f,c
  1036  001DCE  2A10               	incf	(_sec+1)^0,f,c
  1037  001DD0                     
  1038                           ;stateClock.c: 7:         if (sec >= 60) {
  1039  001DD0  BE10               	btfsc	(_sec+1)^0,7,c
  1040  001DD2  EFF4  F00E         	goto	u221
  1041  001DD6  5010               	movf	(_sec+1)^0,w,c
  1042  001DD8  E109               	bnz	u220
  1043  001DDA  0E3C               	movlw	60
  1044  001DDC  5C0F               	subwf	_sec^0,w,c
  1045  001DDE  A0D8               	btfss	status,0,c
  1046  001DE0  EFF4  F00E         	goto	u221
  1047  001DE4  EFF6  F00E         	goto	u220
  1048  001DE8                     u221:
  1049  001DE8  EFFC  F00E         	goto	l1400
  1050  001DEC                     u220:
  1051  001DEC                     
  1052                           ;stateClock.c: 8:             sec = 0;
  1053  001DEC  0E00               	movlw	0
  1054  001DEE  6E10               	movwf	(_sec+1)^0,c
  1055  001DF0  0E00               	movlw	0
  1056  001DF2  6E0F               	movwf	_sec^0,c
  1057  001DF4                     
  1058                           ;stateClock.c: 9:             min++;
  1059  001DF4  4A0D               	infsnz	_min^0,f,c
  1060  001DF6  2A0E               	incf	(_min+1)^0,f,c
  1061  001DF8                     l1400:
  1062                           
  1063                           ;stateClock.c: 11:         if (min >= 60) {
  1064  001DF8  BE0E               	btfsc	(_min+1)^0,7,c
  1065  001DFA  EF08  F00F         	goto	u231
  1066  001DFE  500E               	movf	(_min+1)^0,w,c
  1067  001E00  E109               	bnz	u230
  1068  001E02  0E3C               	movlw	60
  1069  001E04  5C0D               	subwf	_min^0,w,c
  1070  001E06  A0D8               	btfss	status,0,c
  1071  001E08  EF08  F00F         	goto	u231
  1072  001E0C  EF0A  F00F         	goto	u230
  1073  001E10                     u231:
  1074  001E10  EF10  F00F         	goto	l1406
  1075  001E14                     u230:
  1076  001E14                     
  1077                           ;stateClock.c: 12:             min = 0;
  1078  001E14  0E00               	movlw	0
  1079  001E16  6E0E               	movwf	(_min+1)^0,c
  1080  001E18  0E00               	movlw	0
  1081  001E1A  6E0D               	movwf	_min^0,c
  1082  001E1C                     
  1083                           ;stateClock.c: 13:             hr++;
  1084  001E1C  4A0B               	infsnz	_hr^0,f,c
  1085  001E1E  2A0C               	incf	(_hr+1)^0,f,c
  1086  001E20                     l1406:
  1087                           
  1088                           ;stateClock.c: 15:         if (hr >= 24) {
  1089  001E20  BE0C               	btfsc	(_hr+1)^0,7,c
  1090  001E22  EF1C  F00F         	goto	u241
  1091  001E26  500C               	movf	(_hr+1)^0,w,c
  1092  001E28  E109               	bnz	u240
  1093  001E2A  0E18               	movlw	24
  1094  001E2C  5C0B               	subwf	_hr^0,w,c
  1095  001E2E  A0D8               	btfss	status,0,c
  1096  001E30  EF1C  F00F         	goto	u241
  1097  001E34  EF1E  F00F         	goto	u240
  1098  001E38                     u241:
  1099  001E38  EF22  F00F         	goto	l293
  1100  001E3C                     u240:
  1101  001E3C                     
  1102                           ;stateClock.c: 16:             hr = 0;
  1103  001E3C  0E00               	movlw	0
  1104  001E3E  6E0C               	movwf	(_hr+1)^0,c
  1105  001E40  0E00               	movlw	0
  1106  001E42  6E0B               	movwf	_hr^0,c
  1107  001E44                     l293:
  1108  001E44  0012               	return		;funcret
  1109  001E46                     __end_of_norClock:
  1110                           	opt callstack 0
  1111                           
  1112 ;; *************** function _modifySecond *****************
  1113 ;; Defined at:
  1114 ;;		line 68 in file "statesModify.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;Total ram usage:        2 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    3
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_main
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text5
  1143  001548                     __ptext5:
  1144                           	opt callstack 0
  1145  001548                     _modifySecond:
  1146                           	opt callstack 27
  1147  001548                     
  1148                           ;statesModify.c: 69:     switch (stModify) {
  1149  001548  EF10  F00B         	goto	l1648
  1150  00154C                     l1616:
  1151                           
  1152                           ;statesModify.c: 71:             if (changeModePressed == 1 && countPressed > 0) {
  1153  00154C  0417               	decf	_changeModePressed^0,w,c
  1154  00154E  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1155  001550  A4D8               	btfss	status,2,c
  1156  001552  EFAD  F00A         	goto	u491
  1157  001556  EFAF  F00A         	goto	u490
  1158  00155A                     u491:
  1159  00155A  EF29  F00B         	goto	l1650
  1160  00155E                     u490:
  1161  00155E  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1162  001560  EFBA  F00A         	goto	u501
  1163  001564  501C               	movf	(_countPressed+1)^0,w,c
  1164  001566  E108               	bnz	u500
  1165  001568  041B               	decf	_countPressed^0,w,c
  1166  00156A  A0D8               	btfss	status,0,c
  1167  00156C  EFBA  F00A         	goto	u501
  1168  001570  EFBC  F00A         	goto	u500
  1169  001574                     u501:
  1170  001574  EF29  F00B         	goto	l1650
  1171  001578                     u500:
  1172  001578                     
  1173                           ;statesModify.c: 72:                 sec++;
  1174  001578  4A0F               	infsnz	_sec^0,f,c
  1175  00157A  2A10               	incf	(_sec+1)^0,f,c
  1176  00157C                     
  1177                           ;statesModify.c: 73:                 stModify = iNor;
  1178  00157C  0E01               	movlw	1
  1179  00157E  6E1D               	movwf	_stModify^0,c
  1180  001580  EF29  F00B         	goto	l1650
  1181  001584                     l1624:
  1182                           
  1183                           ;statesModify.c: 77:             if (countPressed == 0 || changeModePressed == 1) {
  1184  001584  501B               	movf	_countPressed^0,w,c
  1185  001586  101C               	iorwf	(_countPressed+1)^0,w,c
  1186  001588  B4D8               	btfsc	status,2,c
  1187  00158A  EFC9  F00A         	goto	u511
  1188  00158E  EFCB  F00A         	goto	u510
  1189  001592                     u511:
  1190  001592  EFD4  F00A         	goto	l1628
  1191  001596                     u510:
  1192  001596  0417               	decf	_changeModePressed^0,w,c
  1193  001598  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1194  00159A  A4D8               	btfss	status,2,c
  1195  00159C  EFD2  F00A         	goto	u521
  1196  0015A0  EFD4  F00A         	goto	u520
  1197  0015A4                     u521:
  1198  0015A4  EFD6  F00A         	goto	l1630
  1199  0015A8                     u520:
  1200  0015A8                     l1628:
  1201                           
  1202                           ;statesModify.c: 78:                 stModify = init;
  1203  0015A8  0E00               	movlw	0
  1204  0015AA  6E1D               	movwf	_stModify^0,c
  1205  0015AC                     l1630:
  1206                           
  1207                           ;statesModify.c: 80:             if (countAuto > 0) {
  1208  0015AC  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1209  0015AE  EFE1  F00A         	goto	u531
  1210  0015B2  501A               	movf	(_countAuto+1)^0,w,c
  1211  0015B4  E108               	bnz	u530
  1212  0015B6  0419               	decf	_countAuto^0,w,c
  1213  0015B8  A0D8               	btfss	status,0,c
  1214  0015BA  EFE1  F00A         	goto	u531
  1215  0015BE  EFE3  F00A         	goto	u530
  1216  0015C2                     u531:
  1217  0015C2  EF29  F00B         	goto	l1650
  1218  0015C6                     u530:
  1219  0015C6                     
  1220                           ;statesModify.c: 81:                 increaseTime = 1;
  1221  0015C6  0E00               	movlw	0
  1222  0015C8  6E16               	movwf	(_increaseTime+1)^0,c
  1223  0015CA  0E01               	movlw	1
  1224  0015CC  6E15               	movwf	_increaseTime^0,c
  1225                           
  1226                           ;statesModify.c: 82:                 stModify = iAuto;
  1227  0015CE  0E02               	movlw	2
  1228  0015D0  6E1D               	movwf	_stModify^0,c
  1229  0015D2  EF29  F00B         	goto	l1650
  1230  0015D6                     l1634:
  1231                           
  1232                           ;statesModify.c: 86:             if (countPressed == 0 || changeModePressed == 1) {
  1233  0015D6  501B               	movf	_countPressed^0,w,c
  1234  0015D8  101C               	iorwf	(_countPressed+1)^0,w,c
  1235  0015DA  B4D8               	btfsc	status,2,c
  1236  0015DC  EFF2  F00A         	goto	u541
  1237  0015E0  EFF4  F00A         	goto	u540
  1238  0015E4                     u541:
  1239  0015E4  EFFD  F00A         	goto	l1638
  1240  0015E8                     u540:
  1241  0015E8  0417               	decf	_changeModePressed^0,w,c
  1242  0015EA  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1243  0015EC  A4D8               	btfss	status,2,c
  1244  0015EE  EFFB  F00A         	goto	u551
  1245  0015F2  EFFD  F00A         	goto	u550
  1246  0015F6                     u551:
  1247  0015F6  EFFF  F00A         	goto	l1640
  1248  0015FA                     u550:
  1249  0015FA                     l1638:
  1250                           
  1251                           ;statesModify.c: 87:                 stModify = init;
  1252  0015FA  0E00               	movlw	0
  1253  0015FC  6E1D               	movwf	_stModify^0,c
  1254  0015FE                     l1640:
  1255                           
  1256                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1257  0015FE  0415               	decf	_increaseTime^0,w,c
  1258  001600  1016               	iorwf	(_increaseTime+1)^0,w,c
  1259  001602  A4D8               	btfss	status,2,c
  1260  001604  EF06  F00B         	goto	u561
  1261  001608  EF08  F00B         	goto	u560
  1262  00160C                     u561:
  1263  00160C  EF29  F00B         	goto	l1650
  1264  001610                     u560:
  1265  001610                     
  1266                           ;statesModify.c: 90:                 increaseTime = 0;
  1267  001610  0E00               	movlw	0
  1268  001612  6E16               	movwf	(_increaseTime+1)^0,c
  1269  001614  0E00               	movlw	0
  1270  001616  6E15               	movwf	_increaseTime^0,c
  1271  001618                     
  1272                           ;statesModify.c: 91:                 sec++;
  1273  001618  4A0F               	infsnz	_sec^0,f,c
  1274  00161A  2A10               	incf	(_sec+1)^0,f,c
  1275  00161C  EF29  F00B         	goto	l1650
  1276  001620                     l1648:
  1277  001620  501D               	movf	_stModify^0,w,c
  1278  001622  6E27               	movwf	??_modifySecond^0,c
  1279  001624  6A28               	clrf	(??_modifySecond+1)^0,c
  1280                           
  1281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1282                           ; Switch size 1, requested type "simple"
  1283                           ; Number of cases is 1, Range of values is 0 to 0
  1284                           ; switch strategies available:
  1285                           ; Name         Instructions Cycles
  1286                           ; simple_byte            4     3 (average)
  1287                           ;	Chosen strategy is simple_byte
  1288  001626  5028               	movf	(??_modifySecond+1)^0,w,c
  1289  001628  0A00               	xorlw	0	; case 0
  1290  00162A  B4D8               	btfsc	status,2,c
  1291  00162C  EF1A  F00B         	goto	l2260
  1292  001630  EF29  F00B         	goto	l1650
  1293  001634                     l2260:
  1294                           
  1295                           ; Switch size 1, requested type "simple"
  1296                           ; Number of cases is 3, Range of values is 0 to 2
  1297                           ; switch strategies available:
  1298                           ; Name         Instructions Cycles
  1299                           ; simple_byte           10     6 (average)
  1300                           ;	Chosen strategy is simple_byte
  1301  001634  5027               	movf	??_modifySecond^0,w,c
  1302  001636  0A00               	xorlw	0	; case 0
  1303  001638  B4D8               	btfsc	status,2,c
  1304  00163A  EFA6  F00A         	goto	l1616
  1305  00163E  0A01               	xorlw	1	; case 1
  1306  001640  B4D8               	btfsc	status,2,c
  1307  001642  EFC2  F00A         	goto	l1624
  1308  001646  0A03               	xorlw	3	; case 2
  1309  001648  B4D8               	btfsc	status,2,c
  1310  00164A  EFEB  F00A         	goto	l1634
  1311  00164E  EF29  F00B         	goto	l1650
  1312  001652                     l1650:
  1313                           
  1314                           ;statesModify.c: 95:     if (sec >= 60) {
  1315  001652  BE10               	btfsc	(_sec+1)^0,7,c
  1316  001654  EF35  F00B         	goto	u571
  1317  001658  5010               	movf	(_sec+1)^0,w,c
  1318  00165A  E109               	bnz	u570
  1319  00165C  0E3C               	movlw	60
  1320  00165E  5C0F               	subwf	_sec^0,w,c
  1321  001660  A0D8               	btfss	status,0,c
  1322  001662  EF35  F00B         	goto	u571
  1323  001666  EF37  F00B         	goto	u570
  1324  00166A                     u571:
  1325  00166A  EF3B  F00B         	goto	l390
  1326  00166E                     u570:
  1327  00166E                     
  1328                           ;statesModify.c: 96:         sec = 0;
  1329  00166E  0E00               	movlw	0
  1330  001670  6E10               	movwf	(_sec+1)^0,c
  1331  001672  0E00               	movlw	0
  1332  001674  6E0F               	movwf	_sec^0,c
  1333  001676                     l390:
  1334  001676  0012               	return		;funcret
  1335  001678                     __end_of_modifySecond:
  1336                           	opt callstack 0
  1337                           
  1338 ;; *************** function _modifyMinute *****************
  1339 ;; Defined at:
  1340 ;;		line 36 in file "statesModify.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;		None
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2, status,0
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;Total ram usage:        2 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    3
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_main
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text6
  1369  001678                     __ptext6:
  1370                           	opt callstack 0
  1371  001678                     _modifyMinute:
  1372                           	opt callstack 27
  1373  001678                     
  1374                           ;statesModify.c: 37:     switch (stModify) {
  1375  001678  EFA8  F00B         	goto	l1604
  1376  00167C                     l1572:
  1377                           
  1378                           ;statesModify.c: 39:             if (changeModePressed == 1 && countPressed > 0) {
  1379  00167C  0417               	decf	_changeModePressed^0,w,c
  1380  00167E  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1381  001680  A4D8               	btfss	status,2,c
  1382  001682  EF45  F00B         	goto	u401
  1383  001686  EF47  F00B         	goto	u400
  1384  00168A                     u401:
  1385  00168A  EFC1  F00B         	goto	l1606
  1386  00168E                     u400:
  1387  00168E  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1388  001690  EF52  F00B         	goto	u411
  1389  001694  501C               	movf	(_countPressed+1)^0,w,c
  1390  001696  E108               	bnz	u410
  1391  001698  041B               	decf	_countPressed^0,w,c
  1392  00169A  A0D8               	btfss	status,0,c
  1393  00169C  EF52  F00B         	goto	u411
  1394  0016A0  EF54  F00B         	goto	u410
  1395  0016A4                     u411:
  1396  0016A4  EFC1  F00B         	goto	l1606
  1397  0016A8                     u410:
  1398  0016A8                     
  1399                           ;statesModify.c: 40:                 min++;
  1400  0016A8  4A0D               	infsnz	_min^0,f,c
  1401  0016AA  2A0E               	incf	(_min+1)^0,f,c
  1402  0016AC                     
  1403                           ;statesModify.c: 41:                 stModify = iNor;
  1404  0016AC  0E01               	movlw	1
  1405  0016AE  6E1D               	movwf	_stModify^0,c
  1406  0016B0  EFC1  F00B         	goto	l1606
  1407  0016B4                     l1580:
  1408                           
  1409                           ;statesModify.c: 45:             if (countPressed == 0 || changeModePressed == 1) {
  1410  0016B4  501B               	movf	_countPressed^0,w,c
  1411  0016B6  101C               	iorwf	(_countPressed+1)^0,w,c
  1412  0016B8  B4D8               	btfsc	status,2,c
  1413  0016BA  EF61  F00B         	goto	u421
  1414  0016BE  EF63  F00B         	goto	u420
  1415  0016C2                     u421:
  1416  0016C2  EF6C  F00B         	goto	l1584
  1417  0016C6                     u420:
  1418  0016C6  0417               	decf	_changeModePressed^0,w,c
  1419  0016C8  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1420  0016CA  A4D8               	btfss	status,2,c
  1421  0016CC  EF6A  F00B         	goto	u431
  1422  0016D0  EF6C  F00B         	goto	u430
  1423  0016D4                     u431:
  1424  0016D4  EF6E  F00B         	goto	l1586
  1425  0016D8                     u430:
  1426  0016D8                     l1584:
  1427                           
  1428                           ;statesModify.c: 46:                 stModify = init;
  1429  0016D8  0E00               	movlw	0
  1430  0016DA  6E1D               	movwf	_stModify^0,c
  1431  0016DC                     l1586:
  1432                           
  1433                           ;statesModify.c: 48:             if (countAuto > 0) {
  1434  0016DC  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1435  0016DE  EF79  F00B         	goto	u441
  1436  0016E2  501A               	movf	(_countAuto+1)^0,w,c
  1437  0016E4  E108               	bnz	u440
  1438  0016E6  0419               	decf	_countAuto^0,w,c
  1439  0016E8  A0D8               	btfss	status,0,c
  1440  0016EA  EF79  F00B         	goto	u441
  1441  0016EE  EF7B  F00B         	goto	u440
  1442  0016F2                     u441:
  1443  0016F2  EFC1  F00B         	goto	l1606
  1444  0016F6                     u440:
  1445  0016F6                     
  1446                           ;statesModify.c: 49:                 increaseTime = 1;
  1447  0016F6  0E00               	movlw	0
  1448  0016F8  6E16               	movwf	(_increaseTime+1)^0,c
  1449  0016FA  0E01               	movlw	1
  1450  0016FC  6E15               	movwf	_increaseTime^0,c
  1451                           
  1452                           ;statesModify.c: 50:                 stModify = iAuto;
  1453  0016FE  0E02               	movlw	2
  1454  001700  6E1D               	movwf	_stModify^0,c
  1455  001702  EFC1  F00B         	goto	l1606
  1456  001706                     l1590:
  1457                           
  1458                           ;statesModify.c: 54:             if (countPressed == 0 || changeModePressed == 1) {
  1459  001706  501B               	movf	_countPressed^0,w,c
  1460  001708  101C               	iorwf	(_countPressed+1)^0,w,c
  1461  00170A  B4D8               	btfsc	status,2,c
  1462  00170C  EF8A  F00B         	goto	u451
  1463  001710  EF8C  F00B         	goto	u450
  1464  001714                     u451:
  1465  001714  EF95  F00B         	goto	l1594
  1466  001718                     u450:
  1467  001718  0417               	decf	_changeModePressed^0,w,c
  1468  00171A  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1469  00171C  A4D8               	btfss	status,2,c
  1470  00171E  EF93  F00B         	goto	u461
  1471  001722  EF95  F00B         	goto	u460
  1472  001726                     u461:
  1473  001726  EF97  F00B         	goto	l1596
  1474  00172A                     u460:
  1475  00172A                     l1594:
  1476                           
  1477                           ;statesModify.c: 55:                 stModify = init;
  1478  00172A  0E00               	movlw	0
  1479  00172C  6E1D               	movwf	_stModify^0,c
  1480  00172E                     l1596:
  1481                           
  1482                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1483  00172E  0415               	decf	_increaseTime^0,w,c
  1484  001730  1016               	iorwf	(_increaseTime+1)^0,w,c
  1485  001732  A4D8               	btfss	status,2,c
  1486  001734  EF9E  F00B         	goto	u471
  1487  001738  EFA0  F00B         	goto	u470
  1488  00173C                     u471:
  1489  00173C  EFC1  F00B         	goto	l1606
  1490  001740                     u470:
  1491  001740                     
  1492                           ;statesModify.c: 58:                 increaseTime = 0;
  1493  001740  0E00               	movlw	0
  1494  001742  6E16               	movwf	(_increaseTime+1)^0,c
  1495  001744  0E00               	movlw	0
  1496  001746  6E15               	movwf	_increaseTime^0,c
  1497  001748                     
  1498                           ;statesModify.c: 59:                 min++;
  1499  001748  4A0D               	infsnz	_min^0,f,c
  1500  00174A  2A0E               	incf	(_min+1)^0,f,c
  1501  00174C  EFC1  F00B         	goto	l1606
  1502  001750                     l1604:
  1503  001750  501D               	movf	_stModify^0,w,c
  1504  001752  6E27               	movwf	??_modifyMinute^0,c
  1505  001754  6A28               	clrf	(??_modifyMinute+1)^0,c
  1506                           
  1507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1508                           ; Switch size 1, requested type "simple"
  1509                           ; Number of cases is 1, Range of values is 0 to 0
  1510                           ; switch strategies available:
  1511                           ; Name         Instructions Cycles
  1512                           ; simple_byte            4     3 (average)
  1513                           ;	Chosen strategy is simple_byte
  1514  001756  5028               	movf	(??_modifyMinute+1)^0,w,c
  1515  001758  0A00               	xorlw	0	; case 0
  1516  00175A  B4D8               	btfsc	status,2,c
  1517  00175C  EFB2  F00B         	goto	l2262
  1518  001760  EFC1  F00B         	goto	l1606
  1519  001764                     l2262:
  1520                           
  1521                           ; Switch size 1, requested type "simple"
  1522                           ; Number of cases is 3, Range of values is 0 to 2
  1523                           ; switch strategies available:
  1524                           ; Name         Instructions Cycles
  1525                           ; simple_byte           10     6 (average)
  1526                           ;	Chosen strategy is simple_byte
  1527  001764  5027               	movf	??_modifyMinute^0,w,c
  1528  001766  0A00               	xorlw	0	; case 0
  1529  001768  B4D8               	btfsc	status,2,c
  1530  00176A  EF3E  F00B         	goto	l1572
  1531  00176E  0A01               	xorlw	1	; case 1
  1532  001770  B4D8               	btfsc	status,2,c
  1533  001772  EF5A  F00B         	goto	l1580
  1534  001776  0A03               	xorlw	3	; case 2
  1535  001778  B4D8               	btfsc	status,2,c
  1536  00177A  EF83  F00B         	goto	l1590
  1537  00177E  EFC1  F00B         	goto	l1606
  1538  001782                     l1606:
  1539                           
  1540                           ;statesModify.c: 63:     if (min >= 60) {
  1541  001782  BE0E               	btfsc	(_min+1)^0,7,c
  1542  001784  EFCD  F00B         	goto	u481
  1543  001788  500E               	movf	(_min+1)^0,w,c
  1544  00178A  E109               	bnz	u480
  1545  00178C  0E3C               	movlw	60
  1546  00178E  5C0D               	subwf	_min^0,w,c
  1547  001790  A0D8               	btfss	status,0,c
  1548  001792  EFCD  F00B         	goto	u481
  1549  001796  EFCF  F00B         	goto	u480
  1550  00179A                     u481:
  1551  00179A  EFD3  F00B         	goto	l372
  1552  00179E                     u480:
  1553  00179E                     
  1554                           ;statesModify.c: 64:         min = 0;
  1555  00179E  0E00               	movlw	0
  1556  0017A0  6E0E               	movwf	(_min+1)^0,c
  1557  0017A2  0E00               	movlw	0
  1558  0017A4  6E0D               	movwf	_min^0,c
  1559  0017A6                     l372:
  1560  0017A6  0012               	return		;funcret
  1561  0017A8                     __end_of_modifyMinute:
  1562                           	opt callstack 0
  1563                           
  1564 ;; *************** function _modifyHour *****************
  1565 ;; Defined at:
  1566 ;;		line 4 in file "statesModify.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  1    wreg      void 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;Total ram usage:        2 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    3
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text7
  1595  0017A8                     __ptext7:
  1596                           	opt callstack 0
  1597  0017A8                     _modifyHour:
  1598                           	opt callstack 27
  1599  0017A8                     
  1600                           ;statesModify.c: 5:     switch (stModify) {
  1601  0017A8  EF40  F00C         	goto	l1466
  1602  0017AC                     l1434:
  1603                           
  1604                           ;statesModify.c: 7:             if (changeModePressed == 1 && countPressed > 0) {
  1605  0017AC  0417               	decf	_changeModePressed^0,w,c
  1606  0017AE  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1607  0017B0  A4D8               	btfss	status,2,c
  1608  0017B2  EFDD  F00B         	goto	u251
  1609  0017B6  EFDF  F00B         	goto	u250
  1610  0017BA                     u251:
  1611  0017BA  EF59  F00C         	goto	l1468
  1612  0017BE                     u250:
  1613  0017BE  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1614  0017C0  EFEA  F00B         	goto	u261
  1615  0017C4  501C               	movf	(_countPressed+1)^0,w,c
  1616  0017C6  E108               	bnz	u260
  1617  0017C8  041B               	decf	_countPressed^0,w,c
  1618  0017CA  A0D8               	btfss	status,0,c
  1619  0017CC  EFEA  F00B         	goto	u261
  1620  0017D0  EFEC  F00B         	goto	u260
  1621  0017D4                     u261:
  1622  0017D4  EF59  F00C         	goto	l1468
  1623  0017D8                     u260:
  1624  0017D8                     
  1625                           ;statesModify.c: 8:                 hr++;
  1626  0017D8  4A0B               	infsnz	_hr^0,f,c
  1627  0017DA  2A0C               	incf	(_hr+1)^0,f,c
  1628  0017DC                     
  1629                           ;statesModify.c: 9:                 stModify = iNor;
  1630  0017DC  0E01               	movlw	1
  1631  0017DE  6E1D               	movwf	_stModify^0,c
  1632  0017E0  EF59  F00C         	goto	l1468
  1633  0017E4                     l1442:
  1634                           
  1635                           ;statesModify.c: 13:             if (countPressed == 0 || changeModePressed == 1) {
  1636  0017E4  501B               	movf	_countPressed^0,w,c
  1637  0017E6  101C               	iorwf	(_countPressed+1)^0,w,c
  1638  0017E8  B4D8               	btfsc	status,2,c
  1639  0017EA  EFF9  F00B         	goto	u271
  1640  0017EE  EFFB  F00B         	goto	u270
  1641  0017F2                     u271:
  1642  0017F2  EF04  F00C         	goto	l1446
  1643  0017F6                     u270:
  1644  0017F6  0417               	decf	_changeModePressed^0,w,c
  1645  0017F8  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1646  0017FA  A4D8               	btfss	status,2,c
  1647  0017FC  EF02  F00C         	goto	u281
  1648  001800  EF04  F00C         	goto	u280
  1649  001804                     u281:
  1650  001804  EF06  F00C         	goto	l1448
  1651  001808                     u280:
  1652  001808                     l1446:
  1653                           
  1654                           ;statesModify.c: 14:                 stModify = init;
  1655  001808  0E00               	movlw	0
  1656  00180A  6E1D               	movwf	_stModify^0,c
  1657  00180C                     l1448:
  1658                           
  1659                           ;statesModify.c: 16:             if (countAuto > 0) {
  1660  00180C  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1661  00180E  EF11  F00C         	goto	u291
  1662  001812  501A               	movf	(_countAuto+1)^0,w,c
  1663  001814  E108               	bnz	u290
  1664  001816  0419               	decf	_countAuto^0,w,c
  1665  001818  A0D8               	btfss	status,0,c
  1666  00181A  EF11  F00C         	goto	u291
  1667  00181E  EF13  F00C         	goto	u290
  1668  001822                     u291:
  1669  001822  EF59  F00C         	goto	l1468
  1670  001826                     u290:
  1671  001826                     
  1672                           ;statesModify.c: 17:                 increaseTime = 1;
  1673  001826  0E00               	movlw	0
  1674  001828  6E16               	movwf	(_increaseTime+1)^0,c
  1675  00182A  0E01               	movlw	1
  1676  00182C  6E15               	movwf	_increaseTime^0,c
  1677                           
  1678                           ;statesModify.c: 18:                 stModify = iAuto;
  1679  00182E  0E02               	movlw	2
  1680  001830  6E1D               	movwf	_stModify^0,c
  1681  001832  EF59  F00C         	goto	l1468
  1682  001836                     l1452:
  1683                           
  1684                           ;statesModify.c: 22:             if (countPressed == 0 || changeModePressed == 1) {
  1685  001836  501B               	movf	_countPressed^0,w,c
  1686  001838  101C               	iorwf	(_countPressed+1)^0,w,c
  1687  00183A  B4D8               	btfsc	status,2,c
  1688  00183C  EF22  F00C         	goto	u301
  1689  001840  EF24  F00C         	goto	u300
  1690  001844                     u301:
  1691  001844  EF2D  F00C         	goto	l1456
  1692  001848                     u300:
  1693  001848  0417               	decf	_changeModePressed^0,w,c
  1694  00184A  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1695  00184C  A4D8               	btfss	status,2,c
  1696  00184E  EF2B  F00C         	goto	u311
  1697  001852  EF2D  F00C         	goto	u310
  1698  001856                     u311:
  1699  001856  EF2F  F00C         	goto	l1458
  1700  00185A                     u310:
  1701  00185A                     l1456:
  1702                           
  1703                           ;statesModify.c: 23:                 stModify = init;
  1704  00185A  0E00               	movlw	0
  1705  00185C  6E1D               	movwf	_stModify^0,c
  1706  00185E                     l1458:
  1707                           
  1708                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1709  00185E  0415               	decf	_increaseTime^0,w,c
  1710  001860  1016               	iorwf	(_increaseTime+1)^0,w,c
  1711  001862  A4D8               	btfss	status,2,c
  1712  001864  EF36  F00C         	goto	u321
  1713  001868  EF38  F00C         	goto	u320
  1714  00186C                     u321:
  1715  00186C  EF59  F00C         	goto	l1468
  1716  001870                     u320:
  1717  001870                     
  1718                           ;statesModify.c: 26:                 increaseTime = 0;
  1719  001870  0E00               	movlw	0
  1720  001872  6E16               	movwf	(_increaseTime+1)^0,c
  1721  001874  0E00               	movlw	0
  1722  001876  6E15               	movwf	_increaseTime^0,c
  1723  001878                     
  1724                           ;statesModify.c: 27:                 hr++;
  1725  001878  4A0B               	infsnz	_hr^0,f,c
  1726  00187A  2A0C               	incf	(_hr+1)^0,f,c
  1727  00187C  EF59  F00C         	goto	l1468
  1728  001880                     l1466:
  1729  001880  501D               	movf	_stModify^0,w,c
  1730  001882  6E27               	movwf	??_modifyHour^0,c
  1731  001884  6A28               	clrf	(??_modifyHour+1)^0,c
  1732                           
  1733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1734                           ; Switch size 1, requested type "simple"
  1735                           ; Number of cases is 1, Range of values is 0 to 0
  1736                           ; switch strategies available:
  1737                           ; Name         Instructions Cycles
  1738                           ; simple_byte            4     3 (average)
  1739                           ;	Chosen strategy is simple_byte
  1740  001886  5028               	movf	(??_modifyHour+1)^0,w,c
  1741  001888  0A00               	xorlw	0	; case 0
  1742  00188A  B4D8               	btfsc	status,2,c
  1743  00188C  EF4A  F00C         	goto	l2264
  1744  001890  EF59  F00C         	goto	l1468
  1745  001894                     l2264:
  1746                           
  1747                           ; Switch size 1, requested type "simple"
  1748                           ; Number of cases is 3, Range of values is 0 to 2
  1749                           ; switch strategies available:
  1750                           ; Name         Instructions Cycles
  1751                           ; simple_byte           10     6 (average)
  1752                           ;	Chosen strategy is simple_byte
  1753  001894  5027               	movf	??_modifyHour^0,w,c
  1754  001896  0A00               	xorlw	0	; case 0
  1755  001898  B4D8               	btfsc	status,2,c
  1756  00189A  EFD6  F00B         	goto	l1434
  1757  00189E  0A01               	xorlw	1	; case 1
  1758  0018A0  B4D8               	btfsc	status,2,c
  1759  0018A2  EFF2  F00B         	goto	l1442
  1760  0018A6  0A03               	xorlw	3	; case 2
  1761  0018A8  B4D8               	btfsc	status,2,c
  1762  0018AA  EF1B  F00C         	goto	l1452
  1763  0018AE  EF59  F00C         	goto	l1468
  1764  0018B2                     l1468:
  1765                           
  1766                           ;statesModify.c: 31:     if (hr >= 24) {
  1767  0018B2  BE0C               	btfsc	(_hr+1)^0,7,c
  1768  0018B4  EF65  F00C         	goto	u331
  1769  0018B8  500C               	movf	(_hr+1)^0,w,c
  1770  0018BA  E109               	bnz	u330
  1771  0018BC  0E18               	movlw	24
  1772  0018BE  5C0B               	subwf	_hr^0,w,c
  1773  0018C0  A0D8               	btfss	status,0,c
  1774  0018C2  EF65  F00C         	goto	u331
  1775  0018C6  EF67  F00C         	goto	u330
  1776  0018CA                     u331:
  1777  0018CA  EF6B  F00C         	goto	l354
  1778  0018CE                     u330:
  1779  0018CE                     
  1780                           ;statesModify.c: 32:         hr = 0;
  1781  0018CE  0E00               	movlw	0
  1782  0018D0  6E0C               	movwf	(_hr+1)^0,c
  1783  0018D2  0E00               	movlw	0
  1784  0018D4  6E0B               	movwf	_hr^0,c
  1785  0018D6                     l354:
  1786  0018D6  0012               	return		;funcret
  1787  0018D8                     __end_of_modifyHour:
  1788                           	opt callstack 0
  1789                           
  1790 ;; *************** function _displayStpWatch *****************
  1791 ;; Defined at:
  1792 ;;		line 31 in file "stateStpWatch.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;Total ram usage:        0 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    7
  1813 ;; This function calls:
  1814 ;;		_LCDPutChar
  1815 ;;		_LCDPutInst
  1816 ;;		_LCDPutStr
  1817 ;;		___awdiv
  1818 ;;		___awmod
  1819 ;; This function is called by:
  1820 ;;		_main
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text8
  1825  0019D6                     __ptext8:
  1826                           	opt callstack 0
  1827  0019D6                     _displayStpWatch:
  1828                           	opt callstack 23
  1829  0019D6                     
  1830                           ;stateStpWatch.c: 32:     LCDPutInst(0x80);
  1831  0019D6  0E80               	movlw	128
  1832  0019D8  EC8E  F00F         	call	_LCDPutInst
  1833  0019DC                     
  1834                           ;stateStpWatch.c: 33:     LCDPutStr("   STOP WATCH   ");
  1835  0019DC  0E01               	movlw	low STR_5
  1836  0019DE  6E2E               	movwf	LCDPutStr@ptr^0,c
  1837  0019E0  0E10               	movlw	high STR_5
  1838  0019E2  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  1839  0019E4  EC39  F010         	call	_LCDPutStr	;wreg free
  1840  0019E8                     
  1841                           ;stateStpWatch.c: 34:     LCDPutInst(0xC0);
  1842  0019E8  0EC0               	movlw	192
  1843  0019EA  EC8E  F00F         	call	_LCDPutInst
  1844  0019EE                     
  1845                           ;stateStpWatch.c: 35:     LCDPutChar(minSTW/10+'0');
  1846  0019EE  C005  F027         	movff	_minSTW,___awdiv@dividend
  1847  0019F2  C006  F028         	movff	_minSTW+1,___awdiv@dividend+1
  1848  0019F6  0E00               	movlw	0
  1849  0019F8  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1850  0019FA  0E0A               	movlw	10
  1851  0019FC  6E29               	movwf	___awdiv@divisor^0,c
  1852  0019FE  ECB9  F00D         	call	___awdiv	;wreg free
  1853  001A02  5027               	movf	?___awdiv^0,w,c
  1854  001A04  0F30               	addlw	48
  1855  001A06  EC5B  F00F         	call	_LCDPutChar
  1856  001A0A                     
  1857                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW%10+'0');
  1858  001A0A  C005  F027         	movff	_minSTW,___awmod@dividend
  1859  001A0E  C006  F028         	movff	_minSTW+1,___awmod@dividend+1
  1860  001A12  0E00               	movlw	0
  1861  001A14  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1862  001A16  0E0A               	movlw	10
  1863  001A18  6E29               	movwf	___awmod@divisor^0,c
  1864  001A1A  EC7C  F00E         	call	___awmod	;wreg free
  1865  001A1E  5027               	movf	?___awmod^0,w,c
  1866  001A20  0F30               	addlw	48
  1867  001A22  EC5B  F00F         	call	_LCDPutChar
  1868  001A26                     
  1869                           ;stateStpWatch.c: 37:     LCDPutChar(':');
  1870  001A26  0E3A               	movlw	58
  1871  001A28  EC5B  F00F         	call	_LCDPutChar
  1872  001A2C                     
  1873                           ;stateStpWatch.c: 38:     LCDPutChar(secSTW/10+'0');
  1874  001A2C  C003  F027         	movff	_secSTW,___awdiv@dividend
  1875  001A30  C004  F028         	movff	_secSTW+1,___awdiv@dividend+1
  1876  001A34  0E00               	movlw	0
  1877  001A36  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1878  001A38  0E0A               	movlw	10
  1879  001A3A  6E29               	movwf	___awdiv@divisor^0,c
  1880  001A3C  ECB9  F00D         	call	___awdiv	;wreg free
  1881  001A40  5027               	movf	?___awdiv^0,w,c
  1882  001A42  0F30               	addlw	48
  1883  001A44  EC5B  F00F         	call	_LCDPutChar
  1884  001A48                     
  1885                           ;stateStpWatch.c: 39:     LCDPutChar(secSTW%10+'0');
  1886  001A48  C003  F027         	movff	_secSTW,___awmod@dividend
  1887  001A4C  C004  F028         	movff	_secSTW+1,___awmod@dividend+1
  1888  001A50  0E00               	movlw	0
  1889  001A52  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1890  001A54  0E0A               	movlw	10
  1891  001A56  6E29               	movwf	___awmod@divisor^0,c
  1892  001A58  EC7C  F00E         	call	___awmod	;wreg free
  1893  001A5C  5027               	movf	?___awmod^0,w,c
  1894  001A5E  0F30               	addlw	48
  1895  001A60  EC5B  F00F         	call	_LCDPutChar
  1896  001A64                     
  1897                           ;stateStpWatch.c: 40:     LCDPutChar(':');
  1898  001A64  0E3A               	movlw	58
  1899  001A66  EC5B  F00F         	call	_LCDPutChar
  1900  001A6A                     
  1901                           ;stateStpWatch.c: 41:     LCDPutChar(miliSecSTW/10+'0');
  1902  001A6A  C001  F027         	movff	_miliSecSTW,___awdiv@dividend
  1903  001A6E  C002  F028         	movff	_miliSecSTW+1,___awdiv@dividend+1
  1904  001A72  0E00               	movlw	0
  1905  001A74  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1906  001A76  0E0A               	movlw	10
  1907  001A78  6E29               	movwf	___awdiv@divisor^0,c
  1908  001A7A  ECB9  F00D         	call	___awdiv	;wreg free
  1909  001A7E  5027               	movf	?___awdiv^0,w,c
  1910  001A80  0F30               	addlw	48
  1911  001A82  EC5B  F00F         	call	_LCDPutChar
  1912  001A86                     
  1913                           ;stateStpWatch.c: 42:     LCDPutChar(miliSecSTW%10+'0');
  1914  001A86  C001  F027         	movff	_miliSecSTW,___awmod@dividend
  1915  001A8A  C002  F028         	movff	_miliSecSTW+1,___awmod@dividend+1
  1916  001A8E  0E00               	movlw	0
  1917  001A90  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1918  001A92  0E0A               	movlw	10
  1919  001A94  6E29               	movwf	___awmod@divisor^0,c
  1920  001A96  EC7C  F00E         	call	___awmod	;wreg free
  1921  001A9A  5027               	movf	?___awmod^0,w,c
  1922  001A9C  0F30               	addlw	48
  1923  001A9E  EC5B  F00F         	call	_LCDPutChar
  1924  001AA2  0012               	return		;funcret
  1925  001AA4                     __end_of_displayStpWatch:
  1926                           	opt callstack 0
  1927                           
  1928 ;; *************** function _displayModify *****************
  1929 ;; Defined at:
  1930 ;;		line 100 in file "statesModify.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;Total ram usage:        2 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    7
  1951 ;; This function calls:
  1952 ;;		_LCDPutChar
  1953 ;;		_LCDPutInst
  1954 ;;		_LCDPutStr
  1955 ;;		___awdiv
  1956 ;;		___awmod
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text9
  1963  001044                     __ptext9:
  1964                           	opt callstack 0
  1965  001044                     _displayModify:
  1966                           	opt callstack 23
  1967  001044                     
  1968                           ;statesModify.c: 101:     switch (state) {
  1969  001044  EFE6  F009         	goto	l2118
  1970  001048                     l2032:
  1971                           
  1972                           ;statesModify.c: 105:             LCDPutInst(0x80);
  1973  001048  0E80               	movlw	128
  1974  00104A  EC8E  F00F         	call	_LCDPutInst
  1975  00104E                     
  1976                           ;statesModify.c: 106:             LCDPutStr(" MODIFIES HOUR ");
  1977  00104E  0E23               	movlw	low STR_2
  1978  001050  6E2E               	movwf	LCDPutStr@ptr^0,c
  1979  001052  0E10               	movlw	high STR_2
  1980  001054  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  1981  001056  EC39  F010         	call	_LCDPutStr	;wreg free
  1982  00105A                     
  1983                           ;statesModify.c: 107:             LCDPutInst(0xC0);
  1984  00105A  0EC0               	movlw	192
  1985  00105C  EC8E  F00F         	call	_LCDPutInst
  1986  001060                     
  1987                           ;statesModify.c: 108:             if ((count10ms % (20 / 2)) == 0) {
  1988  001060  C013  F027         	movff	_count10ms,___awmod@dividend
  1989  001064  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  1990  001068  0E00               	movlw	0
  1991  00106A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1992  00106C  0E0A               	movlw	10
  1993  00106E  6E29               	movwf	___awmod@divisor^0,c
  1994  001070  EC7C  F00E         	call	___awmod	;wreg free
  1995  001074  5027               	movf	?___awmod^0,w,c
  1996  001076  1028               	iorwf	(?___awmod+1)^0,w,c
  1997  001078  A4D8               	btfss	status,2,c
  1998  00107A  EF41  F008         	goto	u931
  1999  00107E  EF43  F008         	goto	u930
  2000  001082                     u931:
  2001  001082  EF7A  F008         	goto	l2048
  2002  001086                     u930:
  2003  001086                     
  2004                           ;statesModify.c: 109:                 if (blink == 0) {
  2005  001086  5009               	movf	_blink^0,w,c
  2006  001088  100A               	iorwf	(_blink+1)^0,w,c
  2007  00108A  A4D8               	btfss	status,2,c
  2008  00108C  EF4A  F008         	goto	u941
  2009  001090  EF4C  F008         	goto	u940
  2010  001094                     u941:
  2011  001094  EF54  F008         	goto	l2044
  2012  001098                     u940:
  2013  001098                     
  2014                           ;statesModify.c: 110:                     LCDPutChar(' ');
  2015  001098  0E20               	movlw	32
  2016  00109A  EC5B  F00F         	call	_LCDPutChar
  2017                           
  2018                           ;statesModify.c: 111:                     LCDPutChar(' ');
  2019  00109E  0E20               	movlw	32
  2020  0010A0  EC5B  F00F         	call	_LCDPutChar
  2021                           
  2022                           ;statesModify.c: 112:                 }
  2023  0010A4  EF70  F008         	goto	l2046
  2024  0010A8                     l2044:
  2025                           
  2026                           ;statesModify.c: 114:                     LCDPutChar(hr/10+'0');
  2027  0010A8  C00B  F027         	movff	_hr,___awdiv@dividend
  2028  0010AC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2029  0010B0  0E00               	movlw	0
  2030  0010B2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2031  0010B4  0E0A               	movlw	10
  2032  0010B6  6E29               	movwf	___awdiv@divisor^0,c
  2033  0010B8  ECB9  F00D         	call	___awdiv	;wreg free
  2034  0010BC  5027               	movf	?___awdiv^0,w,c
  2035  0010BE  0F30               	addlw	48
  2036  0010C0  EC5B  F00F         	call	_LCDPutChar
  2037                           
  2038                           ;statesModify.c: 115:                     LCDPutChar(hr%10+'0');
  2039  0010C4  C00B  F027         	movff	_hr,___awmod@dividend
  2040  0010C8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2041  0010CC  0E00               	movlw	0
  2042  0010CE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2043  0010D0  0E0A               	movlw	10
  2044  0010D2  6E29               	movwf	___awmod@divisor^0,c
  2045  0010D4  EC7C  F00E         	call	___awmod	;wreg free
  2046  0010D8  5027               	movf	?___awmod^0,w,c
  2047  0010DA  0F30               	addlw	48
  2048  0010DC  EC5B  F00F         	call	_LCDPutChar
  2049  0010E0                     l2046:
  2050                           
  2051                           ;statesModify.c: 117:                 blink = (blink + 1) % 2;
  2052  0010E0  0E01               	movlw	1
  2053  0010E2  2409               	addwf	_blink^0,w,c
  2054  0010E4  6E30               	movwf	??_displayModify^0,c
  2055  0010E6  0E00               	movlw	0
  2056  0010E8  200A               	addwfc	(_blink+1)^0,w,c
  2057  0010EA  6E31               	movwf	(??_displayModify+1)^0,c
  2058  0010EC  0E01               	movlw	1
  2059  0010EE  1430               	andwf	??_displayModify^0,w,c
  2060  0010F0  6E09               	movwf	_blink^0,c
  2061  0010F2  6A0A               	clrf	(_blink+1)^0,c
  2062  0010F4                     l2048:
  2063                           
  2064                           ;statesModify.c: 119:             LCDPutChar(':');
  2065  0010F4  0E3A               	movlw	58
  2066  0010F6  EC5B  F00F         	call	_LCDPutChar
  2067  0010FA                     
  2068                           ;statesModify.c: 120:             LCDPutChar(min/10+'0');
  2069  0010FA  C00D  F027         	movff	_min,___awdiv@dividend
  2070  0010FE  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2071  001102  0E00               	movlw	0
  2072  001104  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2073  001106  0E0A               	movlw	10
  2074  001108  6E29               	movwf	___awdiv@divisor^0,c
  2075  00110A  ECB9  F00D         	call	___awdiv	;wreg free
  2076  00110E  5027               	movf	?___awdiv^0,w,c
  2077  001110  0F30               	addlw	48
  2078  001112  EC5B  F00F         	call	_LCDPutChar
  2079  001116                     
  2080                           ;statesModify.c: 121:             LCDPutChar(min%10+'0');
  2081  001116  C00D  F027         	movff	_min,___awmod@dividend
  2082  00111A  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2083  00111E  0E00               	movlw	0
  2084  001120  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2085  001122  0E0A               	movlw	10
  2086  001124  6E29               	movwf	___awmod@divisor^0,c
  2087  001126  EC7C  F00E         	call	___awmod	;wreg free
  2088  00112A  5027               	movf	?___awmod^0,w,c
  2089  00112C  0F30               	addlw	48
  2090  00112E  EC5B  F00F         	call	_LCDPutChar
  2091  001132                     
  2092                           ;statesModify.c: 122:             LCDPutChar(':');
  2093  001132  0E3A               	movlw	58
  2094  001134  EC5B  F00F         	call	_LCDPutChar
  2095  001138                     
  2096                           ;statesModify.c: 123:             LCDPutChar(sec/10+'0');
  2097  001138  C00F  F027         	movff	_sec,___awdiv@dividend
  2098  00113C  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2099  001140  0E00               	movlw	0
  2100  001142  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2101  001144  0E0A               	movlw	10
  2102  001146  6E29               	movwf	___awdiv@divisor^0,c
  2103  001148  ECB9  F00D         	call	___awdiv	;wreg free
  2104  00114C  5027               	movf	?___awdiv^0,w,c
  2105  00114E  0F30               	addlw	48
  2106  001150  EC5B  F00F         	call	_LCDPutChar
  2107  001154                     
  2108                           ;statesModify.c: 124:             LCDPutChar(sec%10+'0');
  2109  001154  C00F  F027         	movff	_sec,___awmod@dividend
  2110  001158  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2111  00115C  0E00               	movlw	0
  2112  00115E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2113  001160  0E0A               	movlw	10
  2114  001162  6E29               	movwf	___awmod@divisor^0,c
  2115  001164  EC7C  F00E         	call	___awmod	;wreg free
  2116  001168  5027               	movf	?___awmod^0,w,c
  2117  00116A  0F30               	addlw	48
  2118  00116C  EC5B  F00F         	call	_LCDPutChar
  2119                           
  2120                           ;statesModify.c: 125:             break;
  2121  001170  EF07  F00A         	goto	l409
  2122  001174                     l2060:
  2123                           
  2124                           ;statesModify.c: 127:             LCDPutInst(0x80);
  2125  001174  0E80               	movlw	128
  2126  001176  EC8E  F00F         	call	_LCDPutInst
  2127  00117A                     
  2128                           ;statesModify.c: 128:             LCDPutStr("MODIFIES MINUTE");
  2129  00117A  0E33               	movlw	low STR_3
  2130  00117C  6E2E               	movwf	LCDPutStr@ptr^0,c
  2131  00117E  0E10               	movlw	high STR_3
  2132  001180  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2133  001182  EC39  F010         	call	_LCDPutStr	;wreg free
  2134  001186                     
  2135                           ;statesModify.c: 129:             LCDPutInst(0xC0);
  2136  001186  0EC0               	movlw	192
  2137  001188  EC8E  F00F         	call	_LCDPutInst
  2138  00118C                     
  2139                           ;statesModify.c: 130:             LCDPutChar(hr/10+'0');
  2140  00118C  C00B  F027         	movff	_hr,___awdiv@dividend
  2141  001190  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2142  001194  0E00               	movlw	0
  2143  001196  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2144  001198  0E0A               	movlw	10
  2145  00119A  6E29               	movwf	___awdiv@divisor^0,c
  2146  00119C  ECB9  F00D         	call	___awdiv	;wreg free
  2147  0011A0  5027               	movf	?___awdiv^0,w,c
  2148  0011A2  0F30               	addlw	48
  2149  0011A4  EC5B  F00F         	call	_LCDPutChar
  2150  0011A8                     
  2151                           ;statesModify.c: 131:             LCDPutChar(hr%10+'0');
  2152  0011A8  C00B  F027         	movff	_hr,___awmod@dividend
  2153  0011AC  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2154  0011B0  0E00               	movlw	0
  2155  0011B2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2156  0011B4  0E0A               	movlw	10
  2157  0011B6  6E29               	movwf	___awmod@divisor^0,c
  2158  0011B8  EC7C  F00E         	call	___awmod	;wreg free
  2159  0011BC  5027               	movf	?___awmod^0,w,c
  2160  0011BE  0F30               	addlw	48
  2161  0011C0  EC5B  F00F         	call	_LCDPutChar
  2162  0011C4                     
  2163                           ;statesModify.c: 132:             LCDPutChar(':');
  2164  0011C4  0E3A               	movlw	58
  2165  0011C6  EC5B  F00F         	call	_LCDPutChar
  2166  0011CA                     
  2167                           ;statesModify.c: 133:             if ((count10ms % (20 / 2)) == 0) {
  2168  0011CA  C013  F027         	movff	_count10ms,___awmod@dividend
  2169  0011CE  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2170  0011D2  0E00               	movlw	0
  2171  0011D4  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2172  0011D6  0E0A               	movlw	10
  2173  0011D8  6E29               	movwf	___awmod@divisor^0,c
  2174  0011DA  EC7C  F00E         	call	___awmod	;wreg free
  2175  0011DE  5027               	movf	?___awmod^0,w,c
  2176  0011E0  1028               	iorwf	(?___awmod+1)^0,w,c
  2177  0011E2  A4D8               	btfss	status,2,c
  2178  0011E4  EFF6  F008         	goto	u951
  2179  0011E8  EFF8  F008         	goto	u950
  2180  0011EC                     u951:
  2181  0011EC  EF2F  F009         	goto	l2082
  2182  0011F0                     u950:
  2183  0011F0                     
  2184                           ;statesModify.c: 134:                 if (blink == 0) {
  2185  0011F0  5009               	movf	_blink^0,w,c
  2186  0011F2  100A               	iorwf	(_blink+1)^0,w,c
  2187  0011F4  A4D8               	btfss	status,2,c
  2188  0011F6  EFFF  F008         	goto	u961
  2189  0011FA  EF01  F009         	goto	u960
  2190  0011FE                     u961:
  2191  0011FE  EF09  F009         	goto	l2078
  2192  001202                     u960:
  2193  001202                     
  2194                           ;statesModify.c: 135:                     LCDPutChar(' ');
  2195  001202  0E20               	movlw	32
  2196  001204  EC5B  F00F         	call	_LCDPutChar
  2197                           
  2198                           ;statesModify.c: 136:                     LCDPutChar(' ');
  2199  001208  0E20               	movlw	32
  2200  00120A  EC5B  F00F         	call	_LCDPutChar
  2201                           
  2202                           ;statesModify.c: 137:                 }
  2203  00120E  EF25  F009         	goto	l2080
  2204  001212                     l2078:
  2205                           
  2206                           ;statesModify.c: 139:                     LCDPutChar(min/10+'0');
  2207  001212  C00D  F027         	movff	_min,___awdiv@dividend
  2208  001216  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2209  00121A  0E00               	movlw	0
  2210  00121C  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2211  00121E  0E0A               	movlw	10
  2212  001220  6E29               	movwf	___awdiv@divisor^0,c
  2213  001222  ECB9  F00D         	call	___awdiv	;wreg free
  2214  001226  5027               	movf	?___awdiv^0,w,c
  2215  001228  0F30               	addlw	48
  2216  00122A  EC5B  F00F         	call	_LCDPutChar
  2217                           
  2218                           ;statesModify.c: 140:                     LCDPutChar(min%10+'0');
  2219  00122E  C00D  F027         	movff	_min,___awmod@dividend
  2220  001232  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2221  001236  0E00               	movlw	0
  2222  001238  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2223  00123A  0E0A               	movlw	10
  2224  00123C  6E29               	movwf	___awmod@divisor^0,c
  2225  00123E  EC7C  F00E         	call	___awmod	;wreg free
  2226  001242  5027               	movf	?___awmod^0,w,c
  2227  001244  0F30               	addlw	48
  2228  001246  EC5B  F00F         	call	_LCDPutChar
  2229  00124A                     l2080:
  2230                           
  2231                           ;statesModify.c: 142:                 blink = (blink + 1) % 2;
  2232  00124A  0E01               	movlw	1
  2233  00124C  2409               	addwf	_blink^0,w,c
  2234  00124E  6E30               	movwf	??_displayModify^0,c
  2235  001250  0E00               	movlw	0
  2236  001252  200A               	addwfc	(_blink+1)^0,w,c
  2237  001254  6E31               	movwf	(??_displayModify+1)^0,c
  2238  001256  0E01               	movlw	1
  2239  001258  1430               	andwf	??_displayModify^0,w,c
  2240  00125A  6E09               	movwf	_blink^0,c
  2241  00125C  6A0A               	clrf	(_blink+1)^0,c
  2242  00125E                     l2082:
  2243                           
  2244                           ;statesModify.c: 144:             LCDPutChar(':');
  2245  00125E  0E3A               	movlw	58
  2246  001260  EC5B  F00F         	call	_LCDPutChar
  2247  001264                     
  2248                           ;statesModify.c: 145:             LCDPutChar(sec/10+'0');
  2249  001264  C00F  F027         	movff	_sec,___awdiv@dividend
  2250  001268  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2251  00126C  0E00               	movlw	0
  2252  00126E  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2253  001270  0E0A               	movlw	10
  2254  001272  6E29               	movwf	___awdiv@divisor^0,c
  2255  001274  ECB9  F00D         	call	___awdiv	;wreg free
  2256  001278  5027               	movf	?___awdiv^0,w,c
  2257  00127A  0F30               	addlw	48
  2258  00127C  EC5B  F00F         	call	_LCDPutChar
  2259  001280                     
  2260                           ;statesModify.c: 146:             LCDPutChar(sec%10+'0');
  2261  001280  C00F  F027         	movff	_sec,___awmod@dividend
  2262  001284  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2263  001288  0E00               	movlw	0
  2264  00128A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2265  00128C  0E0A               	movlw	10
  2266  00128E  6E29               	movwf	___awmod@divisor^0,c
  2267  001290  EC7C  F00E         	call	___awmod	;wreg free
  2268  001294  5027               	movf	?___awmod^0,w,c
  2269  001296  0F30               	addlw	48
  2270  001298  EC5B  F00F         	call	_LCDPutChar
  2271                           
  2272                           ;statesModify.c: 147:             break;
  2273  00129C  EF07  F00A         	goto	l409
  2274  0012A0                     l2088:
  2275                           
  2276                           ;statesModify.c: 149:             LCDPutInst(0x80);
  2277  0012A0  0E80               	movlw	128
  2278  0012A2  EC8E  F00F         	call	_LCDPutInst
  2279  0012A6                     
  2280                           ;statesModify.c: 150:             LCDPutStr("MODIFIES MINUTE");
  2281  0012A6  0E33               	movlw	low STR_3
  2282  0012A8  6E2E               	movwf	LCDPutStr@ptr^0,c
  2283  0012AA  0E10               	movlw	high STR_3
  2284  0012AC  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2285  0012AE  EC39  F010         	call	_LCDPutStr	;wreg free
  2286  0012B2                     
  2287                           ;statesModify.c: 151:             LCDPutInst(0xC0);
  2288  0012B2  0EC0               	movlw	192
  2289  0012B4  EC8E  F00F         	call	_LCDPutInst
  2290  0012B8                     
  2291                           ;statesModify.c: 152:             LCDPutChar(hr/10+'0');
  2292  0012B8  C00B  F027         	movff	_hr,___awdiv@dividend
  2293  0012BC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2294  0012C0  0E00               	movlw	0
  2295  0012C2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2296  0012C4  0E0A               	movlw	10
  2297  0012C6  6E29               	movwf	___awdiv@divisor^0,c
  2298  0012C8  ECB9  F00D         	call	___awdiv	;wreg free
  2299  0012CC  5027               	movf	?___awdiv^0,w,c
  2300  0012CE  0F30               	addlw	48
  2301  0012D0  EC5B  F00F         	call	_LCDPutChar
  2302  0012D4                     
  2303                           ;statesModify.c: 153:             LCDPutChar(hr%10+'0');
  2304  0012D4  C00B  F027         	movff	_hr,___awmod@dividend
  2305  0012D8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2306  0012DC  0E00               	movlw	0
  2307  0012DE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2308  0012E0  0E0A               	movlw	10
  2309  0012E2  6E29               	movwf	___awmod@divisor^0,c
  2310  0012E4  EC7C  F00E         	call	___awmod	;wreg free
  2311  0012E8  5027               	movf	?___awmod^0,w,c
  2312  0012EA  0F30               	addlw	48
  2313  0012EC  EC5B  F00F         	call	_LCDPutChar
  2314  0012F0                     
  2315                           ;statesModify.c: 154:             LCDPutChar(':');
  2316  0012F0  0E3A               	movlw	58
  2317  0012F2  EC5B  F00F         	call	_LCDPutChar
  2318  0012F6                     
  2319                           ;statesModify.c: 155:             LCDPutChar(min/10+'0');
  2320  0012F6  C00D  F027         	movff	_min,___awdiv@dividend
  2321  0012FA  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2322  0012FE  0E00               	movlw	0
  2323  001300  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2324  001302  0E0A               	movlw	10
  2325  001304  6E29               	movwf	___awdiv@divisor^0,c
  2326  001306  ECB9  F00D         	call	___awdiv	;wreg free
  2327  00130A  5027               	movf	?___awdiv^0,w,c
  2328  00130C  0F30               	addlw	48
  2329  00130E  EC5B  F00F         	call	_LCDPutChar
  2330  001312                     
  2331                           ;statesModify.c: 156:             LCDPutChar(min%10+'0');
  2332  001312  C00D  F027         	movff	_min,___awmod@dividend
  2333  001316  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2334  00131A  0E00               	movlw	0
  2335  00131C  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2336  00131E  0E0A               	movlw	10
  2337  001320  6E29               	movwf	___awmod@divisor^0,c
  2338  001322  EC7C  F00E         	call	___awmod	;wreg free
  2339  001326  5027               	movf	?___awmod^0,w,c
  2340  001328  0F30               	addlw	48
  2341  00132A  EC5B  F00F         	call	_LCDPutChar
  2342  00132E                     
  2343                           ;statesModify.c: 157:             LCDPutChar(':');
  2344  00132E  0E3A               	movlw	58
  2345  001330  EC5B  F00F         	call	_LCDPutChar
  2346  001334                     
  2347                           ;statesModify.c: 158:             if ((count10ms % (20 / 2)) == 0) {
  2348  001334  C013  F027         	movff	_count10ms,___awmod@dividend
  2349  001338  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2350  00133C  0E00               	movlw	0
  2351  00133E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2352  001340  0E0A               	movlw	10
  2353  001342  6E29               	movwf	___awmod@divisor^0,c
  2354  001344  EC7C  F00E         	call	___awmod	;wreg free
  2355  001348  5027               	movf	?___awmod^0,w,c
  2356  00134A  1028               	iorwf	(?___awmod+1)^0,w,c
  2357  00134C  A4D8               	btfss	status,2,c
  2358  00134E  EFAB  F009         	goto	u971
  2359  001352  EFAD  F009         	goto	u970
  2360  001356                     u971:
  2361  001356  EF07  F00A         	goto	l409
  2362  00135A                     u970:
  2363  00135A                     
  2364                           ;statesModify.c: 159:                 if (blink == 0) {
  2365  00135A  5009               	movf	_blink^0,w,c
  2366  00135C  100A               	iorwf	(_blink+1)^0,w,c
  2367  00135E  A4D8               	btfss	status,2,c
  2368  001360  EFB4  F009         	goto	u981
  2369  001364  EFB6  F009         	goto	u980
  2370  001368                     u981:
  2371  001368  EFBE  F009         	goto	l2112
  2372  00136C                     u980:
  2373  00136C                     
  2374                           ;statesModify.c: 160:                     LCDPutChar(' ');
  2375  00136C  0E20               	movlw	32
  2376  00136E  EC5B  F00F         	call	_LCDPutChar
  2377                           
  2378                           ;statesModify.c: 161:                     LCDPutChar(' ');
  2379  001372  0E20               	movlw	32
  2380  001374  EC5B  F00F         	call	_LCDPutChar
  2381                           
  2382                           ;statesModify.c: 162:                 }
  2383  001378  EFDA  F009         	goto	l2114
  2384  00137C                     l2112:
  2385                           
  2386                           ;statesModify.c: 164:                     LCDPutChar(sec/10+'0');
  2387  00137C  C00F  F027         	movff	_sec,___awdiv@dividend
  2388  001380  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2389  001384  0E00               	movlw	0
  2390  001386  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2391  001388  0E0A               	movlw	10
  2392  00138A  6E29               	movwf	___awdiv@divisor^0,c
  2393  00138C  ECB9  F00D         	call	___awdiv	;wreg free
  2394  001390  5027               	movf	?___awdiv^0,w,c
  2395  001392  0F30               	addlw	48
  2396  001394  EC5B  F00F         	call	_LCDPutChar
  2397                           
  2398                           ;statesModify.c: 165:                     LCDPutChar(sec%10+'0');
  2399  001398  C00F  F027         	movff	_sec,___awmod@dividend
  2400  00139C  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2401  0013A0  0E00               	movlw	0
  2402  0013A2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2403  0013A4  0E0A               	movlw	10
  2404  0013A6  6E29               	movwf	___awmod@divisor^0,c
  2405  0013A8  EC7C  F00E         	call	___awmod	;wreg free
  2406  0013AC  5027               	movf	?___awmod^0,w,c
  2407  0013AE  0F30               	addlw	48
  2408  0013B0  EC5B  F00F         	call	_LCDPutChar
  2409  0013B4                     l2114:
  2410                           
  2411                           ;statesModify.c: 167:                 blink = (blink + 1) % 2;
  2412  0013B4  0E01               	movlw	1
  2413  0013B6  2409               	addwf	_blink^0,w,c
  2414  0013B8  6E30               	movwf	??_displayModify^0,c
  2415  0013BA  0E00               	movlw	0
  2416  0013BC  200A               	addwfc	(_blink+1)^0,w,c
  2417  0013BE  6E31               	movwf	(??_displayModify+1)^0,c
  2418  0013C0  0E01               	movlw	1
  2419  0013C2  1430               	andwf	??_displayModify^0,w,c
  2420  0013C4  6E09               	movwf	_blink^0,c
  2421  0013C6  6A0A               	clrf	(_blink+1)^0,c
  2422  0013C8  EF07  F00A         	goto	l409
  2423  0013CC                     l2118:
  2424  0013CC  501E               	movf	_state^0,w,c
  2425  0013CE  6E30               	movwf	??_displayModify^0,c
  2426  0013D0  6A31               	clrf	(??_displayModify+1)^0,c
  2427                           
  2428                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2429                           ; Switch size 1, requested type "simple"
  2430                           ; Number of cases is 1, Range of values is 0 to 0
  2431                           ; switch strategies available:
  2432                           ; Name         Instructions Cycles
  2433                           ; simple_byte            4     3 (average)
  2434                           ;	Chosen strategy is simple_byte
  2435  0013D2  5031               	movf	(??_displayModify+1)^0,w,c
  2436  0013D4  0A00               	xorlw	0	; case 0
  2437  0013D6  B4D8               	btfsc	status,2,c
  2438  0013D8  EFF0  F009         	goto	l2266
  2439  0013DC  EF07  F00A         	goto	l409
  2440  0013E0                     l2266:
  2441                           
  2442                           ; Switch size 1, requested type "simple"
  2443                           ; Number of cases is 5, Range of values is 0 to 4
  2444                           ; switch strategies available:
  2445                           ; Name         Instructions Cycles
  2446                           ; simple_byte           16     9 (average)
  2447                           ;	Chosen strategy is simple_byte
  2448  0013E0  5030               	movf	??_displayModify^0,w,c
  2449  0013E2  0A00               	xorlw	0	; case 0
  2450  0013E4  B4D8               	btfsc	status,2,c
  2451  0013E6  EF07  F00A         	goto	l409
  2452  0013EA  0A01               	xorlw	1	; case 1
  2453  0013EC  B4D8               	btfsc	status,2,c
  2454  0013EE  EF24  F008         	goto	l2032
  2455  0013F2  0A03               	xorlw	3	; case 2
  2456  0013F4  B4D8               	btfsc	status,2,c
  2457  0013F6  EFBA  F008         	goto	l2060
  2458  0013FA  0A01               	xorlw	1	; case 3
  2459  0013FC  B4D8               	btfsc	status,2,c
  2460  0013FE  EF50  F009         	goto	l2088
  2461  001402  0A07               	xorlw	7	; case 4
  2462  001404  B4D8               	btfsc	status,2,c
  2463  001406  EF07  F00A         	goto	l409
  2464  00140A  EF07  F00A         	goto	l409
  2465  00140E                     l409:
  2466  00140E  0012               	return		;funcret
  2467  001410                     __end_of_displayModify:
  2468                           	opt callstack 0
  2469                           
  2470 ;; *************** function _displayClock *****************
  2471 ;; Defined at:
  2472 ;;		line 21 in file "stateClock.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;		None
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;		None
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;Total ram usage:        0 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    7
  2493 ;; This function calls:
  2494 ;;		_LCDPutChar
  2495 ;;		_LCDPutInst
  2496 ;;		_LCDPutStr
  2497 ;;		___awdiv
  2498 ;;		___awmod
  2499 ;; This function is called by:
  2500 ;;		_main
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text10
  2505  001AA4                     __ptext10:
  2506                           	opt callstack 0
  2507  001AA4                     _displayClock:
  2508                           	opt callstack 23
  2509  001AA4                     
  2510                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2511  001AA4  0E80               	movlw	128
  2512  001AA6  EC8E  F00F         	call	_LCDPutInst
  2513  001AAA                     
  2514                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2515  001AAA  0E12               	movlw	low STR_1
  2516  001AAC  6E2E               	movwf	LCDPutStr@ptr^0,c
  2517  001AAE  0E10               	movlw	high STR_1
  2518  001AB0  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2519  001AB2  EC39  F010         	call	_LCDPutStr	;wreg free
  2520  001AB6                     
  2521                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2522  001AB6  0EC0               	movlw	192
  2523  001AB8  EC8E  F00F         	call	_LCDPutInst
  2524  001ABC                     
  2525                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2526  001ABC  C00B  F027         	movff	_hr,___awdiv@dividend
  2527  001AC0  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2528  001AC4  0E00               	movlw	0
  2529  001AC6  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2530  001AC8  0E0A               	movlw	10
  2531  001ACA  6E29               	movwf	___awdiv@divisor^0,c
  2532  001ACC  ECB9  F00D         	call	___awdiv	;wreg free
  2533  001AD0  5027               	movf	?___awdiv^0,w,c
  2534  001AD2  0F30               	addlw	48
  2535  001AD4  EC5B  F00F         	call	_LCDPutChar
  2536  001AD8                     
  2537                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2538  001AD8  C00B  F027         	movff	_hr,___awmod@dividend
  2539  001ADC  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2540  001AE0  0E00               	movlw	0
  2541  001AE2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2542  001AE4  0E0A               	movlw	10
  2543  001AE6  6E29               	movwf	___awmod@divisor^0,c
  2544  001AE8  EC7C  F00E         	call	___awmod	;wreg free
  2545  001AEC  5027               	movf	?___awmod^0,w,c
  2546  001AEE  0F30               	addlw	48
  2547  001AF0  EC5B  F00F         	call	_LCDPutChar
  2548  001AF4                     
  2549                           ;stateClock.c: 27:     LCDPutChar(':');
  2550  001AF4  0E3A               	movlw	58
  2551  001AF6  EC5B  F00F         	call	_LCDPutChar
  2552  001AFA                     
  2553                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2554  001AFA  C00D  F027         	movff	_min,___awdiv@dividend
  2555  001AFE  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2556  001B02  0E00               	movlw	0
  2557  001B04  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2558  001B06  0E0A               	movlw	10
  2559  001B08  6E29               	movwf	___awdiv@divisor^0,c
  2560  001B0A  ECB9  F00D         	call	___awdiv	;wreg free
  2561  001B0E  5027               	movf	?___awdiv^0,w,c
  2562  001B10  0F30               	addlw	48
  2563  001B12  EC5B  F00F         	call	_LCDPutChar
  2564  001B16                     
  2565                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2566  001B16  C00D  F027         	movff	_min,___awmod@dividend
  2567  001B1A  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2568  001B1E  0E00               	movlw	0
  2569  001B20  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2570  001B22  0E0A               	movlw	10
  2571  001B24  6E29               	movwf	___awmod@divisor^0,c
  2572  001B26  EC7C  F00E         	call	___awmod	;wreg free
  2573  001B2A  5027               	movf	?___awmod^0,w,c
  2574  001B2C  0F30               	addlw	48
  2575  001B2E  EC5B  F00F         	call	_LCDPutChar
  2576  001B32                     
  2577                           ;stateClock.c: 30:     LCDPutChar(':');
  2578  001B32  0E3A               	movlw	58
  2579  001B34  EC5B  F00F         	call	_LCDPutChar
  2580  001B38                     
  2581                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2582  001B38  C00F  F027         	movff	_sec,___awdiv@dividend
  2583  001B3C  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2584  001B40  0E00               	movlw	0
  2585  001B42  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2586  001B44  0E0A               	movlw	10
  2587  001B46  6E29               	movwf	___awdiv@divisor^0,c
  2588  001B48  ECB9  F00D         	call	___awdiv	;wreg free
  2589  001B4C  5027               	movf	?___awdiv^0,w,c
  2590  001B4E  0F30               	addlw	48
  2591  001B50  EC5B  F00F         	call	_LCDPutChar
  2592  001B54                     
  2593                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2594  001B54  C00F  F027         	movff	_sec,___awmod@dividend
  2595  001B58  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2596  001B5C  0E00               	movlw	0
  2597  001B5E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2598  001B60  0E0A               	movlw	10
  2599  001B62  6E29               	movwf	___awmod@divisor^0,c
  2600  001B64  EC7C  F00E         	call	___awmod	;wreg free
  2601  001B68  5027               	movf	?___awmod^0,w,c
  2602  001B6A  0F30               	addlw	48
  2603  001B6C  EC5B  F00F         	call	_LCDPutChar
  2604  001B70  0012               	return		;funcret
  2605  001B72                     __end_of_displayClock:
  2606                           	opt callstack 0
  2607                           
  2608 ;; *************** function ___awmod *****************
  2609 ;; Defined at:
  2610 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  dividend        2    8[COMRAM] int 
  2613 ;;  divisor         2   10[COMRAM] int 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;  sign            1   13[COMRAM] unsigned char 
  2616 ;;  counter         1   12[COMRAM] unsigned char 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  2    8[COMRAM] int 
  2619 ;; Registers used:
  2620 ;;		wreg, status,2, status,0
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2626 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;Total ram usage:        6 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    3
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_displayClock
  2637 ;;		_displayModify
  2638 ;;		_displayStpWatch
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text11
  2643  001CF8                     __ptext11:
  2644                           	opt callstack 0
  2645  001CF8                     ___awmod:
  2646                           	opt callstack 26
  2647  001CF8  0E00               	movlw	0
  2648  001CFA  6E2C               	movwf	___awmod@sign^0,c
  2649  001CFC  BE28               	btfsc	(___awmod@dividend+1)^0,7,c
  2650  001CFE  EF85  F00E         	goto	u870
  2651  001D02  EF83  F00E         	goto	u871
  2652  001D06                     u871:
  2653  001D06  EF8B  F00E         	goto	l1952
  2654  001D0A                     u870:
  2655  001D0A  6C27               	negf	___awmod@dividend^0,c
  2656  001D0C  1E28               	comf	(___awmod@dividend+1)^0,f,c
  2657  001D0E  B0D8               	btfsc	status,0,c
  2658  001D10  2A28               	incf	(___awmod@dividend+1)^0,f,c
  2659  001D12  0E01               	movlw	1
  2660  001D14  6E2C               	movwf	___awmod@sign^0,c
  2661  001D16                     l1952:
  2662  001D16  BE2A               	btfsc	(___awmod@divisor+1)^0,7,c
  2663  001D18  EF92  F00E         	goto	u880
  2664  001D1C  EF90  F00E         	goto	u881
  2665  001D20                     u881:
  2666  001D20  EF96  F00E         	goto	l1956
  2667  001D24                     u880:
  2668  001D24  6C29               	negf	___awmod@divisor^0,c
  2669  001D26  1E2A               	comf	(___awmod@divisor+1)^0,f,c
  2670  001D28  B0D8               	btfsc	status,0,c
  2671  001D2A  2A2A               	incf	(___awmod@divisor+1)^0,f,c
  2672  001D2C                     l1956:
  2673  001D2C  5029               	movf	___awmod@divisor^0,w,c
  2674  001D2E  102A               	iorwf	(___awmod@divisor+1)^0,w,c
  2675  001D30  B4D8               	btfsc	status,2,c
  2676  001D32  EF9D  F00E         	goto	u891
  2677  001D36  EF9F  F00E         	goto	u890
  2678  001D3A                     u891:
  2679  001D3A  EFC3  F00E         	goto	l1972
  2680  001D3E                     u890:
  2681  001D3E  0E01               	movlw	1
  2682  001D40  6E2B               	movwf	___awmod@counter^0,c
  2683  001D42  EFA7  F00E         	goto	l1962
  2684  001D46                     l1960:
  2685  001D46  90D8               	bcf	status,0,c
  2686  001D48  3629               	rlcf	___awmod@divisor^0,f,c
  2687  001D4A  362A               	rlcf	(___awmod@divisor+1)^0,f,c
  2688  001D4C  2A2B               	incf	___awmod@counter^0,f,c
  2689  001D4E                     l1962:
  2690  001D4E  AE2A               	btfss	(___awmod@divisor+1)^0,7,c
  2691  001D50  EFAC  F00E         	goto	u901
  2692  001D54  EFAE  F00E         	goto	u900
  2693  001D58                     u901:
  2694  001D58  EFA3  F00E         	goto	l1960
  2695  001D5C                     u900:
  2696  001D5C                     l1964:
  2697  001D5C  5029               	movf	___awmod@divisor^0,w,c
  2698  001D5E  5C27               	subwf	___awmod@dividend^0,w,c
  2699  001D60  502A               	movf	(___awmod@divisor+1)^0,w,c
  2700  001D62  5828               	subwfb	(___awmod@dividend+1)^0,w,c
  2701  001D64  A0D8               	btfss	status,0,c
  2702  001D66  EFB7  F00E         	goto	u911
  2703  001D6A  EFB9  F00E         	goto	u910
  2704  001D6E                     u911:
  2705  001D6E  EFBD  F00E         	goto	l1968
  2706  001D72                     u910:
  2707  001D72  5029               	movf	___awmod@divisor^0,w,c
  2708  001D74  5E27               	subwf	___awmod@dividend^0,f,c
  2709  001D76  502A               	movf	(___awmod@divisor+1)^0,w,c
  2710  001D78  5A28               	subwfb	(___awmod@dividend+1)^0,f,c
  2711  001D7A                     l1968:
  2712  001D7A  90D8               	bcf	status,0,c
  2713  001D7C  322A               	rrcf	(___awmod@divisor+1)^0,f,c
  2714  001D7E  3229               	rrcf	___awmod@divisor^0,f,c
  2715  001D80  2E2B               	decfsz	___awmod@counter^0,f,c
  2716  001D82  EFAE  F00E         	goto	l1964
  2717  001D86                     l1972:
  2718  001D86  502C               	movf	___awmod@sign^0,w,c
  2719  001D88  B4D8               	btfsc	status,2,c
  2720  001D8A  EFC9  F00E         	goto	u921
  2721  001D8E  EFCB  F00E         	goto	u920
  2722  001D92                     u921:
  2723  001D92  EFCF  F00E         	goto	l1976
  2724  001D96                     u920:
  2725  001D96  6C27               	negf	___awmod@dividend^0,c
  2726  001D98  1E28               	comf	(___awmod@dividend+1)^0,f,c
  2727  001D9A  B0D8               	btfsc	status,0,c
  2728  001D9C  2A28               	incf	(___awmod@dividend+1)^0,f,c
  2729  001D9E                     l1976:
  2730  001D9E  C027  F027         	movff	___awmod@dividend,?___awmod
  2731  001DA2  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  2732  001DA6  0012               	return		;funcret
  2733  001DA8                     __end_of___awmod:
  2734                           	opt callstack 0
  2735                           
  2736 ;; *************** function ___awdiv *****************
  2737 ;; Defined at:
  2738 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  dividend        2    8[COMRAM] int 
  2741 ;;  divisor         2   10[COMRAM] int 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  quotient        2   14[COMRAM] int 
  2744 ;;  sign            1   13[COMRAM] unsigned char 
  2745 ;;  counter         1   12[COMRAM] unsigned char 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  2    8[COMRAM] int 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;Total ram usage:        8 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    3
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_displayClock
  2766 ;;		_displayModify
  2767 ;;		_displayStpWatch
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text12
  2772  001B72                     __ptext12:
  2773                           	opt callstack 0
  2774  001B72                     ___awdiv:
  2775                           	opt callstack 26
  2776  001B72  0E00               	movlw	0
  2777  001B74  6E2C               	movwf	___awdiv@sign^0,c
  2778  001B76  BE2A               	btfsc	(___awdiv@divisor+1)^0,7,c
  2779  001B78  EFC2  F00D         	goto	u810
  2780  001B7C  EFC0  F00D         	goto	u811
  2781  001B80                     u811:
  2782  001B80  EFC8  F00D         	goto	l1908
  2783  001B84                     u810:
  2784  001B84  6C29               	negf	___awdiv@divisor^0,c
  2785  001B86  1E2A               	comf	(___awdiv@divisor+1)^0,f,c
  2786  001B88  B0D8               	btfsc	status,0,c
  2787  001B8A  2A2A               	incf	(___awdiv@divisor+1)^0,f,c
  2788  001B8C  0E01               	movlw	1
  2789  001B8E  6E2C               	movwf	___awdiv@sign^0,c
  2790  001B90                     l1908:
  2791  001B90  BE28               	btfsc	(___awdiv@dividend+1)^0,7,c
  2792  001B92  EFCF  F00D         	goto	u820
  2793  001B96  EFCD  F00D         	goto	u821
  2794  001B9A                     u821:
  2795  001B9A  EFD5  F00D         	goto	l1914
  2796  001B9E                     u820:
  2797  001B9E  6C27               	negf	___awdiv@dividend^0,c
  2798  001BA0  1E28               	comf	(___awdiv@dividend+1)^0,f,c
  2799  001BA2  B0D8               	btfsc	status,0,c
  2800  001BA4  2A28               	incf	(___awdiv@dividend+1)^0,f,c
  2801  001BA6  0E01               	movlw	1
  2802  001BA8  1A2C               	xorwf	___awdiv@sign^0,f,c
  2803  001BAA                     l1914:
  2804  001BAA  0E00               	movlw	0
  2805  001BAC  6E2E               	movwf	(___awdiv@quotient+1)^0,c
  2806  001BAE  0E00               	movlw	0
  2807  001BB0  6E2D               	movwf	___awdiv@quotient^0,c
  2808  001BB2  5029               	movf	___awdiv@divisor^0,w,c
  2809  001BB4  102A               	iorwf	(___awdiv@divisor+1)^0,w,c
  2810  001BB6  B4D8               	btfsc	status,2,c
  2811  001BB8  EFE0  F00D         	goto	u831
  2812  001BBC  EFE2  F00D         	goto	u830
  2813  001BC0                     u831:
  2814  001BC0  EF0A  F00E         	goto	l1936
  2815  001BC4                     u830:
  2816  001BC4  0E01               	movlw	1
  2817  001BC6  6E2B               	movwf	___awdiv@counter^0,c
  2818  001BC8  EFEA  F00D         	goto	l1922
  2819  001BCC                     l1920:
  2820  001BCC  90D8               	bcf	status,0,c
  2821  001BCE  3629               	rlcf	___awdiv@divisor^0,f,c
  2822  001BD0  362A               	rlcf	(___awdiv@divisor+1)^0,f,c
  2823  001BD2  2A2B               	incf	___awdiv@counter^0,f,c
  2824  001BD4                     l1922:
  2825  001BD4  AE2A               	btfss	(___awdiv@divisor+1)^0,7,c
  2826  001BD6  EFEF  F00D         	goto	u841
  2827  001BDA  EFF1  F00D         	goto	u840
  2828  001BDE                     u841:
  2829  001BDE  EFE6  F00D         	goto	l1920
  2830  001BE2                     u840:
  2831  001BE2                     l1924:
  2832  001BE2  90D8               	bcf	status,0,c
  2833  001BE4  362D               	rlcf	___awdiv@quotient^0,f,c
  2834  001BE6  362E               	rlcf	(___awdiv@quotient+1)^0,f,c
  2835  001BE8  5029               	movf	___awdiv@divisor^0,w,c
  2836  001BEA  5C27               	subwf	___awdiv@dividend^0,w,c
  2837  001BEC  502A               	movf	(___awdiv@divisor+1)^0,w,c
  2838  001BEE  5828               	subwfb	(___awdiv@dividend+1)^0,w,c
  2839  001BF0  A0D8               	btfss	status,0,c
  2840  001BF2  EFFD  F00D         	goto	u851
  2841  001BF6  EFFF  F00D         	goto	u850
  2842  001BFA                     u851:
  2843  001BFA  EF04  F00E         	goto	l1932
  2844  001BFE                     u850:
  2845  001BFE  5029               	movf	___awdiv@divisor^0,w,c
  2846  001C00  5E27               	subwf	___awdiv@dividend^0,f,c
  2847  001C02  502A               	movf	(___awdiv@divisor+1)^0,w,c
  2848  001C04  5A28               	subwfb	(___awdiv@dividend+1)^0,f,c
  2849  001C06  802D               	bsf	___awdiv@quotient^0,0,c
  2850  001C08                     l1932:
  2851  001C08  90D8               	bcf	status,0,c
  2852  001C0A  322A               	rrcf	(___awdiv@divisor+1)^0,f,c
  2853  001C0C  3229               	rrcf	___awdiv@divisor^0,f,c
  2854  001C0E  2E2B               	decfsz	___awdiv@counter^0,f,c
  2855  001C10  EFF1  F00D         	goto	l1924
  2856  001C14                     l1936:
  2857  001C14  502C               	movf	___awdiv@sign^0,w,c
  2858  001C16  B4D8               	btfsc	status,2,c
  2859  001C18  EF10  F00E         	goto	u861
  2860  001C1C  EF12  F00E         	goto	u860
  2861  001C20                     u861:
  2862  001C20  EF16  F00E         	goto	l1940
  2863  001C24                     u860:
  2864  001C24  6C2D               	negf	___awdiv@quotient^0,c
  2865  001C26  1E2E               	comf	(___awdiv@quotient+1)^0,f,c
  2866  001C28  B0D8               	btfsc	status,0,c
  2867  001C2A  2A2E               	incf	(___awdiv@quotient+1)^0,f,c
  2868  001C2C                     l1940:
  2869  001C2C  C02D  F027         	movff	___awdiv@quotient,?___awdiv
  2870  001C30  C02E  F028         	movff	___awdiv@quotient+1,?___awdiv+1
  2871  001C34  0012               	return		;funcret
  2872  001C36                     __end_of___awdiv:
  2873                           	opt callstack 0
  2874                           
  2875 ;; *************** function _LCDPutStr *****************
  2876 ;; Defined at:
  2877 ;;		line 198 in file "BBSPI_LCD.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  2880 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  2881 ;;		 -> STR_1(17), 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;Total ram usage:        2 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    6
  2900 ;; This function calls:
  2901 ;;		_LCDPutChar
  2902 ;; This function is called by:
  2903 ;;		_displayClock
  2904 ;;		_displayModify
  2905 ;;		_displayStpWatch
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text13
  2910  002072                     __ptext13:
  2911                           	opt callstack 0
  2912  002072                     _LCDPutStr:
  2913                           	opt callstack 23
  2914  002072                     
  2915                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  2916  002072  EF47  F010         	goto	l1898
  2917  002076                     l1894:
  2918  002076  C02E  FFF6         	movff	LCDPutStr@ptr,tblptrl
  2919  00207A  C02F  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  2920  00207E                     	if	0	;tblptru may be non-zero
  2921  00207E                     	endif
  2922  00207E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2923  00207E  0E00               	movlw	low (__mediumconst shr (0+16))
  2924  002080  6EF8               	movwf	tblptru,c
  2925  002082                     	endif
  2926  002082  0008               	tblrd		*
  2927  002084  50F5               	movf	tablat,w,c
  2928  002086  EC5B  F00F         	call	_LCDPutChar
  2929  00208A  4A2E               	infsnz	LCDPutStr@ptr^0,f,c
  2930  00208C  2A2F               	incf	(LCDPutStr@ptr+1)^0,f,c
  2931  00208E                     l1898:
  2932  00208E  C02E  FFF6         	movff	LCDPutStr@ptr,tblptrl
  2933  002092  C02F  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  2934  002096                     	if	0	;tblptru may be non-zero
  2935  002096                     	endif
  2936  002096                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2937  002096  0E00               	movlw	low (__mediumconst shr (0+16))
  2938  002098  6EF8               	movwf	tblptru,c
  2939  00209A                     	endif
  2940  00209A  0008               	tblrd		*
  2941  00209C  50F5               	movf	tablat,w,c
  2942  00209E  0900               	iorlw	0
  2943  0020A0  A4D8               	btfss	status,2,c
  2944  0020A2  EF55  F010         	goto	u801
  2945  0020A6  EF57  F010         	goto	u800
  2946  0020AA                     u801:
  2947  0020AA  EF3B  F010         	goto	l1894
  2948  0020AE                     u800:
  2949  0020AE  0012               	return		;funcret
  2950  0020B0                     __end_of_LCDPutStr:
  2951                           	opt callstack 0
  2952                           
  2953 ;; *************** function _LCDPutChar *****************
  2954 ;; Defined at:
  2955 ;;		line 160 in file "BBSPI_LCD.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  ch              1    wreg     unsigned char 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  ch              1   14[COMRAM] unsigned char 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, status,2, status,0, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;Total ram usage:        2 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    5
  2976 ;; This function calls:
  2977 ;;		_WritePort_BBSPI
  2978 ;; This function is called by:
  2979 ;;		_LCDPutStr
  2980 ;;		_displayClock
  2981 ;;		_displayModify
  2982 ;;		_displayStpWatch
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text14
  2987  001EB6                     __ptext14:
  2988                           	opt callstack 0
  2989  001EB6                     _LCDPutChar:
  2990                           	opt callstack 23
  2991                           
  2992                           ;incstack = 0
  2993                           ;LCDPutChar@ch stored from wreg
  2994  001EB6  6E2D               	movwf	LCDPutChar@ch^0,c
  2995  001EB8                     
  2996                           ;BBSPI_LCD.c: 160: void LCDPutChar (unsigned char ch);BBSPI_LCD.c: 161: {;BBSPI_LCD.c: 1
      +                          62:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2997  001EB8  0E11               	movlw	17
  2998  001EBA  6E2C               	movwf	??_LCDPutChar^0,c
  2999  001EBC  0E3A               	movlw	58
  3000  001EBE                     u1107:
  3001  001EBE  2EE8               	decfsz	wreg,f,c
  3002  001EC0  D7FE               	bra	u1107
  3003  001EC2  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3004  001EC4  D7FC               	bra	u1107
  3005  001EC6  D000               	nop2	
  3006  001EC8                     
  3007                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3008  001EC8  0E80               	movlw	128
  3009  001ECA  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3010  001ECC  0E12               	movlw	18
  3011  001ECE  ECAC  F010         	call	_WritePort_BBSPI
  3012  001ED2                     
  3013                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3014  001ED2  0E04               	movlw	4
  3015  001ED4  6E2C               	movwf	??_LCDPutChar^0,c
  3016  001ED6  0E3E               	movlw	62
  3017  001ED8                     u1117:
  3018  001ED8  2EE8               	decfsz	wreg,f,c
  3019  001EDA  D7FE               	bra	u1117
  3020  001EDC  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3021  001EDE  D7FC               	bra	u1117
  3022  001EE0                     
  3023                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3024  001EE0  C02D  F02A         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3025  001EE4  0E13               	movlw	19
  3026  001EE6  ECAC  F010         	call	_WritePort_BBSPI
  3027  001EEA                     
  3028                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3029  001EEA  0E04               	movlw	4
  3030  001EEC  6E2C               	movwf	??_LCDPutChar^0,c
  3031  001EEE  0E3E               	movlw	62
  3032  001EF0                     u1127:
  3033  001EF0  2EE8               	decfsz	wreg,f,c
  3034  001EF2  D7FE               	bra	u1127
  3035  001EF4  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3036  001EF6  D7FC               	bra	u1127
  3037  001EF8                     
  3038                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3039  001EF8  0EC0               	movlw	192
  3040  001EFA  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3041  001EFC  0E12               	movlw	18
  3042  001EFE  ECAC  F010         	call	_WritePort_BBSPI
  3043  001F02                     
  3044                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3045  001F02  0E04               	movlw	4
  3046  001F04  6E2C               	movwf	??_LCDPutChar^0,c
  3047  001F06  0E3E               	movlw	62
  3048  001F08                     u1137:
  3049  001F08  2EE8               	decfsz	wreg,f,c
  3050  001F0A  D7FE               	bra	u1137
  3051  001F0C  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3052  001F0E  D7FC               	bra	u1137
  3053  001F10                     
  3054                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3055  001F10  0E00               	movlw	0
  3056  001F12  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3057  001F14  0E12               	movlw	18
  3058  001F16  ECAC  F010         	call	_WritePort_BBSPI
  3059  001F1A  0012               	return		;funcret
  3060  001F1C                     __end_of_LCDPutChar:
  3061                           	opt callstack 0
  3062                           
  3063 ;; *************** function _buttonInitialize *****************
  3064 ;; Defined at:
  3065 ;;		line 19 in file "system.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;Total ram usage:        0 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    3
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text15
  3094  00218E                     __ptext15:
  3095                           	opt callstack 0
  3096  00218E                     _buttonInitialize:
  3097                           	opt callstack 27
  3098  00218E                     
  3099                           ;system.c: 20:     TRISAbits.TRISA5 = 1;
  3100  00218E  8A92               	bsf	146,5,c	;volatile
  3101                           
  3102                           ;system.c: 21:     TRISBbits.TRISB0 = 1;
  3103  002190  8093               	bsf	147,0,c	;volatile
  3104  002192                     
  3105                           ;system.c: 22:     ADCON1 = 0b00001111;
  3106  002192  0E0F               	movlw	15
  3107  002194  6EC1               	movwf	193,c	;volatile
  3108  002196  0012               	return		;funcret
  3109  002198                     __end_of_buttonInitialize:
  3110                           	opt callstack 0
  3111                           
  3112 ;; *************** function _LCDInit *****************
  3113 ;; Defined at:
  3114 ;;		line 45 in file "BBSPI_LCD.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:        1 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    6
  3135 ;; This function calls:
  3136 ;;		_InitBBSPI
  3137 ;;		_LCDPutInst
  3138 ;;		_Port_BBSPIInit
  3139 ;;		_WritePort_BBSPI
  3140 ;; This function is called by:
  3141 ;;		_main
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text16
  3146  001F82                     __ptext16:
  3147                           	opt callstack 0
  3148  001F82                     _LCDInit:
  3149                           	opt callstack 24
  3150  001F82                     
  3151                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3152  001F82  ECB9  F010         	call	_InitBBSPI	;wreg free
  3153  001F86                     
  3154                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3155  001F86  9C97               	bcf	151,6,c	;volatile
  3156  001F88                     
  3157                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3158  001F88  9C8E               	bcf	142,6,c	;volatile
  3159  001F8A                     
  3160                           ;BBSPI_LCD.c: 50:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3161  001F8A  0E11               	movlw	17
  3162  001F8C  6E2E               	movwf	??_LCDInit^0,c
  3163  001F8E  0E3A               	movlw	58
  3164  001F90                     u1147:
  3165  001F90  2EE8               	decfsz	wreg,f,c
  3166  001F92  D7FE               	bra	u1147
  3167  001F94  2E2E               	decfsz	??_LCDInit^0,f,c
  3168  001F96  D7FC               	bra	u1147
  3169  001F98  D000               	nop2	
  3170  001F9A                     
  3171                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3172  001F9A  8C8E               	bsf	142,6,c	;volatile
  3173  001F9C                     
  3174                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3175  001F9C  0E00               	movlw	0
  3176  001F9E  EC9F  F010         	call	_Port_BBSPIInit
  3177  001FA2                     
  3178                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3179  001FA2  0E01               	movlw	1
  3180  001FA4  EC9F  F010         	call	_Port_BBSPIInit
  3181  001FA8                     
  3182                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3183  001FA8  0E00               	movlw	0
  3184  001FAA  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3185  001FAC  0E12               	movlw	18
  3186  001FAE  ECAC  F010         	call	_WritePort_BBSPI
  3187  001FB2                     
  3188                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3189  001FB2  0E31               	movlw	49
  3190  001FB4  6E2E               	movwf	??_LCDInit^0,c
  3191  001FB6  0EB2               	movlw	178
  3192  001FB8                     u1157:
  3193  001FB8  2EE8               	decfsz	wreg,f,c
  3194  001FBA  D7FE               	bra	u1157
  3195  001FBC  2E2E               	decfsz	??_LCDInit^0,f,c
  3196  001FBE  D7FC               	bra	u1157
  3197  001FC0  D000               	nop2	
  3198  001FC2                     
  3199                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3200  001FC2  0E32               	movlw	50
  3201  001FC4  EC8E  F00F         	call	_LCDPutInst
  3202  001FC8                     
  3203                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3204  001FC8  0E3C               	movlw	60
  3205  001FCA  EC8E  F00F         	call	_LCDPutInst
  3206  001FCE                     
  3207                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3208  001FCE  0E0C               	movlw	12
  3209  001FD0  EC8E  F00F         	call	_LCDPutInst
  3210  001FD4                     
  3211                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3212  001FD4  0E01               	movlw	1
  3213  001FD6  EC8E  F00F         	call	_LCDPutInst
  3214  001FDA                     
  3215                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3216  001FDA  0E06               	movlw	6
  3217  001FDC  EC8E  F00F         	call	_LCDPutInst
  3218  001FE0  0012               	return		;funcret
  3219  001FE2                     __end_of_LCDInit:
  3220                           	opt callstack 0
  3221                           
  3222 ;; *************** function _Port_BBSPIInit *****************
  3223 ;; Defined at:
  3224 ;;		line 123 in file "BBSPI_LCD.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  port_dir        1    wreg     unsigned char 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  port_dir        1   11[COMRAM] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      void 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;Total ram usage:        1 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    4
  3245 ;; This function calls:
  3246 ;;		_SendByteBBSPI
  3247 ;; This function is called by:
  3248 ;;		_LCDInit
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text17
  3253  00213E                     __ptext17:
  3254                           	opt callstack 0
  3255  00213E                     _Port_BBSPIInit:
  3256                           	opt callstack 25
  3257                           
  3258                           ;incstack = 0
  3259                           ;Port_BBSPIInit@port_dir stored from wreg
  3260  00213E  6E2A               	movwf	Port_BBSPIInit@port_dir^0,c
  3261  002140                     
  3262                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3263  002140  9489               	bcf	137,2,c	;volatile
  3264  002142                     
  3265                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3266  002142  0E40               	movlw	64
  3267  002144  EC23  F00F         	call	_SendByteBBSPI
  3268                           
  3269                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3270  002148  502A               	movf	Port_BBSPIInit@port_dir^0,w,c
  3271  00214A  EC23  F00F         	call	_SendByteBBSPI
  3272                           
  3273                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3274  00214E  0E00               	movlw	0
  3275  002150  EC23  F00F         	call	_SendByteBBSPI
  3276  002154                     
  3277                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3278  002154  8489               	bsf	137,2,c	;volatile
  3279  002156  0012               	return		;funcret
  3280  002158                     __end_of_Port_BBSPIInit:
  3281                           	opt callstack 0
  3282                           
  3283 ;; *************** function _LCDPutInst *****************
  3284 ;; Defined at:
  3285 ;;		line 179 in file "BBSPI_LCD.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  ch              1    wreg     unsigned char 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  ch              1   14[COMRAM] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;Total ram usage:        2 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    5
  3306 ;; This function calls:
  3307 ;;		_WritePort_BBSPI
  3308 ;; This function is called by:
  3309 ;;		_LCDInit
  3310 ;;		_displayClock
  3311 ;;		_displayModify
  3312 ;;		_displayStpWatch
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text18
  3317  001F1C                     __ptext18:
  3318                           	opt callstack 0
  3319  001F1C                     _LCDPutInst:
  3320                           	opt callstack 24
  3321                           
  3322                           ;incstack = 0
  3323                           ;LCDPutInst@ch stored from wreg
  3324  001F1C  6E2D               	movwf	LCDPutInst@ch^0,c
  3325  001F1E                     
  3326                           ;BBSPI_LCD.c: 179: void LCDPutInst (unsigned char ch);BBSPI_LCD.c: 180: {;BBSPI_LCD.c: 1
      +                          81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3327  001F1E  0E11               	movlw	17
  3328  001F20  6E2C               	movwf	??_LCDPutInst^0,c
  3329  001F22  0E3A               	movlw	58
  3330  001F24                     u1167:
  3331  001F24  2EE8               	decfsz	wreg,f,c
  3332  001F26  D7FE               	bra	u1167
  3333  001F28  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3334  001F2A  D7FC               	bra	u1167
  3335  001F2C  D000               	nop2	
  3336  001F2E                     
  3337                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3338  001F2E  0E00               	movlw	0
  3339  001F30  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3340  001F32  0E12               	movlw	18
  3341  001F34  ECAC  F010         	call	_WritePort_BBSPI
  3342  001F38                     
  3343                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3344  001F38  0E04               	movlw	4
  3345  001F3A  6E2C               	movwf	??_LCDPutInst^0,c
  3346  001F3C  0E3E               	movlw	62
  3347  001F3E                     u1177:
  3348  001F3E  2EE8               	decfsz	wreg,f,c
  3349  001F40  D7FE               	bra	u1177
  3350  001F42  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3351  001F44  D7FC               	bra	u1177
  3352  001F46                     
  3353                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3354  001F46  C02D  F02A         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3355  001F4A  0E13               	movlw	19
  3356  001F4C  ECAC  F010         	call	_WritePort_BBSPI
  3357  001F50                     
  3358                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3359  001F50  0E04               	movlw	4
  3360  001F52  6E2C               	movwf	??_LCDPutInst^0,c
  3361  001F54  0E3E               	movlw	62
  3362  001F56                     u1187:
  3363  001F56  2EE8               	decfsz	wreg,f,c
  3364  001F58  D7FE               	bra	u1187
  3365  001F5A  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3366  001F5C  D7FC               	bra	u1187
  3367  001F5E                     
  3368                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3369  001F5E  0E40               	movlw	64
  3370  001F60  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3371  001F62  0E12               	movlw	18
  3372  001F64  ECAC  F010         	call	_WritePort_BBSPI
  3373  001F68                     
  3374                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3375  001F68  0E04               	movlw	4
  3376  001F6A  6E2C               	movwf	??_LCDPutInst^0,c
  3377  001F6C  0E3E               	movlw	62
  3378  001F6E                     u1197:
  3379  001F6E  2EE8               	decfsz	wreg,f,c
  3380  001F70  D7FE               	bra	u1197
  3381  001F72  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3382  001F74  D7FC               	bra	u1197
  3383  001F76                     
  3384                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3385  001F76  0E00               	movlw	0
  3386  001F78  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3387  001F7A  0E12               	movlw	18
  3388  001F7C  ECAC  F010         	call	_WritePort_BBSPI
  3389  001F80  0012               	return		;funcret
  3390  001F82                     __end_of_LCDPutInst:
  3391                           	opt callstack 0
  3392                           
  3393 ;; *************** function _WritePort_BBSPI *****************
  3394 ;; Defined at:
  3395 ;;		line 144 in file "BBSPI_LCD.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;  port_add        1    wreg     unsigned char 
  3398 ;;  a               1   11[COMRAM] unsigned char 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  port_add        1   12[COMRAM] unsigned char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      void 
  3403 ;; Registers used:
  3404 ;;		wreg, status,2, status,0, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3410 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;Total ram usage:        2 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    4
  3417 ;; This function calls:
  3418 ;;		_SendByteBBSPI
  3419 ;; This function is called by:
  3420 ;;		_LCDInit
  3421 ;;		_LCDPutChar
  3422 ;;		_LCDPutInst
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text19
  3427  002158                     __ptext19:
  3428                           	opt callstack 0
  3429  002158                     _WritePort_BBSPI:
  3430                           	opt callstack 23
  3431                           
  3432                           ;incstack = 0
  3433                           ;WritePort_BBSPI@port_add stored from wreg
  3434  002158  6E2B               	movwf	WritePort_BBSPI@port_add^0,c
  3435  00215A                     
  3436                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3437  00215A  9489               	bcf	137,2,c	;volatile
  3438  00215C                     
  3439                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3440  00215C  0E40               	movlw	64
  3441  00215E  EC23  F00F         	call	_SendByteBBSPI
  3442                           
  3443                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3444  002162  502B               	movf	WritePort_BBSPI@port_add^0,w,c
  3445  002164  EC23  F00F         	call	_SendByteBBSPI
  3446                           
  3447                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3448  002168  502A               	movf	WritePort_BBSPI@a^0,w,c
  3449  00216A  EC23  F00F         	call	_SendByteBBSPI
  3450  00216E                     
  3451                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3452  00216E  8489               	bsf	137,2,c	;volatile
  3453  002170  0012               	return		;funcret
  3454  002172                     __end_of_WritePort_BBSPI:
  3455                           	opt callstack 0
  3456                           
  3457 ;; *************** function _SendByteBBSPI *****************
  3458 ;; Defined at:
  3459 ;;		line 91 in file "BBSPI_LCD.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  output          1    wreg     unsigned char 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  output          1    8[COMRAM] unsigned char 
  3464 ;;  input           1   10[COMRAM] unsigned char 
  3465 ;;  bitcount        1    9[COMRAM] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, status,2, status,0
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;Total ram usage:        3 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    3
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_Port_BBSPIInit
  3486 ;;		_WritePort_BBSPI
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text20
  3491  001E46                     __ptext20:
  3492                           	opt callstack 0
  3493  001E46                     _SendByteBBSPI:
  3494                           	opt callstack 23
  3495                           
  3496                           ;incstack = 0
  3497                           ;SendByteBBSPI@output stored from wreg
  3498  001E46  6E27               	movwf	SendByteBBSPI@output^0,c
  3499  001E48                     
  3500                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3501  001E48  C027  F029         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3502  001E4C                     
  3503                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3504  001E4C  0E00               	movlw	0
  3505  001E4E  6E28               	movwf	SendByteBBSPI@bitcount^0,c
  3506  001E50                     l188:
  3507                           
  3508                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3509  001E50  AE27               	btfss	SendByteBBSPI@output^0,7,c
  3510  001E52  EF2D  F00F         	goto	u11
  3511  001E56  EF2F  F00F         	goto	u10
  3512  001E5A                     u11:
  3513  001E5A  EF32  F00F         	goto	l190
  3514  001E5E                     u10:
  3515  001E5E                     
  3516                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3517  001E5E  8A8B               	bsf	139,5,c	;volatile
  3518  001E60  EF33  F00F         	goto	l191
  3519  001E64                     l190:
  3520                           
  3521                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3522  001E64  9A8B               	bcf	139,5,c	;volatile
  3523  001E66                     l191:
  3524                           
  3525                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3526  001E66  A88B               	btfss	139,4,c	;volatile
  3527  001E68  EF38  F00F         	goto	u21
  3528  001E6C  EF3A  F00F         	goto	u20
  3529  001E70                     u21:
  3530  001E70  EF3E  F00F         	goto	l1148
  3531  001E74                     u20:
  3532  001E74                     
  3533                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3534  001E74  80D8               	bsf	status,0,c
  3535  001E76  3629               	rlcf	SendByteBBSPI@input^0,f,c
  3536  001E78  EF41  F00F         	goto	l1150
  3537  001E7C                     l1148:
  3538                           
  3539                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3540  001E7C  5029               	movf	SendByteBBSPI@input^0,w,c
  3541  001E7E  2429               	addwf	SendByteBBSPI@input^0,w,c
  3542  001E80  6E29               	movwf	SendByteBBSPI@input^0,c
  3543  001E82                     l1150:
  3544                           
  3545                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3546  001E82  868B               	bsf	139,3,c	;volatile
  3547  001E84                     
  3548                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3549  001E84  F000               	nop	
  3550  001E86  F000               	nop	
  3551  001E88  F000               	nop	
  3552  001E8A  F000               	nop	
  3553  001E8C  F000               	nop	
  3554  001E8E  F000               	nop	
  3555  001E90                     
  3556                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3557  001E90  F000               	nop	
  3558  001E92  F000               	nop	
  3559  001E94  F000               	nop	
  3560  001E96  F000               	nop	
  3561  001E98  F000               	nop	
  3562  001E9A  F000               	nop	
  3563  001E9C                     
  3564                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3565  001E9C  968B               	bcf	139,3,c	;volatile
  3566                           
  3567                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3568  001E9E  90D8               	bcf	status,0,c
  3569  001EA0  3627               	rlcf	SendByteBBSPI@output^0,f,c
  3570  001EA2                     
  3571                           ;BBSPI_LCD.c: 113:     }
  3572  001EA2  2A28               	incf	SendByteBBSPI@bitcount^0,f,c
  3573  001EA4  0E07               	movlw	7
  3574  001EA6  6428               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3575  001EA8  EF58  F00F         	goto	u31
  3576  001EAC  EF5A  F00F         	goto	u30
  3577  001EB0                     u31:
  3578  001EB0  EF28  F00F         	goto	l188
  3579  001EB4                     u30:
  3580  001EB4  0012               	return		;funcret
  3581  001EB6                     __end_of_SendByteBBSPI:
  3582                           	opt callstack 0
  3583                           
  3584 ;; *************** function _InitBBSPI *****************
  3585 ;; Defined at:
  3586 ;;		line 70 in file "BBSPI_LCD.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		None
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    3
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_LCDInit
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text21
  3615  002172                     __ptext21:
  3616                           	opt callstack 0
  3617  002172                     _InitBBSPI:
  3618                           	opt callstack 26
  3619  002172                     
  3620                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3621  002172  9492               	bcf	146,2,c	;volatile
  3622                           
  3623                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  3624  002174  8894               	bsf	148,4,c	;volatile
  3625                           
  3626                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  3627  002176  9A94               	bcf	148,5,c	;volatile
  3628                           
  3629                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  3630  002178  9694               	bcf	148,3,c	;volatile
  3631                           
  3632                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  3633  00217A  8489               	bsf	137,2,c	;volatile
  3634                           
  3635                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  3636  00217C  888B               	bsf	139,4,c	;volatile
  3637                           
  3638                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  3639  00217E  9A8B               	bcf	139,5,c	;volatile
  3640                           
  3641                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  3642  002180  968B               	bcf	139,3,c	;volatile
  3643  002182  0012               	return		;funcret
  3644  002184                     __end_of_InitBBSPI:
  3645                           	opt callstack 0
  3646                           
  3647 ;; *************** function _deviceInterrupt *****************
  3648 ;; Defined at:
  3649 ;;		line 3 in file "interrupt.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;Total ram usage:        0 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    2
  3670 ;; This function calls:
  3671 ;;		_button
  3672 ;; This function is called by:
  3673 ;;		Interrupt level 2
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           	psect	intcode
  3678  000008                     __pintcode:
  3679                           	opt callstack 0
  3680  000008                     _deviceInterrupt:
  3681                           	opt callstack 23
  3682                           
  3683                           ;incstack = 0
  3684  000008  823B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3685  00000A  ED58  F010         	call	int_func,f	;refresh shadow registers
  3686                           
  3687                           	psect	intcode_body
  3688  0020B0                     __pintcode_body:
  3689                           	opt callstack 23
  3690  0020B0                     int_func:
  3691                           	opt callstack 23
  3692  0020B0  0006               	pop		; remove dummy address from shadow register refresh
  3693  0020B2                     
  3694                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  3695  0020B2  A4F2               	btfss	242,2,c	;volatile
  3696  0020B4  EF5E  F010         	goto	i2u108_41
  3697  0020B8  EF60  F010         	goto	i2u108_40
  3698  0020BC                     i2u108_41:
  3699  0020BC  EF74  F010         	goto	i2l250
  3700  0020C0                     i2u108_40:
  3701  0020C0  AAF2               	btfss	242,5,c	;volatile
  3702  0020C2  EF65  F010         	goto	i2u109_41
  3703  0020C6  EF67  F010         	goto	i2u109_40
  3704  0020CA                     i2u109_41:
  3705  0020CA  EF74  F010         	goto	i2l250
  3706  0020CE                     i2u109_40:
  3707  0020CE                     
  3708                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  3709  0020CE  94F2               	bcf	242,2,c	;volatile
  3710  0020D0                     
  3711                           ;interrupt.c: 7:         TMR0H = (timer0ReloadVal << 16);
  3712  0020D0  0E00               	movlw	0
  3713  0020D2  6ED7               	movwf	215,c	;volatile
  3714  0020D4                     
  3715                           ;interrupt.c: 8:         TMR0L = (uint8_t)timer0ReloadVal;
  3716  0020D4  C038  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  3717  0020D8                     
  3718                           ;interrupt.c: 9:         count10ms++;
  3719  0020D8  4A13               	infsnz	_count10ms^0,f,c
  3720  0020DA  2A14               	incf	(_count10ms+1)^0,f,c
  3721  0020DC                     
  3722                           ;interrupt.c: 10:         timerFlag = 1;
  3723  0020DC  0E00               	movlw	0
  3724  0020DE  6E12               	movwf	(_timerFlag+1)^0,c
  3725  0020E0  0E01               	movlw	1
  3726  0020E2  6E11               	movwf	_timerFlag^0,c
  3727  0020E4                     
  3728                           ;interrupt.c: 11:         button();
  3729  0020E4  EC1B  F00E         	call	_button	;wreg free
  3730  0020E8                     i2l250:
  3731  0020E8  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3732  0020EA  0011               	retfie		f
  3733  0020EC                     __end_of_deviceInterrupt:
  3734                           	opt callstack 0
  3735                           
  3736 ;; *************** function _button *****************
  3737 ;; Defined at:
  3738 ;;		line 27 in file "button.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  checkRB0        2    6[COMRAM] int 
  3743 ;;  checkRA5        2    4[COMRAM] int 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, status,2, status,0, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;Total ram usage:        4 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    1
  3760 ;; This function calls:
  3761 ;;		_readRA5Button
  3762 ;;		_readRB0Button
  3763 ;; This function is called by:
  3764 ;;		_deviceInterrupt
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	text23
  3769  001C36                     __ptext23:
  3770                           	opt callstack 0
  3771  001C36                     _button:
  3772                           	opt callstack 23
  3773  001C36                     
  3774                           ;button.c: 28:     int checkRA5 = readRA5Button();
  3775  001C36  EC15  F010         	call	_readRA5Button	;wreg free
  3776  001C3A  C01F  F023         	movff	?_readRA5Button,button@checkRA5
  3777  001C3E  C020  F024         	movff	?_readRA5Button+1,button@checkRA5+1
  3778                           
  3779                           ;button.c: 29:     int checkRB0 = readRB0Button();
  3780  001C42  ECF1  F00F         	call	_readRB0Button	;wreg free
  3781  001C46  C01F  F025         	movff	?_readRB0Button,button@checkRB0
  3782  001C4A  C020  F026         	movff	?_readRB0Button+1,button@checkRB0+1
  3783  001C4E                     
  3784                           ;button.c: 30:     if (checkRA5 == 1) {
  3785  001C4E  0423               	decf	button@checkRA5^0,w,c
  3786  001C50  1024               	iorwf	(button@checkRA5+1)^0,w,c
  3787  001C52  A4D8               	btfss	status,2,c
  3788  001C54  EF2E  F00E         	goto	i2u99_41
  3789  001C58  EF30  F00E         	goto	i2u99_40
  3790  001C5C                     i2u99_41:
  3791  001C5C  EF36  F00E         	goto	i2l2152
  3792  001C60                     i2u99_40:
  3793  001C60                     
  3794                           ;button.c: 31:         changeModePressed = 1;
  3795  001C60  0E00               	movlw	0
  3796  001C62  6E18               	movwf	(_changeModePressed+1)^0,c
  3797  001C64  0E01               	movlw	1
  3798  001C66  6E17               	movwf	_changeModePressed^0,c
  3799                           
  3800                           ;button.c: 32:     }
  3801  001C68  EF7B  F00E         	goto	i2l155
  3802  001C6C                     i2l2152:
  3803  001C6C  0425               	decf	button@checkRB0^0,w,c
  3804  001C6E  1026               	iorwf	(button@checkRB0+1)^0,w,c
  3805  001C70  A4D8               	btfss	status,2,c
  3806  001C72  EF3D  F00E         	goto	i2u100_41
  3807  001C76  EF3F  F00E         	goto	i2u100_40
  3808  001C7A                     i2u100_41:
  3809  001C7A  EF69  F00E         	goto	i2l2164
  3810  001C7E                     i2u100_40:
  3811  001C7E                     
  3812                           ;button.c: 34:         countPressed++;
  3813  001C7E  4A1B               	infsnz	_countPressed^0,f,c
  3814  001C80  2A1C               	incf	(_countPressed+1)^0,f,c
  3815  001C82                     
  3816                           ;button.c: 35:         if (countPressed >= 100) {
  3817  001C82  BE1C               	btfsc	(_countPressed+1)^0,7,c
  3818  001C84  EF4D  F00E         	goto	i2u101_41
  3819  001C88  501C               	movf	(_countPressed+1)^0,w,c
  3820  001C8A  E109               	bnz	i2u101_40
  3821  001C8C  0E64               	movlw	100
  3822  001C8E  5C1B               	subwf	_countPressed^0,w,c
  3823  001C90  A0D8               	btfss	status,0,c
  3824  001C92  EF4D  F00E         	goto	i2u101_41
  3825  001C96  EF4F  F00E         	goto	i2u101_40
  3826  001C9A                     i2u101_41:
  3827  001C9A  EF7B  F00E         	goto	i2l155
  3828  001C9E                     i2u101_40:
  3829  001C9E                     
  3830                           ;button.c: 36:             countAuto++;
  3831  001C9E  4A19               	infsnz	_countAuto^0,f,c
  3832  001CA0  2A1A               	incf	(_countAuto+1)^0,f,c
  3833  001CA2                     
  3834                           ;button.c: 37:             if (countAuto > 20) {
  3835  001CA2  BE1A               	btfsc	(_countAuto+1)^0,7,c
  3836  001CA4  EF5D  F00E         	goto	i2u102_41
  3837  001CA8  501A               	movf	(_countAuto+1)^0,w,c
  3838  001CAA  E109               	bnz	i2u102_40
  3839  001CAC  0E15               	movlw	21
  3840  001CAE  5C19               	subwf	_countAuto^0,w,c
  3841  001CB0  A0D8               	btfss	status,0,c
  3842  001CB2  EF5D  F00E         	goto	i2u102_41
  3843  001CB6  EF5F  F00E         	goto	i2u102_40
  3844  001CBA                     i2u102_41:
  3845  001CBA  EF7B  F00E         	goto	i2l154
  3846  001CBE                     i2u102_40:
  3847  001CBE                     
  3848                           ;button.c: 38:                 increaseTime = 1;
  3849  001CBE  0E00               	movlw	0
  3850  001CC0  6E16               	movwf	(_increaseTime+1)^0,c
  3851  001CC2  0E01               	movlw	1
  3852  001CC4  6E15               	movwf	_increaseTime^0,c
  3853                           
  3854                           ;button.c: 39:                 countAuto = 0;
  3855  001CC6  0E00               	movlw	0
  3856  001CC8  6E1A               	movwf	(_countAuto+1)^0,c
  3857  001CCA  0E00               	movlw	0
  3858  001CCC  6E19               	movwf	_countAuto^0,c
  3859  001CCE  EF7B  F00E         	goto	i2l155
  3860  001CD2                     i2l2164:
  3861                           
  3862                           ;button.c: 44:         countPressed = 0;
  3863  001CD2  0E00               	movlw	0
  3864  001CD4  6E1C               	movwf	(_countPressed+1)^0,c
  3865  001CD6  0E00               	movlw	0
  3866  001CD8  6E1B               	movwf	_countPressed^0,c
  3867                           
  3868                           ;button.c: 45:         countAuto = 0;
  3869  001CDA  0E00               	movlw	0
  3870  001CDC  6E1A               	movwf	(_countAuto+1)^0,c
  3871  001CDE  0E00               	movlw	0
  3872  001CE0  6E19               	movwf	_countAuto^0,c
  3873                           
  3874                           ;button.c: 46:         changeModePressed = 0;
  3875  001CE2  0E00               	movlw	0
  3876  001CE4  6E18               	movwf	(_changeModePressed+1)^0,c
  3877  001CE6  0E00               	movlw	0
  3878  001CE8  6E17               	movwf	_changeModePressed^0,c
  3879                           
  3880                           ;button.c: 47:         increaseTime = 0;
  3881  001CEA  0E00               	movlw	0
  3882  001CEC  6E16               	movwf	(_increaseTime+1)^0,c
  3883  001CEE  0E00               	movlw	0
  3884  001CF0  6E15               	movwf	_increaseTime^0,c
  3885  001CF2  EF7B  F00E         	goto	i2l155
  3886  001CF6                     i2l154:
  3887  001CF6                     i2l155:
  3888  001CF6  0012               	return		;funcret
  3889  001CF8                     __end_of_button:
  3890                           	opt callstack 0
  3891                           
  3892 ;; *************** function _readRB0Button *****************
  3893 ;; Defined at:
  3894 ;;		line 15 in file "button.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  check           2    2[COMRAM] int 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  2    0[COMRAM] int 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;Total ram usage:        4 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; This function calls:
  3915 ;;		Nothing
  3916 ;; This function is called by:
  3917 ;;		_button
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text24
  3922  001FE2                     __ptext24:
  3923                           	opt callstack 0
  3924  001FE2                     _readRB0Button:
  3925                           	opt callstack 23
  3926  001FE2                     
  3927                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  3928  001FE2  C034  F035         	movff	_secondReadRB0,_firstReadRB0
  3929  001FE6                     
  3930                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  3931  001FE6  0E00               	movlw	0
  3932  001FE8  B081               	btfsc	129,0,c	;volatile
  3933  001FEA  0E01               	movlw	1
  3934  001FEC  6E34               	movwf	_secondReadRB0^0,c
  3935  001FEE                     
  3936                           ;button.c: 18:     int check = 0;
  3937  001FEE  0E00               	movlw	0
  3938  001FF0  6E22               	movwf	(readRB0Button@check+1)^0,c
  3939  001FF2  0E00               	movlw	0
  3940  001FF4  6E21               	movwf	readRB0Button@check^0,c
  3941  001FF6                     
  3942                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  3943  001FF6  5034               	movf	_secondReadRB0^0,w,c
  3944  001FF8  1835               	xorwf	_firstReadRB0^0,w,c
  3945  001FFA  A4D8               	btfss	status,2,c
  3946  001FFC  EF02  F010         	goto	i2u78_41
  3947  002000  EF04  F010         	goto	i2u78_40
  3948  002004                     i2u78_41:
  3949  002004  EF10  F010         	goto	i2l1872
  3950  002008                     i2u78_40:
  3951  002008                     
  3952                           ;button.c: 20:         if (firstReadRB0 == 0) {
  3953  002008  5035               	movf	_firstReadRB0^0,w,c
  3954  00200A  A4D8               	btfss	status,2,c
  3955  00200C  EF0A  F010         	goto	i2u79_41
  3956  002010  EF0C  F010         	goto	i2u79_40
  3957  002014                     i2u79_41:
  3958  002014  EF10  F010         	goto	i2l1872
  3959  002018                     i2u79_40:
  3960  002018                     
  3961                           ;button.c: 21:             check = 1;
  3962  002018  0E00               	movlw	0
  3963  00201A  6E22               	movwf	(readRB0Button@check+1)^0,c
  3964  00201C  0E01               	movlw	1
  3965  00201E  6E21               	movwf	readRB0Button@check^0,c
  3966  002020                     i2l1872:
  3967                           
  3968                           ;button.c: 24:     return check;
  3969  002020  C021  F01F         	movff	readRB0Button@check,?_readRB0Button
  3970  002024  C022  F020         	movff	readRB0Button@check+1,?_readRB0Button+1
  3971  002028  0012               	return		;funcret
  3972  00202A                     __end_of_readRB0Button:
  3973                           	opt callstack 0
  3974                           
  3975 ;; *************** function _readRA5Button *****************
  3976 ;; Defined at:
  3977 ;;		line 3 in file "button.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  check           2    2[COMRAM] int 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  2    0[COMRAM] int 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3991 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;Total ram usage:        4 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_button
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text25
  4005  00202A                     __ptext25:
  4006                           	opt callstack 0
  4007  00202A                     _readRA5Button:
  4008                           	opt callstack 23
  4009  00202A                     
  4010                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4011  00202A  C036  F037         	movff	_secondReadRA5,_firstReadRA5
  4012  00202E                     
  4013                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4014  00202E  0E00               	movlw	0
  4015  002030  BA80               	btfsc	128,5,c	;volatile
  4016  002032  0E01               	movlw	1
  4017  002034  6E36               	movwf	_secondReadRA5^0,c
  4018  002036                     
  4019                           ;button.c: 6:     int check = 0;
  4020  002036  0E00               	movlw	0
  4021  002038  6E22               	movwf	(readRA5Button@check+1)^0,c
  4022  00203A  0E00               	movlw	0
  4023  00203C  6E21               	movwf	readRA5Button@check^0,c
  4024  00203E                     
  4025                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4026  00203E  5036               	movf	_secondReadRA5^0,w,c
  4027  002040  1837               	xorwf	_firstReadRA5^0,w,c
  4028  002042  A4D8               	btfss	status,2,c
  4029  002044  EF26  F010         	goto	i2u76_41
  4030  002048  EF28  F010         	goto	i2u76_40
  4031  00204C                     i2u76_41:
  4032  00204C  EF34  F010         	goto	i2l1856
  4033  002050                     i2u76_40:
  4034  002050                     
  4035                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4036  002050  5037               	movf	_firstReadRA5^0,w,c
  4037  002052  A4D8               	btfss	status,2,c
  4038  002054  EF2E  F010         	goto	i2u77_41
  4039  002058  EF30  F010         	goto	i2u77_40
  4040  00205C                     i2u77_41:
  4041  00205C  EF34  F010         	goto	i2l1856
  4042  002060                     i2u77_40:
  4043  002060                     
  4044                           ;button.c: 9:             check = 1;
  4045  002060  0E00               	movlw	0
  4046  002062  6E22               	movwf	(readRA5Button@check+1)^0,c
  4047  002064  0E01               	movlw	1
  4048  002066  6E21               	movwf	readRA5Button@check^0,c
  4049  002068                     i2l1856:
  4050                           
  4051                           ;button.c: 12:    return check;
  4052  002068  C021  F01F         	movff	readRA5Button@check,?_readRA5Button
  4053  00206C  C022  F020         	movff	readRA5Button@check+1,?_readRA5Button+1
  4054  002070  0012               	return		;funcret
  4055  002072                     __end_of_readRA5Button:
  4056                           	opt callstack 0
  4057                           
  4058                           	psect	rparam
  4059  0000                     
  4060                           	psect	temp
  4061  00003B                     btemp:
  4062                           	opt callstack 0
  4063  00003B                     	ds	1
  4064  0000                     int$flags	set	btemp
  4065  0000                     wtemp8	set	btemp+1
  4066  0000                     ttemp5	set	btemp+1
  4067  0000                     ttemp6	set	btemp+4
  4068  0000                     ttemp7	set	btemp+8
  4069                           tosu	equ	0xFFF
  4070                           tosh	equ	0xFFE
  4071                           tosl	equ	0xFFD
  4072                           stkptr	equ	0xFFC
  4073                           pclatu	equ	0xFFB
  4074                           pclath	equ	0xFFA
  4075                           pcl	equ	0xFF9
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           indf0	equ	0xFEF
  4083                           postinc0	equ	0xFEE
  4084                           postdec0	equ	0xFED
  4085                           preinc0	equ	0xFEC
  4086                           plusw0	equ	0xFEB
  4087                           fsr0h	equ	0xFEA
  4088                           fsr0l	equ	0xFE9
  4089                           wreg	equ	0xFE8
  4090                           indf1	equ	0xFE7
  4091                           postinc1	equ	0xFE6
  4092                           postdec1	equ	0xFE5
  4093                           preinc1	equ	0xFE4
  4094                           plusw1	equ	0xFE3
  4095                           fsr1h	equ	0xFE2
  4096                           fsr1l	equ	0xFE1
  4097                           bsr	equ	0xFE0
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           preinc2	equ	0xFDC
  4102                           plusw2	equ	0xFDB
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    0
    Data        4
    BSS         30
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModify
    _displayStpWatch->_LCDPutStr
    _displayModify->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   27434
                                             19 COMRAM     2     2      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                      _displayModify
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    8557
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModify                                        2     2      0    8557
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    8557
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2580
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModify
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      3A       1       61.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A      32        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Sep 22 17:55:44 2019

                   ?_LCDPutChar 001F                              l83 1544                              u10 1E5E  
                            u11 1E5A                              u20 1E74                              u21 1E70  
                            u30 1EB4                              u31 1EB0                    ___awdiv@sign 002C  
                   ?_LCDPutInst 001F                              _hr 000B                   ?_displayClock 001F  
               _timer0ReloadVal 0038           SendByteBBSPI@bitcount 0028                             l111 213C  
                           l200 2170                             l114 2196                             l203 1F1A  
                           l212 20AE                             l108 218C                             l206 1F80  
                           l190 1E64                             l182 1FE0                             l191 1E66  
                           l185 2182                             l409 140E                             l194 1EB4  
                           l354 18D6                             l188 1E50                             l460 1AA2  
                           l372 17A6                             l197 2156                             l293 1E44  
                           l390 1676                             l296 1B70                             l456 19CC  
                           l457 19D4                             l707 1DA6                             l694 1C34  
                           u210 1DC4                             u211 1DC0                             u300 1848  
                           u220 1DEC                             u301 1844                             u221 1DE8  
                           u310 185A                             u230 1E14                             u311 1856  
                           u231 1E10                             u320 1870                             u400 168E  
                           u240 1E3C                             u321 186C                             u401 168A  
                           u241 1E38                             u330 18CE                             u250 17BE  
                           u410 16A8                             u331 18CA                             u251 17BA  
                           u411 16A4                             u260 17D8                             u420 16C6  
                           u500 1578                             u261 17D4                             u421 16C2  
                           u501 1574                             u270 17F6                             u430 16D8  
                           u510 1596                             u271 17F2                             u431 16D4  
                           u511 1592                             u280 1808                             u440 16F6  
                           u520 15A8                             u600 1942                             u281 1804  
                           u441 16F2                             u521 15A4                             u601 193E  
                           u290 1826                             u450 1718                             u530 15C6  
                           u610 1954                             u291 1822                             u451 1714  
                           u531 15C2                             u611 1950                             u460 172A  
                           u540 15E8                             u620 1974                             u461 1726  
                           u541 15E4                             u621 1970                             u470 1740  
                           u550 15FA                             u630 199C                             u471 173C  
                           u551 15F6                             u631 1998                             u800 20AE  
                           u480 179E                             u560 1610                             u640 19C4  
                           u801 20AA                             u481 179A                             u561 160C  
                           u641 19C0                             u810 1B84                             u570 166E  
                           u490 155E                             u811 1B80                             u571 166A  
                           u491 155A                             u820 1B9E                             u900 1D5C  
                           u580 18F2                             u821 1B9A                             u901 1D58  
                           u581 18EE                             u830 1BC4                             u910 1D72  
                           u590 1904                             u831 1BC0                             u911 1D6E  
                           u591 1900                             u840 1BE2                             u920 1D96  
                           u841 1BDE                             u921 1D92                             u850 1BFE  
                           u930 1086                             u851 1BFA                             u931 1082  
                           u860 1C24                             u940 1098                             u861 1C20  
                           u941 1094                             u870 1D0A                             u950 11F0  
                           u871 1D06                             u951 11EC                             u880 1D24  
                           u960 1202                             u881 1D20                             u961 11FE  
                           u890 1D3E                             u970 135A                             u891 1D3A  
                           u971 1356                             u980 136C                             u981 1368  
        __size_of_readRB0Button 0048                             _min 000D                             _sec 000F  
                           _run 0007         __end_of_displayStpWatch 1AA4                    ___awmod@sign 002C  
        __size_of_readRA5Button 0048                             wreg 000FE8                  ?_displayModify 001F  
               __end_of_LCDInit 1FE2                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l2000 1FC8                            l2002 1FCE                            l2010 1AAA  
                          l2004 1FD4                            l2020 1AFA                            l2012 1AB6  
                          l2100 12F6                            l1150 1E82                            l2006 1FDA  
                          l2022 1B16                            l2014 1ABC                            l2110 136C  
                          l2102 1312                            l2030 1044                            l1160 1E8C  
                          l1152 1E84                            l1144 1E5E                            l1136 1E48  
                          l1240 2142                            l2024 1B32                            l2016 1AD8  
                          l2008 1AA4                            l2112 137C                            l2104 132E  
                          l2040 1086                            l2032 1048                            l1400 1DF8  
                          l2200 14AE                            l1170 1E96                            l1162 1E8E  
                          l1154 1E86                            l1146 1E74                            l1138 1E4C  
                          l1242 2154                            l2026 1B38                            l2018 1AF4  
                          l2114 13B4                            l2106 1334                            l2050 10FA  
                          l2042 1098                            l2034 104E                            l2130 19EE  
                          l1402 1E14                            l2210 14E0                            l2202 14B2  
                          l1236 2172                            l1180 1EA4                            l1172 1E98  
                          l1164 1E90                            l1156 1E88                            l1148 1E7C  
                          l2028 1B54                            l2108 135A                            l2060 1174  
                          l2052 1116                            l2044 10A8                            l2036 105A  
                          l2140 1A64                            l2132 1A0A                            l2124 19D6  
                          l1404 1E1C                            l2212 14F2                            l2204 14C4  
                          l1174 1E9A                            l1166 1E92                            l1158 1E8A  
                          l1238 2140                            l2070 11C4                            l2062 117A  
                          l2054 1132                            l2046 10E0                            l2038 1060  
                          l2118 13CC                            l2142 1A6A                            l2134 1A26  
                          l2126 19DC                            l1406 1E20                            l1350 2122  
                          l2206 14D4                            l1176 1E9C                            l1168 1E94  
                          l2080 124A                            l2072 11CA                            l2064 1186  
                          l2056 1138                            l2048 10F4                            l2144 1A86  
                          l2136 1A2C                            l2128 19E8                            l1440 17DC  
                          l1432 17A8                            l1600 1748                            l1408 1E3C  
                          l1352 2126                            l2208 14DC                            l2216 1502  
                          l1178 1EA2                            l2090 12A6                            l2074 11F0  
                          l2082 125E                            l2066 118C                            l2058 1154  
                          l2138 1A48                            l1450 1826                            l1442 17E4  
                          l1434 17AC                            l1354 2132                            l2170 1420  
                          l1356 218E                            l2092 12B2                            l2084 1264  
                          l2076 1202                            l2068 11A8                            l1460 1870  
                          l1452 1836                            l1444 17F6                            l1436 17BE  
                          l1604 1750                            l2260 1634                            l1620 1578  
                          l1348 2184                            l2180 1446                            l2172 1424  
                          l1358 2192                            l2094 12B8                            l2086 1280  
                          l2078 1212                            l1470 18CE                            l1462 1878  
                          l1454 1848                            l1446 1808                            l1438 17D8  
                          l2262 1764                            l1606 1782                            l1630 15AC  
                          l1622 157C                            l1614 1548                            l1390 1DC4  
                          l2190 1480                            l2182 1456                            l2174 142C  
                          l2166 1410                            l2096 12D4                            l2088 12A0  
                          l2264 1894                            l1456 185A                            l1448 180C  
                          l1608 179E                            l1640 15FE                            l1632 15C6  
                          l1624 1584                            l1616 154C                            l1392 1DCC  
                          l2192 1484                            l2184 145A                            l2176 1430  
                          l2168 141C                            l2266 13E0                            l2098 12F0  
                          l1458 185E                            l1466 1880                            l1570 1678  
                          l1642 1610                            l1634 15D6                            l1626 1596  
                          l1618 155E                            l1650 1652                            l1394 1DD0  
                          l2258 1516                            l2194 1488                            l2186 145E  
                          l2178 1434                            l1900 1B72                            l1468 18B2  
                          l1580 16B4                            l1572 167C                            l1652 166E  
                          l1644 1618                            l1636 15E8                            l1628 15A8  
                          l1396 1DEC                            l1388 1DA8                            l1660 18F2  
                          l2196 149A                            l2188 1470                            l1822 215A  
                          l1830 1EC8                            l1910 1B9E                            l1902 1B76  
                          l1590 1706                            l1582 16C6                            l1574 168E  
                          l1638 15FA                            l1398 1DF4                            l1670 1954  
                          l1662 1904                            l2198 14AA                            l1824 215C  
                          l1840 1F02                            l1832 1ED2                            l1920 1BCC  
                          l1912 1BA6                            l1904 1B84                            l1592 1718  
                          l1584 16D8                            l1576 16A8                            l1648 1620  
                          l1680 199C                            l1672 1958                            l1664 191C  
                          l1826 216E                            l1842 1F10                            l1834 1EE0  
                          l1930 1C06                            l1922 1BD4                            l1914 1BAA  
                          l1906 1B8C                            l1594 172A                            l1586 16DC  
                          l1578 16AC                            l1682 19A4                            l1674 1974  
                          l1666 1930                            l1658 18D8                            l1836 1EEA  
                          l1828 1EB8                            l1940 1C2C                            l1932 1C08  
                          l1924 1BE2                            l1916 1BB2                            l1908 1B90  
                          l1596 172E                            l1588 16F6                            l1684 19A8  
                          l1676 197C                            l1668 1942                            l1838 1EF8  
                          l1934 1C0E                            l1926 1BE8                            l1918 1BC4  
                          l1950 1D12                            l1598 1740                            l1686 19C4  
                          l1678 1980                            l1880 1F38                            l1928 1BFE  
                          l1936 1C14                            l1960 1D46                            l1952 1D16  
                          l1944 1CF8                            l1890 1F76                            l1882 1F46  
                          l1938 1C24                            l1970 1D80                            l1962 1D4E  
                          l1954 1D24                            l1946 1CFC                            l1884 1F50  
                          l1876 1F1E                            l1980 1F82                            l1892 2072  
                          l1964 1D5C                            l1972 1D86                            l1956 1D2C  
                          l1948 1D0A                            l1886 1F5E                            l1878 1F2E  
                          l1990 1F9C                            l1982 1F86                            l1894 2076  
                          l1974 1D96                            l1966 1D72                            l1958 1D3E  
                          l1888 1F68                            l1992 1FA2                            l1984 1F88  
                          l1896 208A                            l1976 1D9E                            l1968 1D7A  
                          l1994 1FA8                            l1986 1F8A                            l1898 208E  
                          l1996 1FB2                            l1988 1F9A                            l1998 1FC2  
                          STR_1 1012                            STR_2 1023                            STR_3 1033  
                          STR_4 1033                            STR_5 1001                            u1030 1446  
                          u1031 1442                            u1040 1470                            u1041 146C  
                          u1050 149A                            u1107 1EBE                            u1051 1496  
                          u1060 14C4                            u1117 1ED8                            u1061 14C0  
                          u1070 14F2                            u1127 1EF0                            u1071 14EE  
                          u1137 1F08                            u1147 1F90                            u1157 1FB8  
                          u1167 1F24                            u1177 1F3E                            u1187 1F56  
                          u1197 1F6E                            _TMR0 000FD6                            _main 1410  
                          fsr1l 000FE1                            btemp 003B                ?_WritePort_BBSPI 002A  
                          start 000E              __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000               _changeModePressed 0017  
               _deviceInterrupt 0008                  ??_displayClock 0030                           ?_main 001F  
               __end_of___awdiv 1C36                 __end_of___awmod 1DA8                           _T0CON 000FD5  
               ___awdiv@divisor 0029                           i2l141 2070                           i2l146 2028  
                         i2l154 1CF6                           i2l250 20E8                           i2l155 1CF6  
               ___awdiv@counter 002B                           _TMR0H 000FD7                           _TMR0L 000FD6  
                 __CFG_PWRT$OFF 000000                  __CFG_FCMEN$OFF 000000         __size_of_Port_BBSPIInit 001A  
                         _blink 0009                           _state 001E  __size_of_oscillationInitialize 000A  
 __end_of_oscillationInitialize 218E                  __CFG_BOREN$OFF 000000                           tablat 000FF5  
           __size_of_LCDPutChar 0066             __size_of_LCDPutInst 0066                           ttemp5 003C  
                         ttemp6 003F                           ttemp7 0043                           status 000FD8  
             ??_timerInitialize 0027                           wtemp8 003C                   _readRB0Button 1FE2  
                 _readRA5Button 202A                 __initialization 20EC                    __end_of_main 1548  
                __CFG_OSC$HSPLL 000000                          ??_main 0032                   __activetblptr 000003  
                     ??_LCDInit 002E                    LCDPutChar@ch 002D               __end_of_LCDPutStr 20B0  
               ??_displayModify 0030                ?_displayStpWatch 001F                          _ADCON1 000FC1  
            __size_of_InitBBSPI 0012                ___awdiv@dividend 0027                    LCDPutInst@ch 002D  
                        i2l2150 1C60                          i2l2230 20D4                          i2l2222 20B2  
                        i2l2160 1CA2                          i2l2152 1C6C                          i2l2232 20D8  
                        i2l2224 20C0                          i2l2162 1CBE                          i2l2154 1C7E  
                        i2l2146 1C36                          i2l2234 20DC                          i2l2226 20CE  
                        i2l2156 1C82                          i2l2164 1CD2                          i2l2148 1C4E  
                        i2l2236 20E4                          i2l2228 20D0                          i2l2158 1C9E  
                        i2l1850 203E                          i2l1852 2050                          i2l1844 202A  
                        i2l1860 1FE2                          i2l1854 2060                          i2l1846 202E  
                        i2l1870 2018                          i2l1862 1FE6                          i2l1856 2068  
                        i2l1848 2036                          i2l1872 2020                          i2l1864 1FEE  
                        i2l1866 1FF6                          i2l1868 2008                          _OSCCON 000FD3  
                  LCDPutStr@ptr 002E                  ?_readRB0Button 001F                  ?_readRA5Button 001F  
       __end_of_deviceInterrupt 20EC                  __CFG_XINST$OFF 000000                       ??___awdiv 002B  
                     ??___awmod 002B                          _minSTW 0005                          _secSTW 0003  
                        _button 1C36                          clear_0 2112       __size_of_buttonInitialize 000A  
              ___awdiv@quotient 002D                 ___awmod@divisor 0029                 ___awmod@counter 002B  
              __end_of_norClock 1E46                    __pdataCOMRAM 0034          Port_BBSPIInit@port_dir 002A  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __end_of_displayClock 1B72                      __accesstop 0060  
       __end_of__initialization 2118                   ___rparam_used 000001          __size_of_SendByteBBSPI 0070  
                 ?_modifyMinute 001F                   ?_modifySecond 001F                  __pcstackCOMRAM 001F  
             __end_of_InitBBSPI 2184                    ??_LCDPutChar 002C                    ??_LCDPutInst 002C  
                _Port_BBSPIInit 213E                 ??_readRB0Button 0021                 ??_readRA5Button 0021  
            __end_of_LCDPutChar 1F1C                      __pnvCOMRAM 0038              __end_of_LCDPutInst 1F82  
              ?_deviceInterrupt 001F                  ??_modifyMinute 0027                  ??_modifySecond 0027  
                       ?_button 001F          __end_of_Port_BBSPIInit 2158                         _LCDInit 1F82  
                 _SendByteBBSPI 1E46                 _timerInitialize 2122                         _OSCTUNE 000F9B  
                       i2u76_40 2050                         i2u76_41 204C                         i2u77_40 2060  
                       i2u77_41 205C                         i2u78_40 2008                         i2u78_41 2004  
                       i2u79_40 2018                         i2u79_41 2014                         i2u99_40 1C60  
                       i2u99_41 1C5C              __size_of_stopWatch 00FE                WritePort_BBSPI@a 002A  
                     ?_norClock 001F                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 1B72                         ___awmod 1CF8                      _miliSecSTW 0001  
      __size_of_WritePort_BBSPI 001A                    __psmallconst 1000                _buttonInitialize 218E  
                       __pcinit 20EC                 __size_of_button 00C2                         __ramtop 1000  
                       __ptext0 1410                         __ptext1 2122                         __ptext2 18D8  
                       __ptext3 2184                         __ptext4 1DA8                         __ptext5 1548  
                       __ptext6 1678                         __ptext7 17A8                         __ptext8 19D6  
                       __ptext9 1044                  ?_SendByteBBSPI 001F                 ?_Port_BBSPIInit 001F  
              ___awmod@dividend 0027                      _modifyHour 17A8           __size_of_displayClock 00CE  
                     _LCDPutStr 2072                  __pintcode_body 20B0            end_of_initialization 2118  
                       int_func 20B0           _oscillationInitialize 2184                      ??_norClock 0027  
                       postdec1 000FE5                         postinc0 000FEE         __end_of_timerInitialize 213E  
             __end_of_stopWatch 19D6                    _displayClock 1AA4                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _TRISAbits 000F92            __end_of_modifyMinute 17A8  
          __end_of_modifySecond 1678                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISFbits 000F97           __end_of_displayModify 1410                      ?_LCDPutStr 002E  
           SendByteBBSPI@output 0027        __size_of_displayStpWatch 00CE                   __pidataCOMRAM 2198  
                  _firstReadRB0 0035                    _firstReadRA5 0037                 ??_SendByteBBSPI 0027  
                 _secondReadRB0 0034                   _secondReadRA5 0036                  __end_of_button 1CF8  
                     _InitBBSPI 2172               ??_WritePort_BBSPI 002B             start_initialization 20EC  
                  _countPressed 001B                     ?_modifyHour 001F          ?_oscillationInitialize 001F  
                  _increaseTime 0015                        ??_button 0023                ?_timerInitialize 001F  
                    ?_InitBBSPI 001F                        ?_LCDInit 001F                     __pbssCOMRAM 0001  
            readRB0Button@check 0021                     ??_LCDPutStr 0030        __end_of_buttonInitialize 2198  
         __end_of_readRB0Button 202A           __end_of_readRA5Button 2072               ??_displayStpWatch 0030  
             __size_of_norClock 009E                       __pintcode 0008             __size_of_modifyHour 0130  
                button@checkRB0 0025                  button@checkRA5 0023                        ?___awdiv 0027  
                      ?___awmod 0027                ??_Port_BBSPIInit 002A        __size_of_deviceInterrupt 20E4  
         __size_of_modifyMinute 0130           __size_of_modifySecond 0130                       _count10ms 0013  
                   __smallconst 1000                       _countAuto 0019                        _LATAbits 000F89  
                      _LATCbits 000F8B                        _LATFbits 000F8E                        i2u100_40 1C7E  
                      i2u100_41 1C7A                        i2u101_40 1C9E                        i2u101_41 1C9A  
                      i2u102_40 1CBE                        i2u102_41 1CBA                        i2u108_40 20C0  
                      i2u108_41 20BC                        i2u109_40 20CE                        i2u109_41 20CA  
                  _modifyMinute 1678                    _modifySecond 1548                       _timerFlag 0011  
                   ??_InitBBSPI 0027              SendByteBBSPI@input 0029                       _stopWatch 18D8  
              __size_of_LCDInit 0060                       copy_data0 2100                        __Hrparam 0000  
                      __Lrparam 0000                 _WritePort_BBSPI 2158                __size_of___awdiv 00C4  
              __size_of___awmod 00B0                      ?_stopWatch 001F               ??_deviceInterrupt 0027  
                  ??_modifyHour 0027              readRA5Button@check 0021                        __ptext10 1AA4  
                      __ptext11 1CF8                        __ptext20 1E46                        __ptext12 1B72  
                      __ptext21 2172                        __ptext13 2072                        __ptext14 1EB6  
                      __ptext23 1C36                        __ptext15 218E         ??_oscillationInitialize 0027  
                      __ptext24 1FE2                        __ptext16 1F82                        __ptext25 202A  
                      __ptext17 213E                        __ptext18 1F1C                        __ptext19 2158  
                 __size_of_main 0138                        _norClock 1DA8                        _stModify 001D  
                      int$flags 003B          __size_of_displayModify 03CC              __end_of_modifyHour 18D8  
                    _LCDPutChar 1EB6                      _LCDPutInst 1F1C           __end_of_SendByteBBSPI 1EB6  
                    _INTCONbits 000FF2                 _displayStpWatch 19D6                        intlevel2 0000  
             ?_buttonInitialize 001F         __end_of_WritePort_BBSPI 2172              ??_buttonInitialize 0027  
       WritePort_BBSPI@port_add 002B                     ??_stopWatch 0027        __size_of_timerInitialize 001C  
                 _displayModify 1044  
