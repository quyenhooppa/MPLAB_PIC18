

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Oct  5 19:58:08 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F8722 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  00234A                     __pidataCOMRAM:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _secondReadRB0
    84  00234A  01                 	db	1
    85                           
    86                           ;initializer for _firstReadRB0
    87  00234B  01                 	db	1
    88                           
    89                           ;initializer for _secondReadRA5
    90  00234C  01                 	db	1
    91                           
    92                           ;initializer for _firstReadRA5
    93  00234D  01                 	db	1
    94  0000                     _LATCbits	set	3979
    95  0000                     _LATAbits	set	3977
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATFbits	set	3982
    98  0000                     _TRISFbits	set	3991
    99  0000                     _PORTBbits	set	3969
   100  0000                     _PORTAbits	set	3968
   101  0000                     _ADCON1	set	4033
   102  0000                     _TRISBbits	set	3987
   103  0000                     _TRISAbits	set	3986
   104  0000                     _TMR0L	set	4054
   105  0000                     _TMR0H	set	4055
   106  0000                     _T0CON	set	4053
   107  0000                     _INTCONbits	set	4082
   108  0000                     _OSCTUNE	set	3995
   109  0000                     _OSCCON	set	4051
   110                           
   111                           	psect	smallconst
   112  001000                     __psmallconst:
   113                           	opt callstack 0
   114  001000  00                 	db	0
   115  001001                     STR_5:
   116  001001  20                 	db	32
   117  001002  20                 	db	32
   118  001003  20                 	db	32
   119  001004  53                 	db	83	;'S'
   120  001005  54                 	db	84	;'T'
   121  001006  4F                 	db	79	;'O'
   122  001007  50                 	db	80	;'P'
   123  001008  20                 	db	32
   124  001009  57                 	db	87	;'W'
   125  00100A  41                 	db	65	;'A'
   126  00100B  54                 	db	84	;'T'
   127  00100C  43                 	db	67	;'C'
   128  00100D  48                 	db	72	;'H'
   129  00100E  20                 	db	32
   130  00100F  20                 	db	32
   131  001010  20                 	db	32
   132  001011  00                 	db	0
   133  001012                     STR_1:
   134  001012  20                 	db	32
   135  001013  20                 	db	32
   136  001014  4E                 	db	78	;'N'
   137  001015  4F                 	db	79	;'O'
   138  001016  52                 	db	82	;'R'
   139  001017  4D                 	db	77	;'M'
   140  001018  41                 	db	65	;'A'
   141  001019  4C                 	db	76	;'L'
   142  00101A  20                 	db	32
   143  00101B  43                 	db	67	;'C'
   144  00101C  4C                 	db	76	;'L'
   145  00101D  4F                 	db	79	;'O'
   146  00101E  43                 	db	67	;'C'
   147  00101F  4B                 	db	75	;'K'
   148  001020  20                 	db	32
   149  001021  20                 	db	32
   150  001022  00                 	db	0
   151  001023                     STR_2:
   152  001023  20                 	db	32
   153  001024  4D                 	db	77	;'M'
   154  001025  4F                 	db	79	;'O'
   155  001026  44                 	db	68	;'D'
   156  001027  49                 	db	73	;'I'
   157  001028  46                 	db	70	;'F'
   158  001029  49                 	db	73	;'I'
   159  00102A  45                 	db	69	;'E'
   160  00102B  53                 	db	83	;'S'
   161  00102C  20                 	db	32
   162  00102D  48                 	db	72	;'H'
   163  00102E  4F                 	db	79	;'O'
   164  00102F  55                 	db	85	;'U'
   165  001030  52                 	db	82	;'R'
   166  001031  20                 	db	32
   167  001032  00                 	db	0
   168  001033                     STR_4:
   169  001033  4D                 	db	77	;'M'
   170  001034  4F                 	db	79	;'O'
   171  001035  44                 	db	68	;'D'
   172  001036  49                 	db	73	;'I'
   173  001037  46                 	db	70	;'F'
   174  001038  49                 	db	73	;'I'
   175  001039  45                 	db	69	;'E'
   176  00103A  53                 	db	83	;'S'
   177  00103B  20                 	db	32
   178  00103C  53                 	db	83	;'S'
   179  00103D  45                 	db	69	;'E'
   180  00103E  43                 	db	67	;'C'
   181  00103F  4F                 	db	79	;'O'
   182  001040  4E                 	db	78	;'N'
   183  001041  44                 	db	68	;'D'
   184  001042  00                 	db	0
   185  001043                     STR_3:
   186  001043  4D                 	db	77	;'M'
   187  001044  4F                 	db	79	;'O'
   188  001045  44                 	db	68	;'D'
   189  001046  49                 	db	73	;'I'
   190  001047  46                 	db	70	;'F'
   191  001048  49                 	db	73	;'I'
   192  001049  45                 	db	69	;'E'
   193  00104A  53                 	db	83	;'S'
   194  00104B  20                 	db	32
   195  00104C  4D                 	db	77	;'M'
   196  00104D  49                 	db	73	;'I'
   197  00104E  4E                 	db	78	;'N'
   198  00104F  55                 	db	85	;'U'
   199  001050  54                 	db	84	;'T'
   200  001051  45                 	db	69	;'E'
   201  001052  00                 	db	0
   202                           
   203                           ; #config settings
   204  001053  00                 	db	0	; dummy byte at the end
   205  0000                     
   206                           	psect	cinit
   207  0022A6                     __pcinit:
   208                           	opt callstack 0
   209  0022A6                     start_initialization:
   210                           	opt callstack 0
   211  0022A6                     __initialization:
   212                           	opt callstack 0
   213                           
   214                           ; Initialize objects allocated to COMRAM (4 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216  0022A6  0E4A               	movlw	low __pidataCOMRAM
   217  0022A8  6EF6               	movwf	tblptrl,c
   218  0022AA  0E23               	movlw	high __pidataCOMRAM
   219  0022AC  6EF7               	movwf	tblptrh,c
   220  0022AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221  0022B0  6EF8               	movwf	tblptru,c
   222  0022B2  EE00  F03C         	lfsr	0,__pdataCOMRAM
   223  0022B6  EE10 F004          	lfsr	1,4
   224  0022BA                     copy_data0:
   225  0022BA  0009               	tblrd		*+
   226  0022BC  CFF5 FFEE          	movff	tablat,postinc0
   227  0022C0  50E5               	movf	postdec1,w,c
   228  0022C2  50E1               	movf	fsr1l,w,c
   229  0022C4  E1FA               	bnz	copy_data0
   230                           
   231                           ; Clear objects allocated to COMRAM (36 bytes)
   232  0022C6  EE00  F001         	lfsr	0,__pbssCOMRAM
   233  0022CA  0E24               	movlw	36
   234  0022CC                     clear_0:
   235  0022CC  6AEE               	clrf	postinc0,c
   236  0022CE  06E8               	decf	wreg,f,c
   237  0022D0  E1FD               	bnz	clear_0
   238  0022D2                     end_of_initialization:
   239                           	opt callstack 0
   240  0022D2                     __end_of__initialization:
   241                           	opt callstack 0
   242  0022D2  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  0022D4  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  0022D6  0100               	movlb	0
   245  0022D8  EF2A  F008         	goto	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMRAM
   248  000001                     __pbssCOMRAM:
   249                           	opt callstack 0
   250  000001                     _count:
   251                           	opt callstack 0
   252  000001                     	ds	2
   253  000003                     _blink:
   254                           	opt callstack 0
   255  000003                     	ds	2
   256  000005                     _hr:
   257                           	opt callstack 0
   258  000005                     	ds	2
   259  000007                     _min:
   260                           	opt callstack 0
   261  000007                     	ds	2
   262  000009                     _sec:
   263                           	opt callstack 0
   264  000009                     	ds	2
   265  00000B                     _flag:
   266                           	opt callstack 0
   267  00000B                     	ds	2
   268  00000D                     _count10ms:
   269                           	opt callstack 0
   270  00000D                     	ds	2
   271  00000F                     _miliSecSTW:
   272                           	opt callstack 0
   273  00000F                     	ds	2
   274  000011                     _secSTW:
   275                           	opt callstack 0
   276  000011                     	ds	2
   277  000013                     _minSTW:
   278                           	opt callstack 0
   279  000013                     	ds	2
   280  000015                     _runSTW:
   281                           	opt callstack 0
   282  000015                     	ds	2
   283  000017                     _btnPressed:
   284                           	opt callstack 0
   285  000017                     	ds	2
   286  000019                     _increaseTime:
   287                           	opt callstack 0
   288  000019                     	ds	2
   289  00001B                     _RB0Pressed:
   290                           	opt callstack 0
   291  00001B                     	ds	2
   292  00001D                     _RA5Pressed:
   293                           	opt callstack 0
   294  00001D                     	ds	2
   295  00001F                     _countAuto:
   296                           	opt callstack 0
   297  00001F                     	ds	2
   298  000021                     _countPressed:
   299                           	opt callstack 0
   300  000021                     	ds	2
   301  000023                     _stModify:
   302                           	opt callstack 0
   303  000023                     	ds	1
   304  000024                     _state:
   305                           	opt callstack 0
   306  000024                     	ds	1
   307                           
   308                           	psect	dataCOMRAM
   309  00003C                     __pdataCOMRAM:
   310                           	opt callstack 0
   311  00003C                     _secondReadRB0:
   312                           	opt callstack 0
   313  00003C                     	ds	1
   314  00003D                     _firstReadRB0:
   315                           	opt callstack 0
   316  00003D                     	ds	1
   317  00003E                     _secondReadRA5:
   318                           	opt callstack 0
   319  00003E                     	ds	1
   320  00003F                     _firstReadRA5:
   321                           	opt callstack 0
   322  00003F                     	ds	1
   323                           
   324                           	psect	cstackCOMRAM
   325  000025                     __pcstackCOMRAM:
   326                           	opt callstack 0
   327  000025                     ?_readRA5Button:
   328                           	opt callstack 0
   329  000025                     ?_readRB0Button:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x0
   333  000025                     	ds	2
   334  000027                     readRA5Button@check:
   335                           	opt callstack 0
   336  000027                     readRB0Button@check:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x2
   340  000027                     	ds	2
   341  000029                     button@checkRA5:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x4
   345  000029                     	ds	2
   346  00002B                     button@checkRB0:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x6
   350  00002B                     	ds	2
   351  00002D                     ??_modifyHour:
   352  00002D                     ??_modifyMinute:
   353  00002D                     ??_modifySecond:
   354  00002D                     ??_stopWatch:
   355  00002D                     ?___awdiv:
   356                           	opt callstack 0
   357  00002D                     ?___awmod:
   358                           	opt callstack 0
   359  00002D                     SendByteBBSPI@output:
   360                           	opt callstack 0
   361  00002D                     ___awdiv@dividend:
   362                           	opt callstack 0
   363  00002D                     ___awmod@dividend:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x8
   367  00002D                     	ds	1
   368  00002E                     SendByteBBSPI@bitcount:
   369                           	opt callstack 0
   370                           
   371                           ; 1 bytes @ 0x9
   372  00002E                     	ds	1
   373  00002F                     SendByteBBSPI@input:
   374                           	opt callstack 0
   375  00002F                     ___awdiv@divisor:
   376                           	opt callstack 0
   377  00002F                     ___awmod@divisor:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0xA
   381  00002F                     	ds	1
   382  000030                     Port_BBSPIInit@port_dir:
   383                           	opt callstack 0
   384  000030                     WritePort_BBSPI@a:
   385                           	opt callstack 0
   386                           
   387                           ; 1 bytes @ 0xB
   388  000030                     	ds	1
   389  000031                     WritePort_BBSPI@port_add:
   390                           	opt callstack 0
   391  000031                     ___awdiv@counter:
   392                           	opt callstack 0
   393  000031                     ___awmod@counter:
   394                           	opt callstack 0
   395                           
   396                           ; 1 bytes @ 0xC
   397  000031                     	ds	1
   398  000032                     ??_LCDPutInst:
   399  000032                     ??_LCDPutChar:
   400  000032                     ___awdiv@sign:
   401                           	opt callstack 0
   402  000032                     ___awmod@sign:
   403                           	opt callstack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  000032                     	ds	1
   407  000033                     LCDPutChar@ch:
   408                           	opt callstack 0
   409  000033                     LCDPutInst@ch:
   410                           	opt callstack 0
   411  000033                     ___awdiv@quotient:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0xE
   415  000033                     	ds	1
   416  000034                     ??_LCDInit:
   417  000034                     LCDPutStr@ptr:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0xF
   421  000034                     	ds	2
   422  000036                     ??_displayModHour:
   423  000036                     ??_displayModMinute:
   424  000036                     ??_displayModSecond:
   425  000036                     
   426                           ; 1 bytes @ 0x11
   427  000036                     	ds	2
   428  000038                     ??_main:
   429                           
   430                           ; 1 bytes @ 0x13
   431  000038                     	ds	2
   432  00003A                     main@changeModePressed:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x15
   436  00003A                     	ds	2
   437                           
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 15 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  changeModePr    2   21[COMRAM] int 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   461 ;;Total ram usage:        4 bytes
   462 ;; Hardware stack levels required when called:    8
   463 ;; This function calls:
   464 ;;		_LCDInit
   465 ;;		_buttonInitialize
   466 ;;		_displayClock
   467 ;;		_displayModHour
   468 ;;		_displayModMinute
   469 ;;		_displayModSecond
   470 ;;		_displayStpWatch
   471 ;;		_modifyHour
   472 ;;		_modifyMinute
   473 ;;		_modifySecond
   474 ;;		_norClock
   475 ;;		_oscillationInitialize
   476 ;;		_stopWatch
   477 ;;		_timerInitialize
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text0
   484  001054                     __ptext0:
   485                           	opt callstack 0
   486  001054                     _main:
   487                           	opt callstack 23
   488  001054                     
   489                           ;main.c: 16:     oscillationInitialize();
   490  001054  EC9B  F011         	call	_oscillationInitialize	;wreg free
   491                           
   492                           ;main.c: 17:     timerInitialize();
   493  001058  EC88  F011         	call	_timerInitialize	;wreg free
   494                           
   495                           ;main.c: 18:     buttonInitialize();
   496  00105C  ECA0  F011         	call	_buttonInitialize	;wreg free
   497  001060                     
   498                           ;main.c: 19:     LCDInit();
   499  001060  ECC4  F010         	call	_LCDInit	;wreg free
   500  001064                     
   501                           ;main.c: 20:     state = norClk;
   502  001064  0E00               	movlw	0
   503  001066  6E24               	movwf	_state^0,c
   504  001068                     
   505                           ;main.c: 21:     stModify = init;
   506  001068  0E00               	movlw	0
   507  00106A  6E23               	movwf	_stModify^0,c
   508  00106C                     
   509                           ;main.c: 22:     int changeModePressed = 0;
   510  00106C  0E00               	movlw	0
   511  00106E  6E3B               	movwf	(main@changeModePressed+1)^0,c
   512  001070  0E00               	movlw	0
   513  001072  6E3A               	movwf	main@changeModePressed^0,c
   514                           
   515                           ;main.c: 23:     if (RA5Pressed == 0) {
   516  001074  501D               	movf	_RA5Pressed^0,w,c
   517  001076  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   518  001078  A4D8               	btfss	status,2,c
   519  00107A  EF41  F008         	goto	u1181
   520  00107E  EF43  F008         	goto	u1180
   521  001082                     u1181:
   522  001082  EFE2  F008         	goto	l2281
   523  001086                     u1180:
   524  001086                     
   525                           ;main.c: 24:         changeModePressed = 0;
   526  001086  0E00               	movlw	0
   527  001088  6E3B               	movwf	(main@changeModePressed+1)^0,c
   528  00108A  0E00               	movlw	0
   529  00108C  6E3A               	movwf	main@changeModePressed^0,c
   530  00108E  EFE2  F008         	goto	l2281
   531  001092                     l2237:
   532                           
   533                           ;main.c: 30:                 miliSecSTW = 0;
   534  001092  0E00               	movlw	0
   535  001094  6E10               	movwf	(_miliSecSTW+1)^0,c
   536  001096  0E00               	movlw	0
   537  001098  6E0F               	movwf	_miliSecSTW^0,c
   538                           
   539                           ;main.c: 31:                 secSTW = 0;
   540  00109A  0E00               	movlw	0
   541  00109C  6E12               	movwf	(_secSTW+1)^0,c
   542  00109E  0E00               	movlw	0
   543  0010A0  6E11               	movwf	_secSTW^0,c
   544                           
   545                           ;main.c: 32:                 minSTW = 0;
   546  0010A2  0E00               	movlw	0
   547  0010A4  6E14               	movwf	(_minSTW+1)^0,c
   548  0010A6  0E00               	movlw	0
   549  0010A8  6E13               	movwf	_minSTW^0,c
   550  0010AA                     
   551                           ;main.c: 33:                 norClock();
   552  0010AA  ECAC  F00F         	call	_norClock	;wreg free
   553  0010AE                     
   554                           ;main.c: 34:                 displayClock();
   555  0010AE  EC8B  F00E         	call	_displayClock	;wreg free
   556  0010B2                     
   557                           ;main.c: 35:                 if (changeModePressed == 0) {
   558  0010B2  503A               	movf	main@changeModePressed^0,w,c
   559  0010B4  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   560  0010B6  A4D8               	btfss	status,2,c
   561  0010B8  EF60  F008         	goto	u1191
   562  0010BC  EF62  F008         	goto	u1190
   563  0010C0                     u1191:
   564  0010C0  EFE2  F008         	goto	l2281
   565  0010C4                     u1190:
   566  0010C4                     
   567                           ;main.c: 36:                     changeModePressed = 1;
   568  0010C4  0E00               	movlw	0
   569  0010C6  6E3B               	movwf	(main@changeModePressed+1)^0,c
   570  0010C8  0E01               	movlw	1
   571  0010CA  6E3A               	movwf	main@changeModePressed^0,c
   572                           
   573                           ;main.c: 37:                     state = modHr;
   574  0010CC  0E01               	movlw	1
   575  0010CE  6E24               	movwf	_state^0,c
   576                           
   577                           ;main.c: 38:                     blink = 0;
   578  0010D0  0E00               	movlw	0
   579  0010D2  6E04               	movwf	(_blink+1)^0,c
   580  0010D4  0E00               	movlw	0
   581  0010D6  6E03               	movwf	_blink^0,c
   582                           
   583                           ;main.c: 39:                     count10ms = 0;
   584  0010D8  0E00               	movlw	0
   585  0010DA  6E0E               	movwf	(_count10ms+1)^0,c
   586  0010DC  0E00               	movlw	0
   587  0010DE  6E0D               	movwf	_count10ms^0,c
   588  0010E0  EFE2  F008         	goto	l2281
   589  0010E4                     l2247:
   590                           
   591                           ;main.c: 43:                 modifyHour();
   592  0010E4  ECA5  F00C         	call	_modifyHour	;wreg free
   593  0010E8                     
   594                           ;main.c: 44:                 displayModHour();
   595  0010E8  ECA8  F00A         	call	_displayModHour	;wreg free
   596  0010EC                     
   597                           ;main.c: 45:                 if (changeModePressed == 0) {
   598  0010EC  503A               	movf	main@changeModePressed^0,w,c
   599  0010EE  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   600  0010F0  A4D8               	btfss	status,2,c
   601  0010F2  EF7D  F008         	goto	u1201
   602  0010F6  EF7F  F008         	goto	u1200
   603  0010FA                     u1201:
   604  0010FA  EFE2  F008         	goto	l2281
   605  0010FE                     u1200:
   606  0010FE                     
   607                           ;main.c: 46:                     changeModePressed = 1;
   608  0010FE  0E00               	movlw	0
   609  001100  6E3B               	movwf	(main@changeModePressed+1)^0,c
   610  001102  0E01               	movlw	1
   611  001104  6E3A               	movwf	main@changeModePressed^0,c
   612                           
   613                           ;main.c: 47:                     state = modMin;
   614  001106  0E02               	movlw	2
   615  001108  6E24               	movwf	_state^0,c
   616                           
   617                           ;main.c: 48:                     blink = 0;
   618  00110A  0E00               	movlw	0
   619  00110C  6E04               	movwf	(_blink+1)^0,c
   620  00110E  0E00               	movlw	0
   621  001110  6E03               	movwf	_blink^0,c
   622                           
   623                           ;main.c: 49:                     count10ms = 0;
   624  001112  0E00               	movlw	0
   625  001114  6E0E               	movwf	(_count10ms+1)^0,c
   626  001116  0E00               	movlw	0
   627  001118  6E0D               	movwf	_count10ms^0,c
   628  00111A  EFE2  F008         	goto	l2281
   629  00111E                     l2255:
   630                           
   631                           ;main.c: 53:                 modifyMinute();
   632  00111E  EC0D  F00C         	call	_modifyMinute	;wreg free
   633  001122                     
   634                           ;main.c: 54:                 displayModMinute();
   635  001122  ECD8  F009         	call	_displayModMinute	;wreg free
   636  001126                     
   637                           ;main.c: 55:                 if (changeModePressed == 0) {
   638  001126  503A               	movf	main@changeModePressed^0,w,c
   639  001128  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   640  00112A  A4D8               	btfss	status,2,c
   641  00112C  EF9A  F008         	goto	u1211
   642  001130  EF9C  F008         	goto	u1210
   643  001134                     u1211:
   644  001134  EFE2  F008         	goto	l2281
   645  001138                     u1210:
   646  001138                     
   647                           ;main.c: 56:                     changeModePressed = 1;
   648  001138  0E00               	movlw	0
   649  00113A  6E3B               	movwf	(main@changeModePressed+1)^0,c
   650  00113C  0E01               	movlw	1
   651  00113E  6E3A               	movwf	main@changeModePressed^0,c
   652                           
   653                           ;main.c: 57:                     state = modSec;
   654  001140  0E03               	movlw	3
   655  001142  6E24               	movwf	_state^0,c
   656                           
   657                           ;main.c: 58:                     blink = 0;
   658  001144  0E00               	movlw	0
   659  001146  6E04               	movwf	(_blink+1)^0,c
   660  001148  0E00               	movlw	0
   661  00114A  6E03               	movwf	_blink^0,c
   662                           
   663                           ;main.c: 59:                     count10ms = 0;
   664  00114C  0E00               	movlw	0
   665  00114E  6E0E               	movwf	(_count10ms+1)^0,c
   666  001150  0E00               	movlw	0
   667  001152  6E0D               	movwf	_count10ms^0,c
   668  001154  EFE2  F008         	goto	l2281
   669  001158                     l2263:
   670                           
   671                           ;main.c: 63:                 modifySecond();
   672  001158  EC75  F00B         	call	_modifySecond	;wreg free
   673  00115C                     
   674                           ;main.c: 64:                 displayModSecond();
   675  00115C  EC05  F009         	call	_displayModSecond	;wreg free
   676  001160                     
   677                           ;main.c: 65:                 if (changeModePressed == 0) {
   678  001160  503A               	movf	main@changeModePressed^0,w,c
   679  001162  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   680  001164  A4D8               	btfss	status,2,c
   681  001166  EFB7  F008         	goto	u1221
   682  00116A  EFB9  F008         	goto	u1220
   683  00116E                     u1221:
   684  00116E  EFE2  F008         	goto	l2281
   685  001172                     u1220:
   686  001172                     
   687                           ;main.c: 66:                     changeModePressed = 1;
   688  001172  0E00               	movlw	0
   689  001174  6E3B               	movwf	(main@changeModePressed+1)^0,c
   690  001176  0E01               	movlw	1
   691  001178  6E3A               	movwf	main@changeModePressed^0,c
   692                           
   693                           ;main.c: 67:                     state = stpWatch;
   694  00117A  0E04               	movlw	4
   695  00117C  6E24               	movwf	_state^0,c
   696                           
   697                           ;main.c: 68:                     runSTW = 0;
   698  00117E  0E00               	movlw	0
   699  001180  6E16               	movwf	(_runSTW+1)^0,c
   700  001182  0E00               	movlw	0
   701  001184  6E15               	movwf	_runSTW^0,c
   702                           
   703                           ;main.c: 69:                     count10ms = 0;
   704  001186  0E00               	movlw	0
   705  001188  6E0E               	movwf	(_count10ms+1)^0,c
   706  00118A  0E00               	movlw	0
   707  00118C  6E0D               	movwf	_count10ms^0,c
   708  00118E  EFE2  F008         	goto	l2281
   709  001192                     l2271:
   710                           
   711                           ;main.c: 73:                 norClock();
   712  001192  ECAC  F00F         	call	_norClock	;wreg free
   713                           
   714                           ;main.c: 74:                 stopWatch();
   715  001196  EC3D  F00D         	call	_stopWatch	;wreg free
   716  00119A                     
   717                           ;main.c: 75:                 displayStpWatch();
   718  00119A  ECB5  F00D         	call	_displayStpWatch	;wreg free
   719  00119E                     
   720                           ;main.c: 76:                 if (changeModePressed == 0) {
   721  00119E  503A               	movf	main@changeModePressed^0,w,c
   722  0011A0  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   723  0011A2  A4D8               	btfss	status,2,c
   724  0011A4  EFD6  F008         	goto	u1231
   725  0011A8  EFD8  F008         	goto	u1230
   726  0011AC                     u1231:
   727  0011AC  EFE2  F008         	goto	l2281
   728  0011B0                     u1230:
   729  0011B0                     
   730                           ;main.c: 77:                     changeModePressed = 1;
   731  0011B0  0E00               	movlw	0
   732  0011B2  6E3B               	movwf	(main@changeModePressed+1)^0,c
   733  0011B4  0E01               	movlw	1
   734  0011B6  6E3A               	movwf	main@changeModePressed^0,c
   735                           
   736                           ;main.c: 78:                     state = norClk;
   737  0011B8  0E00               	movlw	0
   738  0011BA  6E24               	movwf	_state^0,c
   739                           
   740                           ;main.c: 79:                     runSTW = 0;
   741  0011BC  0E00               	movlw	0
   742  0011BE  6E16               	movwf	(_runSTW+1)^0,c
   743  0011C0  0E00               	movlw	0
   744  0011C2  6E15               	movwf	_runSTW^0,c
   745  0011C4                     l2281:
   746  0011C4  5024               	movf	_state^0,w,c
   747  0011C6  6E38               	movwf	??_main^0,c
   748  0011C8  6A39               	clrf	(??_main+1)^0,c
   749                           
   750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   751                           ; Switch size 1, requested type "simple"
   752                           ; Number of cases is 1, Range of values is 0 to 0
   753                           ; switch strategies available:
   754                           ; Name         Instructions Cycles
   755                           ; simple_byte            4     3 (average)
   756                           ;	Chosen strategy is simple_byte
   757  0011CA  5039               	movf	(??_main+1)^0,w,c
   758  0011CC  0A00               	xorlw	0	; case 0
   759  0011CE  B4D8               	btfsc	status,2,c
   760  0011D0  EFEC  F008         	goto	l2323
   761  0011D4  EFE2  F008         	goto	l2281
   762  0011D8                     l2323:
   763                           
   764                           ; Switch size 1, requested type "simple"
   765                           ; Number of cases is 5, Range of values is 0 to 4
   766                           ; switch strategies available:
   767                           ; Name         Instructions Cycles
   768                           ; simple_byte           16     9 (average)
   769                           ;	Chosen strategy is simple_byte
   770  0011D8  5038               	movf	??_main^0,w,c
   771  0011DA  0A00               	xorlw	0	; case 0
   772  0011DC  B4D8               	btfsc	status,2,c
   773  0011DE  EF49  F008         	goto	l2237
   774  0011E2  0A01               	xorlw	1	; case 1
   775  0011E4  B4D8               	btfsc	status,2,c
   776  0011E6  EF72  F008         	goto	l2247
   777  0011EA  0A03               	xorlw	3	; case 2
   778  0011EC  B4D8               	btfsc	status,2,c
   779  0011EE  EF8F  F008         	goto	l2255
   780  0011F2  0A01               	xorlw	1	; case 3
   781  0011F4  B4D8               	btfsc	status,2,c
   782  0011F6  EFAC  F008         	goto	l2263
   783  0011FA  0A07               	xorlw	7	; case 4
   784  0011FC  B4D8               	btfsc	status,2,c
   785  0011FE  EFC9  F008         	goto	l2271
   786  001202  EFE2  F008         	goto	l2281
   787  001206  EF07  F000         	goto	start
   788  00120A                     __end_of_main:
   789                           	opt callstack 0
   790                           
   791 ;; *************** function _timerInitialize *****************
   792 ;; Defined at:
   793 ;;		line 8 in file "system.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    3
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text1
   822  002310                     __ptext1:
   823                           	opt callstack 0
   824  002310                     _timerInitialize:
   825                           	opt callstack 27
   826  002310                     
   827                           ;system.c: 9:     INTCONbits.GIE = 1;
   828  002310  8EF2               	bsf	242,7,c	;volatile
   829                           
   830                           ;system.c: 11:     INTCONbits.TMR0IE = 1;
   831  002312  8AF2               	bsf	242,5,c	;volatile
   832                           
   833                           ;system.c: 12:     INTCONbits.TMR0IF = 0;
   834  002314  94F2               	bcf	242,2,c	;volatile
   835  002316                     
   836                           ;system.c: 13:     T0CON = 0b10000100;
   837  002316  0E84               	movlw	132
   838  002318  6ED5               	movwf	213,c	;volatile
   839                           
   840                           ;system.c: 15:     TMR0H = 0xfd;
   841  00231A  0EFD               	movlw	253
   842  00231C  6ED7               	movwf	215,c	;volatile
   843                           
   844                           ;system.c: 16:     TMR0L = 0x7f;
   845  00231E  0E7F               	movlw	127
   846  002320  6ED6               	movwf	214,c	;volatile
   847  002322  0012               	return		;funcret
   848  002324                     __end_of_timerInitialize:
   849                           	opt callstack 0
   850                           
   851 ;; *************** function _stopWatch *****************
   852 ;; Defined at:
   853 ;;		line 3 in file "stateStpWatch.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;		None
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, status,2, status,0
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;Total ram usage:        2 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    3
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text2
   882  001A7A                     __ptext2:
   883                           	opt callstack 0
   884  001A7A                     _stopWatch:
   885                           	opt callstack 27
   886  001A7A                     
   887                           ;stateStpWatch.c: 4:     if (btnPressed == 0) {
   888  001A7A  5017               	movf	_btnPressed^0,w,c
   889  001A7C  1018               	iorwf	(_btnPressed+1)^0,w,c
   890  001A7E  A4D8               	btfss	status,2,c
   891  001A80  EF44  F00D         	goto	u641
   892  001A84  EF46  F00D         	goto	u640
   893  001A88                     u641:
   894  001A88  EF69  F00D         	goto	l1711
   895  001A8C                     u640:
   896  001A8C                     
   897                           ;stateStpWatch.c: 5:         btnPressed = 1;
   898  001A8C  0E00               	movlw	0
   899  001A8E  6E18               	movwf	(_btnPressed+1)^0,c
   900  001A90  0E01               	movlw	1
   901  001A92  6E17               	movwf	_btnPressed^0,c
   902  001A94                     
   903                           ;stateStpWatch.c: 6:         if (runSTW == 0) {
   904  001A94  5015               	movf	_runSTW^0,w,c
   905  001A96  1016               	iorwf	(_runSTW+1)^0,w,c
   906  001A98  A4D8               	btfss	status,2,c
   907  001A9A  EF51  F00D         	goto	u651
   908  001A9E  EF53  F00D         	goto	u650
   909  001AA2                     u651:
   910  001AA2  EF5F  F00D         	goto	l1709
   911  001AA6                     u650:
   912  001AA6                     
   913                           ;stateStpWatch.c: 7:             miliSecSTW = 0;
   914  001AA6  0E00               	movlw	0
   915  001AA8  6E10               	movwf	(_miliSecSTW+1)^0,c
   916  001AAA  0E00               	movlw	0
   917  001AAC  6E0F               	movwf	_miliSecSTW^0,c
   918                           
   919                           ;stateStpWatch.c: 8:             secSTW = 0;
   920  001AAE  0E00               	movlw	0
   921  001AB0  6E12               	movwf	(_secSTW+1)^0,c
   922  001AB2  0E00               	movlw	0
   923  001AB4  6E11               	movwf	_secSTW^0,c
   924                           
   925                           ;stateStpWatch.c: 9:             minSTW = 0;
   926  001AB6  0E00               	movlw	0
   927  001AB8  6E14               	movwf	(_minSTW+1)^0,c
   928  001ABA  0E00               	movlw	0
   929  001ABC  6E13               	movwf	_minSTW^0,c
   930  001ABE                     l1709:
   931                           
   932                           ;stateStpWatch.c: 11:         runSTW = (runSTW + 1) % 2;
   933  001ABE  0E01               	movlw	1
   934  001AC0  2415               	addwf	_runSTW^0,w,c
   935  001AC2  6E2D               	movwf	??_stopWatch^0,c
   936  001AC4  0E00               	movlw	0
   937  001AC6  2016               	addwfc	(_runSTW+1)^0,w,c
   938  001AC8  6E2E               	movwf	(??_stopWatch+1)^0,c
   939  001ACA  0E01               	movlw	1
   940  001ACC  142D               	andwf	??_stopWatch^0,w,c
   941  001ACE  6E15               	movwf	_runSTW^0,c
   942  001AD0  6A16               	clrf	(_runSTW+1)^0,c
   943  001AD2                     l1711:
   944                           
   945                           ;stateStpWatch.c: 13:     if (RA5Pressed == 0) {
   946  001AD2  501D               	movf	_RA5Pressed^0,w,c
   947  001AD4  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   948  001AD6  A4D8               	btfss	status,2,c
   949  001AD8  EF70  F00D         	goto	u661
   950  001ADC  EF72  F00D         	goto	u660
   951  001AE0                     u661:
   952  001AE0  EF76  F00D         	goto	l1715
   953  001AE4                     u660:
   954  001AE4                     
   955                           ;stateStpWatch.c: 14:         btnPressed = 0;
   956  001AE4  0E00               	movlw	0
   957  001AE6  6E18               	movwf	(_btnPressed+1)^0,c
   958  001AE8  0E00               	movlw	0
   959  001AEA  6E17               	movwf	_btnPressed^0,c
   960  001AEC                     l1715:
   961                           
   962                           ;stateStpWatch.c: 16:     if (runSTW == 1) {
   963  001AEC  0415               	decf	_runSTW^0,w,c
   964  001AEE  1016               	iorwf	(_runSTW+1)^0,w,c
   965  001AF0  A4D8               	btfss	status,2,c
   966  001AF2  EF7D  F00D         	goto	u671
   967  001AF6  EF7F  F00D         	goto	u670
   968  001AFA                     u671:
   969  001AFA  EFB4  F00D         	goto	l506
   970  001AFE                     u670:
   971  001AFE                     
   972                           ;stateStpWatch.c: 17:         if (flag == 1) {
   973  001AFE  040B               	decf	_flag^0,w,c
   974  001B00  100C               	iorwf	(_flag+1)^0,w,c
   975  001B02  A4D8               	btfss	status,2,c
   976  001B04  EF86  F00D         	goto	u681
   977  001B08  EF88  F00D         	goto	u680
   978  001B0C                     u681:
   979  001B0C  EF8E  F00D         	goto	l1723
   980  001B10                     u680:
   981  001B10                     
   982                           ;stateStpWatch.c: 18:             flag = 0;
   983  001B10  0E00               	movlw	0
   984  001B12  6E0C               	movwf	(_flag+1)^0,c
   985  001B14  0E00               	movlw	0
   986  001B16  6E0B               	movwf	_flag^0,c
   987  001B18                     
   988                           ;stateStpWatch.c: 19:             secSTW++;
   989  001B18  4A11               	infsnz	_secSTW^0,f,c
   990  001B1A  2A12               	incf	(_secSTW+1)^0,f,c
   991  001B1C                     l1723:
   992                           
   993                           ;stateStpWatch.c: 21:         if (secSTW >= 60) {
   994  001B1C  BE12               	btfsc	(_secSTW+1)^0,7,c
   995  001B1E  EF9A  F00D         	goto	u691
   996  001B22  5012               	movf	(_secSTW+1)^0,w,c
   997  001B24  E109               	bnz	u690
   998  001B26  0E3C               	movlw	60
   999  001B28  5C11               	subwf	_secSTW^0,w,c
  1000  001B2A  A0D8               	btfss	status,0,c
  1001  001B2C  EF9A  F00D         	goto	u691
  1002  001B30  EF9C  F00D         	goto	u690
  1003  001B34                     u691:
  1004  001B34  EFA2  F00D         	goto	l1729
  1005  001B38                     u690:
  1006  001B38                     
  1007                           ;stateStpWatch.c: 22:             secSTW = 0;
  1008  001B38  0E00               	movlw	0
  1009  001B3A  6E12               	movwf	(_secSTW+1)^0,c
  1010  001B3C  0E00               	movlw	0
  1011  001B3E  6E11               	movwf	_secSTW^0,c
  1012  001B40                     
  1013                           ;stateStpWatch.c: 23:             minSTW++;
  1014  001B40  4A13               	infsnz	_minSTW^0,f,c
  1015  001B42  2A14               	incf	(_minSTW+1)^0,f,c
  1016  001B44                     l1729:
  1017                           
  1018                           ;stateStpWatch.c: 25:         if (minSTW >= 60) {
  1019  001B44  BE14               	btfsc	(_minSTW+1)^0,7,c
  1020  001B46  EFAE  F00D         	goto	u701
  1021  001B4A  5014               	movf	(_minSTW+1)^0,w,c
  1022  001B4C  E109               	bnz	u700
  1023  001B4E  0E3C               	movlw	60
  1024  001B50  5C13               	subwf	_minSTW^0,w,c
  1025  001B52  A0D8               	btfss	status,0,c
  1026  001B54  EFAE  F00D         	goto	u701
  1027  001B58  EFB0  F00D         	goto	u700
  1028  001B5C                     u701:
  1029  001B5C  EFB4  F00D         	goto	l506
  1030  001B60                     u700:
  1031  001B60                     
  1032                           ;stateStpWatch.c: 26:             minSTW = 0;
  1033  001B60  0E00               	movlw	0
  1034  001B62  6E14               	movwf	(_minSTW+1)^0,c
  1035  001B64  0E00               	movlw	0
  1036  001B66  6E13               	movwf	_minSTW^0,c
  1037  001B68                     l506:
  1038  001B68  0012               	return		;funcret
  1039  001B6A                     __end_of_stopWatch:
  1040                           	opt callstack 0
  1041                           
  1042 ;; *************** function _oscillationInitialize *****************
  1043 ;; Defined at:
  1044 ;;		line 3 in file "system.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1062 ;;Total ram usage:        0 bytes
  1063 ;; Hardware stack levels used:    1
  1064 ;; Hardware stack levels required when called:    3
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_main
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text3
  1073  002336                     __ptext3:
  1074                           	opt callstack 0
  1075  002336                     _oscillationInitialize:
  1076                           	opt callstack 27
  1077  002336                     
  1078                           ;system.c: 4:     OSCCON = 0b01110111;
  1079  002336  0E77               	movlw	119
  1080  002338  6ED3               	movwf	211,c	;volatile
  1081                           
  1082                           ;system.c: 5:     OSCTUNE = 0b00001111;
  1083  00233A  0E0F               	movlw	15
  1084  00233C  6E9B               	movwf	155,c	;volatile
  1085  00233E  0012               	return		;funcret
  1086  002340                     __end_of_oscillationInitialize:
  1087                           	opt callstack 0
  1088                           
  1089 ;; *************** function _norClock *****************
  1090 ;; Defined at:
  1091 ;;		line 3 in file "stateClock.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;		None
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;		None
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;Total ram usage:        0 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    3
  1112 ;; This function calls:
  1113 ;;		Nothing
  1114 ;; This function is called by:
  1115 ;;		_main
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text4
  1120  001F58                     __ptext4:
  1121                           	opt callstack 0
  1122  001F58                     _norClock:
  1123                           	opt callstack 27
  1124  001F58                     
  1125                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1126  001F58  BE0E               	btfsc	(_count10ms+1)^0,7,c
  1127  001F5A  EFB8  F00F         	goto	u211
  1128  001F5E  500E               	movf	(_count10ms+1)^0,w,c
  1129  001F60  E109               	bnz	u210
  1130  001F62  0E64               	movlw	100
  1131  001F64  5C0D               	subwf	_count10ms^0,w,c
  1132  001F66  A0D8               	btfss	status,0,c
  1133  001F68  EFB8  F00F         	goto	u211
  1134  001F6C  EFBA  F00F         	goto	u210
  1135  001F70                     u211:
  1136  001F70  EFFA  F00F         	goto	l323
  1137  001F74                     u210:
  1138  001F74                     
  1139                           ;stateClock.c: 5:         count10ms = 0;
  1140  001F74  0E00               	movlw	0
  1141  001F76  6E0E               	movwf	(_count10ms+1)^0,c
  1142  001F78  0E00               	movlw	0
  1143  001F7A  6E0D               	movwf	_count10ms^0,c
  1144  001F7C                     
  1145                           ;stateClock.c: 6:         sec++;
  1146  001F7C  4A09               	infsnz	_sec^0,f,c
  1147  001F7E  2A0A               	incf	(_sec+1)^0,f,c
  1148  001F80                     
  1149                           ;stateClock.c: 7:         if (sec >= 60) {
  1150  001F80  BE0A               	btfsc	(_sec+1)^0,7,c
  1151  001F82  EFCC  F00F         	goto	u221
  1152  001F86  500A               	movf	(_sec+1)^0,w,c
  1153  001F88  E109               	bnz	u220
  1154  001F8A  0E3C               	movlw	60
  1155  001F8C  5C09               	subwf	_sec^0,w,c
  1156  001F8E  A0D8               	btfss	status,0,c
  1157  001F90  EFCC  F00F         	goto	u221
  1158  001F94  EFCE  F00F         	goto	u220
  1159  001F98                     u221:
  1160  001F98  EFD4  F00F         	goto	l1439
  1161  001F9C                     u220:
  1162  001F9C                     
  1163                           ;stateClock.c: 8:             sec = 0;
  1164  001F9C  0E00               	movlw	0
  1165  001F9E  6E0A               	movwf	(_sec+1)^0,c
  1166  001FA0  0E00               	movlw	0
  1167  001FA2  6E09               	movwf	_sec^0,c
  1168  001FA4                     
  1169                           ;stateClock.c: 9:             min++;
  1170  001FA4  4A07               	infsnz	_min^0,f,c
  1171  001FA6  2A08               	incf	(_min+1)^0,f,c
  1172  001FA8                     l1439:
  1173                           
  1174                           ;stateClock.c: 11:         if (min >= 60) {
  1175  001FA8  BE08               	btfsc	(_min+1)^0,7,c
  1176  001FAA  EFE0  F00F         	goto	u231
  1177  001FAE  5008               	movf	(_min+1)^0,w,c
  1178  001FB0  E109               	bnz	u230
  1179  001FB2  0E3C               	movlw	60
  1180  001FB4  5C07               	subwf	_min^0,w,c
  1181  001FB6  A0D8               	btfss	status,0,c
  1182  001FB8  EFE0  F00F         	goto	u231
  1183  001FBC  EFE2  F00F         	goto	u230
  1184  001FC0                     u231:
  1185  001FC0  EFE8  F00F         	goto	l1445
  1186  001FC4                     u230:
  1187  001FC4                     
  1188                           ;stateClock.c: 12:             min = 0;
  1189  001FC4  0E00               	movlw	0
  1190  001FC6  6E08               	movwf	(_min+1)^0,c
  1191  001FC8  0E00               	movlw	0
  1192  001FCA  6E07               	movwf	_min^0,c
  1193  001FCC                     
  1194                           ;stateClock.c: 13:             hr++;
  1195  001FCC  4A05               	infsnz	_hr^0,f,c
  1196  001FCE  2A06               	incf	(_hr+1)^0,f,c
  1197  001FD0                     l1445:
  1198                           
  1199                           ;stateClock.c: 15:         if (hr >= 24) {
  1200  001FD0  BE06               	btfsc	(_hr+1)^0,7,c
  1201  001FD2  EFF4  F00F         	goto	u241
  1202  001FD6  5006               	movf	(_hr+1)^0,w,c
  1203  001FD8  E109               	bnz	u240
  1204  001FDA  0E18               	movlw	24
  1205  001FDC  5C05               	subwf	_hr^0,w,c
  1206  001FDE  A0D8               	btfss	status,0,c
  1207  001FE0  EFF4  F00F         	goto	u241
  1208  001FE4  EFF6  F00F         	goto	u240
  1209  001FE8                     u241:
  1210  001FE8  EFFA  F00F         	goto	l323
  1211  001FEC                     u240:
  1212  001FEC                     
  1213                           ;stateClock.c: 16:             hr = 0;
  1214  001FEC  0E00               	movlw	0
  1215  001FEE  6E06               	movwf	(_hr+1)^0,c
  1216  001FF0  0E00               	movlw	0
  1217  001FF2  6E05               	movwf	_hr^0,c
  1218  001FF4                     l323:
  1219  001FF4  0012               	return		;funcret
  1220  001FF6                     __end_of_norClock:
  1221                           	opt callstack 0
  1222                           
  1223 ;; *************** function _modifySecond *****************
  1224 ;; Defined at:
  1225 ;;		line 68 in file "statesModify.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;Total ram usage:        2 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    3
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text5
  1254  0016EA                     __ptext5:
  1255                           	opt callstack 0
  1256  0016EA                     _modifySecond:
  1257                           	opt callstack 27
  1258  0016EA                     
  1259                           ;statesModify.c: 69:     switch (stModify) {
  1260  0016EA  EFE1  F00B         	goto	l1649
  1261  0016EE                     l1617:
  1262                           
  1263                           ;statesModify.c: 71:             if (RA5Pressed == 0 && countPressed > 0) {
  1264  0016EE  501D               	movf	_RA5Pressed^0,w,c
  1265  0016F0  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1266  0016F2  A4D8               	btfss	status,2,c
  1267  0016F4  EF7E  F00B         	goto	u511
  1268  0016F8  EF80  F00B         	goto	u510
  1269  0016FC                     u511:
  1270  0016FC  EFFA  F00B         	goto	l1651
  1271  001700                     u510:
  1272  001700  BE22               	btfsc	(_countPressed+1)^0,7,c
  1273  001702  EF8B  F00B         	goto	u521
  1274  001706  5022               	movf	(_countPressed+1)^0,w,c
  1275  001708  E108               	bnz	u520
  1276  00170A  0421               	decf	_countPressed^0,w,c
  1277  00170C  A0D8               	btfss	status,0,c
  1278  00170E  EF8B  F00B         	goto	u521
  1279  001712  EF8D  F00B         	goto	u520
  1280  001716                     u521:
  1281  001716  EFFA  F00B         	goto	l1651
  1282  00171A                     u520:
  1283  00171A                     
  1284                           ;statesModify.c: 72:                 sec++;
  1285  00171A  4A09               	infsnz	_sec^0,f,c
  1286  00171C  2A0A               	incf	(_sec+1)^0,f,c
  1287  00171E                     
  1288                           ;statesModify.c: 73:                 stModify = iNor;
  1289  00171E  0E01               	movlw	1
  1290  001720  6E23               	movwf	_stModify^0,c
  1291  001722  EFFA  F00B         	goto	l1651
  1292  001726                     l1625:
  1293                           
  1294                           ;statesModify.c: 77:             if (countPressed == 0 || RA5Pressed == 1) {
  1295  001726  5021               	movf	_countPressed^0,w,c
  1296  001728  1022               	iorwf	(_countPressed+1)^0,w,c
  1297  00172A  B4D8               	btfsc	status,2,c
  1298  00172C  EF9A  F00B         	goto	u531
  1299  001730  EF9C  F00B         	goto	u530
  1300  001734                     u531:
  1301  001734  EFA5  F00B         	goto	l1629
  1302  001738                     u530:
  1303  001738  041D               	decf	_RA5Pressed^0,w,c
  1304  00173A  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1305  00173C  A4D8               	btfss	status,2,c
  1306  00173E  EFA3  F00B         	goto	u541
  1307  001742  EFA5  F00B         	goto	u540
  1308  001746                     u541:
  1309  001746  EFA7  F00B         	goto	l1631
  1310  00174A                     u540:
  1311  00174A                     l1629:
  1312                           
  1313                           ;statesModify.c: 78:                 stModify = init;
  1314  00174A  0E00               	movlw	0
  1315  00174C  6E23               	movwf	_stModify^0,c
  1316  00174E                     l1631:
  1317                           
  1318                           ;statesModify.c: 80:             if (countAuto > 0) {
  1319  00174E  BE20               	btfsc	(_countAuto+1)^0,7,c
  1320  001750  EFB2  F00B         	goto	u551
  1321  001754  5020               	movf	(_countAuto+1)^0,w,c
  1322  001756  E108               	bnz	u550
  1323  001758  041F               	decf	_countAuto^0,w,c
  1324  00175A  A0D8               	btfss	status,0,c
  1325  00175C  EFB2  F00B         	goto	u551
  1326  001760  EFB4  F00B         	goto	u550
  1327  001764                     u551:
  1328  001764  EFFA  F00B         	goto	l1651
  1329  001768                     u550:
  1330  001768                     
  1331                           ;statesModify.c: 81:                 increaseTime = 1;
  1332  001768  0E00               	movlw	0
  1333  00176A  6E1A               	movwf	(_increaseTime+1)^0,c
  1334  00176C  0E01               	movlw	1
  1335  00176E  6E19               	movwf	_increaseTime^0,c
  1336                           
  1337                           ;statesModify.c: 82:                 stModify = iAuto;
  1338  001770  0E02               	movlw	2
  1339  001772  6E23               	movwf	_stModify^0,c
  1340  001774  EFFA  F00B         	goto	l1651
  1341  001778                     l1635:
  1342                           
  1343                           ;statesModify.c: 86:             if (countPressed == 0 || RA5Pressed == 1) {
  1344  001778  5021               	movf	_countPressed^0,w,c
  1345  00177A  1022               	iorwf	(_countPressed+1)^0,w,c
  1346  00177C  B4D8               	btfsc	status,2,c
  1347  00177E  EFC3  F00B         	goto	u561
  1348  001782  EFC5  F00B         	goto	u560
  1349  001786                     u561:
  1350  001786  EFCE  F00B         	goto	l1639
  1351  00178A                     u560:
  1352  00178A  041D               	decf	_RA5Pressed^0,w,c
  1353  00178C  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1354  00178E  A4D8               	btfss	status,2,c
  1355  001790  EFCC  F00B         	goto	u571
  1356  001794  EFCE  F00B         	goto	u570
  1357  001798                     u571:
  1358  001798  EFD0  F00B         	goto	l1641
  1359  00179C                     u570:
  1360  00179C                     l1639:
  1361                           
  1362                           ;statesModify.c: 87:                 stModify = init;
  1363  00179C  0E00               	movlw	0
  1364  00179E  6E23               	movwf	_stModify^0,c
  1365  0017A0                     l1641:
  1366                           
  1367                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1368  0017A0  0419               	decf	_increaseTime^0,w,c
  1369  0017A2  101A               	iorwf	(_increaseTime+1)^0,w,c
  1370  0017A4  A4D8               	btfss	status,2,c
  1371  0017A6  EFD7  F00B         	goto	u581
  1372  0017AA  EFD9  F00B         	goto	u580
  1373  0017AE                     u581:
  1374  0017AE  EFFA  F00B         	goto	l1651
  1375  0017B2                     u580:
  1376  0017B2                     
  1377                           ;statesModify.c: 90:                 increaseTime = 0;
  1378  0017B2  0E00               	movlw	0
  1379  0017B4  6E1A               	movwf	(_increaseTime+1)^0,c
  1380  0017B6  0E00               	movlw	0
  1381  0017B8  6E19               	movwf	_increaseTime^0,c
  1382  0017BA                     
  1383                           ;statesModify.c: 91:                 sec++;
  1384  0017BA  4A09               	infsnz	_sec^0,f,c
  1385  0017BC  2A0A               	incf	(_sec+1)^0,f,c
  1386  0017BE  EFFA  F00B         	goto	l1651
  1387  0017C2                     l1649:
  1388  0017C2  5023               	movf	_stModify^0,w,c
  1389  0017C4  6E2D               	movwf	??_modifySecond^0,c
  1390  0017C6  6A2E               	clrf	(??_modifySecond+1)^0,c
  1391                           
  1392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1393                           ; Switch size 1, requested type "simple"
  1394                           ; Number of cases is 1, Range of values is 0 to 0
  1395                           ; switch strategies available:
  1396                           ; Name         Instructions Cycles
  1397                           ; simple_byte            4     3 (average)
  1398                           ;	Chosen strategy is simple_byte
  1399  0017C8  502E               	movf	(??_modifySecond+1)^0,w,c
  1400  0017CA  0A00               	xorlw	0	; case 0
  1401  0017CC  B4D8               	btfsc	status,2,c
  1402  0017CE  EFEB  F00B         	goto	l2325
  1403  0017D2  EFFA  F00B         	goto	l1651
  1404  0017D6                     l2325:
  1405                           
  1406                           ; Switch size 1, requested type "simple"
  1407                           ; Number of cases is 3, Range of values is 0 to 2
  1408                           ; switch strategies available:
  1409                           ; Name         Instructions Cycles
  1410                           ; simple_byte           10     6 (average)
  1411                           ;	Chosen strategy is simple_byte
  1412  0017D6  502D               	movf	??_modifySecond^0,w,c
  1413  0017D8  0A00               	xorlw	0	; case 0
  1414  0017DA  B4D8               	btfsc	status,2,c
  1415  0017DC  EF77  F00B         	goto	l1617
  1416  0017E0  0A01               	xorlw	1	; case 1
  1417  0017E2  B4D8               	btfsc	status,2,c
  1418  0017E4  EF93  F00B         	goto	l1625
  1419  0017E8  0A03               	xorlw	3	; case 2
  1420  0017EA  B4D8               	btfsc	status,2,c
  1421  0017EC  EFBC  F00B         	goto	l1635
  1422  0017F0  EFFA  F00B         	goto	l1651
  1423  0017F4                     l1651:
  1424                           
  1425                           ;statesModify.c: 95:     if (sec >= 60) {
  1426  0017F4  BE0A               	btfsc	(_sec+1)^0,7,c
  1427  0017F6  EF06  F00C         	goto	u591
  1428  0017FA  500A               	movf	(_sec+1)^0,w,c
  1429  0017FC  E109               	bnz	u590
  1430  0017FE  0E3C               	movlw	60
  1431  001800  5C09               	subwf	_sec^0,w,c
  1432  001802  A0D8               	btfss	status,0,c
  1433  001804  EF06  F00C         	goto	u591
  1434  001808  EF08  F00C         	goto	u590
  1435  00180C                     u591:
  1436  00180C  EF0C  F00C         	goto	l432
  1437  001810                     u590:
  1438  001810                     
  1439                           ;statesModify.c: 96:         sec = 0;
  1440  001810  0E00               	movlw	0
  1441  001812  6E0A               	movwf	(_sec+1)^0,c
  1442  001814  0E00               	movlw	0
  1443  001816  6E09               	movwf	_sec^0,c
  1444  001818                     l432:
  1445  001818  0012               	return		;funcret
  1446  00181A                     __end_of_modifySecond:
  1447                           	opt callstack 0
  1448                           
  1449 ;; *************** function _modifyMinute *****************
  1450 ;; Defined at:
  1451 ;;		line 36 in file "statesModify.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;		None
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      void 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;Total ram usage:        2 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    3
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_main
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text6
  1480  00181A                     __ptext6:
  1481                           	opt callstack 0
  1482  00181A                     _modifyMinute:
  1483                           	opt callstack 27
  1484  00181A                     
  1485                           ;statesModify.c: 37:     switch (stModify) {
  1486  00181A  EF79  F00C         	goto	l1573
  1487  00181E                     l1541:
  1488                           
  1489                           ;statesModify.c: 39:             if (RA5Pressed == 0 && countPressed > 0) {
  1490  00181E  501D               	movf	_RA5Pressed^0,w,c
  1491  001820  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1492  001822  A4D8               	btfss	status,2,c
  1493  001824  EF16  F00C         	goto	u381
  1494  001828  EF18  F00C         	goto	u380
  1495  00182C                     u381:
  1496  00182C  EF92  F00C         	goto	l1575
  1497  001830                     u380:
  1498  001830  BE22               	btfsc	(_countPressed+1)^0,7,c
  1499  001832  EF23  F00C         	goto	u391
  1500  001836  5022               	movf	(_countPressed+1)^0,w,c
  1501  001838  E108               	bnz	u390
  1502  00183A  0421               	decf	_countPressed^0,w,c
  1503  00183C  A0D8               	btfss	status,0,c
  1504  00183E  EF23  F00C         	goto	u391
  1505  001842  EF25  F00C         	goto	u390
  1506  001846                     u391:
  1507  001846  EF92  F00C         	goto	l1575
  1508  00184A                     u390:
  1509  00184A                     
  1510                           ;statesModify.c: 40:                 min++;
  1511  00184A  4A07               	infsnz	_min^0,f,c
  1512  00184C  2A08               	incf	(_min+1)^0,f,c
  1513  00184E                     
  1514                           ;statesModify.c: 41:                 stModify = iNor;
  1515  00184E  0E01               	movlw	1
  1516  001850  6E23               	movwf	_stModify^0,c
  1517  001852  EF92  F00C         	goto	l1575
  1518  001856                     l1549:
  1519                           
  1520                           ;statesModify.c: 45:             if (countPressed == 0 || RA5Pressed == 1) {
  1521  001856  5021               	movf	_countPressed^0,w,c
  1522  001858  1022               	iorwf	(_countPressed+1)^0,w,c
  1523  00185A  B4D8               	btfsc	status,2,c
  1524  00185C  EF32  F00C         	goto	u401
  1525  001860  EF34  F00C         	goto	u400
  1526  001864                     u401:
  1527  001864  EF3D  F00C         	goto	l1553
  1528  001868                     u400:
  1529  001868  041D               	decf	_RA5Pressed^0,w,c
  1530  00186A  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1531  00186C  A4D8               	btfss	status,2,c
  1532  00186E  EF3B  F00C         	goto	u411
  1533  001872  EF3D  F00C         	goto	u410
  1534  001876                     u411:
  1535  001876  EF3F  F00C         	goto	l1555
  1536  00187A                     u410:
  1537  00187A                     l1553:
  1538                           
  1539                           ;statesModify.c: 46:                 stModify = init;
  1540  00187A  0E00               	movlw	0
  1541  00187C  6E23               	movwf	_stModify^0,c
  1542  00187E                     l1555:
  1543                           
  1544                           ;statesModify.c: 48:             if (countAuto > 0) {
  1545  00187E  BE20               	btfsc	(_countAuto+1)^0,7,c
  1546  001880  EF4A  F00C         	goto	u421
  1547  001884  5020               	movf	(_countAuto+1)^0,w,c
  1548  001886  E108               	bnz	u420
  1549  001888  041F               	decf	_countAuto^0,w,c
  1550  00188A  A0D8               	btfss	status,0,c
  1551  00188C  EF4A  F00C         	goto	u421
  1552  001890  EF4C  F00C         	goto	u420
  1553  001894                     u421:
  1554  001894  EF92  F00C         	goto	l1575
  1555  001898                     u420:
  1556  001898                     
  1557                           ;statesModify.c: 49:                 increaseTime = 1;
  1558  001898  0E00               	movlw	0
  1559  00189A  6E1A               	movwf	(_increaseTime+1)^0,c
  1560  00189C  0E01               	movlw	1
  1561  00189E  6E19               	movwf	_increaseTime^0,c
  1562                           
  1563                           ;statesModify.c: 50:                 stModify = iAuto;
  1564  0018A0  0E02               	movlw	2
  1565  0018A2  6E23               	movwf	_stModify^0,c
  1566  0018A4  EF92  F00C         	goto	l1575
  1567  0018A8                     l1559:
  1568                           
  1569                           ;statesModify.c: 54:             if (countPressed == 0 || RA5Pressed == 1) {
  1570  0018A8  5021               	movf	_countPressed^0,w,c
  1571  0018AA  1022               	iorwf	(_countPressed+1)^0,w,c
  1572  0018AC  B4D8               	btfsc	status,2,c
  1573  0018AE  EF5B  F00C         	goto	u431
  1574  0018B2  EF5D  F00C         	goto	u430
  1575  0018B6                     u431:
  1576  0018B6  EF66  F00C         	goto	l1563
  1577  0018BA                     u430:
  1578  0018BA  041D               	decf	_RA5Pressed^0,w,c
  1579  0018BC  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1580  0018BE  A4D8               	btfss	status,2,c
  1581  0018C0  EF64  F00C         	goto	u441
  1582  0018C4  EF66  F00C         	goto	u440
  1583  0018C8                     u441:
  1584  0018C8  EF68  F00C         	goto	l1565
  1585  0018CC                     u440:
  1586  0018CC                     l1563:
  1587                           
  1588                           ;statesModify.c: 55:                 stModify = init;
  1589  0018CC  0E00               	movlw	0
  1590  0018CE  6E23               	movwf	_stModify^0,c
  1591  0018D0                     l1565:
  1592                           
  1593                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1594  0018D0  0419               	decf	_increaseTime^0,w,c
  1595  0018D2  101A               	iorwf	(_increaseTime+1)^0,w,c
  1596  0018D4  A4D8               	btfss	status,2,c
  1597  0018D6  EF6F  F00C         	goto	u451
  1598  0018DA  EF71  F00C         	goto	u450
  1599  0018DE                     u451:
  1600  0018DE  EF92  F00C         	goto	l1575
  1601  0018E2                     u450:
  1602  0018E2                     
  1603                           ;statesModify.c: 58:                 increaseTime = 0;
  1604  0018E2  0E00               	movlw	0
  1605  0018E4  6E1A               	movwf	(_increaseTime+1)^0,c
  1606  0018E6  0E00               	movlw	0
  1607  0018E8  6E19               	movwf	_increaseTime^0,c
  1608  0018EA                     
  1609                           ;statesModify.c: 59:                 min++;
  1610  0018EA  4A07               	infsnz	_min^0,f,c
  1611  0018EC  2A08               	incf	(_min+1)^0,f,c
  1612  0018EE  EF92  F00C         	goto	l1575
  1613  0018F2                     l1573:
  1614  0018F2  5023               	movf	_stModify^0,w,c
  1615  0018F4  6E2D               	movwf	??_modifyMinute^0,c
  1616  0018F6  6A2E               	clrf	(??_modifyMinute+1)^0,c
  1617                           
  1618                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1619                           ; Switch size 1, requested type "simple"
  1620                           ; Number of cases is 1, Range of values is 0 to 0
  1621                           ; switch strategies available:
  1622                           ; Name         Instructions Cycles
  1623                           ; simple_byte            4     3 (average)
  1624                           ;	Chosen strategy is simple_byte
  1625  0018F8  502E               	movf	(??_modifyMinute+1)^0,w,c
  1626  0018FA  0A00               	xorlw	0	; case 0
  1627  0018FC  B4D8               	btfsc	status,2,c
  1628  0018FE  EF83  F00C         	goto	l2327
  1629  001902  EF92  F00C         	goto	l1575
  1630  001906                     l2327:
  1631                           
  1632                           ; Switch size 1, requested type "simple"
  1633                           ; Number of cases is 3, Range of values is 0 to 2
  1634                           ; switch strategies available:
  1635                           ; Name         Instructions Cycles
  1636                           ; simple_byte           10     6 (average)
  1637                           ;	Chosen strategy is simple_byte
  1638  001906  502D               	movf	??_modifyMinute^0,w,c
  1639  001908  0A00               	xorlw	0	; case 0
  1640  00190A  B4D8               	btfsc	status,2,c
  1641  00190C  EF0F  F00C         	goto	l1541
  1642  001910  0A01               	xorlw	1	; case 1
  1643  001912  B4D8               	btfsc	status,2,c
  1644  001914  EF2B  F00C         	goto	l1549
  1645  001918  0A03               	xorlw	3	; case 2
  1646  00191A  B4D8               	btfsc	status,2,c
  1647  00191C  EF54  F00C         	goto	l1559
  1648  001920  EF92  F00C         	goto	l1575
  1649  001924                     l1575:
  1650                           
  1651                           ;statesModify.c: 63:     if (min >= 60) {
  1652  001924  BE08               	btfsc	(_min+1)^0,7,c
  1653  001926  EF9E  F00C         	goto	u461
  1654  00192A  5008               	movf	(_min+1)^0,w,c
  1655  00192C  E109               	bnz	u460
  1656  00192E  0E3C               	movlw	60
  1657  001930  5C07               	subwf	_min^0,w,c
  1658  001932  A0D8               	btfss	status,0,c
  1659  001934  EF9E  F00C         	goto	u461
  1660  001938  EFA0  F00C         	goto	u460
  1661  00193C                     u461:
  1662  00193C  EFA4  F00C         	goto	l414
  1663  001940                     u460:
  1664  001940                     
  1665                           ;statesModify.c: 64:         min = 0;
  1666  001940  0E00               	movlw	0
  1667  001942  6E08               	movwf	(_min+1)^0,c
  1668  001944  0E00               	movlw	0
  1669  001946  6E07               	movwf	_min^0,c
  1670  001948                     l414:
  1671  001948  0012               	return		;funcret
  1672  00194A                     __end_of_modifyMinute:
  1673                           	opt callstack 0
  1674                           
  1675 ;; *************** function _modifyHour *****************
  1676 ;; Defined at:
  1677 ;;		line 4 in file "statesModify.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;		None
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;Total ram usage:        2 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    3
  1698 ;; This function calls:
  1699 ;;		Nothing
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text7
  1706  00194A                     __ptext7:
  1707                           	opt callstack 0
  1708  00194A                     _modifyHour:
  1709                           	opt callstack 27
  1710  00194A                     
  1711                           ;statesModify.c: 5:     switch (stModify) {
  1712  00194A  EF11  F00D         	goto	l1505
  1713  00194E                     l1473:
  1714                           
  1715                           ;statesModify.c: 7:             if (RA5Pressed == 0 && countPressed > 0) {
  1716  00194E  501D               	movf	_RA5Pressed^0,w,c
  1717  001950  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1718  001952  A4D8               	btfss	status,2,c
  1719  001954  EFAE  F00C         	goto	u251
  1720  001958  EFB0  F00C         	goto	u250
  1721  00195C                     u251:
  1722  00195C  EF2A  F00D         	goto	l1507
  1723  001960                     u250:
  1724  001960  BE22               	btfsc	(_countPressed+1)^0,7,c
  1725  001962  EFBB  F00C         	goto	u261
  1726  001966  5022               	movf	(_countPressed+1)^0,w,c
  1727  001968  E108               	bnz	u260
  1728  00196A  0421               	decf	_countPressed^0,w,c
  1729  00196C  A0D8               	btfss	status,0,c
  1730  00196E  EFBB  F00C         	goto	u261
  1731  001972  EFBD  F00C         	goto	u260
  1732  001976                     u261:
  1733  001976  EF2A  F00D         	goto	l1507
  1734  00197A                     u260:
  1735  00197A                     
  1736                           ;statesModify.c: 8:                 hr++;
  1737  00197A  4A05               	infsnz	_hr^0,f,c
  1738  00197C  2A06               	incf	(_hr+1)^0,f,c
  1739  00197E                     
  1740                           ;statesModify.c: 9:                 stModify = iNor;
  1741  00197E  0E01               	movlw	1
  1742  001980  6E23               	movwf	_stModify^0,c
  1743  001982  EF2A  F00D         	goto	l1507
  1744  001986                     l1481:
  1745                           
  1746                           ;statesModify.c: 13:             if (countPressed == 0 || RA5Pressed == 1) {
  1747  001986  5021               	movf	_countPressed^0,w,c
  1748  001988  1022               	iorwf	(_countPressed+1)^0,w,c
  1749  00198A  B4D8               	btfsc	status,2,c
  1750  00198C  EFCA  F00C         	goto	u271
  1751  001990  EFCC  F00C         	goto	u270
  1752  001994                     u271:
  1753  001994  EFD5  F00C         	goto	l1485
  1754  001998                     u270:
  1755  001998  041D               	decf	_RA5Pressed^0,w,c
  1756  00199A  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1757  00199C  A4D8               	btfss	status,2,c
  1758  00199E  EFD3  F00C         	goto	u281
  1759  0019A2  EFD5  F00C         	goto	u280
  1760  0019A6                     u281:
  1761  0019A6  EFD7  F00C         	goto	l1487
  1762  0019AA                     u280:
  1763  0019AA                     l1485:
  1764                           
  1765                           ;statesModify.c: 14:                 stModify = init;
  1766  0019AA  0E00               	movlw	0
  1767  0019AC  6E23               	movwf	_stModify^0,c
  1768  0019AE                     l1487:
  1769                           
  1770                           ;statesModify.c: 16:             if (countAuto > 0) {
  1771  0019AE  BE20               	btfsc	(_countAuto+1)^0,7,c
  1772  0019B0  EFE2  F00C         	goto	u291
  1773  0019B4  5020               	movf	(_countAuto+1)^0,w,c
  1774  0019B6  E108               	bnz	u290
  1775  0019B8  041F               	decf	_countAuto^0,w,c
  1776  0019BA  A0D8               	btfss	status,0,c
  1777  0019BC  EFE2  F00C         	goto	u291
  1778  0019C0  EFE4  F00C         	goto	u290
  1779  0019C4                     u291:
  1780  0019C4  EF2A  F00D         	goto	l1507
  1781  0019C8                     u290:
  1782  0019C8                     
  1783                           ;statesModify.c: 17:                 increaseTime = 1;
  1784  0019C8  0E00               	movlw	0
  1785  0019CA  6E1A               	movwf	(_increaseTime+1)^0,c
  1786  0019CC  0E01               	movlw	1
  1787  0019CE  6E19               	movwf	_increaseTime^0,c
  1788                           
  1789                           ;statesModify.c: 18:                 stModify = iAuto;
  1790  0019D0  0E02               	movlw	2
  1791  0019D2  6E23               	movwf	_stModify^0,c
  1792  0019D4  EF2A  F00D         	goto	l1507
  1793  0019D8                     l1491:
  1794                           
  1795                           ;statesModify.c: 22:             if (countPressed == 0 || RA5Pressed == 1) {
  1796  0019D8  5021               	movf	_countPressed^0,w,c
  1797  0019DA  1022               	iorwf	(_countPressed+1)^0,w,c
  1798  0019DC  B4D8               	btfsc	status,2,c
  1799  0019DE  EFF3  F00C         	goto	u301
  1800  0019E2  EFF5  F00C         	goto	u300
  1801  0019E6                     u301:
  1802  0019E6  EFFE  F00C         	goto	l1495
  1803  0019EA                     u300:
  1804  0019EA  041D               	decf	_RA5Pressed^0,w,c
  1805  0019EC  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1806  0019EE  A4D8               	btfss	status,2,c
  1807  0019F0  EFFC  F00C         	goto	u311
  1808  0019F4  EFFE  F00C         	goto	u310
  1809  0019F8                     u311:
  1810  0019F8  EF00  F00D         	goto	l1497
  1811  0019FC                     u310:
  1812  0019FC                     l1495:
  1813                           
  1814                           ;statesModify.c: 23:                 stModify = init;
  1815  0019FC  0E00               	movlw	0
  1816  0019FE  6E23               	movwf	_stModify^0,c
  1817  001A00                     l1497:
  1818                           
  1819                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1820  001A00  0419               	decf	_increaseTime^0,w,c
  1821  001A02  101A               	iorwf	(_increaseTime+1)^0,w,c
  1822  001A04  A4D8               	btfss	status,2,c
  1823  001A06  EF07  F00D         	goto	u321
  1824  001A0A  EF09  F00D         	goto	u320
  1825  001A0E                     u321:
  1826  001A0E  EF2A  F00D         	goto	l1507
  1827  001A12                     u320:
  1828  001A12                     
  1829                           ;statesModify.c: 26:                 increaseTime = 0;
  1830  001A12  0E00               	movlw	0
  1831  001A14  6E1A               	movwf	(_increaseTime+1)^0,c
  1832  001A16  0E00               	movlw	0
  1833  001A18  6E19               	movwf	_increaseTime^0,c
  1834  001A1A                     
  1835                           ;statesModify.c: 27:                 hr++;
  1836  001A1A  4A05               	infsnz	_hr^0,f,c
  1837  001A1C  2A06               	incf	(_hr+1)^0,f,c
  1838  001A1E  EF2A  F00D         	goto	l1507
  1839  001A22                     l1505:
  1840  001A22  5023               	movf	_stModify^0,w,c
  1841  001A24  6E2D               	movwf	??_modifyHour^0,c
  1842  001A26  6A2E               	clrf	(??_modifyHour+1)^0,c
  1843                           
  1844                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1845                           ; Switch size 1, requested type "simple"
  1846                           ; Number of cases is 1, Range of values is 0 to 0
  1847                           ; switch strategies available:
  1848                           ; Name         Instructions Cycles
  1849                           ; simple_byte            4     3 (average)
  1850                           ;	Chosen strategy is simple_byte
  1851  001A28  502E               	movf	(??_modifyHour+1)^0,w,c
  1852  001A2A  0A00               	xorlw	0	; case 0
  1853  001A2C  B4D8               	btfsc	status,2,c
  1854  001A2E  EF1B  F00D         	goto	l2329
  1855  001A32  EF2A  F00D         	goto	l1507
  1856  001A36                     l2329:
  1857                           
  1858                           ; Switch size 1, requested type "simple"
  1859                           ; Number of cases is 3, Range of values is 0 to 2
  1860                           ; switch strategies available:
  1861                           ; Name         Instructions Cycles
  1862                           ; simple_byte           10     6 (average)
  1863                           ;	Chosen strategy is simple_byte
  1864  001A36  502D               	movf	??_modifyHour^0,w,c
  1865  001A38  0A00               	xorlw	0	; case 0
  1866  001A3A  B4D8               	btfsc	status,2,c
  1867  001A3C  EFA7  F00C         	goto	l1473
  1868  001A40  0A01               	xorlw	1	; case 1
  1869  001A42  B4D8               	btfsc	status,2,c
  1870  001A44  EFC3  F00C         	goto	l1481
  1871  001A48  0A03               	xorlw	3	; case 2
  1872  001A4A  B4D8               	btfsc	status,2,c
  1873  001A4C  EFEC  F00C         	goto	l1491
  1874  001A50  EF2A  F00D         	goto	l1507
  1875  001A54                     l1507:
  1876                           
  1877                           ;statesModify.c: 31:     if (hr >= 24) {
  1878  001A54  BE06               	btfsc	(_hr+1)^0,7,c
  1879  001A56  EF36  F00D         	goto	u331
  1880  001A5A  5006               	movf	(_hr+1)^0,w,c
  1881  001A5C  E109               	bnz	u330
  1882  001A5E  0E18               	movlw	24
  1883  001A60  5C05               	subwf	_hr^0,w,c
  1884  001A62  A0D8               	btfss	status,0,c
  1885  001A64  EF36  F00D         	goto	u331
  1886  001A68  EF38  F00D         	goto	u330
  1887  001A6C                     u331:
  1888  001A6C  EF3C  F00D         	goto	l396
  1889  001A70                     u330:
  1890  001A70                     
  1891                           ;statesModify.c: 32:         hr = 0;
  1892  001A70  0E00               	movlw	0
  1893  001A72  6E06               	movwf	(_hr+1)^0,c
  1894  001A74  0E00               	movlw	0
  1895  001A76  6E05               	movwf	_hr^0,c
  1896  001A78                     l396:
  1897  001A78  0012               	return		;funcret
  1898  001A7A                     __end_of_modifyHour:
  1899                           	opt callstack 0
  1900                           
  1901 ;; *************** function _displayStpWatch *****************
  1902 ;; Defined at:
  1903 ;;		line 31 in file "stateStpWatch.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;		None
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;Total ram usage:        0 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    7
  1924 ;; This function calls:
  1925 ;;		_LCDPutChar
  1926 ;;		_LCDPutInst
  1927 ;;		_LCDPutStr
  1928 ;;		___awdiv
  1929 ;;		___awmod
  1930 ;; This function is called by:
  1931 ;;		_main
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text8
  1936  001B6A                     __ptext8:
  1937                           	opt callstack 0
  1938  001B6A                     _displayStpWatch:
  1939                           	opt callstack 23
  1940  001B6A                     
  1941                           ;stateStpWatch.c: 33:     LCDPutInst(0x80);
  1942  001B6A  0E80               	movlw	128
  1943  001B6C  EC99  F010         	call	_LCDPutInst
  1944  001B70                     
  1945                           ;stateStpWatch.c: 34:     LCDPutStr("   STOP WATCH   ");
  1946  001B70  0E01               	movlw	low STR_5
  1947  001B72  6E34               	movwf	LCDPutStr@ptr^0,c
  1948  001B74  0E10               	movlw	high STR_5
  1949  001B76  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  1950  001B78  EC34  F011         	call	_LCDPutStr	;wreg free
  1951  001B7C                     
  1952                           ;stateStpWatch.c: 35:     LCDPutInst(0xC0);
  1953  001B7C  0EC0               	movlw	192
  1954  001B7E  EC99  F010         	call	_LCDPutInst
  1955  001B82                     
  1956                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW/10+'0');
  1957  001B82  C013  F02D         	movff	_minSTW,___awdiv@dividend
  1958  001B86  C014  F02E         	movff	_minSTW+1,___awdiv@dividend+1
  1959  001B8A  0E00               	movlw	0
  1960  001B8C  6E30               	movwf	(___awdiv@divisor+1)^0,c
  1961  001B8E  0E0A               	movlw	10
  1962  001B90  6E2F               	movwf	___awdiv@divisor^0,c
  1963  001B92  ECF2  F00E         	call	___awdiv	;wreg free
  1964  001B96  502D               	movf	?___awdiv^0,w,c
  1965  001B98  0F30               	addlw	48
  1966  001B9A  EC6E  F010         	call	_LCDPutChar
  1967  001B9E                     
  1968                           ;stateStpWatch.c: 37:     LCDPutChar(minSTW%10+'0');
  1969  001B9E  C013  F02D         	movff	_minSTW,___awmod@dividend
  1970  001BA2  C014  F02E         	movff	_minSTW+1,___awmod@dividend+1
  1971  001BA6  0E00               	movlw	0
  1972  001BA8  6E30               	movwf	(___awmod@divisor+1)^0,c
  1973  001BAA  0E0A               	movlw	10
  1974  001BAC  6E2F               	movwf	___awmod@divisor^0,c
  1975  001BAE  EC54  F00F         	call	___awmod	;wreg free
  1976  001BB2  502D               	movf	?___awmod^0,w,c
  1977  001BB4  0F30               	addlw	48
  1978  001BB6  EC6E  F010         	call	_LCDPutChar
  1979  001BBA                     
  1980                           ;stateStpWatch.c: 38:     LCDPutChar(':');
  1981  001BBA  0E3A               	movlw	58
  1982  001BBC  EC6E  F010         	call	_LCDPutChar
  1983  001BC0                     
  1984                           ;stateStpWatch.c: 39:     LCDPutInst(0xC3);
  1985  001BC0  0EC3               	movlw	195
  1986  001BC2  EC99  F010         	call	_LCDPutInst
  1987  001BC6                     
  1988                           ;stateStpWatch.c: 40:     LCDPutChar(secSTW/10+'0');
  1989  001BC6  C011  F02D         	movff	_secSTW,___awdiv@dividend
  1990  001BCA  C012  F02E         	movff	_secSTW+1,___awdiv@dividend+1
  1991  001BCE  0E00               	movlw	0
  1992  001BD0  6E30               	movwf	(___awdiv@divisor+1)^0,c
  1993  001BD2  0E0A               	movlw	10
  1994  001BD4  6E2F               	movwf	___awdiv@divisor^0,c
  1995  001BD6  ECF2  F00E         	call	___awdiv	;wreg free
  1996  001BDA  502D               	movf	?___awdiv^0,w,c
  1997  001BDC  0F30               	addlw	48
  1998  001BDE  EC6E  F010         	call	_LCDPutChar
  1999  001BE2                     
  2000                           ;stateStpWatch.c: 41:     LCDPutChar(secSTW%10+'0');
  2001  001BE2  C011  F02D         	movff	_secSTW,___awmod@dividend
  2002  001BE6  C012  F02E         	movff	_secSTW+1,___awmod@dividend+1
  2003  001BEA  0E00               	movlw	0
  2004  001BEC  6E30               	movwf	(___awmod@divisor+1)^0,c
  2005  001BEE  0E0A               	movlw	10
  2006  001BF0  6E2F               	movwf	___awmod@divisor^0,c
  2007  001BF2  EC54  F00F         	call	___awmod	;wreg free
  2008  001BF6  502D               	movf	?___awmod^0,w,c
  2009  001BF8  0F30               	addlw	48
  2010  001BFA  EC6E  F010         	call	_LCDPutChar
  2011  001BFE                     
  2012                           ;stateStpWatch.c: 42:     LCDPutChar(':');
  2013  001BFE  0E3A               	movlw	58
  2014  001C00  EC6E  F010         	call	_LCDPutChar
  2015  001C04                     
  2016                           ;stateStpWatch.c: 43:     LCDPutInst(0xC6);
  2017  001C04  0EC6               	movlw	198
  2018  001C06  EC99  F010         	call	_LCDPutInst
  2019  001C0A                     
  2020                           ;stateStpWatch.c: 44:     LCDPutChar(miliSecSTW/10+'0');
  2021  001C0A  C00F  F02D         	movff	_miliSecSTW,___awdiv@dividend
  2022  001C0E  C010  F02E         	movff	_miliSecSTW+1,___awdiv@dividend+1
  2023  001C12  0E00               	movlw	0
  2024  001C14  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2025  001C16  0E0A               	movlw	10
  2026  001C18  6E2F               	movwf	___awdiv@divisor^0,c
  2027  001C1A  ECF2  F00E         	call	___awdiv	;wreg free
  2028  001C1E  502D               	movf	?___awdiv^0,w,c
  2029  001C20  0F30               	addlw	48
  2030  001C22  EC6E  F010         	call	_LCDPutChar
  2031  001C26                     
  2032                           ;stateStpWatch.c: 45:     LCDPutChar(miliSecSTW%10+'0');
  2033  001C26  C00F  F02D         	movff	_miliSecSTW,___awmod@dividend
  2034  001C2A  C010  F02E         	movff	_miliSecSTW+1,___awmod@dividend+1
  2035  001C2E  0E00               	movlw	0
  2036  001C30  6E30               	movwf	(___awmod@divisor+1)^0,c
  2037  001C32  0E0A               	movlw	10
  2038  001C34  6E2F               	movwf	___awmod@divisor^0,c
  2039  001C36  EC54  F00F         	call	___awmod	;wreg free
  2040  001C3A  502D               	movf	?___awmod^0,w,c
  2041  001C3C  0F30               	addlw	48
  2042  001C3E  EC6E  F010         	call	_LCDPutChar
  2043  001C42  0012               	return		;funcret
  2044  001C44                     __end_of_displayStpWatch:
  2045                           	opt callstack 0
  2046                           
  2047 ;; *************** function _displayModSecond *****************
  2048 ;; Defined at:
  2049 ;;		line 166 in file "statesModify.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;		None
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;Total ram usage:        2 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    7
  2070 ;; This function calls:
  2071 ;;		_LCDPutChar
  2072 ;;		_LCDPutInst
  2073 ;;		_LCDPutStr
  2074 ;;		___awdiv
  2075 ;;		___awmod
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text9
  2082  00120A                     __ptext9:
  2083                           	opt callstack 0
  2084  00120A                     _displayModSecond:
  2085                           	opt callstack 23
  2086  00120A                     
  2087                           ;statesModify.c: 167:     LCDPutInst(0x80);
  2088  00120A  0E80               	movlw	128
  2089  00120C  EC99  F010         	call	_LCDPutInst
  2090  001210                     
  2091                           ;statesModify.c: 168:     LCDPutStr("MODIFIES SECOND");
  2092  001210  0E33               	movlw	low STR_4
  2093  001212  6E34               	movwf	LCDPutStr@ptr^0,c
  2094  001214  0E10               	movlw	high STR_4
  2095  001216  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2096  001218  EC34  F011         	call	_LCDPutStr	;wreg free
  2097  00121C                     
  2098                           ;statesModify.c: 169:     LCDPutInst(0xC0);
  2099  00121C  0EC0               	movlw	192
  2100  00121E  EC99  F010         	call	_LCDPutInst
  2101  001222                     
  2102                           ;statesModify.c: 170:     LCDPutChar(hr/10+'0');
  2103  001222  C005  F02D         	movff	_hr,___awdiv@dividend
  2104  001226  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2105  00122A  0E00               	movlw	0
  2106  00122C  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2107  00122E  0E0A               	movlw	10
  2108  001230  6E2F               	movwf	___awdiv@divisor^0,c
  2109  001232  ECF2  F00E         	call	___awdiv	;wreg free
  2110  001236  502D               	movf	?___awdiv^0,w,c
  2111  001238  0F30               	addlw	48
  2112  00123A  EC6E  F010         	call	_LCDPutChar
  2113  00123E                     
  2114                           ;statesModify.c: 171:     LCDPutChar(hr%10+'0');
  2115  00123E  C005  F02D         	movff	_hr,___awmod@dividend
  2116  001242  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2117  001246  0E00               	movlw	0
  2118  001248  6E30               	movwf	(___awmod@divisor+1)^0,c
  2119  00124A  0E0A               	movlw	10
  2120  00124C  6E2F               	movwf	___awmod@divisor^0,c
  2121  00124E  EC54  F00F         	call	___awmod	;wreg free
  2122  001252  502D               	movf	?___awmod^0,w,c
  2123  001254  0F30               	addlw	48
  2124  001256  EC6E  F010         	call	_LCDPutChar
  2125  00125A                     
  2126                           ;statesModify.c: 172:     LCDPutInst(0xC2);
  2127  00125A  0EC2               	movlw	194
  2128  00125C  EC99  F010         	call	_LCDPutInst
  2129  001260                     
  2130                           ;statesModify.c: 173:     LCDPutChar(':');
  2131  001260  0E3A               	movlw	58
  2132  001262  EC6E  F010         	call	_LCDPutChar
  2133  001266                     
  2134                           ;statesModify.c: 175:     LCDPutChar(min/10+'0');
  2135  001266  C007  F02D         	movff	_min,___awdiv@dividend
  2136  00126A  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2137  00126E  0E00               	movlw	0
  2138  001270  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2139  001272  0E0A               	movlw	10
  2140  001274  6E2F               	movwf	___awdiv@divisor^0,c
  2141  001276  ECF2  F00E         	call	___awdiv	;wreg free
  2142  00127A  502D               	movf	?___awdiv^0,w,c
  2143  00127C  0F30               	addlw	48
  2144  00127E  EC6E  F010         	call	_LCDPutChar
  2145  001282                     
  2146                           ;statesModify.c: 176:     LCDPutChar(min%10+'0');
  2147  001282  C007  F02D         	movff	_min,___awmod@dividend
  2148  001286  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2149  00128A  0E00               	movlw	0
  2150  00128C  6E30               	movwf	(___awmod@divisor+1)^0,c
  2151  00128E  0E0A               	movlw	10
  2152  001290  6E2F               	movwf	___awmod@divisor^0,c
  2153  001292  EC54  F00F         	call	___awmod	;wreg free
  2154  001296  502D               	movf	?___awmod^0,w,c
  2155  001298  0F30               	addlw	48
  2156  00129A  EC6E  F010         	call	_LCDPutChar
  2157  00129E                     
  2158                           ;statesModify.c: 177:     LCDPutInst(0xC5);
  2159  00129E  0EC5               	movlw	197
  2160  0012A0  EC99  F010         	call	_LCDPutInst
  2161  0012A4                     
  2162                           ;statesModify.c: 178:     LCDPutChar(':');
  2163  0012A4  0E3A               	movlw	58
  2164  0012A6  EC6E  F010         	call	_LCDPutChar
  2165  0012AA                     
  2166                           ;statesModify.c: 179:     LCDPutInst(0xC6);
  2167  0012AA  0EC6               	movlw	198
  2168  0012AC  EC99  F010         	call	_LCDPutInst
  2169  0012B0                     
  2170                           ;statesModify.c: 180:     if (count10ms >= (20/2)) {
  2171  0012B0  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2172  0012B2  EF64  F009         	goto	u1101
  2173  0012B6  500E               	movf	(_count10ms+1)^0,w,c
  2174  0012B8  E109               	bnz	u1100
  2175  0012BA  0E0A               	movlw	10
  2176  0012BC  5C0D               	subwf	_count10ms^0,w,c
  2177  0012BE  A0D8               	btfss	status,0,c
  2178  0012C0  EF64  F009         	goto	u1101
  2179  0012C4  EF66  F009         	goto	u1100
  2180  0012C8                     u1101:
  2181  0012C8  EFAE  F009         	goto	l2173
  2182  0012CC                     u1100:
  2183  0012CC                     
  2184                           ;statesModify.c: 181:         count10ms = 0;
  2185  0012CC  0E00               	movlw	0
  2186  0012CE  6E0E               	movwf	(_count10ms+1)^0,c
  2187  0012D0  0E00               	movlw	0
  2188  0012D2  6E0D               	movwf	_count10ms^0,c
  2189  0012D4                     
  2190                           ;statesModify.c: 182:         if (countAuto <= 0) {
  2191  0012D4  BE20               	btfsc	(_countAuto+1)^0,7,c
  2192  0012D6  EF77  F009         	goto	u1110
  2193  0012DA  5020               	movf	(_countAuto+1)^0,w,c
  2194  0012DC  E106               	bnz	u1111
  2195  0012DE  041F               	decf	_countAuto^0,w,c
  2196  0012E0  B0D8               	btfsc	status,0,c
  2197  0012E2  EF75  F009         	goto	u1111
  2198  0012E6  EF77  F009         	goto	u1110
  2199  0012EA                     u1111:
  2200  0012EA  EFAE  F009         	goto	l2173
  2201  0012EE                     u1110:
  2202  0012EE                     
  2203                           ;statesModify.c: 183:             if (blink == 0) {
  2204  0012EE  5003               	movf	_blink^0,w,c
  2205  0012F0  1004               	iorwf	(_blink+1)^0,w,c
  2206  0012F2  A4D8               	btfss	status,2,c
  2207  0012F4  EF7E  F009         	goto	u1121
  2208  0012F8  EF80  F009         	goto	u1120
  2209  0012FC                     u1121:
  2210  0012FC  EF88  F009         	goto	l2169
  2211  001300                     u1120:
  2212  001300                     
  2213                           ;statesModify.c: 184:                 LCDPutChar(' ');
  2214  001300  0E20               	movlw	32
  2215  001302  EC6E  F010         	call	_LCDPutChar
  2216                           
  2217                           ;statesModify.c: 185:                 LCDPutChar(' ');
  2218  001306  0E20               	movlw	32
  2219  001308  EC6E  F010         	call	_LCDPutChar
  2220                           
  2221                           ;statesModify.c: 186:             } else {
  2222  00130C  EFA4  F009         	goto	l2171
  2223  001310                     l2169:
  2224                           
  2225                           ;statesModify.c: 187:                 LCDPutChar(sec/10+'0');
  2226  001310  C009  F02D         	movff	_sec,___awdiv@dividend
  2227  001314  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2228  001318  0E00               	movlw	0
  2229  00131A  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2230  00131C  0E0A               	movlw	10
  2231  00131E  6E2F               	movwf	___awdiv@divisor^0,c
  2232  001320  ECF2  F00E         	call	___awdiv	;wreg free
  2233  001324  502D               	movf	?___awdiv^0,w,c
  2234  001326  0F30               	addlw	48
  2235  001328  EC6E  F010         	call	_LCDPutChar
  2236                           
  2237                           ;statesModify.c: 188:                 LCDPutChar(sec%10+'0');
  2238  00132C  C009  F02D         	movff	_sec,___awmod@dividend
  2239  001330  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2240  001334  0E00               	movlw	0
  2241  001336  6E30               	movwf	(___awmod@divisor+1)^0,c
  2242  001338  0E0A               	movlw	10
  2243  00133A  6E2F               	movwf	___awmod@divisor^0,c
  2244  00133C  EC54  F00F         	call	___awmod	;wreg free
  2245  001340  502D               	movf	?___awmod^0,w,c
  2246  001342  0F30               	addlw	48
  2247  001344  EC6E  F010         	call	_LCDPutChar
  2248  001348                     l2171:
  2249                           
  2250                           ;statesModify.c: 190:             blink = (blink + 1) % 2;
  2251  001348  0E01               	movlw	1
  2252  00134A  2403               	addwf	_blink^0,w,c
  2253  00134C  6E36               	movwf	??_displayModSecond^0,c
  2254  00134E  0E00               	movlw	0
  2255  001350  2004               	addwfc	(_blink+1)^0,w,c
  2256  001352  6E37               	movwf	(??_displayModSecond+1)^0,c
  2257  001354  0E01               	movlw	1
  2258  001356  1436               	andwf	??_displayModSecond^0,w,c
  2259  001358  6E03               	movwf	_blink^0,c
  2260  00135A  6A04               	clrf	(_blink+1)^0,c
  2261  00135C                     l2173:
  2262                           
  2263                           ;statesModify.c: 193:     if (countAuto > 0) {
  2264  00135C  BE20               	btfsc	(_countAuto+1)^0,7,c
  2265  00135E  EFB9  F009         	goto	u1131
  2266  001362  5020               	movf	(_countAuto+1)^0,w,c
  2267  001364  E108               	bnz	u1130
  2268  001366  041F               	decf	_countAuto^0,w,c
  2269  001368  A0D8               	btfss	status,0,c
  2270  00136A  EFB9  F009         	goto	u1131
  2271  00136E  EFBB  F009         	goto	u1130
  2272  001372                     u1131:
  2273  001372  EFD7  F009         	goto	l456
  2274  001376                     u1130:
  2275  001376                     
  2276                           ;statesModify.c: 194:         LCDPutChar(sec/10+'0');
  2277  001376  C009  F02D         	movff	_sec,___awdiv@dividend
  2278  00137A  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2279  00137E  0E00               	movlw	0
  2280  001380  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2281  001382  0E0A               	movlw	10
  2282  001384  6E2F               	movwf	___awdiv@divisor^0,c
  2283  001386  ECF2  F00E         	call	___awdiv	;wreg free
  2284  00138A  502D               	movf	?___awdiv^0,w,c
  2285  00138C  0F30               	addlw	48
  2286  00138E  EC6E  F010         	call	_LCDPutChar
  2287                           
  2288                           ;statesModify.c: 195:         LCDPutChar(sec%10+'0');
  2289  001392  C009  F02D         	movff	_sec,___awmod@dividend
  2290  001396  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2291  00139A  0E00               	movlw	0
  2292  00139C  6E30               	movwf	(___awmod@divisor+1)^0,c
  2293  00139E  0E0A               	movlw	10
  2294  0013A0  6E2F               	movwf	___awmod@divisor^0,c
  2295  0013A2  EC54  F00F         	call	___awmod	;wreg free
  2296  0013A6  502D               	movf	?___awmod^0,w,c
  2297  0013A8  0F30               	addlw	48
  2298  0013AA  EC6E  F010         	call	_LCDPutChar
  2299  0013AE                     l456:
  2300  0013AE  0012               	return		;funcret
  2301  0013B0                     __end_of_displayModSecond:
  2302                           	opt callstack 0
  2303                           
  2304 ;; *************** function _displayModMinute *****************
  2305 ;; Defined at:
  2306 ;;		line 133 in file "statesModify.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;Total ram usage:        2 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    7
  2327 ;; This function calls:
  2328 ;;		_LCDPutChar
  2329 ;;		_LCDPutInst
  2330 ;;		_LCDPutStr
  2331 ;;		___awdiv
  2332 ;;		___awmod
  2333 ;; This function is called by:
  2334 ;;		_main
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text10
  2339  0013B0                     __ptext10:
  2340                           	opt callstack 0
  2341  0013B0                     _displayModMinute:
  2342                           	opt callstack 23
  2343  0013B0                     
  2344                           ;statesModify.c: 134:     LCDPutInst(0x80);
  2345  0013B0  0E80               	movlw	128
  2346  0013B2  EC99  F010         	call	_LCDPutInst
  2347  0013B6                     
  2348                           ;statesModify.c: 135:     LCDPutStr("MODIFIES MINUTE");
  2349  0013B6  0E43               	movlw	low STR_3
  2350  0013B8  6E34               	movwf	LCDPutStr@ptr^0,c
  2351  0013BA  0E10               	movlw	high STR_3
  2352  0013BC  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2353  0013BE  EC34  F011         	call	_LCDPutStr	;wreg free
  2354  0013C2                     
  2355                           ;statesModify.c: 136:     LCDPutInst(0xC0);
  2356  0013C2  0EC0               	movlw	192
  2357  0013C4  EC99  F010         	call	_LCDPutInst
  2358  0013C8                     
  2359                           ;statesModify.c: 137:     LCDPutChar(hr/10+'0');
  2360  0013C8  C005  F02D         	movff	_hr,___awdiv@dividend
  2361  0013CC  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2362  0013D0  0E00               	movlw	0
  2363  0013D2  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2364  0013D4  0E0A               	movlw	10
  2365  0013D6  6E2F               	movwf	___awdiv@divisor^0,c
  2366  0013D8  ECF2  F00E         	call	___awdiv	;wreg free
  2367  0013DC  502D               	movf	?___awdiv^0,w,c
  2368  0013DE  0F30               	addlw	48
  2369  0013E0  EC6E  F010         	call	_LCDPutChar
  2370  0013E4                     
  2371                           ;statesModify.c: 138:     LCDPutChar(hr%10+'0');
  2372  0013E4  C005  F02D         	movff	_hr,___awmod@dividend
  2373  0013E8  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2374  0013EC  0E00               	movlw	0
  2375  0013EE  6E30               	movwf	(___awmod@divisor+1)^0,c
  2376  0013F0  0E0A               	movlw	10
  2377  0013F2  6E2F               	movwf	___awmod@divisor^0,c
  2378  0013F4  EC54  F00F         	call	___awmod	;wreg free
  2379  0013F8  502D               	movf	?___awmod^0,w,c
  2380  0013FA  0F30               	addlw	48
  2381  0013FC  EC6E  F010         	call	_LCDPutChar
  2382  001400                     
  2383                           ;statesModify.c: 140:     LCDPutChar(':');
  2384  001400  0E3A               	movlw	58
  2385  001402  EC6E  F010         	call	_LCDPutChar
  2386  001406                     
  2387                           ;statesModify.c: 141:     LCDPutInst(0xC3);
  2388  001406  0EC3               	movlw	195
  2389  001408  EC99  F010         	call	_LCDPutInst
  2390  00140C                     
  2391                           ;statesModify.c: 142:     if (count10ms >= (20/2)) {
  2392  00140C  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2393  00140E  EF12  F00A         	goto	u1061
  2394  001412  500E               	movf	(_count10ms+1)^0,w,c
  2395  001414  E109               	bnz	u1060
  2396  001416  0E0A               	movlw	10
  2397  001418  5C0D               	subwf	_count10ms^0,w,c
  2398  00141A  A0D8               	btfss	status,0,c
  2399  00141C  EF12  F00A         	goto	u1061
  2400  001420  EF14  F00A         	goto	u1060
  2401  001424                     u1061:
  2402  001424  EF5C  F00A         	goto	l2131
  2403  001428                     u1060:
  2404  001428                     
  2405                           ;statesModify.c: 143:         count10ms = 0;
  2406  001428  0E00               	movlw	0
  2407  00142A  6E0E               	movwf	(_count10ms+1)^0,c
  2408  00142C  0E00               	movlw	0
  2409  00142E  6E0D               	movwf	_count10ms^0,c
  2410  001430                     
  2411                           ;statesModify.c: 144:         if (countAuto <= 0) {
  2412  001430  BE20               	btfsc	(_countAuto+1)^0,7,c
  2413  001432  EF25  F00A         	goto	u1070
  2414  001436  5020               	movf	(_countAuto+1)^0,w,c
  2415  001438  E106               	bnz	u1071
  2416  00143A  041F               	decf	_countAuto^0,w,c
  2417  00143C  B0D8               	btfsc	status,0,c
  2418  00143E  EF23  F00A         	goto	u1071
  2419  001442  EF25  F00A         	goto	u1070
  2420  001446                     u1071:
  2421  001446  EF5C  F00A         	goto	l2131
  2422  00144A                     u1070:
  2423  00144A                     
  2424                           ;statesModify.c: 145:             if (blink == 0) {
  2425  00144A  5003               	movf	_blink^0,w,c
  2426  00144C  1004               	iorwf	(_blink+1)^0,w,c
  2427  00144E  A4D8               	btfss	status,2,c
  2428  001450  EF2C  F00A         	goto	u1081
  2429  001454  EF2E  F00A         	goto	u1080
  2430  001458                     u1081:
  2431  001458  EF36  F00A         	goto	l2127
  2432  00145C                     u1080:
  2433  00145C                     
  2434                           ;statesModify.c: 146:                 LCDPutChar(' ');
  2435  00145C  0E20               	movlw	32
  2436  00145E  EC6E  F010         	call	_LCDPutChar
  2437                           
  2438                           ;statesModify.c: 147:                 LCDPutChar(' ');
  2439  001462  0E20               	movlw	32
  2440  001464  EC6E  F010         	call	_LCDPutChar
  2441                           
  2442                           ;statesModify.c: 148:             } else {
  2443  001468  EF52  F00A         	goto	l2129
  2444  00146C                     l2127:
  2445                           
  2446                           ;statesModify.c: 149:                 LCDPutChar(min/10+'0');
  2447  00146C  C007  F02D         	movff	_min,___awdiv@dividend
  2448  001470  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2449  001474  0E00               	movlw	0
  2450  001476  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2451  001478  0E0A               	movlw	10
  2452  00147A  6E2F               	movwf	___awdiv@divisor^0,c
  2453  00147C  ECF2  F00E         	call	___awdiv	;wreg free
  2454  001480  502D               	movf	?___awdiv^0,w,c
  2455  001482  0F30               	addlw	48
  2456  001484  EC6E  F010         	call	_LCDPutChar
  2457                           
  2458                           ;statesModify.c: 150:                 LCDPutChar(min%10+'0');
  2459  001488  C007  F02D         	movff	_min,___awmod@dividend
  2460  00148C  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2461  001490  0E00               	movlw	0
  2462  001492  6E30               	movwf	(___awmod@divisor+1)^0,c
  2463  001494  0E0A               	movlw	10
  2464  001496  6E2F               	movwf	___awmod@divisor^0,c
  2465  001498  EC54  F00F         	call	___awmod	;wreg free
  2466  00149C  502D               	movf	?___awmod^0,w,c
  2467  00149E  0F30               	addlw	48
  2468  0014A0  EC6E  F010         	call	_LCDPutChar
  2469  0014A4                     l2129:
  2470                           
  2471                           ;statesModify.c: 152:             blink = (blink + 1) % 2;
  2472  0014A4  0E01               	movlw	1
  2473  0014A6  2403               	addwf	_blink^0,w,c
  2474  0014A8  6E36               	movwf	??_displayModMinute^0,c
  2475  0014AA  0E00               	movlw	0
  2476  0014AC  2004               	addwfc	(_blink+1)^0,w,c
  2477  0014AE  6E37               	movwf	(??_displayModMinute+1)^0,c
  2478  0014B0  0E01               	movlw	1
  2479  0014B2  1436               	andwf	??_displayModMinute^0,w,c
  2480  0014B4  6E03               	movwf	_blink^0,c
  2481  0014B6  6A04               	clrf	(_blink+1)^0,c
  2482  0014B8                     l2131:
  2483                           
  2484                           ;statesModify.c: 155:     if (countAuto > 0) {
  2485  0014B8  BE20               	btfsc	(_countAuto+1)^0,7,c
  2486  0014BA  EF67  F00A         	goto	u1091
  2487  0014BE  5020               	movf	(_countAuto+1)^0,w,c
  2488  0014C0  E108               	bnz	u1090
  2489  0014C2  041F               	decf	_countAuto^0,w,c
  2490  0014C4  A0D8               	btfss	status,0,c
  2491  0014C6  EF67  F00A         	goto	u1091
  2492  0014CA  EF69  F00A         	goto	u1090
  2493  0014CE                     u1091:
  2494  0014CE  EF85  F00A         	goto	l447
  2495  0014D2                     u1090:
  2496  0014D2                     
  2497                           ;statesModify.c: 156:         LCDPutChar(min/10+'0');
  2498  0014D2  C007  F02D         	movff	_min,___awdiv@dividend
  2499  0014D6  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2500  0014DA  0E00               	movlw	0
  2501  0014DC  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2502  0014DE  0E0A               	movlw	10
  2503  0014E0  6E2F               	movwf	___awdiv@divisor^0,c
  2504  0014E2  ECF2  F00E         	call	___awdiv	;wreg free
  2505  0014E6  502D               	movf	?___awdiv^0,w,c
  2506  0014E8  0F30               	addlw	48
  2507  0014EA  EC6E  F010         	call	_LCDPutChar
  2508                           
  2509                           ;statesModify.c: 157:         LCDPutChar(min%10+'0');
  2510  0014EE  C007  F02D         	movff	_min,___awmod@dividend
  2511  0014F2  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2512  0014F6  0E00               	movlw	0
  2513  0014F8  6E30               	movwf	(___awmod@divisor+1)^0,c
  2514  0014FA  0E0A               	movlw	10
  2515  0014FC  6E2F               	movwf	___awmod@divisor^0,c
  2516  0014FE  EC54  F00F         	call	___awmod	;wreg free
  2517  001502  502D               	movf	?___awmod^0,w,c
  2518  001504  0F30               	addlw	48
  2519  001506  EC6E  F010         	call	_LCDPutChar
  2520  00150A                     l447:
  2521                           
  2522                           ;statesModify.c: 159:     LCDPutInst(0xC5);
  2523  00150A  0EC5               	movlw	197
  2524  00150C  EC99  F010         	call	_LCDPutInst
  2525                           
  2526                           ;statesModify.c: 160:     LCDPutChar(':');
  2527  001510  0E3A               	movlw	58
  2528  001512  EC6E  F010         	call	_LCDPutChar
  2529                           
  2530                           ;statesModify.c: 162:     LCDPutChar(sec/10+'0');
  2531  001516  C009  F02D         	movff	_sec,___awdiv@dividend
  2532  00151A  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2533  00151E  0E00               	movlw	0
  2534  001520  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2535  001522  0E0A               	movlw	10
  2536  001524  6E2F               	movwf	___awdiv@divisor^0,c
  2537  001526  ECF2  F00E         	call	___awdiv	;wreg free
  2538  00152A  502D               	movf	?___awdiv^0,w,c
  2539  00152C  0F30               	addlw	48
  2540  00152E  EC6E  F010         	call	_LCDPutChar
  2541                           
  2542                           ;statesModify.c: 163:     LCDPutChar(sec%10+'0');
  2543  001532  C009  F02D         	movff	_sec,___awmod@dividend
  2544  001536  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2545  00153A  0E00               	movlw	0
  2546  00153C  6E30               	movwf	(___awmod@divisor+1)^0,c
  2547  00153E  0E0A               	movlw	10
  2548  001540  6E2F               	movwf	___awmod@divisor^0,c
  2549  001542  EC54  F00F         	call	___awmod	;wreg free
  2550  001546  502D               	movf	?___awmod^0,w,c
  2551  001548  0F30               	addlw	48
  2552  00154A  EC6E  F010         	call	_LCDPutChar
  2553  00154E  0012               	return		;funcret
  2554  001550                     __end_of_displayModMinute:
  2555                           	opt callstack 0
  2556                           
  2557 ;; *************** function _displayModHour *****************
  2558 ;; Defined at:
  2559 ;;		line 100 in file "statesModify.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;		None
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;		None
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;Total ram usage:        2 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    7
  2580 ;; This function calls:
  2581 ;;		_LCDPutChar
  2582 ;;		_LCDPutInst
  2583 ;;		_LCDPutStr
  2584 ;;		___awdiv
  2585 ;;		___awmod
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text11
  2592  001550                     __ptext11:
  2593                           	opt callstack 0
  2594  001550                     _displayModHour:
  2595                           	opt callstack 23
  2596  001550                     
  2597                           ;statesModify.c: 101:     LCDPutInst(0x80);
  2598  001550  0E80               	movlw	128
  2599  001552  EC99  F010         	call	_LCDPutInst
  2600  001556                     
  2601                           ;statesModify.c: 102:     LCDPutStr(" MODIFIES HOUR ");
  2602  001556  0E23               	movlw	low STR_2
  2603  001558  6E34               	movwf	LCDPutStr@ptr^0,c
  2604  00155A  0E10               	movlw	high STR_2
  2605  00155C  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2606  00155E  EC34  F011         	call	_LCDPutStr	;wreg free
  2607  001562                     
  2608                           ;statesModify.c: 103:     LCDPutInst(0xC0);
  2609  001562  0EC0               	movlw	192
  2610  001564  EC99  F010         	call	_LCDPutInst
  2611  001568                     
  2612                           ;statesModify.c: 104:     if (count10ms >= (20/2)) {
  2613  001568  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2614  00156A  EFC0  F00A         	goto	u1021
  2615  00156E  500E               	movf	(_count10ms+1)^0,w,c
  2616  001570  E109               	bnz	u1020
  2617  001572  0E0A               	movlw	10
  2618  001574  5C0D               	subwf	_count10ms^0,w,c
  2619  001576  A0D8               	btfss	status,0,c
  2620  001578  EFC0  F00A         	goto	u1021
  2621  00157C  EFC2  F00A         	goto	u1020
  2622  001580                     u1021:
  2623  001580  EF0A  F00B         	goto	l2099
  2624  001584                     u1020:
  2625  001584                     
  2626                           ;statesModify.c: 105:         count10ms = 0;
  2627  001584  0E00               	movlw	0
  2628  001586  6E0E               	movwf	(_count10ms+1)^0,c
  2629  001588  0E00               	movlw	0
  2630  00158A  6E0D               	movwf	_count10ms^0,c
  2631  00158C                     
  2632                           ;statesModify.c: 106:         if (countAuto <= 0) {
  2633  00158C  BE20               	btfsc	(_countAuto+1)^0,7,c
  2634  00158E  EFD3  F00A         	goto	u1030
  2635  001592  5020               	movf	(_countAuto+1)^0,w,c
  2636  001594  E106               	bnz	u1031
  2637  001596  041F               	decf	_countAuto^0,w,c
  2638  001598  B0D8               	btfsc	status,0,c
  2639  00159A  EFD1  F00A         	goto	u1031
  2640  00159E  EFD3  F00A         	goto	u1030
  2641  0015A2                     u1031:
  2642  0015A2  EF0A  F00B         	goto	l2099
  2643  0015A6                     u1030:
  2644  0015A6                     
  2645                           ;statesModify.c: 107:             if (blink == 0) {
  2646  0015A6  5003               	movf	_blink^0,w,c
  2647  0015A8  1004               	iorwf	(_blink+1)^0,w,c
  2648  0015AA  A4D8               	btfss	status,2,c
  2649  0015AC  EFDA  F00A         	goto	u1041
  2650  0015B0  EFDC  F00A         	goto	u1040
  2651  0015B4                     u1041:
  2652  0015B4  EFE4  F00A         	goto	l2095
  2653  0015B8                     u1040:
  2654  0015B8                     
  2655                           ;statesModify.c: 108:                 LCDPutChar(' ');
  2656  0015B8  0E20               	movlw	32
  2657  0015BA  EC6E  F010         	call	_LCDPutChar
  2658                           
  2659                           ;statesModify.c: 109:                 LCDPutChar(' ');
  2660  0015BE  0E20               	movlw	32
  2661  0015C0  EC6E  F010         	call	_LCDPutChar
  2662                           
  2663                           ;statesModify.c: 110:             } else {
  2664  0015C4  EF00  F00B         	goto	l2097
  2665  0015C8                     l2095:
  2666                           
  2667                           ;statesModify.c: 111:                 LCDPutChar(hr/10+'0');
  2668  0015C8  C005  F02D         	movff	_hr,___awdiv@dividend
  2669  0015CC  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2670  0015D0  0E00               	movlw	0
  2671  0015D2  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2672  0015D4  0E0A               	movlw	10
  2673  0015D6  6E2F               	movwf	___awdiv@divisor^0,c
  2674  0015D8  ECF2  F00E         	call	___awdiv	;wreg free
  2675  0015DC  502D               	movf	?___awdiv^0,w,c
  2676  0015DE  0F30               	addlw	48
  2677  0015E0  EC6E  F010         	call	_LCDPutChar
  2678                           
  2679                           ;statesModify.c: 112:                 LCDPutChar(hr%10+'0');
  2680  0015E4  C005  F02D         	movff	_hr,___awmod@dividend
  2681  0015E8  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2682  0015EC  0E00               	movlw	0
  2683  0015EE  6E30               	movwf	(___awmod@divisor+1)^0,c
  2684  0015F0  0E0A               	movlw	10
  2685  0015F2  6E2F               	movwf	___awmod@divisor^0,c
  2686  0015F4  EC54  F00F         	call	___awmod	;wreg free
  2687  0015F8  502D               	movf	?___awmod^0,w,c
  2688  0015FA  0F30               	addlw	48
  2689  0015FC  EC6E  F010         	call	_LCDPutChar
  2690  001600                     l2097:
  2691                           
  2692                           ;statesModify.c: 114:             blink = (blink + 1) % 2;
  2693  001600  0E01               	movlw	1
  2694  001602  2403               	addwf	_blink^0,w,c
  2695  001604  6E36               	movwf	??_displayModHour^0,c
  2696  001606  0E00               	movlw	0
  2697  001608  2004               	addwfc	(_blink+1)^0,w,c
  2698  00160A  6E37               	movwf	(??_displayModHour+1)^0,c
  2699  00160C  0E01               	movlw	1
  2700  00160E  1436               	andwf	??_displayModHour^0,w,c
  2701  001610  6E03               	movwf	_blink^0,c
  2702  001612  6A04               	clrf	(_blink+1)^0,c
  2703  001614                     l2099:
  2704                           
  2705                           ;statesModify.c: 117:     if (countAuto > 0) {
  2706  001614  BE20               	btfsc	(_countAuto+1)^0,7,c
  2707  001616  EF15  F00B         	goto	u1051
  2708  00161A  5020               	movf	(_countAuto+1)^0,w,c
  2709  00161C  E108               	bnz	u1050
  2710  00161E  041F               	decf	_countAuto^0,w,c
  2711  001620  A0D8               	btfss	status,0,c
  2712  001622  EF15  F00B         	goto	u1051
  2713  001626  EF17  F00B         	goto	u1050
  2714  00162A                     u1051:
  2715  00162A  EF33  F00B         	goto	l439
  2716  00162E                     u1050:
  2717  00162E                     
  2718                           ;statesModify.c: 118:         LCDPutChar(hr/10+'0');
  2719  00162E  C005  F02D         	movff	_hr,___awdiv@dividend
  2720  001632  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2721  001636  0E00               	movlw	0
  2722  001638  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2723  00163A  0E0A               	movlw	10
  2724  00163C  6E2F               	movwf	___awdiv@divisor^0,c
  2725  00163E  ECF2  F00E         	call	___awdiv	;wreg free
  2726  001642  502D               	movf	?___awdiv^0,w,c
  2727  001644  0F30               	addlw	48
  2728  001646  EC6E  F010         	call	_LCDPutChar
  2729                           
  2730                           ;statesModify.c: 119:         LCDPutChar(hr%10+'0');
  2731  00164A  C005  F02D         	movff	_hr,___awmod@dividend
  2732  00164E  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2733  001652  0E00               	movlw	0
  2734  001654  6E30               	movwf	(___awmod@divisor+1)^0,c
  2735  001656  0E0A               	movlw	10
  2736  001658  6E2F               	movwf	___awmod@divisor^0,c
  2737  00165A  EC54  F00F         	call	___awmod	;wreg free
  2738  00165E  502D               	movf	?___awmod^0,w,c
  2739  001660  0F30               	addlw	48
  2740  001662  EC6E  F010         	call	_LCDPutChar
  2741  001666                     l439:
  2742                           
  2743                           ;statesModify.c: 121:     LCDPutInst(0xC2);
  2744  001666  0EC2               	movlw	194
  2745  001668  EC99  F010         	call	_LCDPutInst
  2746                           
  2747                           ;statesModify.c: 122:     LCDPutChar(':');
  2748  00166C  0E3A               	movlw	58
  2749  00166E  EC6E  F010         	call	_LCDPutChar
  2750                           
  2751                           ;statesModify.c: 124:     LCDPutChar(min/10+'0');
  2752  001672  C007  F02D         	movff	_min,___awdiv@dividend
  2753  001676  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2754  00167A  0E00               	movlw	0
  2755  00167C  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2756  00167E  0E0A               	movlw	10
  2757  001680  6E2F               	movwf	___awdiv@divisor^0,c
  2758  001682  ECF2  F00E         	call	___awdiv	;wreg free
  2759  001686  502D               	movf	?___awdiv^0,w,c
  2760  001688  0F30               	addlw	48
  2761  00168A  EC6E  F010         	call	_LCDPutChar
  2762                           
  2763                           ;statesModify.c: 125:     LCDPutChar(min%10+'0');
  2764  00168E  C007  F02D         	movff	_min,___awmod@dividend
  2765  001692  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2766  001696  0E00               	movlw	0
  2767  001698  6E30               	movwf	(___awmod@divisor+1)^0,c
  2768  00169A  0E0A               	movlw	10
  2769  00169C  6E2F               	movwf	___awmod@divisor^0,c
  2770  00169E  EC54  F00F         	call	___awmod	;wreg free
  2771  0016A2  502D               	movf	?___awmod^0,w,c
  2772  0016A4  0F30               	addlw	48
  2773  0016A6  EC6E  F010         	call	_LCDPutChar
  2774                           
  2775                           ;statesModify.c: 127:     LCDPutChar(':');
  2776  0016AA  0E3A               	movlw	58
  2777  0016AC  EC6E  F010         	call	_LCDPutChar
  2778                           
  2779                           ;statesModify.c: 129:     LCDPutChar(sec/10+'0');
  2780  0016B0  C009  F02D         	movff	_sec,___awdiv@dividend
  2781  0016B4  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2782  0016B8  0E00               	movlw	0
  2783  0016BA  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2784  0016BC  0E0A               	movlw	10
  2785  0016BE  6E2F               	movwf	___awdiv@divisor^0,c
  2786  0016C0  ECF2  F00E         	call	___awdiv	;wreg free
  2787  0016C4  502D               	movf	?___awdiv^0,w,c
  2788  0016C6  0F30               	addlw	48
  2789  0016C8  EC6E  F010         	call	_LCDPutChar
  2790                           
  2791                           ;statesModify.c: 130:     LCDPutChar(sec%10+'0');
  2792  0016CC  C009  F02D         	movff	_sec,___awmod@dividend
  2793  0016D0  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2794  0016D4  0E00               	movlw	0
  2795  0016D6  6E30               	movwf	(___awmod@divisor+1)^0,c
  2796  0016D8  0E0A               	movlw	10
  2797  0016DA  6E2F               	movwf	___awmod@divisor^0,c
  2798  0016DC  EC54  F00F         	call	___awmod	;wreg free
  2799  0016E0  502D               	movf	?___awmod^0,w,c
  2800  0016E2  0F30               	addlw	48
  2801  0016E4  EC6E  F010         	call	_LCDPutChar
  2802  0016E8  0012               	return		;funcret
  2803  0016EA                     __end_of_displayModHour:
  2804                           	opt callstack 0
  2805                           
  2806 ;; *************** function _displayClock *****************
  2807 ;; Defined at:
  2808 ;;		line 21 in file "stateClock.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;Total ram usage:        0 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    7
  2829 ;; This function calls:
  2830 ;;		_LCDPutChar
  2831 ;;		_LCDPutInst
  2832 ;;		_LCDPutStr
  2833 ;;		___awdiv
  2834 ;;		___awmod
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text12
  2841  001D16                     __ptext12:
  2842                           	opt callstack 0
  2843  001D16                     _displayClock:
  2844                           	opt callstack 23
  2845  001D16                     
  2846                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2847  001D16  0E80               	movlw	128
  2848  001D18  EC99  F010         	call	_LCDPutInst
  2849  001D1C                     
  2850                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2851  001D1C  0E12               	movlw	low STR_1
  2852  001D1E  6E34               	movwf	LCDPutStr@ptr^0,c
  2853  001D20  0E10               	movlw	high STR_1
  2854  001D22  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2855  001D24  EC34  F011         	call	_LCDPutStr	;wreg free
  2856  001D28                     
  2857                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2858  001D28  0EC0               	movlw	192
  2859  001D2A  EC99  F010         	call	_LCDPutInst
  2860  001D2E                     
  2861                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2862  001D2E  C005  F02D         	movff	_hr,___awdiv@dividend
  2863  001D32  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2864  001D36  0E00               	movlw	0
  2865  001D38  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2866  001D3A  0E0A               	movlw	10
  2867  001D3C  6E2F               	movwf	___awdiv@divisor^0,c
  2868  001D3E  ECF2  F00E         	call	___awdiv	;wreg free
  2869  001D42  502D               	movf	?___awdiv^0,w,c
  2870  001D44  0F30               	addlw	48
  2871  001D46  EC6E  F010         	call	_LCDPutChar
  2872  001D4A                     
  2873                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2874  001D4A  C005  F02D         	movff	_hr,___awmod@dividend
  2875  001D4E  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2876  001D52  0E00               	movlw	0
  2877  001D54  6E30               	movwf	(___awmod@divisor+1)^0,c
  2878  001D56  0E0A               	movlw	10
  2879  001D58  6E2F               	movwf	___awmod@divisor^0,c
  2880  001D5A  EC54  F00F         	call	___awmod	;wreg free
  2881  001D5E  502D               	movf	?___awmod^0,w,c
  2882  001D60  0F30               	addlw	48
  2883  001D62  EC6E  F010         	call	_LCDPutChar
  2884  001D66                     
  2885                           ;stateClock.c: 27:     LCDPutChar(':');
  2886  001D66  0E3A               	movlw	58
  2887  001D68  EC6E  F010         	call	_LCDPutChar
  2888  001D6C                     
  2889                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2890  001D6C  C007  F02D         	movff	_min,___awdiv@dividend
  2891  001D70  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2892  001D74  0E00               	movlw	0
  2893  001D76  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2894  001D78  0E0A               	movlw	10
  2895  001D7A  6E2F               	movwf	___awdiv@divisor^0,c
  2896  001D7C  ECF2  F00E         	call	___awdiv	;wreg free
  2897  001D80  502D               	movf	?___awdiv^0,w,c
  2898  001D82  0F30               	addlw	48
  2899  001D84  EC6E  F010         	call	_LCDPutChar
  2900  001D88                     
  2901                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2902  001D88  C007  F02D         	movff	_min,___awmod@dividend
  2903  001D8C  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2904  001D90  0E00               	movlw	0
  2905  001D92  6E30               	movwf	(___awmod@divisor+1)^0,c
  2906  001D94  0E0A               	movlw	10
  2907  001D96  6E2F               	movwf	___awmod@divisor^0,c
  2908  001D98  EC54  F00F         	call	___awmod	;wreg free
  2909  001D9C  502D               	movf	?___awmod^0,w,c
  2910  001D9E  0F30               	addlw	48
  2911  001DA0  EC6E  F010         	call	_LCDPutChar
  2912  001DA4                     
  2913                           ;stateClock.c: 30:     LCDPutChar(':');
  2914  001DA4  0E3A               	movlw	58
  2915  001DA6  EC6E  F010         	call	_LCDPutChar
  2916  001DAA                     
  2917                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2918  001DAA  C009  F02D         	movff	_sec,___awdiv@dividend
  2919  001DAE  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2920  001DB2  0E00               	movlw	0
  2921  001DB4  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2922  001DB6  0E0A               	movlw	10
  2923  001DB8  6E2F               	movwf	___awdiv@divisor^0,c
  2924  001DBA  ECF2  F00E         	call	___awdiv	;wreg free
  2925  001DBE  502D               	movf	?___awdiv^0,w,c
  2926  001DC0  0F30               	addlw	48
  2927  001DC2  EC6E  F010         	call	_LCDPutChar
  2928  001DC6                     
  2929                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2930  001DC6  C009  F02D         	movff	_sec,___awmod@dividend
  2931  001DCA  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2932  001DCE  0E00               	movlw	0
  2933  001DD0  6E30               	movwf	(___awmod@divisor+1)^0,c
  2934  001DD2  0E0A               	movlw	10
  2935  001DD4  6E2F               	movwf	___awmod@divisor^0,c
  2936  001DD6  EC54  F00F         	call	___awmod	;wreg free
  2937  001DDA  502D               	movf	?___awmod^0,w,c
  2938  001DDC  0F30               	addlw	48
  2939  001DDE  EC6E  F010         	call	_LCDPutChar
  2940  001DE2  0012               	return		;funcret
  2941  001DE4                     __end_of_displayClock:
  2942                           	opt callstack 0
  2943                           
  2944 ;; *************** function ___awmod *****************
  2945 ;; Defined at:
  2946 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  dividend        2    8[COMRAM] int 
  2949 ;;  divisor         2   10[COMRAM] int 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  sign            1   13[COMRAM] unsigned char 
  2952 ;;  counter         1   12[COMRAM] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  2    8[COMRAM] int 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:        6 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    3
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_displayClock
  2973 ;;		_displayModHour
  2974 ;;		_displayModMinute
  2975 ;;		_displayModSecond
  2976 ;;		_displayStpWatch
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text13
  2981  001EA8                     __ptext13:
  2982                           	opt callstack 0
  2983  001EA8                     ___awmod:
  2984                           	opt callstack 26
  2985  001EA8  0E00               	movlw	0
  2986  001EAA  6E32               	movwf	___awmod@sign^0,c
  2987  001EAC  BE2E               	btfsc	(___awmod@dividend+1)^0,7,c
  2988  001EAE  EF5D  F00F         	goto	u960
  2989  001EB2  EF5B  F00F         	goto	u961
  2990  001EB6                     u961:
  2991  001EB6  EF63  F00F         	goto	l2001
  2992  001EBA                     u960:
  2993  001EBA  6C2D               	negf	___awmod@dividend^0,c
  2994  001EBC  1E2E               	comf	(___awmod@dividend+1)^0,f,c
  2995  001EBE  B0D8               	btfsc	status,0,c
  2996  001EC0  2A2E               	incf	(___awmod@dividend+1)^0,f,c
  2997  001EC2  0E01               	movlw	1
  2998  001EC4  6E32               	movwf	___awmod@sign^0,c
  2999  001EC6                     l2001:
  3000  001EC6  BE30               	btfsc	(___awmod@divisor+1)^0,7,c
  3001  001EC8  EF6A  F00F         	goto	u970
  3002  001ECC  EF68  F00F         	goto	u971
  3003  001ED0                     u971:
  3004  001ED0  EF6E  F00F         	goto	l2005
  3005  001ED4                     u970:
  3006  001ED4  6C2F               	negf	___awmod@divisor^0,c
  3007  001ED6  1E30               	comf	(___awmod@divisor+1)^0,f,c
  3008  001ED8  B0D8               	btfsc	status,0,c
  3009  001EDA  2A30               	incf	(___awmod@divisor+1)^0,f,c
  3010  001EDC                     l2005:
  3011  001EDC  502F               	movf	___awmod@divisor^0,w,c
  3012  001EDE  1030               	iorwf	(___awmod@divisor+1)^0,w,c
  3013  001EE0  B4D8               	btfsc	status,2,c
  3014  001EE2  EF75  F00F         	goto	u981
  3015  001EE6  EF77  F00F         	goto	u980
  3016  001EEA                     u981:
  3017  001EEA  EF9B  F00F         	goto	l2021
  3018  001EEE                     u980:
  3019  001EEE  0E01               	movlw	1
  3020  001EF0  6E31               	movwf	___awmod@counter^0,c
  3021  001EF2  EF7F  F00F         	goto	l2011
  3022  001EF6                     l2009:
  3023  001EF6  90D8               	bcf	status,0,c
  3024  001EF8  362F               	rlcf	___awmod@divisor^0,f,c
  3025  001EFA  3630               	rlcf	(___awmod@divisor+1)^0,f,c
  3026  001EFC  2A31               	incf	___awmod@counter^0,f,c
  3027  001EFE                     l2011:
  3028  001EFE  AE30               	btfss	(___awmod@divisor+1)^0,7,c
  3029  001F00  EF84  F00F         	goto	u991
  3030  001F04  EF86  F00F         	goto	u990
  3031  001F08                     u991:
  3032  001F08  EF7B  F00F         	goto	l2009
  3033  001F0C                     u990:
  3034  001F0C                     l2013:
  3035  001F0C  502F               	movf	___awmod@divisor^0,w,c
  3036  001F0E  5C2D               	subwf	___awmod@dividend^0,w,c
  3037  001F10  5030               	movf	(___awmod@divisor+1)^0,w,c
  3038  001F12  582E               	subwfb	(___awmod@dividend+1)^0,w,c
  3039  001F14  A0D8               	btfss	status,0,c
  3040  001F16  EF8F  F00F         	goto	u1001
  3041  001F1A  EF91  F00F         	goto	u1000
  3042  001F1E                     u1001:
  3043  001F1E  EF95  F00F         	goto	l2017
  3044  001F22                     u1000:
  3045  001F22  502F               	movf	___awmod@divisor^0,w,c
  3046  001F24  5E2D               	subwf	___awmod@dividend^0,f,c
  3047  001F26  5030               	movf	(___awmod@divisor+1)^0,w,c
  3048  001F28  5A2E               	subwfb	(___awmod@dividend+1)^0,f,c
  3049  001F2A                     l2017:
  3050  001F2A  90D8               	bcf	status,0,c
  3051  001F2C  3230               	rrcf	(___awmod@divisor+1)^0,f,c
  3052  001F2E  322F               	rrcf	___awmod@divisor^0,f,c
  3053  001F30  2E31               	decfsz	___awmod@counter^0,f,c
  3054  001F32  EF86  F00F         	goto	l2013
  3055  001F36                     l2021:
  3056  001F36  5032               	movf	___awmod@sign^0,w,c
  3057  001F38  B4D8               	btfsc	status,2,c
  3058  001F3A  EFA1  F00F         	goto	u1011
  3059  001F3E  EFA3  F00F         	goto	u1010
  3060  001F42                     u1011:
  3061  001F42  EFA7  F00F         	goto	l2025
  3062  001F46                     u1010:
  3063  001F46  6C2D               	negf	___awmod@dividend^0,c
  3064  001F48  1E2E               	comf	(___awmod@dividend+1)^0,f,c
  3065  001F4A  B0D8               	btfsc	status,0,c
  3066  001F4C  2A2E               	incf	(___awmod@dividend+1)^0,f,c
  3067  001F4E                     l2025:
  3068  001F4E  C02D  F02D         	movff	___awmod@dividend,?___awmod
  3069  001F52  C02E  F02E         	movff	___awmod@dividend+1,?___awmod+1
  3070  001F56  0012               	return		;funcret
  3071  001F58                     __end_of___awmod:
  3072                           	opt callstack 0
  3073                           
  3074 ;; *************** function ___awdiv *****************
  3075 ;; Defined at:
  3076 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  dividend        2    8[COMRAM] int 
  3079 ;;  divisor         2   10[COMRAM] int 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  quotient        2   14[COMRAM] int 
  3082 ;;  sign            1   13[COMRAM] unsigned char 
  3083 ;;  counter         1   12[COMRAM] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  2    8[COMRAM] int 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3093 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;Total ram usage:        8 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    3
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_displayClock
  3104 ;;		_displayModHour
  3105 ;;		_displayModMinute
  3106 ;;		_displayModSecond
  3107 ;;		_displayStpWatch
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text14
  3112  001DE4                     __ptext14:
  3113                           	opt callstack 0
  3114  001DE4                     ___awdiv:
  3115                           	opt callstack 26
  3116  001DE4  0E00               	movlw	0
  3117  001DE6  6E32               	movwf	___awdiv@sign^0,c
  3118  001DE8  BE30               	btfsc	(___awdiv@divisor+1)^0,7,c
  3119  001DEA  EFFB  F00E         	goto	u900
  3120  001DEE  EFF9  F00E         	goto	u901
  3121  001DF2                     u901:
  3122  001DF2  EF01  F00F         	goto	l1957
  3123  001DF6                     u900:
  3124  001DF6  6C2F               	negf	___awdiv@divisor^0,c
  3125  001DF8  1E30               	comf	(___awdiv@divisor+1)^0,f,c
  3126  001DFA  B0D8               	btfsc	status,0,c
  3127  001DFC  2A30               	incf	(___awdiv@divisor+1)^0,f,c
  3128  001DFE  0E01               	movlw	1
  3129  001E00  6E32               	movwf	___awdiv@sign^0,c
  3130  001E02                     l1957:
  3131  001E02  BE2E               	btfsc	(___awdiv@dividend+1)^0,7,c
  3132  001E04  EF08  F00F         	goto	u910
  3133  001E08  EF06  F00F         	goto	u911
  3134  001E0C                     u911:
  3135  001E0C  EF0E  F00F         	goto	l1963
  3136  001E10                     u910:
  3137  001E10  6C2D               	negf	___awdiv@dividend^0,c
  3138  001E12  1E2E               	comf	(___awdiv@dividend+1)^0,f,c
  3139  001E14  B0D8               	btfsc	status,0,c
  3140  001E16  2A2E               	incf	(___awdiv@dividend+1)^0,f,c
  3141  001E18  0E01               	movlw	1
  3142  001E1A  1A32               	xorwf	___awdiv@sign^0,f,c
  3143  001E1C                     l1963:
  3144  001E1C  0E00               	movlw	0
  3145  001E1E  6E34               	movwf	(___awdiv@quotient+1)^0,c
  3146  001E20  0E00               	movlw	0
  3147  001E22  6E33               	movwf	___awdiv@quotient^0,c
  3148  001E24  502F               	movf	___awdiv@divisor^0,w,c
  3149  001E26  1030               	iorwf	(___awdiv@divisor+1)^0,w,c
  3150  001E28  B4D8               	btfsc	status,2,c
  3151  001E2A  EF19  F00F         	goto	u921
  3152  001E2E  EF1B  F00F         	goto	u920
  3153  001E32                     u921:
  3154  001E32  EF43  F00F         	goto	l1985
  3155  001E36                     u920:
  3156  001E36  0E01               	movlw	1
  3157  001E38  6E31               	movwf	___awdiv@counter^0,c
  3158  001E3A  EF23  F00F         	goto	l1971
  3159  001E3E                     l1969:
  3160  001E3E  90D8               	bcf	status,0,c
  3161  001E40  362F               	rlcf	___awdiv@divisor^0,f,c
  3162  001E42  3630               	rlcf	(___awdiv@divisor+1)^0,f,c
  3163  001E44  2A31               	incf	___awdiv@counter^0,f,c
  3164  001E46                     l1971:
  3165  001E46  AE30               	btfss	(___awdiv@divisor+1)^0,7,c
  3166  001E48  EF28  F00F         	goto	u931
  3167  001E4C  EF2A  F00F         	goto	u930
  3168  001E50                     u931:
  3169  001E50  EF1F  F00F         	goto	l1969
  3170  001E54                     u930:
  3171  001E54                     l1973:
  3172  001E54  90D8               	bcf	status,0,c
  3173  001E56  3633               	rlcf	___awdiv@quotient^0,f,c
  3174  001E58  3634               	rlcf	(___awdiv@quotient+1)^0,f,c
  3175  001E5A  502F               	movf	___awdiv@divisor^0,w,c
  3176  001E5C  5C2D               	subwf	___awdiv@dividend^0,w,c
  3177  001E5E  5030               	movf	(___awdiv@divisor+1)^0,w,c
  3178  001E60  582E               	subwfb	(___awdiv@dividend+1)^0,w,c
  3179  001E62  A0D8               	btfss	status,0,c
  3180  001E64  EF36  F00F         	goto	u941
  3181  001E68  EF38  F00F         	goto	u940
  3182  001E6C                     u941:
  3183  001E6C  EF3D  F00F         	goto	l1981
  3184  001E70                     u940:
  3185  001E70  502F               	movf	___awdiv@divisor^0,w,c
  3186  001E72  5E2D               	subwf	___awdiv@dividend^0,f,c
  3187  001E74  5030               	movf	(___awdiv@divisor+1)^0,w,c
  3188  001E76  5A2E               	subwfb	(___awdiv@dividend+1)^0,f,c
  3189  001E78  8033               	bsf	___awdiv@quotient^0,0,c
  3190  001E7A                     l1981:
  3191  001E7A  90D8               	bcf	status,0,c
  3192  001E7C  3230               	rrcf	(___awdiv@divisor+1)^0,f,c
  3193  001E7E  322F               	rrcf	___awdiv@divisor^0,f,c
  3194  001E80  2E31               	decfsz	___awdiv@counter^0,f,c
  3195  001E82  EF2A  F00F         	goto	l1973
  3196  001E86                     l1985:
  3197  001E86  5032               	movf	___awdiv@sign^0,w,c
  3198  001E88  B4D8               	btfsc	status,2,c
  3199  001E8A  EF49  F00F         	goto	u951
  3200  001E8E  EF4B  F00F         	goto	u950
  3201  001E92                     u951:
  3202  001E92  EF4F  F00F         	goto	l1989
  3203  001E96                     u950:
  3204  001E96  6C33               	negf	___awdiv@quotient^0,c
  3205  001E98  1E34               	comf	(___awdiv@quotient+1)^0,f,c
  3206  001E9A  B0D8               	btfsc	status,0,c
  3207  001E9C  2A34               	incf	(___awdiv@quotient+1)^0,f,c
  3208  001E9E                     l1989:
  3209  001E9E  C033  F02D         	movff	___awdiv@quotient,?___awdiv
  3210  001EA2  C034  F02E         	movff	___awdiv@quotient+1,?___awdiv+1
  3211  001EA6  0012               	return		;funcret
  3212  001EA8                     __end_of___awdiv:
  3213                           	opt callstack 0
  3214                           
  3215 ;; *************** function _LCDPutStr *****************
  3216 ;; Defined at:
  3217 ;;		line 198 in file "BBSPI_LCD.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  3220 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  3221 ;;		 -> STR_1(17), 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    6
  3240 ;; This function calls:
  3241 ;;		_LCDPutChar
  3242 ;; This function is called by:
  3243 ;;		_displayClock
  3244 ;;		_displayModHour
  3245 ;;		_displayModMinute
  3246 ;;		_displayModSecond
  3247 ;;		_displayStpWatch
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text15
  3252  002268                     __ptext15:
  3253                           	opt callstack 0
  3254  002268                     _LCDPutStr:
  3255                           	opt callstack 23
  3256  002268                     
  3257                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  3258  002268  EF42  F011         	goto	l1947
  3259  00226C                     l1943:
  3260  00226C  C034  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3261  002270  C035  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3262  002274                     	if	0	;tblptru may be non-zero
  3263  002274                     	endif
  3264  002274                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3265  002274  0E00               	movlw	low (__mediumconst shr (0+16))
  3266  002276  6EF8               	movwf	tblptru,c
  3267  002278                     	endif
  3268  002278  0008               	tblrd		*
  3269  00227A  50F5               	movf	tablat,w,c
  3270  00227C  EC6E  F010         	call	_LCDPutChar
  3271  002280  4A34               	infsnz	LCDPutStr@ptr^0,f,c
  3272  002282  2A35               	incf	(LCDPutStr@ptr+1)^0,f,c
  3273  002284                     l1947:
  3274  002284  C034  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3275  002288  C035  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3276  00228C                     	if	0	;tblptru may be non-zero
  3277  00228C                     	endif
  3278  00228C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3279  00228C  0E00               	movlw	low (__mediumconst shr (0+16))
  3280  00228E  6EF8               	movwf	tblptru,c
  3281  002290                     	endif
  3282  002290  0008               	tblrd		*
  3283  002292  50F5               	movf	tablat,w,c
  3284  002294  0900               	iorlw	0
  3285  002296  A4D8               	btfss	status,2,c
  3286  002298  EF50  F011         	goto	u891
  3287  00229C  EF52  F011         	goto	u890
  3288  0022A0                     u891:
  3289  0022A0  EF36  F011         	goto	l1943
  3290  0022A4                     u890:
  3291  0022A4  0012               	return		;funcret
  3292  0022A6                     __end_of_LCDPutStr:
  3293                           	opt callstack 0
  3294                           
  3295 ;; *************** function _LCDPutChar *****************
  3296 ;; Defined at:
  3297 ;;		line 160 in file "BBSPI_LCD.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  ch              1    wreg     unsigned char 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  ch              1   14[COMRAM] unsigned char 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;Total ram usage:        2 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    5
  3318 ;; This function calls:
  3319 ;;		_WritePort_BBSPI
  3320 ;; This function is called by:
  3321 ;;		_LCDPutStr
  3322 ;;		_displayClock
  3323 ;;		_displayModHour
  3324 ;;		_displayModMinute
  3325 ;;		_displayModSecond
  3326 ;;		_displayStpWatch
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text16
  3331  0020DC                     __ptext16:
  3332                           	opt callstack 0
  3333  0020DC                     _LCDPutChar:
  3334                           	opt callstack 23
  3335                           
  3336                           ;incstack = 0
  3337                           ;LCDPutChar@ch stored from wreg
  3338  0020DC  6E33               	movwf	LCDPutChar@ch^0,c
  3339  0020DE                     
  3340                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3341  0020DE  0E80               	movlw	128
  3342  0020E0  6E30               	movwf	WritePort_BBSPI@a^0,c
  3343  0020E2  0E12               	movlw	18
  3344  0020E4  EC7B  F011         	call	_WritePort_BBSPI
  3345  0020E8                     
  3346                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3347  0020E8  0E04               	movlw	4
  3348  0020EA  6E32               	movwf	??_LCDPutChar^0,c
  3349  0020EC  0E3E               	movlw	62
  3350  0020EE                     u1287:
  3351  0020EE  2EE8               	decfsz	wreg,f,c
  3352  0020F0  D7FE               	bra	u1287
  3353  0020F2  2E32               	decfsz	??_LCDPutChar^0,f,c
  3354  0020F4  D7FC               	bra	u1287
  3355  0020F6                     
  3356                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3357  0020F6  C033  F030         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3358  0020FA  0E13               	movlw	19
  3359  0020FC  EC7B  F011         	call	_WritePort_BBSPI
  3360                           
  3361                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3362  002100  0E04               	movlw	4
  3363  002102  6E32               	movwf	??_LCDPutChar^0,c
  3364  002104  0E3E               	movlw	62
  3365  002106                     u1297:
  3366  002106  2EE8               	decfsz	wreg,f,c
  3367  002108  D7FE               	bra	u1297
  3368  00210A  2E32               	decfsz	??_LCDPutChar^0,f,c
  3369  00210C  D7FC               	bra	u1297
  3370  00210E                     
  3371                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3372  00210E  0EC0               	movlw	192
  3373  002110  6E30               	movwf	WritePort_BBSPI@a^0,c
  3374  002112  0E12               	movlw	18
  3375  002114  EC7B  F011         	call	_WritePort_BBSPI
  3376  002118                     
  3377                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3378  002118  0E04               	movlw	4
  3379  00211A  6E32               	movwf	??_LCDPutChar^0,c
  3380  00211C  0E3E               	movlw	62
  3381  00211E                     u1307:
  3382  00211E  2EE8               	decfsz	wreg,f,c
  3383  002120  D7FE               	bra	u1307
  3384  002122  2E32               	decfsz	??_LCDPutChar^0,f,c
  3385  002124  D7FC               	bra	u1307
  3386                           
  3387                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3388  002126  0E00               	movlw	0
  3389  002128  6E30               	movwf	WritePort_BBSPI@a^0,c
  3390  00212A  0E12               	movlw	18
  3391  00212C  EC7B  F011         	call	_WritePort_BBSPI
  3392  002130  0012               	return		;funcret
  3393  002132                     __end_of_LCDPutChar:
  3394                           	opt callstack 0
  3395                           
  3396 ;; *************** function _buttonInitialize *****************
  3397 ;; Defined at:
  3398 ;;		line 19 in file "system.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    3
  3419 ;; This function calls:
  3420 ;;		Nothing
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text17
  3427  002340                     __ptext17:
  3428                           	opt callstack 0
  3429  002340                     _buttonInitialize:
  3430                           	opt callstack 27
  3431  002340                     
  3432                           ;system.c: 20:     TRISAbits.TRISA5 = 1;
  3433  002340  8A92               	bsf	146,5,c	;volatile
  3434                           
  3435                           ;system.c: 21:     TRISBbits.TRISB0 = 1;
  3436  002342  8093               	bsf	147,0,c	;volatile
  3437  002344                     
  3438                           ;system.c: 22:     ADCON1 = 0b00001111;
  3439  002344  0E0F               	movlw	15
  3440  002346  6EC1               	movwf	193,c	;volatile
  3441  002348  0012               	return		;funcret
  3442  00234A                     __end_of_buttonInitialize:
  3443                           	opt callstack 0
  3444                           
  3445 ;; *************** function _LCDInit *****************
  3446 ;; Defined at:
  3447 ;;		line 45 in file "BBSPI_LCD.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;		None
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      void 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;Total ram usage:        1 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    6
  3468 ;; This function calls:
  3469 ;;		_InitBBSPI
  3470 ;;		_LCDPutInst
  3471 ;;		_Port_BBSPIInit
  3472 ;;		_WritePort_BBSPI
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text18
  3479  002188                     __ptext18:
  3480                           	opt callstack 0
  3481  002188                     _LCDInit:
  3482                           	opt callstack 24
  3483  002188                     
  3484                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3485  002188  EC92  F011         	call	_InitBBSPI	;wreg free
  3486  00218C                     
  3487                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3488  00218C  9C97               	bcf	151,6,c	;volatile
  3489  00218E                     
  3490                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3491  00218E  9C8E               	bcf	142,6,c	;volatile
  3492  002190                     
  3493                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3494  002190  8C8E               	bsf	142,6,c	;volatile
  3495  002192                     
  3496                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3497  002192  0E00               	movlw	0
  3498  002194  EC6E  F011         	call	_Port_BBSPIInit
  3499  002198                     
  3500                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3501  002198  0E01               	movlw	1
  3502  00219A  EC6E  F011         	call	_Port_BBSPIInit
  3503  00219E                     
  3504                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3505  00219E  0E00               	movlw	0
  3506  0021A0  6E30               	movwf	WritePort_BBSPI@a^0,c
  3507  0021A2  0E12               	movlw	18
  3508  0021A4  EC7B  F011         	call	_WritePort_BBSPI
  3509  0021A8                     
  3510                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3511  0021A8  0E31               	movlw	49
  3512  0021AA  6E34               	movwf	??_LCDInit^0,c
  3513  0021AC  0EB2               	movlw	178
  3514  0021AE                     u1317:
  3515  0021AE  2EE8               	decfsz	wreg,f,c
  3516  0021B0  D7FE               	bra	u1317
  3517  0021B2  2E34               	decfsz	??_LCDInit^0,f,c
  3518  0021B4  D7FC               	bra	u1317
  3519  0021B6  D000               	nop2	
  3520  0021B8                     
  3521                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3522  0021B8  0E32               	movlw	50
  3523  0021BA  EC99  F010         	call	_LCDPutInst
  3524  0021BE                     
  3525                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3526  0021BE  0E3C               	movlw	60
  3527  0021C0  EC99  F010         	call	_LCDPutInst
  3528  0021C4                     
  3529                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3530  0021C4  0E0C               	movlw	12
  3531  0021C6  EC99  F010         	call	_LCDPutInst
  3532  0021CA                     
  3533                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3534  0021CA  0E01               	movlw	1
  3535  0021CC  EC99  F010         	call	_LCDPutInst
  3536  0021D0                     
  3537                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3538  0021D0  0E06               	movlw	6
  3539  0021D2  EC99  F010         	call	_LCDPutInst
  3540  0021D6  0012               	return		;funcret
  3541  0021D8                     __end_of_LCDInit:
  3542                           	opt callstack 0
  3543                           
  3544 ;; *************** function _Port_BBSPIInit *****************
  3545 ;; Defined at:
  3546 ;;		line 123 in file "BBSPI_LCD.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  port_dir        1    wreg     unsigned char 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  port_dir        1   11[COMRAM] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;Total ram usage:        1 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    4
  3567 ;; This function calls:
  3568 ;;		_SendByteBBSPI
  3569 ;; This function is called by:
  3570 ;;		_LCDInit
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text19
  3575  0022DC                     __ptext19:
  3576                           	opt callstack 0
  3577  0022DC                     _Port_BBSPIInit:
  3578                           	opt callstack 25
  3579                           
  3580                           ;incstack = 0
  3581                           ;Port_BBSPIInit@port_dir stored from wreg
  3582  0022DC  6E30               	movwf	Port_BBSPIInit@port_dir^0,c
  3583  0022DE                     
  3584                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3585  0022DE  9489               	bcf	137,2,c	;volatile
  3586  0022E0                     
  3587                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3588  0022E0  0E40               	movlw	64
  3589  0022E2  EC36  F010         	call	_SendByteBBSPI
  3590                           
  3591                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3592  0022E6  5030               	movf	Port_BBSPIInit@port_dir^0,w,c
  3593  0022E8  EC36  F010         	call	_SendByteBBSPI
  3594                           
  3595                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3596  0022EC  0E00               	movlw	0
  3597  0022EE  EC36  F010         	call	_SendByteBBSPI
  3598  0022F2                     
  3599                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3600  0022F2  8489               	bsf	137,2,c	;volatile
  3601  0022F4  0012               	return		;funcret
  3602  0022F6                     __end_of_Port_BBSPIInit:
  3603                           	opt callstack 0
  3604                           
  3605 ;; *************** function _LCDPutInst *****************
  3606 ;; Defined at:
  3607 ;;		line 179 in file "BBSPI_LCD.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  ch              1    wreg     unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  ch              1   14[COMRAM] unsigned char 
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2, status,0, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;Total ram usage:        2 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    5
  3628 ;; This function calls:
  3629 ;;		_WritePort_BBSPI
  3630 ;; This function is called by:
  3631 ;;		_LCDInit
  3632 ;;		_displayClock
  3633 ;;		_displayModHour
  3634 ;;		_displayModMinute
  3635 ;;		_displayModSecond
  3636 ;;		_displayStpWatch
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text20
  3641  002132                     __ptext20:
  3642                           	opt callstack 0
  3643  002132                     _LCDPutInst:
  3644                           	opt callstack 24
  3645                           
  3646                           ;incstack = 0
  3647                           ;LCDPutInst@ch stored from wreg
  3648  002132  6E33               	movwf	LCDPutInst@ch^0,c
  3649  002134                     
  3650                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3651  002134  0E00               	movlw	0
  3652  002136  6E30               	movwf	WritePort_BBSPI@a^0,c
  3653  002138  0E12               	movlw	18
  3654  00213A  EC7B  F011         	call	_WritePort_BBSPI
  3655  00213E                     
  3656                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3657  00213E  0E04               	movlw	4
  3658  002140  6E32               	movwf	??_LCDPutInst^0,c
  3659  002142  0E3E               	movlw	62
  3660  002144                     u1327:
  3661  002144  2EE8               	decfsz	wreg,f,c
  3662  002146  D7FE               	bra	u1327
  3663  002148  2E32               	decfsz	??_LCDPutInst^0,f,c
  3664  00214A  D7FC               	bra	u1327
  3665  00214C                     
  3666                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3667  00214C  C033  F030         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3668  002150  0E13               	movlw	19
  3669  002152  EC7B  F011         	call	_WritePort_BBSPI
  3670                           
  3671                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3672  002156  0E04               	movlw	4
  3673  002158  6E32               	movwf	??_LCDPutInst^0,c
  3674  00215A  0E3E               	movlw	62
  3675  00215C                     u1337:
  3676  00215C  2EE8               	decfsz	wreg,f,c
  3677  00215E  D7FE               	bra	u1337
  3678  002160  2E32               	decfsz	??_LCDPutInst^0,f,c
  3679  002162  D7FC               	bra	u1337
  3680  002164                     
  3681                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3682  002164  0E40               	movlw	64
  3683  002166  6E30               	movwf	WritePort_BBSPI@a^0,c
  3684  002168  0E12               	movlw	18
  3685  00216A  EC7B  F011         	call	_WritePort_BBSPI
  3686  00216E                     
  3687                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3688  00216E  0E04               	movlw	4
  3689  002170  6E32               	movwf	??_LCDPutInst^0,c
  3690  002172  0E3E               	movlw	62
  3691  002174                     u1347:
  3692  002174  2EE8               	decfsz	wreg,f,c
  3693  002176  D7FE               	bra	u1347
  3694  002178  2E32               	decfsz	??_LCDPutInst^0,f,c
  3695  00217A  D7FC               	bra	u1347
  3696                           
  3697                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3698  00217C  0E00               	movlw	0
  3699  00217E  6E30               	movwf	WritePort_BBSPI@a^0,c
  3700  002180  0E12               	movlw	18
  3701  002182  EC7B  F011         	call	_WritePort_BBSPI
  3702  002186  0012               	return		;funcret
  3703  002188                     __end_of_LCDPutInst:
  3704                           	opt callstack 0
  3705                           
  3706 ;; *************** function _WritePort_BBSPI *****************
  3707 ;; Defined at:
  3708 ;;		line 144 in file "BBSPI_LCD.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  port_add        1    wreg     unsigned char 
  3711 ;;  a               1   11[COMRAM] unsigned char 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  port_add        1   12[COMRAM] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3723 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;Total ram usage:        2 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    4
  3730 ;; This function calls:
  3731 ;;		_SendByteBBSPI
  3732 ;; This function is called by:
  3733 ;;		_LCDInit
  3734 ;;		_LCDPutChar
  3735 ;;		_LCDPutInst
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text21
  3740  0022F6                     __ptext21:
  3741                           	opt callstack 0
  3742  0022F6                     _WritePort_BBSPI:
  3743                           	opt callstack 23
  3744                           
  3745                           ;incstack = 0
  3746                           ;WritePort_BBSPI@port_add stored from wreg
  3747  0022F6  6E31               	movwf	WritePort_BBSPI@port_add^0,c
  3748  0022F8                     
  3749                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3750  0022F8  9489               	bcf	137,2,c	;volatile
  3751  0022FA                     
  3752                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3753  0022FA  0E40               	movlw	64
  3754  0022FC  EC36  F010         	call	_SendByteBBSPI
  3755                           
  3756                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3757  002300  5031               	movf	WritePort_BBSPI@port_add^0,w,c
  3758  002302  EC36  F010         	call	_SendByteBBSPI
  3759                           
  3760                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3761  002306  5030               	movf	WritePort_BBSPI@a^0,w,c
  3762  002308  EC36  F010         	call	_SendByteBBSPI
  3763  00230C                     
  3764                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3765  00230C  8489               	bsf	137,2,c	;volatile
  3766  00230E  0012               	return		;funcret
  3767  002310                     __end_of_WritePort_BBSPI:
  3768                           	opt callstack 0
  3769                           
  3770 ;; *************** function _SendByteBBSPI *****************
  3771 ;; Defined at:
  3772 ;;		line 91 in file "BBSPI_LCD.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  output          1    wreg     unsigned char 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  output          1    8[COMRAM] unsigned char 
  3777 ;;  input           1   10[COMRAM] unsigned char 
  3778 ;;  bitcount        1    9[COMRAM] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;Total ram usage:        3 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    3
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_Port_BBSPIInit
  3799 ;;		_WritePort_BBSPI
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text22
  3804  00206C                     __ptext22:
  3805                           	opt callstack 0
  3806  00206C                     _SendByteBBSPI:
  3807                           	opt callstack 23
  3808                           
  3809                           ;incstack = 0
  3810                           ;SendByteBBSPI@output stored from wreg
  3811  00206C  6E2D               	movwf	SendByteBBSPI@output^0,c
  3812  00206E                     
  3813                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3814  00206E  C02D  F02F         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3815  002072                     
  3816                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3817  002072  0E00               	movlw	0
  3818  002074  6E2E               	movwf	SendByteBBSPI@bitcount^0,c
  3819  002076                     l196:
  3820                           
  3821                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3822  002076  AE2D               	btfss	SendByteBBSPI@output^0,7,c
  3823  002078  EF40  F010         	goto	u11
  3824  00207C  EF42  F010         	goto	u10
  3825  002080                     u11:
  3826  002080  EF45  F010         	goto	l198
  3827  002084                     u10:
  3828  002084                     
  3829                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3830  002084  8A8B               	bsf	139,5,c	;volatile
  3831  002086  EF46  F010         	goto	l199
  3832  00208A                     l198:
  3833                           
  3834                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3835  00208A  9A8B               	bcf	139,5,c	;volatile
  3836  00208C                     l199:
  3837                           
  3838                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3839  00208C  A88B               	btfss	139,4,c	;volatile
  3840  00208E  EF4B  F010         	goto	u21
  3841  002092  EF4D  F010         	goto	u20
  3842  002096                     u21:
  3843  002096  EF51  F010         	goto	l1197
  3844  00209A                     u20:
  3845  00209A                     
  3846                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3847  00209A  80D8               	bsf	status,0,c
  3848  00209C  362F               	rlcf	SendByteBBSPI@input^0,f,c
  3849  00209E  EF54  F010         	goto	l1199
  3850  0020A2                     l1197:
  3851                           
  3852                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3853  0020A2  502F               	movf	SendByteBBSPI@input^0,w,c
  3854  0020A4  242F               	addwf	SendByteBBSPI@input^0,w,c
  3855  0020A6  6E2F               	movwf	SendByteBBSPI@input^0,c
  3856  0020A8                     l1199:
  3857                           
  3858                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3859  0020A8  868B               	bsf	139,3,c	;volatile
  3860  0020AA                     
  3861                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3862  0020AA  F000               	nop	
  3863  0020AC  F000               	nop	
  3864  0020AE  F000               	nop	
  3865  0020B0  F000               	nop	
  3866  0020B2  F000               	nop	
  3867  0020B4  F000               	nop	
  3868  0020B6                     
  3869                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3870  0020B6  F000               	nop	
  3871  0020B8  F000               	nop	
  3872  0020BA  F000               	nop	
  3873  0020BC  F000               	nop	
  3874  0020BE  F000               	nop	
  3875  0020C0  F000               	nop	
  3876  0020C2                     
  3877                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3878  0020C2  968B               	bcf	139,3,c	;volatile
  3879                           
  3880                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3881  0020C4  90D8               	bcf	status,0,c
  3882  0020C6  362D               	rlcf	SendByteBBSPI@output^0,f,c
  3883  0020C8                     
  3884                           ;BBSPI_LCD.c: 113:     }
  3885  0020C8  2A2E               	incf	SendByteBBSPI@bitcount^0,f,c
  3886  0020CA  0E07               	movlw	7
  3887  0020CC  642E               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3888  0020CE  EF6B  F010         	goto	u31
  3889  0020D2  EF6D  F010         	goto	u30
  3890  0020D6                     u31:
  3891  0020D6  EF3B  F010         	goto	l196
  3892  0020DA                     u30:
  3893  0020DA  0012               	return		;funcret
  3894  0020DC                     __end_of_SendByteBBSPI:
  3895                           	opt callstack 0
  3896                           
  3897 ;; *************** function _InitBBSPI *****************
  3898 ;; Defined at:
  3899 ;;		line 70 in file "BBSPI_LCD.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;		None
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		None
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;Total ram usage:        0 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    3
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_LCDInit
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           	psect	text23
  3928  002324                     __ptext23:
  3929                           	opt callstack 0
  3930  002324                     _InitBBSPI:
  3931                           	opt callstack 26
  3932  002324                     
  3933                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3934  002324  9492               	bcf	146,2,c	;volatile
  3935                           
  3936                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  3937  002326  8894               	bsf	148,4,c	;volatile
  3938                           
  3939                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  3940  002328  9A94               	bcf	148,5,c	;volatile
  3941                           
  3942                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  3943  00232A  9694               	bcf	148,3,c	;volatile
  3944                           
  3945                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  3946  00232C  8489               	bsf	137,2,c	;volatile
  3947                           
  3948                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  3949  00232E  888B               	bsf	139,4,c	;volatile
  3950                           
  3951                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  3952  002330  9A8B               	bcf	139,5,c	;volatile
  3953                           
  3954                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  3955  002332  968B               	bcf	139,3,c	;volatile
  3956  002334  0012               	return		;funcret
  3957  002336                     __end_of_InitBBSPI:
  3958                           	opt callstack 0
  3959                           
  3960 ;; *************** function _deviceInterrupt *****************
  3961 ;; Defined at:
  3962 ;;		line 3 in file "interrupt.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    2
  3983 ;; This function calls:
  3984 ;;		_button
  3985 ;; This function is called by:
  3986 ;;		Interrupt level 2
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	intcode
  3991  000008                     __pintcode:
  3992                           	opt callstack 0
  3993  000008                     _deviceInterrupt:
  3994                           	opt callstack 23
  3995                           
  3996                           ;incstack = 0
  3997  000008  8240               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3998  00000A  EDFB  F00F         	call	int_func,f	;refresh shadow registers
  3999                           
  4000                           	psect	intcode_body
  4001  001FF6                     __pintcode_body:
  4002                           	opt callstack 23
  4003  001FF6                     int_func:
  4004                           	opt callstack 23
  4005  001FF6  0006               	pop		; remove dummy address from shadow register refresh
  4006  001FF8                     
  4007                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  4008  001FF8  A4F2               	btfss	242,2,c	;volatile
  4009  001FFA  EF01  F010         	goto	i2u124_41
  4010  001FFE  EF03  F010         	goto	i2u124_40
  4011  002002                     i2u124_41:
  4012  002002  EF34  F010         	goto	i2l270
  4013  002006                     i2u124_40:
  4014  002006  AAF2               	btfss	242,5,c	;volatile
  4015  002008  EF08  F010         	goto	i2u125_41
  4016  00200C  EF0A  F010         	goto	i2u125_40
  4017  002010                     i2u125_41:
  4018  002010  EF34  F010         	goto	i2l270
  4019  002014                     i2u125_40:
  4020  002014                     
  4021                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  4022  002014  94F2               	bcf	242,2,c	;volatile
  4023  002016                     
  4024                           ;interrupt.c: 7:         TMR0H = 0xfd;
  4025  002016  0EFD               	movlw	253
  4026  002018  6ED7               	movwf	215,c	;volatile
  4027                           
  4028                           ;interrupt.c: 8:         TMR0L = 0x5f;
  4029  00201A  0E5F               	movlw	95
  4030  00201C  6ED6               	movwf	214,c	;volatile
  4031  00201E                     
  4032                           ;interrupt.c: 9:         count10ms++;
  4033  00201E  4A0D               	infsnz	_count10ms^0,f,c
  4034  002020  2A0E               	incf	(_count10ms+1)^0,f,c
  4035  002022                     
  4036                           ;interrupt.c: 10:         if (runSTW == 1) {
  4037  002022  0415               	decf	_runSTW^0,w,c
  4038  002024  1016               	iorwf	(_runSTW+1)^0,w,c
  4039  002026  A4D8               	btfss	status,2,c
  4040  002028  EF18  F010         	goto	i2u126_41
  4041  00202C  EF1A  F010         	goto	i2u126_40
  4042  002030                     i2u126_41:
  4043  002030  EF32  F010         	goto	i2l2305
  4044  002034                     i2u126_40:
  4045  002034                     
  4046                           ;interrupt.c: 11:             miliSecSTW++;
  4047  002034  4A0F               	infsnz	_miliSecSTW^0,f,c
  4048  002036  2A10               	incf	(_miliSecSTW+1)^0,f,c
  4049  002038                     
  4050                           ;interrupt.c: 12:             if (miliSecSTW >= 100) {
  4051  002038  BE10               	btfsc	(_miliSecSTW+1)^0,7,c
  4052  00203A  EF28  F010         	goto	i2u127_41
  4053  00203E  5010               	movf	(_miliSecSTW+1)^0,w,c
  4054  002040  E109               	bnz	i2u127_40
  4055  002042  0E64               	movlw	100
  4056  002044  5C0F               	subwf	_miliSecSTW^0,w,c
  4057  002046  A0D8               	btfss	status,0,c
  4058  002048  EF28  F010         	goto	i2u127_41
  4059  00204C  EF2A  F010         	goto	i2u127_40
  4060  002050                     i2u127_41:
  4061  002050  EF32  F010         	goto	i2l2305
  4062  002054                     i2u127_40:
  4063  002054                     
  4064                           ;interrupt.c: 13:                 miliSecSTW = 0;
  4065  002054  0E00               	movlw	0
  4066  002056  6E10               	movwf	(_miliSecSTW+1)^0,c
  4067  002058  0E00               	movlw	0
  4068  00205A  6E0F               	movwf	_miliSecSTW^0,c
  4069                           
  4070                           ;interrupt.c: 14:                 flag = 1;
  4071  00205C  0E00               	movlw	0
  4072  00205E  6E0C               	movwf	(_flag+1)^0,c
  4073  002060  0E01               	movlw	1
  4074  002062  6E0B               	movwf	_flag^0,c
  4075  002064                     i2l2305:
  4076                           
  4077                           ;interrupt.c: 17:         button();
  4078  002064  EC22  F00E         	call	_button	;wreg free
  4079  002068                     i2l270:
  4080  002068  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4081  00206A  0011               	retfie		f
  4082  00206C                     __end_of_deviceInterrupt:
  4083                           	opt callstack 0
  4084                           
  4085 ;; *************** function _button *****************
  4086 ;; Defined at:
  4087 ;;		line 27 in file "button.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  checkRB0        2    6[COMRAM] int 
  4092 ;;  checkRA5        2    4[COMRAM] int 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;Total ram usage:        4 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    1
  4109 ;; This function calls:
  4110 ;;		_readRA5Button
  4111 ;;		_readRB0Button
  4112 ;; This function is called by:
  4113 ;;		_deviceInterrupt
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text25
  4118  001C44                     __ptext25:
  4119                           	opt callstack 0
  4120  001C44                     _button:
  4121                           	opt callstack 23
  4122  001C44                     
  4123                           ;button.c: 28:     int checkRA5 = readRA5Button();
  4124  001C44  EC10  F011         	call	_readRA5Button	;wreg free
  4125  001C48  C025  F029         	movff	?_readRA5Button,button@checkRA5
  4126  001C4C  C026  F02A         	movff	?_readRA5Button+1,button@checkRA5+1
  4127                           
  4128                           ;button.c: 29:     int checkRB0 = readRB0Button();
  4129  001C50  ECEC  F010         	call	_readRB0Button	;wreg free
  4130  001C54  C025  F02B         	movff	?_readRB0Button,button@checkRB0
  4131  001C58  C026  F02C         	movff	?_readRB0Button+1,button@checkRB0+1
  4132  001C5C                     
  4133                           ;button.c: 30:     if (checkRA5 == 1) {
  4134  001C5C  0429               	decf	button@checkRA5^0,w,c
  4135  001C5E  102A               	iorwf	(button@checkRA5+1)^0,w,c
  4136  001C60  A4D8               	btfss	status,2,c
  4137  001C62  EF35  F00E         	goto	i2u114_41
  4138  001C66  EF37  F00E         	goto	i2u114_40
  4139  001C6A                     i2u114_41:
  4140  001C6A  EF3D  F00E         	goto	i2l2209
  4141  001C6E                     i2u114_40:
  4142  001C6E                     
  4143                           ;button.c: 31:         RA5Pressed = 1;
  4144  001C6E  0E00               	movlw	0
  4145  001C70  6E1E               	movwf	(_RA5Pressed+1)^0,c
  4146  001C72  0E01               	movlw	1
  4147  001C74  6E1D               	movwf	_RA5Pressed^0,c
  4148                           
  4149                           ;button.c: 32:     }
  4150  001C76  EF8A  F00E         	goto	i2l163
  4151  001C7A                     i2l2209:
  4152  001C7A  042B               	decf	button@checkRB0^0,w,c
  4153  001C7C  102C               	iorwf	(button@checkRB0+1)^0,w,c
  4154  001C7E  A4D8               	btfss	status,2,c
  4155  001C80  EF44  F00E         	goto	i2u115_41
  4156  001C84  EF46  F00E         	goto	i2u115_40
  4157  001C88                     i2u115_41:
  4158  001C88  EF74  F00E         	goto	i2l2223
  4159  001C8C                     i2u115_40:
  4160  001C8C                     
  4161                           ;button.c: 34:         countPressed++;
  4162  001C8C  4A21               	infsnz	_countPressed^0,f,c
  4163  001C8E  2A22               	incf	(_countPressed+1)^0,f,c
  4164  001C90                     
  4165                           ;button.c: 35:         RB0Pressed = 1;
  4166  001C90  0E00               	movlw	0
  4167  001C92  6E1C               	movwf	(_RB0Pressed+1)^0,c
  4168  001C94  0E01               	movlw	1
  4169  001C96  6E1B               	movwf	_RB0Pressed^0,c
  4170  001C98                     
  4171                           ;button.c: 36:         if (countPressed >= 100) {
  4172  001C98  BE22               	btfsc	(_countPressed+1)^0,7,c
  4173  001C9A  EF58  F00E         	goto	i2u116_41
  4174  001C9E  5022               	movf	(_countPressed+1)^0,w,c
  4175  001CA0  E109               	bnz	i2u116_40
  4176  001CA2  0E64               	movlw	100
  4177  001CA4  5C21               	subwf	_countPressed^0,w,c
  4178  001CA6  A0D8               	btfss	status,0,c
  4179  001CA8  EF58  F00E         	goto	i2u116_41
  4180  001CAC  EF5A  F00E         	goto	i2u116_40
  4181  001CB0                     i2u116_41:
  4182  001CB0  EF8A  F00E         	goto	i2l163
  4183  001CB4                     i2u116_40:
  4184  001CB4                     
  4185                           ;button.c: 37:             countAuto++;
  4186  001CB4  4A1F               	infsnz	_countAuto^0,f,c
  4187  001CB6  2A20               	incf	(_countAuto+1)^0,f,c
  4188  001CB8                     
  4189                           ;button.c: 38:             if (countAuto > 20) {
  4190  001CB8  BE20               	btfsc	(_countAuto+1)^0,7,c
  4191  001CBA  EF68  F00E         	goto	i2u117_41
  4192  001CBE  5020               	movf	(_countAuto+1)^0,w,c
  4193  001CC0  E109               	bnz	i2u117_40
  4194  001CC2  0E15               	movlw	21
  4195  001CC4  5C1F               	subwf	_countAuto^0,w,c
  4196  001CC6  A0D8               	btfss	status,0,c
  4197  001CC8  EF68  F00E         	goto	i2u117_41
  4198  001CCC  EF6A  F00E         	goto	i2u117_40
  4199  001CD0                     i2u117_41:
  4200  001CD0  EF8A  F00E         	goto	i2l162
  4201  001CD4                     i2u117_40:
  4202  001CD4                     
  4203                           ;button.c: 39:                 increaseTime = 1;
  4204  001CD4  0E00               	movlw	0
  4205  001CD6  6E1A               	movwf	(_increaseTime+1)^0,c
  4206  001CD8  0E01               	movlw	1
  4207  001CDA  6E19               	movwf	_increaseTime^0,c
  4208                           
  4209                           ;button.c: 40:                 countAuto = 0;
  4210  001CDC  0E00               	movlw	0
  4211  001CDE  6E20               	movwf	(_countAuto+1)^0,c
  4212  001CE0  0E00               	movlw	0
  4213  001CE2  6E1F               	movwf	_countAuto^0,c
  4214  001CE4  EF8A  F00E         	goto	i2l163
  4215  001CE8                     i2l2223:
  4216                           
  4217                           ;button.c: 45:         countPressed = 0;
  4218  001CE8  0E00               	movlw	0
  4219  001CEA  6E22               	movwf	(_countPressed+1)^0,c
  4220  001CEC  0E00               	movlw	0
  4221  001CEE  6E21               	movwf	_countPressed^0,c
  4222                           
  4223                           ;button.c: 46:         countAuto = 0;
  4224  001CF0  0E00               	movlw	0
  4225  001CF2  6E20               	movwf	(_countAuto+1)^0,c
  4226  001CF4  0E00               	movlw	0
  4227  001CF6  6E1F               	movwf	_countAuto^0,c
  4228                           
  4229                           ;button.c: 47:         RA5Pressed = 0;
  4230  001CF8  0E00               	movlw	0
  4231  001CFA  6E1E               	movwf	(_RA5Pressed+1)^0,c
  4232  001CFC  0E00               	movlw	0
  4233  001CFE  6E1D               	movwf	_RA5Pressed^0,c
  4234                           
  4235                           ;button.c: 48:         RB0Pressed = 0;
  4236  001D00  0E00               	movlw	0
  4237  001D02  6E1C               	movwf	(_RB0Pressed+1)^0,c
  4238  001D04  0E00               	movlw	0
  4239  001D06  6E1B               	movwf	_RB0Pressed^0,c
  4240                           
  4241                           ;button.c: 49:         increaseTime = 0;
  4242  001D08  0E00               	movlw	0
  4243  001D0A  6E1A               	movwf	(_increaseTime+1)^0,c
  4244  001D0C  0E00               	movlw	0
  4245  001D0E  6E19               	movwf	_increaseTime^0,c
  4246  001D10  EF8A  F00E         	goto	i2l163
  4247  001D14                     i2l162:
  4248  001D14                     i2l163:
  4249  001D14  0012               	return		;funcret
  4250  001D16                     __end_of_button:
  4251                           	opt callstack 0
  4252                           
  4253 ;; *************** function _readRB0Button *****************
  4254 ;; Defined at:
  4255 ;;		line 15 in file "button.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  check           2    2[COMRAM] int 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  2    0[COMRAM] int 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;Total ram usage:        4 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_button
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text26
  4283  0021D8                     __ptext26:
  4284                           	opt callstack 0
  4285  0021D8                     _readRB0Button:
  4286                           	opt callstack 23
  4287  0021D8                     
  4288                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  4289  0021D8  C03C  F03D         	movff	_secondReadRB0,_firstReadRB0
  4290  0021DC                     
  4291                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  4292  0021DC  0E00               	movlw	0
  4293  0021DE  B081               	btfsc	129,0,c	;volatile
  4294  0021E0  0E01               	movlw	1
  4295  0021E2  6E3C               	movwf	_secondReadRB0^0,c
  4296  0021E4                     
  4297                           ;button.c: 18:     int check = 0;
  4298  0021E4  0E00               	movlw	0
  4299  0021E6  6E28               	movwf	(readRB0Button@check+1)^0,c
  4300  0021E8  0E00               	movlw	0
  4301  0021EA  6E27               	movwf	readRB0Button@check^0,c
  4302  0021EC                     
  4303                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  4304  0021EC  503C               	movf	_secondReadRB0^0,w,c
  4305  0021EE  183D               	xorwf	_firstReadRB0^0,w,c
  4306  0021F0  A4D8               	btfss	status,2,c
  4307  0021F2  EFFD  F010         	goto	i2u87_41
  4308  0021F6  EFFF  F010         	goto	i2u87_40
  4309  0021FA                     i2u87_41:
  4310  0021FA  EF0B  F011         	goto	i2l1925
  4311  0021FE                     i2u87_40:
  4312  0021FE                     
  4313                           ;button.c: 20:         if (firstReadRB0 == 0) {
  4314  0021FE  503D               	movf	_firstReadRB0^0,w,c
  4315  002200  A4D8               	btfss	status,2,c
  4316  002202  EF05  F011         	goto	i2u88_41
  4317  002206  EF07  F011         	goto	i2u88_40
  4318  00220A                     i2u88_41:
  4319  00220A  EF0B  F011         	goto	i2l1925
  4320  00220E                     i2u88_40:
  4321  00220E                     
  4322                           ;button.c: 21:             check = 1;
  4323  00220E  0E00               	movlw	0
  4324  002210  6E28               	movwf	(readRB0Button@check+1)^0,c
  4325  002212  0E01               	movlw	1
  4326  002214  6E27               	movwf	readRB0Button@check^0,c
  4327  002216                     i2l1925:
  4328                           
  4329                           ;button.c: 24:     return check;
  4330  002216  C027  F025         	movff	readRB0Button@check,?_readRB0Button
  4331  00221A  C028  F026         	movff	readRB0Button@check+1,?_readRB0Button+1
  4332  00221E  0012               	return		;funcret
  4333  002220                     __end_of_readRB0Button:
  4334                           	opt callstack 0
  4335                           
  4336 ;; *************** function _readRA5Button *****************
  4337 ;; Defined at:
  4338 ;;		line 3 in file "button.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  check           2    2[COMRAM] int 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  2    0[COMRAM] int 
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4352 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;Total ram usage:        4 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_button
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text27
  4366  002220                     __ptext27:
  4367                           	opt callstack 0
  4368  002220                     _readRA5Button:
  4369                           	opt callstack 23
  4370  002220                     
  4371                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4372  002220  C03E  F03F         	movff	_secondReadRA5,_firstReadRA5
  4373  002224                     
  4374                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4375  002224  0E00               	movlw	0
  4376  002226  BA80               	btfsc	128,5,c	;volatile
  4377  002228  0E01               	movlw	1
  4378  00222A  6E3E               	movwf	_secondReadRA5^0,c
  4379  00222C                     
  4380                           ;button.c: 6:     int check = 0;
  4381  00222C  0E00               	movlw	0
  4382  00222E  6E28               	movwf	(readRA5Button@check+1)^0,c
  4383  002230  0E00               	movlw	0
  4384  002232  6E27               	movwf	readRA5Button@check^0,c
  4385  002234                     
  4386                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4387  002234  503E               	movf	_secondReadRA5^0,w,c
  4388  002236  183F               	xorwf	_firstReadRA5^0,w,c
  4389  002238  A4D8               	btfss	status,2,c
  4390  00223A  EF21  F011         	goto	i2u85_41
  4391  00223E  EF23  F011         	goto	i2u85_40
  4392  002242                     i2u85_41:
  4393  002242  EF2F  F011         	goto	i2l1909
  4394  002246                     i2u85_40:
  4395  002246                     
  4396                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4397  002246  503F               	movf	_firstReadRA5^0,w,c
  4398  002248  A4D8               	btfss	status,2,c
  4399  00224A  EF29  F011         	goto	i2u86_41
  4400  00224E  EF2B  F011         	goto	i2u86_40
  4401  002252                     i2u86_41:
  4402  002252  EF2F  F011         	goto	i2l1909
  4403  002256                     i2u86_40:
  4404  002256                     
  4405                           ;button.c: 9:             check = 1;
  4406  002256  0E00               	movlw	0
  4407  002258  6E28               	movwf	(readRA5Button@check+1)^0,c
  4408  00225A  0E01               	movlw	1
  4409  00225C  6E27               	movwf	readRA5Button@check^0,c
  4410  00225E                     i2l1909:
  4411                           
  4412                           ;button.c: 12:    return check;
  4413  00225E  C027  F025         	movff	readRA5Button@check,?_readRA5Button
  4414  002262  C028  F026         	movff	readRA5Button@check+1,?_readRA5Button+1
  4415  002266  0012               	return		;funcret
  4416  002268                     __end_of_readRA5Button:
  4417                           	opt callstack 0
  4418                           
  4419                           	psect	rparam
  4420  0000                     
  4421                           	psect	temp
  4422  000040                     btemp:
  4423                           	opt callstack 0
  4424  000040                     	ds	1
  4425  0000                     int$flags	set	btemp
  4426  0000                     wtemp8	set	btemp+1
  4427  0000                     ttemp5	set	btemp+1
  4428  0000                     ttemp6	set	btemp+4
  4429  0000                     ttemp7	set	btemp+8
  4430                           tosu	equ	0xFFF
  4431                           tosh	equ	0xFFE
  4432                           tosl	equ	0xFFD
  4433                           stkptr	equ	0xFFC
  4434                           pclatu	equ	0xFFB
  4435                           pclath	equ	0xFFA
  4436                           pcl	equ	0xFF9
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           indf0	equ	0xFEF
  4444                           postinc0	equ	0xFEE
  4445                           postdec0	equ	0xFED
  4446                           preinc0	equ	0xFEC
  4447                           plusw0	equ	0xFEB
  4448                           fsr0h	equ	0xFEA
  4449                           fsr0l	equ	0xFE9
  4450                           wreg	equ	0xFE8
  4451                           indf1	equ	0xFE7
  4452                           postinc1	equ	0xFE6
  4453                           postdec1	equ	0xFE5
  4454                           preinc1	equ	0xFE4
  4455                           plusw1	equ	0xFE3
  4456                           fsr1h	equ	0xFE2
  4457                           fsr1l	equ	0xFE1
  4458                           bsr	equ	0xFE0
  4459                           indf2	equ	0xFDF
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           preinc2	equ	0xFDC
  4463                           plusw2	equ	0xFDB
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8


Data Sizes:
    Strings     82
    Constant    0
    Data        4
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     23      63
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModHour
    _main->_displayModMinute
    _main->_displayModSecond
    _displayStpWatch->_LCDPutStr
    _displayModSecond->_LCDPutStr
    _displayModMinute->_LCDPutStr
    _displayModHour->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   46945
                                             19 COMRAM     4     4      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                     _displayModHour
                   _displayModMinute
                   _displayModSecond
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModSecond                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModMinute                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModHour                                       2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3036
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModHour
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModMinute
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModSecond
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     17      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      32        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Oct  5 19:58:08 2019

      __end_of_displayModMinute 1550        __end_of_displayModSecond 13B0                     ?_LCDPutChar 0025  
                            u10 2084                              u11 2080                              u20 209A  
                            u21 2096                              u30 20DA                              u31 20D6  
                  ___awdiv@sign 0032                     ?_LCDPutInst 0025                              _hr 0005  
                 ?_displayClock 0025           SendByteBBSPI@bitcount 002E                             l202 20DA  
                           l122 2348                             l211 2130                             l220 22A4  
                           l116 233E                             l205 22F4                             l214 2186  
                           l119 2322                             l208 230E                             l323 1FF4  
                           l190 21D6                             l326 1DE2                             l414 1948  
                           l440 16E8                             l432 1818                             l193 2334  
                           l506 1B68                             l196 2076                             l509 1C42  
                           l198 208A                             l199 208C                             l439 1666  
                           l447 150A                             l448 154E                             l456 13AE  
                           l396 1A78                             l743 1EA6                             l756 1F56  
                           u210 1F74                             u211 1F70                             u300 19EA  
                           u220 1F9C                             u301 19E6                             u221 1F98  
                           u310 19FC                             u230 1FC4                             u311 19F8  
                           u231 1FC0                             u320 1A12                             u400 1868  
                           u240 1FEC                             u321 1A0E                             u401 1864  
                           u241 1FE8                             u330 1A70                             u250 1960  
                           u410 187A                             u331 1A6C                             u251 195C  
                           u411 1876                             u260 197A                             u420 1898  
                           u261 1976                             u421 1894                             u270 1998  
                           u430 18BA                             u510 1700                             u271 1994  
                           u431 18B6                             u511 16FC                             u280 19AA  
                           u440 18CC                             u520 171A                             u281 19A6  
                           u441 18C8                             u521 1716                             u290 19C8  
                           u450 18E2                             u530 1738                             u291 19C4  
                           u451 18DE                             u531 1734                             u460 1940  
                           u380 1830                             u540 174A                             u700 1B60  
                           u461 193C                             u381 182C                             u541 1746  
                           u701 1B5C                             u390 184A                             u550 1768  
                           u391 1846                             u551 1764                             u560 178A  
                           u640 1A8C                             u561 1786                             u641 1A88  
                           u570 179C                             u650 1AA6                             u571 1798  
                           u651 1AA2                             u900 1DF6                             u580 17B2  
                           u660 1AE4                             u901 1DF2                             u581 17AE  
                           u661 1AE0                             u910 1E10                             u590 1810  
                           u670 1AFE                             u911 1E0C                             u591 180C  
                           u671 1AFA                             u920 1E36                             u680 1B10  
                           u921 1E32                             u681 1B0C                             u930 1E54  
                           u690 1B38                             u931 1E50                             u691 1B34  
                           u940 1E70                             u941 1E6C                             u950 1E96  
                           u951 1E92                             u960 1EBA                             u961 1EB6  
                           u890 22A4                             u970 1ED4                             u891 22A0  
                           u971 1ED0                             u980 1EEE                             u981 1EEA  
                           u990 1F0C                             u991 1F08          __size_of_readRB0Button 0048  
                           _min 0007                             _sec 0009         __end_of_displayStpWatch 1C44  
                  ___awmod@sign 0032          __size_of_readRA5Button 0048                             wreg 000FE8  
               __end_of_LCDInit 21D8                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l1201 20AA                            l2001 1EC6                            l1211 20B4  
                          l1203 20AC                            l2011 1EFE                            l2003 1ED4  
                          l1221 20BE                            l1213 20B6                            l1205 20AE  
                          l2013 1F0C                            l2021 1F36                            l2005 1EDC  
                          l2101 162E                            l1223 20C0                            l1215 20B8  
                          l1207 20B0                            l2031 218C                            l2023 1F46  
                          l2015 1F22                            l2007 1EEE                            l2111 13E4  
                          l2103 13B0                            l1225 20C2                            l1217 20BA  
                          l1209 20B2                            l2041 2198                            l2033 218E  
                          l2025 1F4E                            l2017 1F2A                            l2009 1EF6  
                          l2121 1430                            l2113 1400                            l2105 13B6  
                          l2201 1C26                            l1227 20C8                            l1219 20BC  
                          l2051 21C4                            l2043 219E                            l2035 2190  
                          l2019 1F30                            l2123 144A                            l2131 14B8  
                          l2115 1406                            l2107 13C2                            l1229 20CA  
                          l2053 21CA                            l2045 21A8                            l2037 2190  
                          l2029 2188                            l2061 1D28                            l2133 14D2  
                          l2125 145C                            l2117 140C                            l2109 13C8  
                          l2141 1222                            l1501 1A1A                            l2055 21D0  
                          l2047 21B8                            l2039 2192                            l2071 1D88  
                          l2063 1D2E                            l2127 146C                            l2119 1428  
                          l2151 1282                            l2143 123E                            l2135 120A  
                          l1431 1F7C                            l2231 1068                            l1281 2324  
                          l1193 2084                            l1185 206E                            l2049 21BE  
                          l2073 1DA4                            l2065 1D4A                            l2057 1D16  
                          l2081 1556                            l2129 14A4                            l2161 12CC  
                          l2153 129E                            l2145 125A                            l2137 1210  
                          l1505 1A22                            l1441 1FC4                            l1433 1F80  
                          l2241 10AE                            l2233 106C                            l2225 1054  
                          l1195 209A                            l1187 2072                            l1283 22DE  
                          l2075 1DAA                            l2067 1D66                            l2059 1D1C  
                          l2091 15A6                            l2083 1562                            l2171 1348  
                          l2163 12D4                            l2155 12A4                            l2147 1260  
                          l2139 121C                            l1507 1A54                            l1443 1FCC  
                          l1435 1F9C                            l1427 1F58                            l2323 11D8  
                          l2251 10EC                            l2243 10B2                            l2235 1086  
                          l2227 1060                            l1197 20A2                            l1285 22E0  
                          l2077 1DC6                            l2069 1D6C                            l2093 15B8  
                          l2085 1568                            l2165 12EE                            l2173 135C  
                          l2157 12AA                            l2149 1266                            l2181 1B7C  
                          l1509 1A70                            l1541 181E                            l2325 17D6  
                          l1621 171A                            l1445 1FD0                            l1437 1FA4  
                          l1429 1F74                            l1701 1A7A                            l2261 1138  
                          l2253 10FE                            l2245 10C4                            l2237 1092  
                          l2229 1064                            l1199 20A8                            l1287 22F2  
                          l2095 15C8                            l2087 1584                            l2079 1550  
                          l2175 1376                            l2167 1300                            l2159 12B0  
                          l2191 1BC6                            l2183 1B82                            l1471 194A  
                          l2327 1906                            l1551 1868                            l1543 1830  
                          l1631 174E                            l1623 171E                            l1615 16EA  
                          l1447 1FEC                            l1439 1FA8                            l1703 1A8C  
                          l1711 1AD2                            l1391 2310                            l2271 1192  
                          l2263 1158                            l2255 111E                            l2247 10E4  
                          l2239 10AA                            l2097 1600                            l2089 158C  
                          l2169 1310                            l2193 1BE2                            l2185 1B9E  
                          l2177 1B6A                            l2329 1A36                            l1481 1986  
                          l1473 194E                            l1561 18BA                            l1553 187A  
                          l1545 184A                            l1641 17A0                            l1633 1768  
                          l1625 1726                            l1617 16EE                            l1721 1B18  
                          l1713 1AE4                            l1705 1A94                            l1393 2316  
                          l2273 119A                            l2265 115C                            l2257 1122  
                          l2249 10E8                            l2281 11C4                            l1395 2340  
                          l2099 1614                            l2195 1BFE                            l2187 1BBA  
                          l2179 1B70                            l1491 19D8                            l1483 1998  
                          l1475 1960                            l1563 18CC                            l1555 187E  
                          l1547 184E                            l1539 181A                            l1643 17B2  
                          l1635 1778                            l1627 1738                            l1619 1700  
                          l1651 17F4                            l1731 1B60                            l1723 1B1C  
                          l1715 1AEC                            l1707 1AA6                            l2275 119E  
                          l2267 1160                            l2259 1126                            l1397 2344  
                          l2197 1C04                            l2189 1BC0                            l1493 19EA  
                          l1485 19AA                            l1477 197A                            l1565 18D0  
                          l1557 1898                            l1549 1856                            l1573 18F2  
                          l1653 1810                            l1645 17BA                            l1637 178A  
                          l1629 174A                            l1389 2336                            l1725 1B38  
                          l1717 1AFE                            l1709 1ABE                            l2277 11B0  
                          l2269 1172                            l2199 1C0A                            l1495 19FC  
                          l1487 19AE                            l1479 197E                            l1567 18E2  
                          l1559 18A8                            l1575 1924                            l1639 179C  
                          l1727 1B40                            l1719 1B10                            l1497 1A00  
                          l1489 19C8                            l1577 1940                            l1569 18EA  
                          l1649 17C2                            l1729 1B44                            l1931 2134  
                          l1499 1A12                            l1933 213E                            l1941 2268  
                          l1935 214C                            l1943 226C                            l1951 1DE8  
                          l1881 22FA                            l1937 2164                            l1929 2134  
                          l1945 2280                            l1961 1E18                            l1953 1DF6  
                          l1883 230C                            l1939 216E                            l1891 20F6  
                          l1947 2284                            l1971 1E46                            l1963 1E1C  
                          l1955 1DFE                            l1893 210E                            l1885 20DE  
                          l1981 1E7A                            l1973 1E54                            l1965 1E24  
                          l1957 1E02                            l1949 1DE4                            l1879 22F8  
                          l1895 2118                            l1887 20DE                            l1983 1E80  
                          l1975 1E5A                            l1967 1E36                            l1959 1E10  
                          l1889 20E8                            l1977 1E70                            l1969 1E3E  
                          l1985 1E86                            l1993 1EA8                            l1987 1E96  
                          l1979 1E78                            l1995 1EAC                            l1989 1E9E  
                          l1997 1EBA                            l1999 1EC2                            STR_1 1012  
                          STR_2 1023                            STR_3 1043                            STR_4 1033  
                          STR_5 1001                            u1000 1F22                            u1001 1F1E  
                          u1010 1F46                            u1011 1F42                            u1020 1584  
                          u1100 12CC                            u1021 1580                            u1101 12C8  
                          u1030 15A6                            u1110 12EE                            u1031 15A2  
                          u1111 12EA                            u1040 15B8                            u1120 1300  
                          u1200 10FE                            u1041 15B4                            u1121 12FC  
                          u1201 10FA                            u1050 162E                            u1130 1376  
                          u1210 1138                            u1051 162A                            u1131 1372  
                          u1211 1134                            u1060 1428                            u1220 1172  
                          u1061 1424                            u1221 116E                            u1070 144A  
                          u1230 11B0                            u1071 1446                            u1231 11AC  
                          u1080 145C                            u1081 1458                            u1090 14D2  
                          u1307 211E                            u1091 14CE                            u1180 1086  
                          u1317 21AE                            u1181 1082                            u1190 10C4  
                          u1327 2144                            u1191 10C0                            u1337 215C  
                          u1347 2174                            u1287 20EE                            u1297 2106  
                          _flag 000B                            _main 1054                            fsr1l 000FE1  
                          btemp 0040                ?_WritePort_BBSPI 0030                            start 000E  
            __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
               ?_displayModHour 0025                    ___param_bank 000000                 _deviceInterrupt 0008  
                ??_displayClock 0036                           ?_main 0025                 __end_of___awdiv 1EA8  
               __end_of___awmod 1F58                           _T0CON 000FD5                 ___awdiv@divisor 002F  
                         i2l154 221E                           i2l162 1D14                           i2l163 1D14  
                         i2l149 2266                           i2l270 2068                 ___awdiv@counter 0031  
                         _TMR0H 000FD7                           _TMR0L 000FD6                   __CFG_PWRT$OFF 000000  
                __CFG_FCMEN$OFF 000000         __size_of_Port_BBSPIInit 001A                           _blink 0003  
                         _count 0001                           _state 0024  __size_of_oscillationInitialize 000A  
 __end_of_oscillationInitialize 2340                  __CFG_BOREN$OFF 000000                           tablat 000FF5  
           __size_of_LCDPutChar 0056             __size_of_LCDPutInst 0056                           ttemp5 0041  
                         ttemp6 0044                           ttemp7 0048                           status 000FD8  
             ??_timerInitialize 002D                           wtemp8 0041                   _readRB0Button 21D8  
                 _readRA5Button 2220                 __initialization 22A6                    __end_of_main 120A  
                __CFG_OSC$HSPLL 000000                          ??_main 0038                   __activetblptr 000003  
                     ??_LCDInit 0034                    LCDPutChar@ch 0033               __end_of_LCDPutStr 22A6  
              ?_displayStpWatch 0025                          _ADCON1 000FC1              __size_of_InitBBSPI 0012  
              ___awdiv@dividend 002D                    LCDPutInst@ch 0033                          i2l2211 1C8C  
                        i2l2203 1C44                          i2l2221 1CD4                          i2l2213 1C90  
                        i2l2205 1C5C                          i2l2301 2038                          i2l2215 1C98  
                        i2l2223 1CE8                          i2l2207 1C6E                          i2l2303 2054  
                        i2l2217 1CB4                          i2l2209 1C7A                          i2l2305 2064  
                        i2l2219 1CB8                          i2l2291 2014                          i2l1901 222C  
                        i2l2293 2016                          i2l1903 2234                          i2l2295 201E  
                        i2l2287 1FF8                          i2l1905 2246                          i2l1921 21FE  
                        i2l1913 21D8                          i2l2297 2022                          i2l2289 2006  
                        i2l1907 2256                          i2l1923 220E                          i2l1915 21DC  
                        i2l2299 2034                          i2l1909 225E                          i2l1925 2216  
                        i2l1917 21E4                          i2l1919 21EC                          i2l1897 2220  
                        i2l1899 2224                          _OSCCON 000FD3                    LCDPutStr@ptr 0034  
                ?_readRB0Button 0025                  ?_readRA5Button 0025         __end_of_deviceInterrupt 206C  
                __CFG_XINST$OFF 000000                       ??___awdiv 0031                       ??___awmod 0031  
                        _minSTW 0013                          _secSTW 0011                          _button 1C44  
                        clear_0 22CC       __size_of_buttonInitialize 000A                ___awdiv@quotient 0033  
               ___awmod@divisor 002F                          _runSTW 0015                 ___awmod@counter 0031  
              __end_of_norClock 1FF6                    __pdataCOMRAM 003C          Port_BBSPIInit@port_dir 0030  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __end_of_displayClock 1DE4                      __accesstop 0060  
       __end_of__initialization 22D2                   ___rparam_used 000001          __size_of_SendByteBBSPI 0070  
                 ?_modifyMinute 0025                   ?_modifySecond 0025                  __pcstackCOMRAM 0025  
             ?_displayModMinute 0025               ?_displayModSecond 0025               __end_of_InitBBSPI 2336  
                  ??_LCDPutChar 0032                    ??_LCDPutInst 0032              ??_displayModMinute 0036  
            ??_displayModSecond 0036                  _Port_BBSPIInit 22DC                 ??_readRB0Button 0027  
               ??_readRA5Button 0027              __end_of_LCDPutChar 2132                ??_displayModHour 0036  
            __end_of_LCDPutInst 2188                ?_deviceInterrupt 0025                  ??_modifyMinute 002D  
                ??_modifySecond 002D                         ?_button 0025          __end_of_Port_BBSPIInit 22F6  
                       _LCDInit 2188                   _SendByteBBSPI 206C                      _btnPressed 0017  
               _timerInitialize 2310                         _OSCTUNE 000F9B                         i2u85_40 2246  
                       i2u85_41 2242                         i2u86_40 2256                         i2u86_41 2252  
                       i2u87_40 21FE                         i2u87_41 21FA                         i2u88_40 220E  
                       i2u88_41 220A              __size_of_stopWatch 00F0                WritePort_BBSPI@a 0030  
                     ?_norClock 0025                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 1DE4                         ___awmod 1EA8                      _miliSecSTW 000F  
      __size_of_WritePort_BBSPI 001A                    __psmallconst 1000                _buttonInitialize 2340  
                       __pcinit 22A6                 __size_of_button 00D2                         __ramtop 1000  
                       __ptext0 1054                         __ptext1 2310                         __ptext2 1A7A  
                       __ptext3 2336                         __ptext4 1F58                         __ptext5 16EA  
                       __ptext6 181A                         __ptext7 194A                         __ptext8 1B6A  
                       __ptext9 120A                  ?_SendByteBBSPI 0025                 ?_Port_BBSPIInit 0025  
              ___awmod@dividend 002D                      _modifyHour 194A           __size_of_displayClock 00CE  
                     _LCDPutStr 2268                  __pintcode_body 1FF6            end_of_initialization 22D2  
                       int_func 1FF6           _oscillationInitialize 2336                      ??_norClock 002D  
                       postdec1 000FE5                         postinc0 000FEE         __end_of_timerInitialize 2324  
             __end_of_stopWatch 1B6A                    _displayClock 1D16                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _TRISAbits 000F92            __end_of_modifyMinute 194A  
          __end_of_modifySecond 181A                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISFbits 000F97                      ?_LCDPutStr 0034             SendByteBBSPI@output 002D  
      __size_of_displayStpWatch 00DA                   __pidataCOMRAM 234A                    _firstReadRB0 003D  
                  _firstReadRA5 003F                 ??_SendByteBBSPI 002D                   _secondReadRB0 003C  
                 _secondReadRA5 003E                  __end_of_button 1D16                       _InitBBSPI 2324  
             ??_WritePort_BBSPI 0031             start_initialization 22A6                    _countPressed 0021  
                   ?_modifyHour 0025       __size_of_displayModMinute 01A0       __size_of_displayModSecond 01A6  
        ?_oscillationInitialize 0025                    _increaseTime 0019                        ??_button 0029  
              ?_timerInitialize 0025                      ?_InitBBSPI 0025                        ?_LCDInit 0025  
                   __pbssCOMRAM 0001              readRB0Button@check 0027                     ??_LCDPutStr 0036  
      __end_of_buttonInitialize 234A           __end_of_readRB0Button 2220           __end_of_readRA5Button 2268  
             ??_displayStpWatch 0036               __size_of_norClock 009E                       __pintcode 0008  
           __size_of_modifyHour 0130                  button@checkRB0 002B                  button@checkRA5 0029  
                      ?___awdiv 002D                        ?___awmod 002D                ??_Port_BBSPIInit 0030  
      __size_of_deviceInterrupt 2064           __size_of_modifyMinute 0130           __size_of_modifySecond 0130  
                     _count10ms 000D                     __smallconst 1000                       _countAuto 001F  
                      _LATAbits 000F89                        _LATCbits 000F8B                        _LATFbits 000F8E  
                      i2u114_40 1C6E                        i2u114_41 1C6A                        i2u115_40 1C8C  
                      i2u115_41 1C88                        i2u116_40 1CB4                        i2u124_40 2006  
                      i2u116_41 1CB0                        i2u124_41 2002                        i2u117_40 1CD4  
                      i2u125_40 2014                        i2u117_41 1CD0                        i2u125_41 2010  
                      i2u126_40 2034                        i2u126_41 2030                        i2u127_40 2054  
                      i2u127_41 2050                    _modifyMinute 181A                    _modifySecond 16EA  
       __size_of_displayModHour 019A                     ??_InitBBSPI 002D              SendByteBBSPI@input 002F  
                     _stopWatch 1A7A                __size_of_LCDInit 0050           main@changeModePressed 003A  
              _displayModMinute 13B0                _displayModSecond 120A                       copy_data0 22BA  
                      __Hrparam 0000                        __Lrparam 0000                 _WritePort_BBSPI 22F6  
              __size_of___awdiv 00C4                __size_of___awmod 00B0                      ?_stopWatch 0025  
             ??_deviceInterrupt 002D                    ??_modifyHour 002D              readRA5Button@check 0027  
                      __ptext10 13B0                        __ptext11 1550                        __ptext20 2132  
                      __ptext12 1D16                        __ptext21 22F6                        __ptext13 1EA8  
                      __ptext22 206C                        __ptext14 1DE4                        __ptext23 2324  
                      __ptext15 2268         ??_oscillationInitialize 002D                        __ptext16 20DC  
                      __ptext25 1C44                        __ptext17 2340                        __ptext26 21D8  
                      __ptext18 2188                        __ptext27 2220                        __ptext19 22DC  
                 __size_of_main 01B6                        _norClock 1F58                        _stModify 0023  
                      int$flags 0040              __end_of_modifyHour 1A7A                      _LCDPutChar 20DC  
                    _LCDPutInst 2132                      _RB0Pressed 001B                      _RA5Pressed 001D  
         __end_of_SendByteBBSPI 20DC                      _INTCONbits 000FF2                 _displayStpWatch 1B6A  
                      intlevel2 0000               ?_buttonInitialize 0025         __end_of_WritePort_BBSPI 2310  
            ??_buttonInitialize 002D                  _displayModHour 1550         WritePort_BBSPI@port_add 0031  
                   ??_stopWatch 002D        __size_of_timerInitialize 0014          __end_of_displayModHour 16EA  
