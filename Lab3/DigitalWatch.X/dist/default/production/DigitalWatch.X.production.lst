

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Sep 27 12:35:54 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F8722 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0022CE                     __pidataCOMRAM:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _secondReadRB0
    84  0022CE  01                 	db	1
    85                           
    86                           ;initializer for _firstReadRB0
    87  0022CF  01                 	db	1
    88                           
    89                           ;initializer for _secondReadRA5
    90  0022D0  01                 	db	1
    91                           
    92                           ;initializer for _firstReadRA5
    93  0022D1  01                 	db	1
    94  0000                     _LATCbits	set	3979
    95  0000                     _LATAbits	set	3977
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATFbits	set	3982
    98  0000                     _TRISFbits	set	3991
    99  0000                     _PORTBbits	set	3969
   100  0000                     _PORTAbits	set	3968
   101  0000                     _ADCON1	set	4033
   102  0000                     _TRISBbits	set	3987
   103  0000                     _TRISAbits	set	3986
   104  0000                     _TMR0L	set	4054
   105  0000                     _TMR0H	set	4055
   106  0000                     _T0CON	set	4053
   107  0000                     _INTCONbits	set	4082
   108  0000                     _OSCTUNE	set	3995
   109  0000                     _OSCCON	set	4051
   110                           
   111                           	psect	smallconst
   112  001000                     __psmallconst:
   113                           	opt callstack 0
   114  001000  00                 	db	0
   115  001001                     STR_5:
   116  001001  20                 	db	32
   117  001002  20                 	db	32
   118  001003  20                 	db	32
   119  001004  53                 	db	83	;'S'
   120  001005  54                 	db	84	;'T'
   121  001006  4F                 	db	79	;'O'
   122  001007  50                 	db	80	;'P'
   123  001008  20                 	db	32
   124  001009  57                 	db	87	;'W'
   125  00100A  41                 	db	65	;'A'
   126  00100B  54                 	db	84	;'T'
   127  00100C  43                 	db	67	;'C'
   128  00100D  48                 	db	72	;'H'
   129  00100E  20                 	db	32
   130  00100F  20                 	db	32
   131  001010  20                 	db	32
   132  001011  00                 	db	0
   133  001012                     STR_1:
   134  001012  20                 	db	32
   135  001013  20                 	db	32
   136  001014  4E                 	db	78	;'N'
   137  001015  4F                 	db	79	;'O'
   138  001016  52                 	db	82	;'R'
   139  001017  4D                 	db	77	;'M'
   140  001018  41                 	db	65	;'A'
   141  001019  4C                 	db	76	;'L'
   142  00101A  20                 	db	32
   143  00101B  43                 	db	67	;'C'
   144  00101C  4C                 	db	76	;'L'
   145  00101D  4F                 	db	79	;'O'
   146  00101E  43                 	db	67	;'C'
   147  00101F  4B                 	db	75	;'K'
   148  001020  20                 	db	32
   149  001021  20                 	db	32
   150  001022  00                 	db	0
   151  001023                     STR_2:
   152  001023  20                 	db	32
   153  001024  4D                 	db	77	;'M'
   154  001025  4F                 	db	79	;'O'
   155  001026  44                 	db	68	;'D'
   156  001027  49                 	db	73	;'I'
   157  001028  46                 	db	70	;'F'
   158  001029  49                 	db	73	;'I'
   159  00102A  45                 	db	69	;'E'
   160  00102B  53                 	db	83	;'S'
   161  00102C  20                 	db	32
   162  00102D  48                 	db	72	;'H'
   163  00102E  4F                 	db	79	;'O'
   164  00102F  55                 	db	85	;'U'
   165  001030  52                 	db	82	;'R'
   166  001031  20                 	db	32
   167  001032  00                 	db	0
   168  001033                     STR_4:
   169  001033  4D                 	db	77	;'M'
   170  001034  4F                 	db	79	;'O'
   171  001035  44                 	db	68	;'D'
   172  001036  49                 	db	73	;'I'
   173  001037  46                 	db	70	;'F'
   174  001038  49                 	db	73	;'I'
   175  001039  45                 	db	69	;'E'
   176  00103A  53                 	db	83	;'S'
   177  00103B  20                 	db	32
   178  00103C  53                 	db	83	;'S'
   179  00103D  45                 	db	69	;'E'
   180  00103E  43                 	db	67	;'C'
   181  00103F  4F                 	db	79	;'O'
   182  001040  4E                 	db	78	;'N'
   183  001041  44                 	db	68	;'D'
   184  001042  00                 	db	0
   185  001043                     STR_3:
   186  001043  4D                 	db	77	;'M'
   187  001044  4F                 	db	79	;'O'
   188  001045  44                 	db	68	;'D'
   189  001046  49                 	db	73	;'I'
   190  001047  46                 	db	70	;'F'
   191  001048  49                 	db	73	;'I'
   192  001049  45                 	db	69	;'E'
   193  00104A  53                 	db	83	;'S'
   194  00104B  20                 	db	32
   195  00104C  4D                 	db	77	;'M'
   196  00104D  49                 	db	73	;'I'
   197  00104E  4E                 	db	78	;'N'
   198  00104F  55                 	db	85	;'U'
   199  001050  54                 	db	84	;'T'
   200  001051  45                 	db	69	;'E'
   201  001052  00                 	db	0
   202                           
   203                           ; #config settings
   204  001053  00                 	db	0	; dummy byte at the end
   205  0000                     
   206                           	psect	cinit
   207  00222A                     __pcinit:
   208                           	opt callstack 0
   209  00222A                     start_initialization:
   210                           	opt callstack 0
   211  00222A                     __initialization:
   212                           	opt callstack 0
   213                           
   214                           ; Initialize objects allocated to COMRAM (4 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216  00222A  0ECE               	movlw	low __pidataCOMRAM
   217  00222C  6EF6               	movwf	tblptrl,c
   218  00222E  0E22               	movlw	high __pidataCOMRAM
   219  002230  6EF7               	movwf	tblptrh,c
   220  002232  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221  002234  6EF8               	movwf	tblptru,c
   222  002236  EE00  F036         	lfsr	0,__pdataCOMRAM
   223  00223A  EE10 F004          	lfsr	1,4
   224  00223E                     copy_data0:
   225  00223E  0009               	tblrd		*+
   226  002240  CFF5 FFEE          	movff	tablat,postinc0
   227  002244  50E5               	movf	postdec1,w,c
   228  002246  50E1               	movf	fsr1l,w,c
   229  002248  E1FA               	bnz	copy_data0
   230                           
   231                           ; Clear objects allocated to COMRAM (32 bytes)
   232  00224A  EE00  F001         	lfsr	0,__pbssCOMRAM
   233  00224E  0E20               	movlw	32
   234  002250                     clear_0:
   235  002250  6AEE               	clrf	postinc0,c
   236  002252  06E8               	decf	wreg,f,c
   237  002254  E1FD               	bnz	clear_0
   238  002256                     end_of_initialization:
   239                           	opt callstack 0
   240  002256                     __end_of__initialization:
   241                           	opt callstack 0
   242  002256  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  002258  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  00225A  0100               	movlb	0
   245  00225C  EF2A  F008         	goto	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMRAM
   248  000001                     __pbssCOMRAM:
   249                           	opt callstack 0
   250  000001                     _count:
   251                           	opt callstack 0
   252  000001                     	ds	2
   253  000003                     _blink:
   254                           	opt callstack 0
   255  000003                     	ds	2
   256  000005                     _hr:
   257                           	opt callstack 0
   258  000005                     	ds	2
   259  000007                     _min:
   260                           	opt callstack 0
   261  000007                     	ds	2
   262  000009                     _sec:
   263                           	opt callstack 0
   264  000009                     	ds	2
   265  00000B                     _flag:
   266                           	opt callstack 0
   267  00000B                     	ds	2
   268  00000D                     _count10ms:
   269                           	opt callstack 0
   270  00000D                     	ds	2
   271  00000F                     _miliSecSTW:
   272                           	opt callstack 0
   273  00000F                     	ds	2
   274  000011                     _secSTW:
   275                           	opt callstack 0
   276  000011                     	ds	2
   277  000013                     _minSTW:
   278                           	opt callstack 0
   279  000013                     	ds	2
   280  000015                     _runSTW:
   281                           	opt callstack 0
   282  000015                     	ds	2
   283  000017                     _increaseTime:
   284                           	opt callstack 0
   285  000017                     	ds	2
   286  000019                     _changeModePressed:
   287                           	opt callstack 0
   288  000019                     	ds	2
   289  00001B                     _countAuto:
   290                           	opt callstack 0
   291  00001B                     	ds	2
   292  00001D                     _countPressed:
   293                           	opt callstack 0
   294  00001D                     	ds	2
   295  00001F                     _stModify:
   296                           	opt callstack 0
   297  00001F                     	ds	1
   298  000020                     _state:
   299                           	opt callstack 0
   300  000020                     	ds	1
   301                           
   302                           	psect	dataCOMRAM
   303  000036                     __pdataCOMRAM:
   304                           	opt callstack 0
   305  000036                     _secondReadRB0:
   306                           	opt callstack 0
   307  000036                     	ds	1
   308  000037                     _firstReadRB0:
   309                           	opt callstack 0
   310  000037                     	ds	1
   311  000038                     _secondReadRA5:
   312                           	opt callstack 0
   313  000038                     	ds	1
   314  000039                     _firstReadRA5:
   315                           	opt callstack 0
   316  000039                     	ds	1
   317                           
   318                           	psect	cstackCOMRAM
   319  000021                     __pcstackCOMRAM:
   320                           	opt callstack 0
   321  000021                     ?_readRA5Button:
   322                           	opt callstack 0
   323  000021                     ?_readRB0Button:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0x0
   327  000021                     	ds	2
   328  000023                     readRA5Button@check:
   329                           	opt callstack 0
   330  000023                     readRB0Button@check:
   331                           	opt callstack 0
   332                           
   333                           ; 2 bytes @ 0x2
   334  000023                     	ds	2
   335  000025                     button@checkRA5:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x4
   339  000025                     	ds	2
   340  000027                     button@checkRB0:
   341                           	opt callstack 0
   342                           
   343                           ; 2 bytes @ 0x6
   344  000027                     	ds	2
   345  000029                     ??_modifyHour:
   346  000029                     ??_modifyMinute:
   347  000029                     ??_modifySecond:
   348  000029                     ??_stopWatch:
   349  000029                     ?___awdiv:
   350                           	opt callstack 0
   351  000029                     ?___awmod:
   352                           	opt callstack 0
   353  000029                     SendByteBBSPI@output:
   354                           	opt callstack 0
   355  000029                     ___awdiv@dividend:
   356                           	opt callstack 0
   357  000029                     ___awmod@dividend:
   358                           	opt callstack 0
   359                           
   360                           ; 2 bytes @ 0x8
   361  000029                     	ds	1
   362  00002A                     SendByteBBSPI@bitcount:
   363                           	opt callstack 0
   364                           
   365                           ; 1 bytes @ 0x9
   366  00002A                     	ds	1
   367  00002B                     SendByteBBSPI@input:
   368                           	opt callstack 0
   369  00002B                     ___awdiv@divisor:
   370                           	opt callstack 0
   371  00002B                     ___awmod@divisor:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0xA
   375  00002B                     	ds	1
   376  00002C                     Port_BBSPIInit@port_dir:
   377                           	opt callstack 0
   378  00002C                     WritePort_BBSPI@a:
   379                           	opt callstack 0
   380                           
   381                           ; 1 bytes @ 0xB
   382  00002C                     	ds	1
   383  00002D                     WritePort_BBSPI@port_add:
   384                           	opt callstack 0
   385  00002D                     ___awdiv@counter:
   386                           	opt callstack 0
   387  00002D                     ___awmod@counter:
   388                           	opt callstack 0
   389                           
   390                           ; 1 bytes @ 0xC
   391  00002D                     	ds	1
   392  00002E                     ??_LCDPutInst:
   393  00002E                     ??_LCDPutChar:
   394  00002E                     ___awdiv@sign:
   395                           	opt callstack 0
   396  00002E                     ___awmod@sign:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0xD
   400  00002E                     	ds	1
   401  00002F                     LCDPutChar@ch:
   402                           	opt callstack 0
   403  00002F                     LCDPutInst@ch:
   404                           	opt callstack 0
   405  00002F                     ___awdiv@quotient:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0xE
   409  00002F                     	ds	1
   410  000030                     ??_LCDInit:
   411  000030                     LCDPutStr@ptr:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0xF
   415  000030                     	ds	2
   416  000032                     ??_displayModHour:
   417  000032                     ??_displayModMinute:
   418  000032                     ??_displayModSecond:
   419  000032                     
   420                           ; 1 bytes @ 0x11
   421  000032                     	ds	2
   422  000034                     ??_main:
   423                           
   424                           ; 1 bytes @ 0x13
   425  000034                     	ds	2
   426                           
   427 ;;
   428 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   429 ;;
   430 ;; *************** function _main *****************
   431 ;; Defined at:
   432 ;;		line 15 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;Total ram usage:        2 bytes
   451 ;; Hardware stack levels required when called:    8
   452 ;; This function calls:
   453 ;;		_LCDInit
   454 ;;		_buttonInitialize
   455 ;;		_displayClock
   456 ;;		_displayModHour
   457 ;;		_displayModMinute
   458 ;;		_displayModSecond
   459 ;;		_displayStpWatch
   460 ;;		_modifyHour
   461 ;;		_modifyMinute
   462 ;;		_modifySecond
   463 ;;		_norClock
   464 ;;		_oscillationInitialize
   465 ;;		_stopWatch
   466 ;;		_timerInitialize
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text0
   473  001054                     __ptext0:
   474                           	opt callstack 0
   475  001054                     _main:
   476                           	opt callstack 23
   477  001054                     
   478                           ;main.c: 16:     oscillationInitialize();
   479  001054  EC5D  F011         	call	_oscillationInitialize	;wreg free
   480                           
   481                           ;main.c: 17:     timerInitialize();
   482  001058  EC4A  F011         	call	_timerInitialize	;wreg free
   483                           
   484                           ;main.c: 18:     buttonInitialize();
   485  00105C  EC62  F011         	call	_buttonInitialize	;wreg free
   486  001060                     
   487                           ;main.c: 19:     LCDInit();
   488  001060  EC86  F010         	call	_LCDInit	;wreg free
   489  001064                     
   490                           ;main.c: 20:     state = norClk;
   491  001064  0E00               	movlw	0
   492  001066  6E20               	movwf	_state^0,c
   493  001068                     
   494                           ;main.c: 21:     stModify = init;
   495  001068  0E00               	movlw	0
   496  00106A  6E1F               	movwf	_stModify^0,c
   497  00106C  EFD3  F008         	goto	l2235
   498  001070                     l2191:
   499                           
   500                           ;main.c: 26:                 miliSecSTW = 0;
   501  001070  0E00               	movlw	0
   502  001072  6E10               	movwf	(_miliSecSTW+1)^0,c
   503  001074  0E00               	movlw	0
   504  001076  6E0F               	movwf	_miliSecSTW^0,c
   505                           
   506                           ;main.c: 27:                 secSTW = 0;
   507  001078  0E00               	movlw	0
   508  00107A  6E12               	movwf	(_secSTW+1)^0,c
   509  00107C  0E00               	movlw	0
   510  00107E  6E11               	movwf	_secSTW^0,c
   511                           
   512                           ;main.c: 28:                 minSTW = 0;
   513  001080  0E00               	movlw	0
   514  001082  6E14               	movwf	(_minSTW+1)^0,c
   515  001084  0E00               	movlw	0
   516  001086  6E13               	movwf	_minSTW^0,c
   517  001088                     
   518                           ;main.c: 29:                 norClock();
   519  001088  EC6E  F00F         	call	_norClock	;wreg free
   520  00108C                     
   521                           ;main.c: 30:                 displayClock();
   522  00108C  ECEC  F00D         	call	_displayClock	;wreg free
   523  001090                     
   524                           ;main.c: 31:                 if (changeModePressed == 1) {
   525  001090  0419               	decf	_changeModePressed^0,w,c
   526  001092  101A               	iorwf	(_changeModePressed+1)^0,w,c
   527  001094  A4D8               	btfss	status,2,c
   528  001096  EF4F  F008         	goto	u1101
   529  00109A  EF51  F008         	goto	u1100
   530  00109E                     u1101:
   531  00109E  EFD3  F008         	goto	l76
   532  0010A2                     u1100:
   533  0010A2                     
   534                           ;main.c: 32:                     changeModePressed = 0;
   535  0010A2  0E00               	movlw	0
   536  0010A4  6E1A               	movwf	(_changeModePressed+1)^0,c
   537  0010A6  0E00               	movlw	0
   538  0010A8  6E19               	movwf	_changeModePressed^0,c
   539                           
   540                           ;main.c: 33:                     state = modHr;
   541  0010AA  0E01               	movlw	1
   542  0010AC  6E20               	movwf	_state^0,c
   543                           
   544                           ;main.c: 34:                     blink = 0;
   545  0010AE  0E00               	movlw	0
   546  0010B0  6E04               	movwf	(_blink+1)^0,c
   547  0010B2  0E00               	movlw	0
   548  0010B4  6E03               	movwf	_blink^0,c
   549                           
   550                           ;main.c: 35:                     count10ms = 0;
   551  0010B6  0E00               	movlw	0
   552  0010B8  6E0E               	movwf	(_count10ms+1)^0,c
   553  0010BA  0E00               	movlw	0
   554  0010BC  6E0D               	movwf	_count10ms^0,c
   555  0010BE  EFD3  F008         	goto	l2235
   556  0010C2                     l2201:
   557                           
   558                           ;main.c: 39:                 modifyHour();
   559  0010C2  EC75  F00C         	call	_modifyHour	;wreg free
   560  0010C6                     
   561                           ;main.c: 40:                 displayModHour();
   562  0010C6  EC83  F00A         	call	_displayModHour	;wreg free
   563  0010CA                     
   564                           ;main.c: 41:                 if (changeModePressed == 1) {
   565  0010CA  0419               	decf	_changeModePressed^0,w,c
   566  0010CC  101A               	iorwf	(_changeModePressed+1)^0,w,c
   567  0010CE  A4D8               	btfss	status,2,c
   568  0010D0  EF6C  F008         	goto	u1111
   569  0010D4  EF6E  F008         	goto	u1110
   570  0010D8                     u1111:
   571  0010D8  EFD3  F008         	goto	l76
   572  0010DC                     u1110:
   573  0010DC                     
   574                           ;main.c: 42:                     changeModePressed = 0;
   575  0010DC  0E00               	movlw	0
   576  0010DE  6E1A               	movwf	(_changeModePressed+1)^0,c
   577  0010E0  0E00               	movlw	0
   578  0010E2  6E19               	movwf	_changeModePressed^0,c
   579                           
   580                           ;main.c: 43:                     state = modMin;
   581  0010E4  0E02               	movlw	2
   582  0010E6  6E20               	movwf	_state^0,c
   583                           
   584                           ;main.c: 44:                     blink = 0;
   585  0010E8  0E00               	movlw	0
   586  0010EA  6E04               	movwf	(_blink+1)^0,c
   587  0010EC  0E00               	movlw	0
   588  0010EE  6E03               	movwf	_blink^0,c
   589                           
   590                           ;main.c: 45:                     count10ms = 0;
   591  0010F0  0E00               	movlw	0
   592  0010F2  6E0E               	movwf	(_count10ms+1)^0,c
   593  0010F4  0E00               	movlw	0
   594  0010F6  6E0D               	movwf	_count10ms^0,c
   595  0010F8  EFD3  F008         	goto	l2235
   596  0010FC                     l2209:
   597                           
   598                           ;main.c: 49:                 modifyMinute();
   599  0010FC  ECDD  F00B         	call	_modifyMinute	;wreg free
   600  001100                     
   601                           ;main.c: 50:                 displayModMinute();
   602  001100  ECBE  F009         	call	_displayModMinute	;wreg free
   603  001104                     
   604                           ;main.c: 51:                 if (changeModePressed == 1) {
   605  001104  0419               	decf	_changeModePressed^0,w,c
   606  001106  101A               	iorwf	(_changeModePressed+1)^0,w,c
   607  001108  A4D8               	btfss	status,2,c
   608  00110A  EF89  F008         	goto	u1121
   609  00110E  EF8B  F008         	goto	u1120
   610  001112                     u1121:
   611  001112  EFD3  F008         	goto	l76
   612  001116                     u1120:
   613  001116                     
   614                           ;main.c: 52:                     changeModePressed = 0;
   615  001116  0E00               	movlw	0
   616  001118  6E1A               	movwf	(_changeModePressed+1)^0,c
   617  00111A  0E00               	movlw	0
   618  00111C  6E19               	movwf	_changeModePressed^0,c
   619                           
   620                           ;main.c: 53:                     state = modSec;
   621  00111E  0E03               	movlw	3
   622  001120  6E20               	movwf	_state^0,c
   623                           
   624                           ;main.c: 54:                     blink = 0;
   625  001122  0E00               	movlw	0
   626  001124  6E04               	movwf	(_blink+1)^0,c
   627  001126  0E00               	movlw	0
   628  001128  6E03               	movwf	_blink^0,c
   629                           
   630                           ;main.c: 55:                     count10ms = 0;
   631  00112A  0E00               	movlw	0
   632  00112C  6E0E               	movwf	(_count10ms+1)^0,c
   633  00112E  0E00               	movlw	0
   634  001130  6E0D               	movwf	_count10ms^0,c
   635  001132  EFD3  F008         	goto	l2235
   636  001136                     l2217:
   637                           
   638                           ;main.c: 59:                 modifySecond();
   639  001136  EC45  F00B         	call	_modifySecond	;wreg free
   640  00113A                     
   641                           ;main.c: 60:                 displayModSecond();
   642  00113A  ECF6  F008         	call	_displayModSecond	;wreg free
   643  00113E                     
   644                           ;main.c: 61:                 if (changeModePressed == 1) {
   645  00113E  0419               	decf	_changeModePressed^0,w,c
   646  001140  101A               	iorwf	(_changeModePressed+1)^0,w,c
   647  001142  A4D8               	btfss	status,2,c
   648  001144  EFA6  F008         	goto	u1131
   649  001148  EFA8  F008         	goto	u1130
   650  00114C                     u1131:
   651  00114C  EFD3  F008         	goto	l76
   652  001150                     u1130:
   653  001150                     
   654                           ;main.c: 62:                     changeModePressed = 0;
   655  001150  0E00               	movlw	0
   656  001152  6E1A               	movwf	(_changeModePressed+1)^0,c
   657  001154  0E00               	movlw	0
   658  001156  6E19               	movwf	_changeModePressed^0,c
   659                           
   660                           ;main.c: 63:                     state = stpWatch;
   661  001158  0E04               	movlw	4
   662  00115A  6E20               	movwf	_state^0,c
   663                           
   664                           ;main.c: 64:                     runSTW = 0;
   665  00115C  0E00               	movlw	0
   666  00115E  6E16               	movwf	(_runSTW+1)^0,c
   667  001160  0E00               	movlw	0
   668  001162  6E15               	movwf	_runSTW^0,c
   669                           
   670                           ;main.c: 65:                     count10ms = 0;
   671  001164  0E00               	movlw	0
   672  001166  6E0E               	movwf	(_count10ms+1)^0,c
   673  001168  0E00               	movlw	0
   674  00116A  6E0D               	movwf	_count10ms^0,c
   675  00116C  EFD3  F008         	goto	l2235
   676  001170                     l2225:
   677                           
   678                           ;main.c: 69:                 norClock();
   679  001170  EC6E  F00F         	call	_norClock	;wreg free
   680                           
   681                           ;main.c: 70:                 stopWatch();
   682  001174  EC80  F00D         	call	_stopWatch	;wreg free
   683  001178                     
   684                           ;main.c: 71:                 displayStpWatch();
   685  001178  EC0D  F00D         	call	_displayStpWatch	;wreg free
   686  00117C                     
   687                           ;main.c: 72:                 if (changeModePressed == 1) {
   688  00117C  0419               	decf	_changeModePressed^0,w,c
   689  00117E  101A               	iorwf	(_changeModePressed+1)^0,w,c
   690  001180  A4D8               	btfss	status,2,c
   691  001182  EFC5  F008         	goto	u1141
   692  001186  EFC7  F008         	goto	u1140
   693  00118A                     u1141:
   694  00118A  EFD3  F008         	goto	l76
   695  00118E                     u1140:
   696  00118E                     
   697                           ;main.c: 73:                     changeModePressed = 0;
   698  00118E  0E00               	movlw	0
   699  001190  6E1A               	movwf	(_changeModePressed+1)^0,c
   700  001192  0E00               	movlw	0
   701  001194  6E19               	movwf	_changeModePressed^0,c
   702                           
   703                           ;main.c: 74:                     state = norClk;
   704  001196  0E00               	movlw	0
   705  001198  6E20               	movwf	_state^0,c
   706                           
   707                           ;main.c: 75:                     runSTW = 0;
   708  00119A  0E00               	movlw	0
   709  00119C  6E16               	movwf	(_runSTW+1)^0,c
   710  00119E  0E00               	movlw	0
   711  0011A0  6E15               	movwf	_runSTW^0,c
   712  0011A2  EFD3  F008         	goto	l2235
   713  0011A6                     l76:
   714  0011A6                     l2235:
   715  0011A6  5020               	movf	_state^0,w,c
   716  0011A8  6E34               	movwf	??_main^0,c
   717  0011AA  6A35               	clrf	(??_main+1)^0,c
   718                           
   719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   720                           ; Switch size 1, requested type "simple"
   721                           ; Number of cases is 1, Range of values is 0 to 0
   722                           ; switch strategies available:
   723                           ; Name         Instructions Cycles
   724                           ; simple_byte            4     3 (average)
   725                           ;	Chosen strategy is simple_byte
   726  0011AC  5035               	movf	(??_main+1)^0,w,c
   727  0011AE  0A00               	xorlw	0	; case 0
   728  0011B0  B4D8               	btfsc	status,2,c
   729  0011B2  EFDD  F008         	goto	l2277
   730  0011B6  EFD3  F008         	goto	l2235
   731  0011BA                     l2277:
   732                           
   733                           ; Switch size 1, requested type "simple"
   734                           ; Number of cases is 5, Range of values is 0 to 4
   735                           ; switch strategies available:
   736                           ; Name         Instructions Cycles
   737                           ; simple_byte           16     9 (average)
   738                           ;	Chosen strategy is simple_byte
   739  0011BA  5034               	movf	??_main^0,w,c
   740  0011BC  0A00               	xorlw	0	; case 0
   741  0011BE  B4D8               	btfsc	status,2,c
   742  0011C0  EF38  F008         	goto	l2191
   743  0011C4  0A01               	xorlw	1	; case 1
   744  0011C6  B4D8               	btfsc	status,2,c
   745  0011C8  EF61  F008         	goto	l2201
   746  0011CC  0A03               	xorlw	3	; case 2
   747  0011CE  B4D8               	btfsc	status,2,c
   748  0011D0  EF7E  F008         	goto	l2209
   749  0011D4  0A01               	xorlw	1	; case 3
   750  0011D6  B4D8               	btfsc	status,2,c
   751  0011D8  EF9B  F008         	goto	l2217
   752  0011DC  0A07               	xorlw	7	; case 4
   753  0011DE  B4D8               	btfsc	status,2,c
   754  0011E0  EFB8  F008         	goto	l2225
   755  0011E4  EFD3  F008         	goto	l2235
   756  0011E8  EF07  F000         	goto	start
   757  0011EC                     __end_of_main:
   758                           	opt callstack 0
   759                           
   760 ;; *************** function _timerInitialize *****************
   761 ;; Defined at:
   762 ;;		line 9 in file "system.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, status,2
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    3
   783 ;; This function calls:
   784 ;;		Nothing
   785 ;; This function is called by:
   786 ;;		_main
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text1
   791  002294                     __ptext1:
   792                           	opt callstack 0
   793  002294                     _timerInitialize:
   794                           	opt callstack 27
   795  002294                     
   796                           ;system.c: 10:     INTCONbits.GIE = 1;
   797  002294  8EF2               	bsf	242,7,c	;volatile
   798                           
   799                           ;system.c: 12:     INTCONbits.TMR0IE = 1;
   800  002296  8AF2               	bsf	242,5,c	;volatile
   801                           
   802                           ;system.c: 13:     INTCONbits.TMR0IF = 0;
   803  002298  94F2               	bcf	242,2,c	;volatile
   804  00229A                     
   805                           ;system.c: 14:     T0CON = 0b10000100;
   806  00229A  0E84               	movlw	132
   807  00229C  6ED5               	movwf	213,c	;volatile
   808                           
   809                           ;system.c: 17:     TMR0H = 0xfd;
   810  00229E  0EFD               	movlw	253
   811  0022A0  6ED7               	movwf	215,c	;volatile
   812                           
   813                           ;system.c: 18:     TMR0L = 0x7f;
   814  0022A2  0E7F               	movlw	127
   815  0022A4  6ED6               	movwf	214,c	;volatile
   816  0022A6  0012               	return		;funcret
   817  0022A8                     __end_of_timerInitialize:
   818                           	opt callstack 0
   819                           
   820 ;; *************** function _stopWatch *****************
   821 ;; Defined at:
   822 ;;		line 3 in file "stateStpWatch.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;Total ram usage:        2 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    3
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           	psect	text2
   851  001B00                     __ptext2:
   852                           	opt callstack 0
   853  001B00                     _stopWatch:
   854                           	opt callstack 27
   855  001B00                     
   856                           ;stateStpWatch.c: 4:     if (countPressed >= 5) {
   857  001B00  BE1E               	btfsc	(_countPressed+1)^0,7,c
   858  001B02  EF8C  F00D         	goto	u611
   859  001B06  501E               	movf	(_countPressed+1)^0,w,c
   860  001B08  E109               	bnz	u610
   861  001B0A  0E05               	movlw	5
   862  001B0C  5C1D               	subwf	_countPressed^0,w,c
   863  001B0E  A0D8               	btfss	status,0,c
   864  001B10  EF8C  F00D         	goto	u611
   865  001B14  EF8E  F00D         	goto	u610
   866  001B18                     u611:
   867  001B18  EFAD  F00D         	goto	l1679
   868  001B1C                     u610:
   869  001B1C                     
   870                           ;stateStpWatch.c: 5:         if (runSTW == 0) {
   871  001B1C  5015               	movf	_runSTW^0,w,c
   872  001B1E  1016               	iorwf	(_runSTW+1)^0,w,c
   873  001B20  A4D8               	btfss	status,2,c
   874  001B22  EF95  F00D         	goto	u621
   875  001B26  EF97  F00D         	goto	u620
   876  001B2A                     u621:
   877  001B2A  EFA3  F00D         	goto	l1677
   878  001B2E                     u620:
   879  001B2E                     
   880                           ;stateStpWatch.c: 6:             miliSecSTW = 0;
   881  001B2E  0E00               	movlw	0
   882  001B30  6E10               	movwf	(_miliSecSTW+1)^0,c
   883  001B32  0E00               	movlw	0
   884  001B34  6E0F               	movwf	_miliSecSTW^0,c
   885                           
   886                           ;stateStpWatch.c: 7:             secSTW = 0;
   887  001B36  0E00               	movlw	0
   888  001B38  6E12               	movwf	(_secSTW+1)^0,c
   889  001B3A  0E00               	movlw	0
   890  001B3C  6E11               	movwf	_secSTW^0,c
   891                           
   892                           ;stateStpWatch.c: 8:             minSTW = 0;
   893  001B3E  0E00               	movlw	0
   894  001B40  6E14               	movwf	(_minSTW+1)^0,c
   895  001B42  0E00               	movlw	0
   896  001B44  6E13               	movwf	_minSTW^0,c
   897  001B46                     l1677:
   898                           
   899                           ;stateStpWatch.c: 10:         runSTW = (runSTW + 1) % 2;
   900  001B46  0E01               	movlw	1
   901  001B48  2415               	addwf	_runSTW^0,w,c
   902  001B4A  6E29               	movwf	??_stopWatch^0,c
   903  001B4C  0E00               	movlw	0
   904  001B4E  2016               	addwfc	(_runSTW+1)^0,w,c
   905  001B50  6E2A               	movwf	(??_stopWatch+1)^0,c
   906  001B52  0E01               	movlw	1
   907  001B54  1429               	andwf	??_stopWatch^0,w,c
   908  001B56  6E15               	movwf	_runSTW^0,c
   909  001B58  6A16               	clrf	(_runSTW+1)^0,c
   910  001B5A                     l1679:
   911                           
   912                           ;stateStpWatch.c: 12:     if (runSTW == 1) {
   913  001B5A  0415               	decf	_runSTW^0,w,c
   914  001B5C  1016               	iorwf	(_runSTW+1)^0,w,c
   915  001B5E  A4D8               	btfss	status,2,c
   916  001B60  EFB4  F00D         	goto	u631
   917  001B64  EFB6  F00D         	goto	u630
   918  001B68                     u631:
   919  001B68  EFEB  F00D         	goto	l482
   920  001B6C                     u630:
   921  001B6C                     
   922                           ;stateStpWatch.c: 15:             if (flag == 1) {
   923  001B6C  040B               	decf	_flag^0,w,c
   924  001B6E  100C               	iorwf	(_flag+1)^0,w,c
   925  001B70  A4D8               	btfss	status,2,c
   926  001B72  EFBD  F00D         	goto	u641
   927  001B76  EFBF  F00D         	goto	u640
   928  001B7A                     u641:
   929  001B7A  EFC5  F00D         	goto	l1687
   930  001B7E                     u640:
   931  001B7E                     
   932                           ;stateStpWatch.c: 16:                 flag = 0;
   933  001B7E  0E00               	movlw	0
   934  001B80  6E0C               	movwf	(_flag+1)^0,c
   935  001B82  0E00               	movlw	0
   936  001B84  6E0B               	movwf	_flag^0,c
   937  001B86                     
   938                           ;stateStpWatch.c: 17:                 secSTW++;
   939  001B86  4A11               	infsnz	_secSTW^0,f,c
   940  001B88  2A12               	incf	(_secSTW+1)^0,f,c
   941  001B8A                     l1687:
   942                           
   943                           ;stateStpWatch.c: 19:             if (secSTW >= 60) {
   944  001B8A  BE12               	btfsc	(_secSTW+1)^0,7,c
   945  001B8C  EFD1  F00D         	goto	u651
   946  001B90  5012               	movf	(_secSTW+1)^0,w,c
   947  001B92  E109               	bnz	u650
   948  001B94  0E3C               	movlw	60
   949  001B96  5C11               	subwf	_secSTW^0,w,c
   950  001B98  A0D8               	btfss	status,0,c
   951  001B9A  EFD1  F00D         	goto	u651
   952  001B9E  EFD3  F00D         	goto	u650
   953  001BA2                     u651:
   954  001BA2  EFD9  F00D         	goto	l1693
   955  001BA6                     u650:
   956  001BA6                     
   957                           ;stateStpWatch.c: 20:                 secSTW = 0;
   958  001BA6  0E00               	movlw	0
   959  001BA8  6E12               	movwf	(_secSTW+1)^0,c
   960  001BAA  0E00               	movlw	0
   961  001BAC  6E11               	movwf	_secSTW^0,c
   962  001BAE                     
   963                           ;stateStpWatch.c: 21:                 minSTW++;
   964  001BAE  4A13               	infsnz	_minSTW^0,f,c
   965  001BB0  2A14               	incf	(_minSTW+1)^0,f,c
   966  001BB2                     l1693:
   967                           
   968                           ;stateStpWatch.c: 23:             if (minSTW >= 60) {
   969  001BB2  BE14               	btfsc	(_minSTW+1)^0,7,c
   970  001BB4  EFE5  F00D         	goto	u661
   971  001BB8  5014               	movf	(_minSTW+1)^0,w,c
   972  001BBA  E109               	bnz	u660
   973  001BBC  0E3C               	movlw	60
   974  001BBE  5C13               	subwf	_minSTW^0,w,c
   975  001BC0  A0D8               	btfss	status,0,c
   976  001BC2  EFE5  F00D         	goto	u661
   977  001BC6  EFE7  F00D         	goto	u660
   978  001BCA                     u661:
   979  001BCA  EFEB  F00D         	goto	l482
   980  001BCE                     u660:
   981  001BCE                     
   982                           ;stateStpWatch.c: 24:                 minSTW = 0;
   983  001BCE  0E00               	movlw	0
   984  001BD0  6E14               	movwf	(_minSTW+1)^0,c
   985  001BD2  0E00               	movlw	0
   986  001BD4  6E13               	movwf	_minSTW^0,c
   987  001BD6                     l482:
   988  001BD6  0012               	return		;funcret
   989  001BD8                     __end_of_stopWatch:
   990                           	opt callstack 0
   991                           
   992 ;; *************** function _oscillationInitialize *****************
   993 ;; Defined at:
   994 ;;		line 3 in file "system.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;		None
   997 ;; Auto vars:     Size  Location     Type
   998 ;;		None
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, status,2
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1012 ;;Total ram usage:        0 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    3
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           	psect	text3
  1023  0022BA                     __ptext3:
  1024                           	opt callstack 0
  1025  0022BA                     _oscillationInitialize:
  1026                           	opt callstack 27
  1027  0022BA                     
  1028                           ;system.c: 5:     OSCCON = 0b01110111;
  1029  0022BA  0E77               	movlw	119
  1030  0022BC  6ED3               	movwf	211,c	;volatile
  1031                           
  1032                           ;system.c: 6:     OSCTUNE = 0b00001111;
  1033  0022BE  0E0F               	movlw	15
  1034  0022C0  6E9B               	movwf	155,c	;volatile
  1035  0022C2  0012               	return		;funcret
  1036  0022C4                     __end_of_oscillationInitialize:
  1037                           	opt callstack 0
  1038                           
  1039 ;; *************** function _norClock *****************
  1040 ;; Defined at:
  1041 ;;		line 3 in file "stateClock.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, status,2, status,0
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;Total ram usage:        0 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    3
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           	psect	text4
  1070  001EDC                     __ptext4:
  1071                           	opt callstack 0
  1072  001EDC                     _norClock:
  1073                           	opt callstack 27
  1074  001EDC                     
  1075                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1076  001EDC  BE0E               	btfsc	(_count10ms+1)^0,7,c
  1077  001EDE  EF7A  F00F         	goto	u211
  1078  001EE2  500E               	movf	(_count10ms+1)^0,w,c
  1079  001EE4  E109               	bnz	u210
  1080  001EE6  0E64               	movlw	100
  1081  001EE8  5C0D               	subwf	_count10ms^0,w,c
  1082  001EEA  A0D8               	btfss	status,0,c
  1083  001EEC  EF7A  F00F         	goto	u211
  1084  001EF0  EF7C  F00F         	goto	u210
  1085  001EF4                     u211:
  1086  001EF4  EFBC  F00F         	goto	l308
  1087  001EF8                     u210:
  1088  001EF8                     
  1089                           ;stateClock.c: 5:         count10ms = 0;
  1090  001EF8  0E00               	movlw	0
  1091  001EFA  6E0E               	movwf	(_count10ms+1)^0,c
  1092  001EFC  0E00               	movlw	0
  1093  001EFE  6E0D               	movwf	_count10ms^0,c
  1094  001F00                     
  1095                           ;stateClock.c: 6:         sec++;
  1096  001F00  4A09               	infsnz	_sec^0,f,c
  1097  001F02  2A0A               	incf	(_sec+1)^0,f,c
  1098  001F04                     
  1099                           ;stateClock.c: 7:         if (sec >= 60) {
  1100  001F04  BE0A               	btfsc	(_sec+1)^0,7,c
  1101  001F06  EF8E  F00F         	goto	u221
  1102  001F0A  500A               	movf	(_sec+1)^0,w,c
  1103  001F0C  E109               	bnz	u220
  1104  001F0E  0E3C               	movlw	60
  1105  001F10  5C09               	subwf	_sec^0,w,c
  1106  001F12  A0D8               	btfss	status,0,c
  1107  001F14  EF8E  F00F         	goto	u221
  1108  001F18  EF90  F00F         	goto	u220
  1109  001F1C                     u221:
  1110  001F1C  EF96  F00F         	goto	l1415
  1111  001F20                     u220:
  1112  001F20                     
  1113                           ;stateClock.c: 8:             sec = 0;
  1114  001F20  0E00               	movlw	0
  1115  001F22  6E0A               	movwf	(_sec+1)^0,c
  1116  001F24  0E00               	movlw	0
  1117  001F26  6E09               	movwf	_sec^0,c
  1118  001F28                     
  1119                           ;stateClock.c: 9:             min++;
  1120  001F28  4A07               	infsnz	_min^0,f,c
  1121  001F2A  2A08               	incf	(_min+1)^0,f,c
  1122  001F2C                     l1415:
  1123                           
  1124                           ;stateClock.c: 11:         if (min >= 60) {
  1125  001F2C  BE08               	btfsc	(_min+1)^0,7,c
  1126  001F2E  EFA2  F00F         	goto	u231
  1127  001F32  5008               	movf	(_min+1)^0,w,c
  1128  001F34  E109               	bnz	u230
  1129  001F36  0E3C               	movlw	60
  1130  001F38  5C07               	subwf	_min^0,w,c
  1131  001F3A  A0D8               	btfss	status,0,c
  1132  001F3C  EFA2  F00F         	goto	u231
  1133  001F40  EFA4  F00F         	goto	u230
  1134  001F44                     u231:
  1135  001F44  EFAA  F00F         	goto	l1421
  1136  001F48                     u230:
  1137  001F48                     
  1138                           ;stateClock.c: 12:             min = 0;
  1139  001F48  0E00               	movlw	0
  1140  001F4A  6E08               	movwf	(_min+1)^0,c
  1141  001F4C  0E00               	movlw	0
  1142  001F4E  6E07               	movwf	_min^0,c
  1143  001F50                     
  1144                           ;stateClock.c: 13:             hr++;
  1145  001F50  4A05               	infsnz	_hr^0,f,c
  1146  001F52  2A06               	incf	(_hr+1)^0,f,c
  1147  001F54                     l1421:
  1148                           
  1149                           ;stateClock.c: 15:         if (hr >= 24) {
  1150  001F54  BE06               	btfsc	(_hr+1)^0,7,c
  1151  001F56  EFB6  F00F         	goto	u241
  1152  001F5A  5006               	movf	(_hr+1)^0,w,c
  1153  001F5C  E109               	bnz	u240
  1154  001F5E  0E18               	movlw	24
  1155  001F60  5C05               	subwf	_hr^0,w,c
  1156  001F62  A0D8               	btfss	status,0,c
  1157  001F64  EFB6  F00F         	goto	u241
  1158  001F68  EFB8  F00F         	goto	u240
  1159  001F6C                     u241:
  1160  001F6C  EFBC  F00F         	goto	l308
  1161  001F70                     u240:
  1162  001F70                     
  1163                           ;stateClock.c: 16:             hr = 0;
  1164  001F70  0E00               	movlw	0
  1165  001F72  6E06               	movwf	(_hr+1)^0,c
  1166  001F74  0E00               	movlw	0
  1167  001F76  6E05               	movwf	_hr^0,c
  1168  001F78                     l308:
  1169  001F78  0012               	return		;funcret
  1170  001F7A                     __end_of_norClock:
  1171                           	opt callstack 0
  1172                           
  1173 ;; *************** function _modifySecond *****************
  1174 ;; Defined at:
  1175 ;;		line 68 in file "statesModify.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;		None
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1192 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1193 ;;Total ram usage:        2 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    3
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text5
  1204  00168A                     __ptext5:
  1205                           	opt callstack 0
  1206  00168A                     _modifySecond:
  1207                           	opt callstack 27
  1208  00168A                     
  1209                           ;statesModify.c: 69:     switch (stModify) {
  1210  00168A  EFB1  F00B         	goto	l1621
  1211  00168E                     l1589:
  1212                           
  1213                           ;statesModify.c: 71:             if (changeModePressed == 0 && countPressed > 0) {
  1214  00168E  5019               	movf	_changeModePressed^0,w,c
  1215  001690  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1216  001692  A4D8               	btfss	status,2,c
  1217  001694  EF4E  F00B         	goto	u491
  1218  001698  EF50  F00B         	goto	u490
  1219  00169C                     u491:
  1220  00169C  EFCA  F00B         	goto	l1623
  1221  0016A0                     u490:
  1222  0016A0  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1223  0016A2  EF5B  F00B         	goto	u501
  1224  0016A6  501E               	movf	(_countPressed+1)^0,w,c
  1225  0016A8  E108               	bnz	u500
  1226  0016AA  041D               	decf	_countPressed^0,w,c
  1227  0016AC  A0D8               	btfss	status,0,c
  1228  0016AE  EF5B  F00B         	goto	u501
  1229  0016B2  EF5D  F00B         	goto	u500
  1230  0016B6                     u501:
  1231  0016B6  EFCA  F00B         	goto	l1623
  1232  0016BA                     u500:
  1233  0016BA                     
  1234                           ;statesModify.c: 72:                 sec++;
  1235  0016BA  4A09               	infsnz	_sec^0,f,c
  1236  0016BC  2A0A               	incf	(_sec+1)^0,f,c
  1237  0016BE                     
  1238                           ;statesModify.c: 73:                 stModify = iNor;
  1239  0016BE  0E01               	movlw	1
  1240  0016C0  6E1F               	movwf	_stModify^0,c
  1241  0016C2  EFCA  F00B         	goto	l1623
  1242  0016C6                     l1597:
  1243                           
  1244                           ;statesModify.c: 77:             if (countPressed == 0 || changeModePressed == 1) {
  1245  0016C6  501D               	movf	_countPressed^0,w,c
  1246  0016C8  101E               	iorwf	(_countPressed+1)^0,w,c
  1247  0016CA  B4D8               	btfsc	status,2,c
  1248  0016CC  EF6A  F00B         	goto	u511
  1249  0016D0  EF6C  F00B         	goto	u510
  1250  0016D4                     u511:
  1251  0016D4  EF75  F00B         	goto	l1601
  1252  0016D8                     u510:
  1253  0016D8  0419               	decf	_changeModePressed^0,w,c
  1254  0016DA  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1255  0016DC  A4D8               	btfss	status,2,c
  1256  0016DE  EF73  F00B         	goto	u521
  1257  0016E2  EF75  F00B         	goto	u520
  1258  0016E6                     u521:
  1259  0016E6  EF77  F00B         	goto	l1603
  1260  0016EA                     u520:
  1261  0016EA                     l1601:
  1262                           
  1263                           ;statesModify.c: 78:                 stModify = init;
  1264  0016EA  0E00               	movlw	0
  1265  0016EC  6E1F               	movwf	_stModify^0,c
  1266  0016EE                     l1603:
  1267                           
  1268                           ;statesModify.c: 80:             if (countAuto > 0) {
  1269  0016EE  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1270  0016F0  EF82  F00B         	goto	u531
  1271  0016F4  501C               	movf	(_countAuto+1)^0,w,c
  1272  0016F6  E108               	bnz	u530
  1273  0016F8  041B               	decf	_countAuto^0,w,c
  1274  0016FA  A0D8               	btfss	status,0,c
  1275  0016FC  EF82  F00B         	goto	u531
  1276  001700  EF84  F00B         	goto	u530
  1277  001704                     u531:
  1278  001704  EFCA  F00B         	goto	l1623
  1279  001708                     u530:
  1280  001708                     
  1281                           ;statesModify.c: 81:                 increaseTime = 1;
  1282  001708  0E00               	movlw	0
  1283  00170A  6E18               	movwf	(_increaseTime+1)^0,c
  1284  00170C  0E01               	movlw	1
  1285  00170E  6E17               	movwf	_increaseTime^0,c
  1286                           
  1287                           ;statesModify.c: 82:                 stModify = iAuto;
  1288  001710  0E02               	movlw	2
  1289  001712  6E1F               	movwf	_stModify^0,c
  1290  001714  EFCA  F00B         	goto	l1623
  1291  001718                     l1607:
  1292                           
  1293                           ;statesModify.c: 86:             if (countPressed == 0 || changeModePressed == 1) {
  1294  001718  501D               	movf	_countPressed^0,w,c
  1295  00171A  101E               	iorwf	(_countPressed+1)^0,w,c
  1296  00171C  B4D8               	btfsc	status,2,c
  1297  00171E  EF93  F00B         	goto	u541
  1298  001722  EF95  F00B         	goto	u540
  1299  001726                     u541:
  1300  001726  EF9E  F00B         	goto	l1611
  1301  00172A                     u540:
  1302  00172A  0419               	decf	_changeModePressed^0,w,c
  1303  00172C  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1304  00172E  A4D8               	btfss	status,2,c
  1305  001730  EF9C  F00B         	goto	u551
  1306  001734  EF9E  F00B         	goto	u550
  1307  001738                     u551:
  1308  001738  EFA0  F00B         	goto	l1613
  1309  00173C                     u550:
  1310  00173C                     l1611:
  1311                           
  1312                           ;statesModify.c: 87:                 stModify = init;
  1313  00173C  0E00               	movlw	0
  1314  00173E  6E1F               	movwf	_stModify^0,c
  1315  001740                     l1613:
  1316                           
  1317                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1318  001740  0417               	decf	_increaseTime^0,w,c
  1319  001742  1018               	iorwf	(_increaseTime+1)^0,w,c
  1320  001744  A4D8               	btfss	status,2,c
  1321  001746  EFA7  F00B         	goto	u561
  1322  00174A  EFA9  F00B         	goto	u560
  1323  00174E                     u561:
  1324  00174E  EFCA  F00B         	goto	l1623
  1325  001752                     u560:
  1326  001752                     
  1327                           ;statesModify.c: 90:                 increaseTime = 0;
  1328  001752  0E00               	movlw	0
  1329  001754  6E18               	movwf	(_increaseTime+1)^0,c
  1330  001756  0E00               	movlw	0
  1331  001758  6E17               	movwf	_increaseTime^0,c
  1332  00175A                     
  1333                           ;statesModify.c: 91:                 sec++;
  1334  00175A  4A09               	infsnz	_sec^0,f,c
  1335  00175C  2A0A               	incf	(_sec+1)^0,f,c
  1336  00175E  EFCA  F00B         	goto	l1623
  1337  001762                     l1621:
  1338  001762  501F               	movf	_stModify^0,w,c
  1339  001764  6E29               	movwf	??_modifySecond^0,c
  1340  001766  6A2A               	clrf	(??_modifySecond+1)^0,c
  1341                           
  1342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1343                           ; Switch size 1, requested type "simple"
  1344                           ; Number of cases is 1, Range of values is 0 to 0
  1345                           ; switch strategies available:
  1346                           ; Name         Instructions Cycles
  1347                           ; simple_byte            4     3 (average)
  1348                           ;	Chosen strategy is simple_byte
  1349  001768  502A               	movf	(??_modifySecond+1)^0,w,c
  1350  00176A  0A00               	xorlw	0	; case 0
  1351  00176C  B4D8               	btfsc	status,2,c
  1352  00176E  EFBB  F00B         	goto	l2279
  1353  001772  EFCA  F00B         	goto	l1623
  1354  001776                     l2279:
  1355                           
  1356                           ; Switch size 1, requested type "simple"
  1357                           ; Number of cases is 3, Range of values is 0 to 2
  1358                           ; switch strategies available:
  1359                           ; Name         Instructions Cycles
  1360                           ; simple_byte           10     6 (average)
  1361                           ;	Chosen strategy is simple_byte
  1362  001776  5029               	movf	??_modifySecond^0,w,c
  1363  001778  0A00               	xorlw	0	; case 0
  1364  00177A  B4D8               	btfsc	status,2,c
  1365  00177C  EF47  F00B         	goto	l1589
  1366  001780  0A01               	xorlw	1	; case 1
  1367  001782  B4D8               	btfsc	status,2,c
  1368  001784  EF63  F00B         	goto	l1597
  1369  001788  0A03               	xorlw	3	; case 2
  1370  00178A  B4D8               	btfsc	status,2,c
  1371  00178C  EF8C  F00B         	goto	l1607
  1372  001790  EFCA  F00B         	goto	l1623
  1373  001794                     l1623:
  1374                           
  1375                           ;statesModify.c: 95:     if (sec >= 60) {
  1376  001794  BE0A               	btfsc	(_sec+1)^0,7,c
  1377  001796  EFD6  F00B         	goto	u571
  1378  00179A  500A               	movf	(_sec+1)^0,w,c
  1379  00179C  E109               	bnz	u570
  1380  00179E  0E3C               	movlw	60
  1381  0017A0  5C09               	subwf	_sec^0,w,c
  1382  0017A2  A0D8               	btfss	status,0,c
  1383  0017A4  EFD6  F00B         	goto	u571
  1384  0017A8  EFD8  F00B         	goto	u570
  1385  0017AC                     u571:
  1386  0017AC  EFDC  F00B         	goto	l413
  1387  0017B0                     u570:
  1388  0017B0                     
  1389                           ;statesModify.c: 96:         sec = 0;
  1390  0017B0  0E00               	movlw	0
  1391  0017B2  6E0A               	movwf	(_sec+1)^0,c
  1392  0017B4  0E00               	movlw	0
  1393  0017B6  6E09               	movwf	_sec^0,c
  1394  0017B8                     l413:
  1395  0017B8  0012               	return		;funcret
  1396  0017BA                     __end_of_modifySecond:
  1397                           	opt callstack 0
  1398                           
  1399 ;; *************** function _modifyMinute *****************
  1400 ;; Defined at:
  1401 ;;		line 36 in file "statesModify.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        2 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    3
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text6
  1430  0017BA                     __ptext6:
  1431                           	opt callstack 0
  1432  0017BA                     _modifyMinute:
  1433                           	opt callstack 27
  1434  0017BA                     
  1435                           ;statesModify.c: 37:     switch (stModify) {
  1436  0017BA  EF49  F00C         	goto	l1547
  1437  0017BE                     l1515:
  1438                           
  1439                           ;statesModify.c: 39:             if (changeModePressed == 0 && countPressed > 0) {
  1440  0017BE  5019               	movf	_changeModePressed^0,w,c
  1441  0017C0  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1442  0017C2  A4D8               	btfss	status,2,c
  1443  0017C4  EFE6  F00B         	goto	u371
  1444  0017C8  EFE8  F00B         	goto	u370
  1445  0017CC                     u371:
  1446  0017CC  EF62  F00C         	goto	l1549
  1447  0017D0                     u370:
  1448  0017D0  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1449  0017D2  EFF3  F00B         	goto	u381
  1450  0017D6  501E               	movf	(_countPressed+1)^0,w,c
  1451  0017D8  E108               	bnz	u380
  1452  0017DA  041D               	decf	_countPressed^0,w,c
  1453  0017DC  A0D8               	btfss	status,0,c
  1454  0017DE  EFF3  F00B         	goto	u381
  1455  0017E2  EFF5  F00B         	goto	u380
  1456  0017E6                     u381:
  1457  0017E6  EF62  F00C         	goto	l1549
  1458  0017EA                     u380:
  1459  0017EA                     
  1460                           ;statesModify.c: 40:                 min++;
  1461  0017EA  4A07               	infsnz	_min^0,f,c
  1462  0017EC  2A08               	incf	(_min+1)^0,f,c
  1463  0017EE                     
  1464                           ;statesModify.c: 41:                 stModify = iNor;
  1465  0017EE  0E01               	movlw	1
  1466  0017F0  6E1F               	movwf	_stModify^0,c
  1467  0017F2  EF62  F00C         	goto	l1549
  1468  0017F6                     l1523:
  1469                           
  1470                           ;statesModify.c: 45:             if (countPressed == 0 || changeModePressed == 1) {
  1471  0017F6  501D               	movf	_countPressed^0,w,c
  1472  0017F8  101E               	iorwf	(_countPressed+1)^0,w,c
  1473  0017FA  B4D8               	btfsc	status,2,c
  1474  0017FC  EF02  F00C         	goto	u391
  1475  001800  EF04  F00C         	goto	u390
  1476  001804                     u391:
  1477  001804  EF0D  F00C         	goto	l1527
  1478  001808                     u390:
  1479  001808  0419               	decf	_changeModePressed^0,w,c
  1480  00180A  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1481  00180C  A4D8               	btfss	status,2,c
  1482  00180E  EF0B  F00C         	goto	u401
  1483  001812  EF0D  F00C         	goto	u400
  1484  001816                     u401:
  1485  001816  EF0F  F00C         	goto	l1529
  1486  00181A                     u400:
  1487  00181A                     l1527:
  1488                           
  1489                           ;statesModify.c: 46:                 stModify = init;
  1490  00181A  0E00               	movlw	0
  1491  00181C  6E1F               	movwf	_stModify^0,c
  1492  00181E                     l1529:
  1493                           
  1494                           ;statesModify.c: 48:             if (countAuto > 0) {
  1495  00181E  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1496  001820  EF1A  F00C         	goto	u411
  1497  001824  501C               	movf	(_countAuto+1)^0,w,c
  1498  001826  E108               	bnz	u410
  1499  001828  041B               	decf	_countAuto^0,w,c
  1500  00182A  A0D8               	btfss	status,0,c
  1501  00182C  EF1A  F00C         	goto	u411
  1502  001830  EF1C  F00C         	goto	u410
  1503  001834                     u411:
  1504  001834  EF62  F00C         	goto	l1549
  1505  001838                     u410:
  1506  001838                     
  1507                           ;statesModify.c: 49:                 increaseTime = 1;
  1508  001838  0E00               	movlw	0
  1509  00183A  6E18               	movwf	(_increaseTime+1)^0,c
  1510  00183C  0E01               	movlw	1
  1511  00183E  6E17               	movwf	_increaseTime^0,c
  1512                           
  1513                           ;statesModify.c: 50:                 stModify = iAuto;
  1514  001840  0E02               	movlw	2
  1515  001842  6E1F               	movwf	_stModify^0,c
  1516  001844  EF62  F00C         	goto	l1549
  1517  001848                     l1533:
  1518                           
  1519                           ;statesModify.c: 54:             if (countPressed == 0 || changeModePressed == 1) {
  1520  001848  501D               	movf	_countPressed^0,w,c
  1521  00184A  101E               	iorwf	(_countPressed+1)^0,w,c
  1522  00184C  B4D8               	btfsc	status,2,c
  1523  00184E  EF2B  F00C         	goto	u421
  1524  001852  EF2D  F00C         	goto	u420
  1525  001856                     u421:
  1526  001856  EF36  F00C         	goto	l1537
  1527  00185A                     u420:
  1528  00185A  0419               	decf	_changeModePressed^0,w,c
  1529  00185C  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1530  00185E  A4D8               	btfss	status,2,c
  1531  001860  EF34  F00C         	goto	u431
  1532  001864  EF36  F00C         	goto	u430
  1533  001868                     u431:
  1534  001868  EF38  F00C         	goto	l1539
  1535  00186C                     u430:
  1536  00186C                     l1537:
  1537                           
  1538                           ;statesModify.c: 55:                 stModify = init;
  1539  00186C  0E00               	movlw	0
  1540  00186E  6E1F               	movwf	_stModify^0,c
  1541  001870                     l1539:
  1542                           
  1543                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1544  001870  0417               	decf	_increaseTime^0,w,c
  1545  001872  1018               	iorwf	(_increaseTime+1)^0,w,c
  1546  001874  A4D8               	btfss	status,2,c
  1547  001876  EF3F  F00C         	goto	u441
  1548  00187A  EF41  F00C         	goto	u440
  1549  00187E                     u441:
  1550  00187E  EF62  F00C         	goto	l1549
  1551  001882                     u440:
  1552  001882                     
  1553                           ;statesModify.c: 58:                 increaseTime = 0;
  1554  001882  0E00               	movlw	0
  1555  001884  6E18               	movwf	(_increaseTime+1)^0,c
  1556  001886  0E00               	movlw	0
  1557  001888  6E17               	movwf	_increaseTime^0,c
  1558  00188A                     
  1559                           ;statesModify.c: 59:                 min++;
  1560  00188A  4A07               	infsnz	_min^0,f,c
  1561  00188C  2A08               	incf	(_min+1)^0,f,c
  1562  00188E  EF62  F00C         	goto	l1549
  1563  001892                     l1547:
  1564  001892  501F               	movf	_stModify^0,w,c
  1565  001894  6E29               	movwf	??_modifyMinute^0,c
  1566  001896  6A2A               	clrf	(??_modifyMinute+1)^0,c
  1567                           
  1568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1569                           ; Switch size 1, requested type "simple"
  1570                           ; Number of cases is 1, Range of values is 0 to 0
  1571                           ; switch strategies available:
  1572                           ; Name         Instructions Cycles
  1573                           ; simple_byte            4     3 (average)
  1574                           ;	Chosen strategy is simple_byte
  1575  001898  502A               	movf	(??_modifyMinute+1)^0,w,c
  1576  00189A  0A00               	xorlw	0	; case 0
  1577  00189C  B4D8               	btfsc	status,2,c
  1578  00189E  EF53  F00C         	goto	l2281
  1579  0018A2  EF62  F00C         	goto	l1549
  1580  0018A6                     l2281:
  1581                           
  1582                           ; Switch size 1, requested type "simple"
  1583                           ; Number of cases is 3, Range of values is 0 to 2
  1584                           ; switch strategies available:
  1585                           ; Name         Instructions Cycles
  1586                           ; simple_byte           10     6 (average)
  1587                           ;	Chosen strategy is simple_byte
  1588  0018A6  5029               	movf	??_modifyMinute^0,w,c
  1589  0018A8  0A00               	xorlw	0	; case 0
  1590  0018AA  B4D8               	btfsc	status,2,c
  1591  0018AC  EFDF  F00B         	goto	l1515
  1592  0018B0  0A01               	xorlw	1	; case 1
  1593  0018B2  B4D8               	btfsc	status,2,c
  1594  0018B4  EFFB  F00B         	goto	l1523
  1595  0018B8  0A03               	xorlw	3	; case 2
  1596  0018BA  B4D8               	btfsc	status,2,c
  1597  0018BC  EF24  F00C         	goto	l1533
  1598  0018C0  EF62  F00C         	goto	l1549
  1599  0018C4                     l1549:
  1600                           
  1601                           ;statesModify.c: 63:     if (min >= 60) {
  1602  0018C4  BE08               	btfsc	(_min+1)^0,7,c
  1603  0018C6  EF6E  F00C         	goto	u451
  1604  0018CA  5008               	movf	(_min+1)^0,w,c
  1605  0018CC  E109               	bnz	u450
  1606  0018CE  0E3C               	movlw	60
  1607  0018D0  5C07               	subwf	_min^0,w,c
  1608  0018D2  A0D8               	btfss	status,0,c
  1609  0018D4  EF6E  F00C         	goto	u451
  1610  0018D8  EF70  F00C         	goto	u450
  1611  0018DC                     u451:
  1612  0018DC  EF74  F00C         	goto	l395
  1613  0018E0                     u450:
  1614  0018E0                     
  1615                           ;statesModify.c: 64:         min = 0;
  1616  0018E0  0E00               	movlw	0
  1617  0018E2  6E08               	movwf	(_min+1)^0,c
  1618  0018E4  0E00               	movlw	0
  1619  0018E6  6E07               	movwf	_min^0,c
  1620  0018E8                     l395:
  1621  0018E8  0012               	return		;funcret
  1622  0018EA                     __end_of_modifyMinute:
  1623                           	opt callstack 0
  1624                           
  1625 ;; *************** function _modifyHour *****************
  1626 ;; Defined at:
  1627 ;;		line 4 in file "statesModify.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;Total ram usage:        2 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    3
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		_main
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text7
  1656  0018EA                     __ptext7:
  1657                           	opt callstack 0
  1658  0018EA                     _modifyHour:
  1659                           	opt callstack 27
  1660  0018EA                     
  1661                           ;statesModify.c: 5:     switch (stModify) {
  1662  0018EA  EFE1  F00C         	goto	l1481
  1663  0018EE                     l1449:
  1664                           
  1665                           ;statesModify.c: 7:             if (changeModePressed == 0 && countPressed > 0) {
  1666  0018EE  5019               	movf	_changeModePressed^0,w,c
  1667  0018F0  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1668  0018F2  A4D8               	btfss	status,2,c
  1669  0018F4  EF7E  F00C         	goto	u251
  1670  0018F8  EF80  F00C         	goto	u250
  1671  0018FC                     u251:
  1672  0018FC  EFFA  F00C         	goto	l1483
  1673  001900                     u250:
  1674  001900  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1675  001902  EF8B  F00C         	goto	u261
  1676  001906  501E               	movf	(_countPressed+1)^0,w,c
  1677  001908  E108               	bnz	u260
  1678  00190A  041D               	decf	_countPressed^0,w,c
  1679  00190C  A0D8               	btfss	status,0,c
  1680  00190E  EF8B  F00C         	goto	u261
  1681  001912  EF8D  F00C         	goto	u260
  1682  001916                     u261:
  1683  001916  EFFA  F00C         	goto	l1483
  1684  00191A                     u260:
  1685  00191A                     
  1686                           ;statesModify.c: 8:                 hr++;
  1687  00191A  4A05               	infsnz	_hr^0,f,c
  1688  00191C  2A06               	incf	(_hr+1)^0,f,c
  1689  00191E                     
  1690                           ;statesModify.c: 9:                 stModify = iNor;
  1691  00191E  0E01               	movlw	1
  1692  001920  6E1F               	movwf	_stModify^0,c
  1693  001922  EFFA  F00C         	goto	l1483
  1694  001926                     l1457:
  1695                           
  1696                           ;statesModify.c: 13:             if (countPressed == 0 || changeModePressed == 1) {
  1697  001926  501D               	movf	_countPressed^0,w,c
  1698  001928  101E               	iorwf	(_countPressed+1)^0,w,c
  1699  00192A  B4D8               	btfsc	status,2,c
  1700  00192C  EF9A  F00C         	goto	u271
  1701  001930  EF9C  F00C         	goto	u270
  1702  001934                     u271:
  1703  001934  EFA5  F00C         	goto	l1461
  1704  001938                     u270:
  1705  001938  0419               	decf	_changeModePressed^0,w,c
  1706  00193A  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1707  00193C  A4D8               	btfss	status,2,c
  1708  00193E  EFA3  F00C         	goto	u281
  1709  001942  EFA5  F00C         	goto	u280
  1710  001946                     u281:
  1711  001946  EFA7  F00C         	goto	l1463
  1712  00194A                     u280:
  1713  00194A                     l1461:
  1714                           
  1715                           ;statesModify.c: 14:                 stModify = init;
  1716  00194A  0E00               	movlw	0
  1717  00194C  6E1F               	movwf	_stModify^0,c
  1718  00194E                     l1463:
  1719                           
  1720                           ;statesModify.c: 16:             if (countAuto > 0) {
  1721  00194E  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1722  001950  EFB2  F00C         	goto	u291
  1723  001954  501C               	movf	(_countAuto+1)^0,w,c
  1724  001956  E108               	bnz	u290
  1725  001958  041B               	decf	_countAuto^0,w,c
  1726  00195A  A0D8               	btfss	status,0,c
  1727  00195C  EFB2  F00C         	goto	u291
  1728  001960  EFB4  F00C         	goto	u290
  1729  001964                     u291:
  1730  001964  EFFA  F00C         	goto	l1483
  1731  001968                     u290:
  1732  001968                     
  1733                           ;statesModify.c: 17:                 increaseTime = 1;
  1734  001968  0E00               	movlw	0
  1735  00196A  6E18               	movwf	(_increaseTime+1)^0,c
  1736  00196C  0E01               	movlw	1
  1737  00196E  6E17               	movwf	_increaseTime^0,c
  1738                           
  1739                           ;statesModify.c: 18:                 stModify = iAuto;
  1740  001970  0E02               	movlw	2
  1741  001972  6E1F               	movwf	_stModify^0,c
  1742  001974  EFFA  F00C         	goto	l1483
  1743  001978                     l1467:
  1744                           
  1745                           ;statesModify.c: 22:             if (countPressed == 0 || changeModePressed == 1) {
  1746  001978  501D               	movf	_countPressed^0,w,c
  1747  00197A  101E               	iorwf	(_countPressed+1)^0,w,c
  1748  00197C  B4D8               	btfsc	status,2,c
  1749  00197E  EFC3  F00C         	goto	u301
  1750  001982  EFC5  F00C         	goto	u300
  1751  001986                     u301:
  1752  001986  EFCE  F00C         	goto	l1471
  1753  00198A                     u300:
  1754  00198A  0419               	decf	_changeModePressed^0,w,c
  1755  00198C  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1756  00198E  A4D8               	btfss	status,2,c
  1757  001990  EFCC  F00C         	goto	u311
  1758  001994  EFCE  F00C         	goto	u310
  1759  001998                     u311:
  1760  001998  EFD0  F00C         	goto	l1473
  1761  00199C                     u310:
  1762  00199C                     l1471:
  1763                           
  1764                           ;statesModify.c: 23:                 stModify = init;
  1765  00199C  0E00               	movlw	0
  1766  00199E  6E1F               	movwf	_stModify^0,c
  1767  0019A0                     l1473:
  1768                           
  1769                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1770  0019A0  0417               	decf	_increaseTime^0,w,c
  1771  0019A2  1018               	iorwf	(_increaseTime+1)^0,w,c
  1772  0019A4  A4D8               	btfss	status,2,c
  1773  0019A6  EFD7  F00C         	goto	u321
  1774  0019AA  EFD9  F00C         	goto	u320
  1775  0019AE                     u321:
  1776  0019AE  EFFA  F00C         	goto	l1483
  1777  0019B2                     u320:
  1778  0019B2                     
  1779                           ;statesModify.c: 26:                 increaseTime = 0;
  1780  0019B2  0E00               	movlw	0
  1781  0019B4  6E18               	movwf	(_increaseTime+1)^0,c
  1782  0019B6  0E00               	movlw	0
  1783  0019B8  6E17               	movwf	_increaseTime^0,c
  1784  0019BA                     
  1785                           ;statesModify.c: 27:                 hr++;
  1786  0019BA  4A05               	infsnz	_hr^0,f,c
  1787  0019BC  2A06               	incf	(_hr+1)^0,f,c
  1788  0019BE  EFFA  F00C         	goto	l1483
  1789  0019C2                     l1481:
  1790  0019C2  501F               	movf	_stModify^0,w,c
  1791  0019C4  6E29               	movwf	??_modifyHour^0,c
  1792  0019C6  6A2A               	clrf	(??_modifyHour+1)^0,c
  1793                           
  1794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1795                           ; Switch size 1, requested type "simple"
  1796                           ; Number of cases is 1, Range of values is 0 to 0
  1797                           ; switch strategies available:
  1798                           ; Name         Instructions Cycles
  1799                           ; simple_byte            4     3 (average)
  1800                           ;	Chosen strategy is simple_byte
  1801  0019C8  502A               	movf	(??_modifyHour+1)^0,w,c
  1802  0019CA  0A00               	xorlw	0	; case 0
  1803  0019CC  B4D8               	btfsc	status,2,c
  1804  0019CE  EFEB  F00C         	goto	l2283
  1805  0019D2  EFFA  F00C         	goto	l1483
  1806  0019D6                     l2283:
  1807                           
  1808                           ; Switch size 1, requested type "simple"
  1809                           ; Number of cases is 3, Range of values is 0 to 2
  1810                           ; switch strategies available:
  1811                           ; Name         Instructions Cycles
  1812                           ; simple_byte           10     6 (average)
  1813                           ;	Chosen strategy is simple_byte
  1814  0019D6  5029               	movf	??_modifyHour^0,w,c
  1815  0019D8  0A00               	xorlw	0	; case 0
  1816  0019DA  B4D8               	btfsc	status,2,c
  1817  0019DC  EF77  F00C         	goto	l1449
  1818  0019E0  0A01               	xorlw	1	; case 1
  1819  0019E2  B4D8               	btfsc	status,2,c
  1820  0019E4  EF93  F00C         	goto	l1457
  1821  0019E8  0A03               	xorlw	3	; case 2
  1822  0019EA  B4D8               	btfsc	status,2,c
  1823  0019EC  EFBC  F00C         	goto	l1467
  1824  0019F0  EFFA  F00C         	goto	l1483
  1825  0019F4                     l1483:
  1826                           
  1827                           ;statesModify.c: 31:     if (hr >= 24) {
  1828  0019F4  BE06               	btfsc	(_hr+1)^0,7,c
  1829  0019F6  EF06  F00D         	goto	u331
  1830  0019FA  5006               	movf	(_hr+1)^0,w,c
  1831  0019FC  E109               	bnz	u330
  1832  0019FE  0E18               	movlw	24
  1833  001A00  5C05               	subwf	_hr^0,w,c
  1834  001A02  A0D8               	btfss	status,0,c
  1835  001A04  EF06  F00D         	goto	u331
  1836  001A08  EF08  F00D         	goto	u330
  1837  001A0C                     u331:
  1838  001A0C  EF0C  F00D         	goto	l377
  1839  001A10                     u330:
  1840  001A10                     
  1841                           ;statesModify.c: 32:         hr = 0;
  1842  001A10  0E00               	movlw	0
  1843  001A12  6E06               	movwf	(_hr+1)^0,c
  1844  001A14  0E00               	movlw	0
  1845  001A16  6E05               	movwf	_hr^0,c
  1846  001A18                     l377:
  1847  001A18  0012               	return		;funcret
  1848  001A1A                     __end_of_modifyHour:
  1849                           	opt callstack 0
  1850                           
  1851 ;; *************** function _displayStpWatch *****************
  1852 ;; Defined at:
  1853 ;;		line 30 in file "stateStpWatch.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;Total ram usage:        0 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    7
  1874 ;; This function calls:
  1875 ;;		_LCDPutChar
  1876 ;;		_LCDPutInst
  1877 ;;		_LCDPutStr
  1878 ;;		___awdiv
  1879 ;;		___awmod
  1880 ;; This function is called by:
  1881 ;;		_main
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text8
  1886  001A1A                     __ptext8:
  1887                           	opt callstack 0
  1888  001A1A                     _displayStpWatch:
  1889                           	opt callstack 23
  1890  001A1A                     
  1891                           ;stateStpWatch.c: 32:     LCDPutInst(0x80);
  1892  001A1A  0E80               	movlw	128
  1893  001A1C  EC5B  F010         	call	_LCDPutInst
  1894  001A20                     
  1895                           ;stateStpWatch.c: 33:     LCDPutStr("   STOP WATCH   ");
  1896  001A20  0E01               	movlw	low STR_5
  1897  001A22  6E30               	movwf	LCDPutStr@ptr^0,c
  1898  001A24  0E10               	movlw	high STR_5
  1899  001A26  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  1900  001A28  ECF6  F010         	call	_LCDPutStr	;wreg free
  1901  001A2C                     
  1902                           ;stateStpWatch.c: 34:     LCDPutInst(0xC0);
  1903  001A2C  0EC0               	movlw	192
  1904  001A2E  EC5B  F010         	call	_LCDPutInst
  1905  001A32                     
  1906                           ;stateStpWatch.c: 35:     LCDPutChar(minSTW/10+'0');
  1907  001A32  C013  F029         	movff	_minSTW,___awdiv@dividend
  1908  001A36  C014  F02A         	movff	_minSTW+1,___awdiv@dividend+1
  1909  001A3A  0E00               	movlw	0
  1910  001A3C  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1911  001A3E  0E0A               	movlw	10
  1912  001A40  6E2B               	movwf	___awdiv@divisor^0,c
  1913  001A42  EC53  F00E         	call	___awdiv	;wreg free
  1914  001A46  5029               	movf	?___awdiv^0,w,c
  1915  001A48  0F30               	addlw	48
  1916  001A4A  EC30  F010         	call	_LCDPutChar
  1917  001A4E                     
  1918                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW%10+'0');
  1919  001A4E  C013  F029         	movff	_minSTW,___awmod@dividend
  1920  001A52  C014  F02A         	movff	_minSTW+1,___awmod@dividend+1
  1921  001A56  0E00               	movlw	0
  1922  001A58  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1923  001A5A  0E0A               	movlw	10
  1924  001A5C  6E2B               	movwf	___awmod@divisor^0,c
  1925  001A5E  EC16  F00F         	call	___awmod	;wreg free
  1926  001A62  5029               	movf	?___awmod^0,w,c
  1927  001A64  0F30               	addlw	48
  1928  001A66  EC30  F010         	call	_LCDPutChar
  1929  001A6A                     
  1930                           ;stateStpWatch.c: 37:     LCDPutInst(0xC2);
  1931  001A6A  0EC2               	movlw	194
  1932  001A6C  EC5B  F010         	call	_LCDPutInst
  1933  001A70                     
  1934                           ;stateStpWatch.c: 38:     LCDPutChar(':');
  1935  001A70  0E3A               	movlw	58
  1936  001A72  EC30  F010         	call	_LCDPutChar
  1937  001A76                     
  1938                           ;stateStpWatch.c: 39:     LCDPutInst(0xC3);
  1939  001A76  0EC3               	movlw	195
  1940  001A78  EC5B  F010         	call	_LCDPutInst
  1941  001A7C                     
  1942                           ;stateStpWatch.c: 40:     LCDPutChar(secSTW/10+'0');
  1943  001A7C  C011  F029         	movff	_secSTW,___awdiv@dividend
  1944  001A80  C012  F02A         	movff	_secSTW+1,___awdiv@dividend+1
  1945  001A84  0E00               	movlw	0
  1946  001A86  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1947  001A88  0E0A               	movlw	10
  1948  001A8A  6E2B               	movwf	___awdiv@divisor^0,c
  1949  001A8C  EC53  F00E         	call	___awdiv	;wreg free
  1950  001A90  5029               	movf	?___awdiv^0,w,c
  1951  001A92  0F30               	addlw	48
  1952  001A94  EC30  F010         	call	_LCDPutChar
  1953  001A98                     
  1954                           ;stateStpWatch.c: 41:     LCDPutChar(secSTW%10+'0');
  1955  001A98  C011  F029         	movff	_secSTW,___awmod@dividend
  1956  001A9C  C012  F02A         	movff	_secSTW+1,___awmod@dividend+1
  1957  001AA0  0E00               	movlw	0
  1958  001AA2  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1959  001AA4  0E0A               	movlw	10
  1960  001AA6  6E2B               	movwf	___awmod@divisor^0,c
  1961  001AA8  EC16  F00F         	call	___awmod	;wreg free
  1962  001AAC  5029               	movf	?___awmod^0,w,c
  1963  001AAE  0F30               	addlw	48
  1964  001AB0  EC30  F010         	call	_LCDPutChar
  1965  001AB4                     
  1966                           ;stateStpWatch.c: 42:     LCDPutInst(0xC5);
  1967  001AB4  0EC5               	movlw	197
  1968  001AB6  EC5B  F010         	call	_LCDPutInst
  1969  001ABA                     
  1970                           ;stateStpWatch.c: 43:     LCDPutChar(':');
  1971  001ABA  0E3A               	movlw	58
  1972  001ABC  EC30  F010         	call	_LCDPutChar
  1973  001AC0                     
  1974                           ;stateStpWatch.c: 44:     LCDPutInst(0xC6);
  1975  001AC0  0EC6               	movlw	198
  1976  001AC2  EC5B  F010         	call	_LCDPutInst
  1977  001AC6                     
  1978                           ;stateStpWatch.c: 45:     LCDPutChar(miliSecSTW/10+'0');
  1979  001AC6  C00F  F029         	movff	_miliSecSTW,___awdiv@dividend
  1980  001ACA  C010  F02A         	movff	_miliSecSTW+1,___awdiv@dividend+1
  1981  001ACE  0E00               	movlw	0
  1982  001AD0  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1983  001AD2  0E0A               	movlw	10
  1984  001AD4  6E2B               	movwf	___awdiv@divisor^0,c
  1985  001AD6  EC53  F00E         	call	___awdiv	;wreg free
  1986  001ADA  5029               	movf	?___awdiv^0,w,c
  1987  001ADC  0F30               	addlw	48
  1988  001ADE  EC30  F010         	call	_LCDPutChar
  1989  001AE2                     
  1990                           ;stateStpWatch.c: 46:     LCDPutChar(miliSecSTW%10+'0');
  1991  001AE2  C00F  F029         	movff	_miliSecSTW,___awmod@dividend
  1992  001AE6  C010  F02A         	movff	_miliSecSTW+1,___awmod@dividend+1
  1993  001AEA  0E00               	movlw	0
  1994  001AEC  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1995  001AEE  0E0A               	movlw	10
  1996  001AF0  6E2B               	movwf	___awmod@divisor^0,c
  1997  001AF2  EC16  F00F         	call	___awmod	;wreg free
  1998  001AF6  5029               	movf	?___awmod^0,w,c
  1999  001AF8  0F30               	addlw	48
  2000  001AFA  EC30  F010         	call	_LCDPutChar
  2001  001AFE  0012               	return		;funcret
  2002  001B00                     __end_of_displayStpWatch:
  2003                           	opt callstack 0
  2004                           
  2005 ;; *************** function _displayModSecond *****************
  2006 ;; Defined at:
  2007 ;;		line 164 in file "statesModify.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;Total ram usage:        2 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    7
  2028 ;; This function calls:
  2029 ;;		_LCDPutChar
  2030 ;;		_LCDPutInst
  2031 ;;		_LCDPutStr
  2032 ;;		___awdiv
  2033 ;;		___awmod
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text9
  2040  0011EC                     __ptext9:
  2041                           	opt callstack 0
  2042  0011EC                     _displayModSecond:
  2043                           	opt callstack 23
  2044  0011EC                     
  2045                           ;statesModify.c: 165:     LCDPutInst(0x80);
  2046  0011EC  0E80               	movlw	128
  2047  0011EE  EC5B  F010         	call	_LCDPutInst
  2048  0011F2                     
  2049                           ;statesModify.c: 166:     LCDPutStr("MODIFIES SECOND");
  2050  0011F2  0E33               	movlw	low STR_4
  2051  0011F4  6E30               	movwf	LCDPutStr@ptr^0,c
  2052  0011F6  0E10               	movlw	high STR_4
  2053  0011F8  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2054  0011FA  ECF6  F010         	call	_LCDPutStr	;wreg free
  2055  0011FE                     
  2056                           ;statesModify.c: 167:     LCDPutInst(0xC0);
  2057  0011FE  0EC0               	movlw	192
  2058  001200  EC5B  F010         	call	_LCDPutInst
  2059  001204                     
  2060                           ;statesModify.c: 168:     LCDPutChar(hr/10+'0');
  2061  001204  C005  F029         	movff	_hr,___awdiv@dividend
  2062  001208  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2063  00120C  0E00               	movlw	0
  2064  00120E  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2065  001210  0E0A               	movlw	10
  2066  001212  6E2B               	movwf	___awdiv@divisor^0,c
  2067  001214  EC53  F00E         	call	___awdiv	;wreg free
  2068  001218  5029               	movf	?___awdiv^0,w,c
  2069  00121A  0F30               	addlw	48
  2070  00121C  EC30  F010         	call	_LCDPutChar
  2071  001220                     
  2072                           ;statesModify.c: 169:     LCDPutChar(hr%10+'0');
  2073  001220  C005  F029         	movff	_hr,___awmod@dividend
  2074  001224  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2075  001228  0E00               	movlw	0
  2076  00122A  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2077  00122C  0E0A               	movlw	10
  2078  00122E  6E2B               	movwf	___awmod@divisor^0,c
  2079  001230  EC16  F00F         	call	___awmod	;wreg free
  2080  001234  5029               	movf	?___awmod^0,w,c
  2081  001236  0F30               	addlw	48
  2082  001238  EC30  F010         	call	_LCDPutChar
  2083  00123C                     
  2084                           ;statesModify.c: 170:     LCDPutInst(0xC2);
  2085  00123C  0EC2               	movlw	194
  2086  00123E  EC5B  F010         	call	_LCDPutInst
  2087  001242                     
  2088                           ;statesModify.c: 171:     LCDPutChar(':');
  2089  001242  0E3A               	movlw	58
  2090  001244  EC30  F010         	call	_LCDPutChar
  2091  001248                     
  2092                           ;statesModify.c: 173:     LCDPutChar(min/10+'0');
  2093  001248  C007  F029         	movff	_min,___awdiv@dividend
  2094  00124C  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2095  001250  0E00               	movlw	0
  2096  001252  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2097  001254  0E0A               	movlw	10
  2098  001256  6E2B               	movwf	___awdiv@divisor^0,c
  2099  001258  EC53  F00E         	call	___awdiv	;wreg free
  2100  00125C  5029               	movf	?___awdiv^0,w,c
  2101  00125E  0F30               	addlw	48
  2102  001260  EC30  F010         	call	_LCDPutChar
  2103  001264                     
  2104                           ;statesModify.c: 174:     LCDPutChar(min%10+'0');
  2105  001264  C007  F029         	movff	_min,___awmod@dividend
  2106  001268  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2107  00126C  0E00               	movlw	0
  2108  00126E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2109  001270  0E0A               	movlw	10
  2110  001272  6E2B               	movwf	___awmod@divisor^0,c
  2111  001274  EC16  F00F         	call	___awmod	;wreg free
  2112  001278  5029               	movf	?___awmod^0,w,c
  2113  00127A  0F30               	addlw	48
  2114  00127C  EC30  F010         	call	_LCDPutChar
  2115  001280                     
  2116                           ;statesModify.c: 175:     LCDPutInst(0xC5);
  2117  001280  0EC5               	movlw	197
  2118  001282  EC5B  F010         	call	_LCDPutInst
  2119  001286                     
  2120                           ;statesModify.c: 176:     LCDPutChar(':');
  2121  001286  0E3A               	movlw	58
  2122  001288  EC30  F010         	call	_LCDPutChar
  2123  00128C                     
  2124                           ;statesModify.c: 177:     LCDPutInst(0xC6);
  2125  00128C  0EC6               	movlw	198
  2126  00128E  EC5B  F010         	call	_LCDPutInst
  2127  001292                     
  2128                           ;statesModify.c: 178:     if (count10ms >= (20/2)) {
  2129  001292  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2130  001294  EF55  F009         	goto	u1031
  2131  001298  500E               	movf	(_count10ms+1)^0,w,c
  2132  00129A  E109               	bnz	u1030
  2133  00129C  0E0A               	movlw	10
  2134  00129E  5C0D               	subwf	_count10ms^0,w,c
  2135  0012A0  A0D8               	btfss	status,0,c
  2136  0012A2  EF55  F009         	goto	u1031
  2137  0012A6  EF57  F009         	goto	u1030
  2138  0012AA                     u1031:
  2139  0012AA  EFBD  F009         	goto	l437
  2140  0012AE                     u1030:
  2141  0012AE                     
  2142                           ;statesModify.c: 179:         count10ms = 0;
  2143  0012AE  0E00               	movlw	0
  2144  0012B0  6E0E               	movwf	(_count10ms+1)^0,c
  2145  0012B2  0E00               	movlw	0
  2146  0012B4  6E0D               	movwf	_count10ms^0,c
  2147  0012B6                     
  2148                           ;statesModify.c: 180:         if (countAuto <= 0) {
  2149  0012B6  BE1C               	btfsc	(_countAuto+1)^0,7,c
  2150  0012B8  EF68  F009         	goto	u1040
  2151  0012BC  501C               	movf	(_countAuto+1)^0,w,c
  2152  0012BE  E106               	bnz	u1041
  2153  0012C0  041B               	decf	_countAuto^0,w,c
  2154  0012C2  B0D8               	btfsc	status,0,c
  2155  0012C4  EF66  F009         	goto	u1041
  2156  0012C8  EF68  F009         	goto	u1040
  2157  0012CC                     u1041:
  2158  0012CC  EFA1  F009         	goto	l2131
  2159  0012D0                     u1040:
  2160  0012D0                     
  2161                           ;statesModify.c: 181:             if (blink == 0) {
  2162  0012D0  5003               	movf	_blink^0,w,c
  2163  0012D2  1004               	iorwf	(_blink+1)^0,w,c
  2164  0012D4  A4D8               	btfss	status,2,c
  2165  0012D6  EF6F  F009         	goto	u1051
  2166  0012DA  EF71  F009         	goto	u1050
  2167  0012DE                     u1051:
  2168  0012DE  EF79  F009         	goto	l2127
  2169  0012E2                     u1050:
  2170  0012E2                     
  2171                           ;statesModify.c: 182:                 LCDPutChar(' ');
  2172  0012E2  0E20               	movlw	32
  2173  0012E4  EC30  F010         	call	_LCDPutChar
  2174                           
  2175                           ;statesModify.c: 183:                 LCDPutChar(' ');
  2176  0012E8  0E20               	movlw	32
  2177  0012EA  EC30  F010         	call	_LCDPutChar
  2178                           
  2179                           ;statesModify.c: 184:             } else {
  2180  0012EE  EF95  F009         	goto	l2129
  2181  0012F2                     l2127:
  2182                           
  2183                           ;statesModify.c: 185:                 LCDPutChar(sec/10+'0');
  2184  0012F2  C009  F029         	movff	_sec,___awdiv@dividend
  2185  0012F6  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2186  0012FA  0E00               	movlw	0
  2187  0012FC  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2188  0012FE  0E0A               	movlw	10
  2189  001300  6E2B               	movwf	___awdiv@divisor^0,c
  2190  001302  EC53  F00E         	call	___awdiv	;wreg free
  2191  001306  5029               	movf	?___awdiv^0,w,c
  2192  001308  0F30               	addlw	48
  2193  00130A  EC30  F010         	call	_LCDPutChar
  2194                           
  2195                           ;statesModify.c: 186:                 LCDPutChar(sec%10+'0');
  2196  00130E  C009  F029         	movff	_sec,___awmod@dividend
  2197  001312  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2198  001316  0E00               	movlw	0
  2199  001318  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2200  00131A  0E0A               	movlw	10
  2201  00131C  6E2B               	movwf	___awmod@divisor^0,c
  2202  00131E  EC16  F00F         	call	___awmod	;wreg free
  2203  001322  5029               	movf	?___awmod^0,w,c
  2204  001324  0F30               	addlw	48
  2205  001326  EC30  F010         	call	_LCDPutChar
  2206  00132A                     l2129:
  2207                           
  2208                           ;statesModify.c: 188:             blink = (blink + 1) % 2;
  2209  00132A  0E01               	movlw	1
  2210  00132C  2403               	addwf	_blink^0,w,c
  2211  00132E  6E32               	movwf	??_displayModSecond^0,c
  2212  001330  0E00               	movlw	0
  2213  001332  2004               	addwfc	(_blink+1)^0,w,c
  2214  001334  6E33               	movwf	(??_displayModSecond+1)^0,c
  2215  001336  0E01               	movlw	1
  2216  001338  1432               	andwf	??_displayModSecond^0,w,c
  2217  00133A  6E03               	movwf	_blink^0,c
  2218  00133C  6A04               	clrf	(_blink+1)^0,c
  2219                           
  2220                           ;statesModify.c: 189:         } else {
  2221  00133E  EFBD  F009         	goto	l437
  2222  001342                     l2131:
  2223                           
  2224                           ;statesModify.c: 190:             LCDPutChar(sec/10+'0');
  2225  001342  C009  F029         	movff	_sec,___awdiv@dividend
  2226  001346  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2227  00134A  0E00               	movlw	0
  2228  00134C  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2229  00134E  0E0A               	movlw	10
  2230  001350  6E2B               	movwf	___awdiv@divisor^0,c
  2231  001352  EC53  F00E         	call	___awdiv	;wreg free
  2232  001356  5029               	movf	?___awdiv^0,w,c
  2233  001358  0F30               	addlw	48
  2234  00135A  EC30  F010         	call	_LCDPutChar
  2235                           
  2236                           ;statesModify.c: 191:             LCDPutChar(sec%10+'0');
  2237  00135E  C009  F029         	movff	_sec,___awmod@dividend
  2238  001362  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2239  001366  0E00               	movlw	0
  2240  001368  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2241  00136A  0E0A               	movlw	10
  2242  00136C  6E2B               	movwf	___awmod@divisor^0,c
  2243  00136E  EC16  F00F         	call	___awmod	;wreg free
  2244  001372  5029               	movf	?___awmod^0,w,c
  2245  001374  0F30               	addlw	48
  2246  001376  EC30  F010         	call	_LCDPutChar
  2247  00137A                     l437:
  2248  00137A  0012               	return		;funcret
  2249  00137C                     __end_of_displayModSecond:
  2250                           	opt callstack 0
  2251                           
  2252 ;; *************** function _displayModMinute *****************
  2253 ;; Defined at:
  2254 ;;		line 132 in file "statesModify.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;Total ram usage:        2 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    7
  2275 ;; This function calls:
  2276 ;;		_LCDPutChar
  2277 ;;		_LCDPutInst
  2278 ;;		_LCDPutStr
  2279 ;;		___awdiv
  2280 ;;		___awmod
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text10
  2287  00137C                     __ptext10:
  2288                           	opt callstack 0
  2289  00137C                     _displayModMinute:
  2290                           	opt callstack 23
  2291  00137C                     
  2292                           ;statesModify.c: 133:     LCDPutInst(0x80);
  2293  00137C  0E80               	movlw	128
  2294  00137E  EC5B  F010         	call	_LCDPutInst
  2295  001382                     
  2296                           ;statesModify.c: 134:     LCDPutStr("MODIFIES MINUTE");
  2297  001382  0E43               	movlw	low STR_3
  2298  001384  6E30               	movwf	LCDPutStr@ptr^0,c
  2299  001386  0E10               	movlw	high STR_3
  2300  001388  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2301  00138A  ECF6  F010         	call	_LCDPutStr	;wreg free
  2302  00138E                     
  2303                           ;statesModify.c: 135:     LCDPutInst(0xC0);
  2304  00138E  0EC0               	movlw	192
  2305  001390  EC5B  F010         	call	_LCDPutInst
  2306  001394                     
  2307                           ;statesModify.c: 136:     LCDPutChar(hr/10+'0');
  2308  001394  C005  F029         	movff	_hr,___awdiv@dividend
  2309  001398  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2310  00139C  0E00               	movlw	0
  2311  00139E  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2312  0013A0  0E0A               	movlw	10
  2313  0013A2  6E2B               	movwf	___awdiv@divisor^0,c
  2314  0013A4  EC53  F00E         	call	___awdiv	;wreg free
  2315  0013A8  5029               	movf	?___awdiv^0,w,c
  2316  0013AA  0F30               	addlw	48
  2317  0013AC  EC30  F010         	call	_LCDPutChar
  2318  0013B0                     
  2319                           ;statesModify.c: 137:     LCDPutChar(hr%10+'0');
  2320  0013B0  C005  F029         	movff	_hr,___awmod@dividend
  2321  0013B4  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2322  0013B8  0E00               	movlw	0
  2323  0013BA  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2324  0013BC  0E0A               	movlw	10
  2325  0013BE  6E2B               	movwf	___awmod@divisor^0,c
  2326  0013C0  EC16  F00F         	call	___awmod	;wreg free
  2327  0013C4  5029               	movf	?___awmod^0,w,c
  2328  0013C6  0F30               	addlw	48
  2329  0013C8  EC30  F010         	call	_LCDPutChar
  2330  0013CC                     
  2331                           ;statesModify.c: 139:     LCDPutChar(':');
  2332  0013CC  0E3A               	movlw	58
  2333  0013CE  EC30  F010         	call	_LCDPutChar
  2334  0013D2                     
  2335                           ;statesModify.c: 140:     LCDPutInst(0xC3);
  2336  0013D2  0EC3               	movlw	195
  2337  0013D4  EC5B  F010         	call	_LCDPutInst
  2338  0013D8                     
  2339                           ;statesModify.c: 141:     if (count10ms >= (20/2)) {
  2340  0013D8  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2341  0013DA  EFF8  F009         	goto	u1001
  2342  0013DE  500E               	movf	(_count10ms+1)^0,w,c
  2343  0013E0  E109               	bnz	u1000
  2344  0013E2  0E0A               	movlw	10
  2345  0013E4  5C0D               	subwf	_count10ms^0,w,c
  2346  0013E6  A0D8               	btfss	status,0,c
  2347  0013E8  EFF8  F009         	goto	u1001
  2348  0013EC  EFFA  F009         	goto	u1000
  2349  0013F0                     u1001:
  2350  0013F0  EF60  F00A         	goto	l424
  2351  0013F4                     u1000:
  2352  0013F4                     
  2353                           ;statesModify.c: 142:         count10ms = 0;
  2354  0013F4  0E00               	movlw	0
  2355  0013F6  6E0E               	movwf	(_count10ms+1)^0,c
  2356  0013F8  0E00               	movlw	0
  2357  0013FA  6E0D               	movwf	_count10ms^0,c
  2358  0013FC                     
  2359                           ;statesModify.c: 143:         if (countAuto <= 0) {
  2360  0013FC  BE1C               	btfsc	(_countAuto+1)^0,7,c
  2361  0013FE  EF0B  F00A         	goto	u1010
  2362  001402  501C               	movf	(_countAuto+1)^0,w,c
  2363  001404  E106               	bnz	u1011
  2364  001406  041B               	decf	_countAuto^0,w,c
  2365  001408  B0D8               	btfsc	status,0,c
  2366  00140A  EF09  F00A         	goto	u1011
  2367  00140E  EF0B  F00A         	goto	u1010
  2368  001412                     u1011:
  2369  001412  EF44  F00A         	goto	l2091
  2370  001416                     u1010:
  2371  001416                     
  2372                           ;statesModify.c: 144:             if (blink == 0) {
  2373  001416  5003               	movf	_blink^0,w,c
  2374  001418  1004               	iorwf	(_blink+1)^0,w,c
  2375  00141A  A4D8               	btfss	status,2,c
  2376  00141C  EF12  F00A         	goto	u1021
  2377  001420  EF14  F00A         	goto	u1020
  2378  001424                     u1021:
  2379  001424  EF1C  F00A         	goto	l2087
  2380  001428                     u1020:
  2381  001428                     
  2382                           ;statesModify.c: 145:                 LCDPutChar(' ');
  2383  001428  0E20               	movlw	32
  2384  00142A  EC30  F010         	call	_LCDPutChar
  2385                           
  2386                           ;statesModify.c: 146:                 LCDPutChar(' ');
  2387  00142E  0E20               	movlw	32
  2388  001430  EC30  F010         	call	_LCDPutChar
  2389                           
  2390                           ;statesModify.c: 147:             } else {
  2391  001434  EF38  F00A         	goto	l2089
  2392  001438                     l2087:
  2393                           
  2394                           ;statesModify.c: 148:                 LCDPutChar(min/10+'0');
  2395  001438  C007  F029         	movff	_min,___awdiv@dividend
  2396  00143C  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2397  001440  0E00               	movlw	0
  2398  001442  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2399  001444  0E0A               	movlw	10
  2400  001446  6E2B               	movwf	___awdiv@divisor^0,c
  2401  001448  EC53  F00E         	call	___awdiv	;wreg free
  2402  00144C  5029               	movf	?___awdiv^0,w,c
  2403  00144E  0F30               	addlw	48
  2404  001450  EC30  F010         	call	_LCDPutChar
  2405                           
  2406                           ;statesModify.c: 149:                 LCDPutChar(min%10+'0');
  2407  001454  C007  F029         	movff	_min,___awmod@dividend
  2408  001458  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2409  00145C  0E00               	movlw	0
  2410  00145E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2411  001460  0E0A               	movlw	10
  2412  001462  6E2B               	movwf	___awmod@divisor^0,c
  2413  001464  EC16  F00F         	call	___awmod	;wreg free
  2414  001468  5029               	movf	?___awmod^0,w,c
  2415  00146A  0F30               	addlw	48
  2416  00146C  EC30  F010         	call	_LCDPutChar
  2417  001470                     l2089:
  2418                           
  2419                           ;statesModify.c: 151:             blink = (blink + 1) % 2;
  2420  001470  0E01               	movlw	1
  2421  001472  2403               	addwf	_blink^0,w,c
  2422  001474  6E32               	movwf	??_displayModMinute^0,c
  2423  001476  0E00               	movlw	0
  2424  001478  2004               	addwfc	(_blink+1)^0,w,c
  2425  00147A  6E33               	movwf	(??_displayModMinute+1)^0,c
  2426  00147C  0E01               	movlw	1
  2427  00147E  1432               	andwf	??_displayModMinute^0,w,c
  2428  001480  6E03               	movwf	_blink^0,c
  2429  001482  6A04               	clrf	(_blink+1)^0,c
  2430                           
  2431                           ;statesModify.c: 152:         } else {
  2432  001484  EF60  F00A         	goto	l424
  2433  001488                     l2091:
  2434                           
  2435                           ;statesModify.c: 153:             LCDPutChar(min/10+'0');
  2436  001488  C007  F029         	movff	_min,___awdiv@dividend
  2437  00148C  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2438  001490  0E00               	movlw	0
  2439  001492  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2440  001494  0E0A               	movlw	10
  2441  001496  6E2B               	movwf	___awdiv@divisor^0,c
  2442  001498  EC53  F00E         	call	___awdiv	;wreg free
  2443  00149C  5029               	movf	?___awdiv^0,w,c
  2444  00149E  0F30               	addlw	48
  2445  0014A0  EC30  F010         	call	_LCDPutChar
  2446                           
  2447                           ;statesModify.c: 154:             LCDPutChar(min%10+'0');
  2448  0014A4  C007  F029         	movff	_min,___awmod@dividend
  2449  0014A8  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2450  0014AC  0E00               	movlw	0
  2451  0014AE  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2452  0014B0  0E0A               	movlw	10
  2453  0014B2  6E2B               	movwf	___awmod@divisor^0,c
  2454  0014B4  EC16  F00F         	call	___awmod	;wreg free
  2455  0014B8  5029               	movf	?___awmod^0,w,c
  2456  0014BA  0F30               	addlw	48
  2457  0014BC  EC30  F010         	call	_LCDPutChar
  2458  0014C0                     l424:
  2459                           
  2460                           ;statesModify.c: 157:     LCDPutInst(0xC5);
  2461  0014C0  0EC5               	movlw	197
  2462  0014C2  EC5B  F010         	call	_LCDPutInst
  2463                           
  2464                           ;statesModify.c: 158:     LCDPutChar(':');
  2465  0014C6  0E3A               	movlw	58
  2466  0014C8  EC30  F010         	call	_LCDPutChar
  2467                           
  2468                           ;statesModify.c: 160:     LCDPutChar(sec/10+'0');
  2469  0014CC  C009  F029         	movff	_sec,___awdiv@dividend
  2470  0014D0  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2471  0014D4  0E00               	movlw	0
  2472  0014D6  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2473  0014D8  0E0A               	movlw	10
  2474  0014DA  6E2B               	movwf	___awdiv@divisor^0,c
  2475  0014DC  EC53  F00E         	call	___awdiv	;wreg free
  2476  0014E0  5029               	movf	?___awdiv^0,w,c
  2477  0014E2  0F30               	addlw	48
  2478  0014E4  EC30  F010         	call	_LCDPutChar
  2479                           
  2480                           ;statesModify.c: 161:     LCDPutChar(sec%10+'0');
  2481  0014E8  C009  F029         	movff	_sec,___awmod@dividend
  2482  0014EC  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2483  0014F0  0E00               	movlw	0
  2484  0014F2  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2485  0014F4  0E0A               	movlw	10
  2486  0014F6  6E2B               	movwf	___awmod@divisor^0,c
  2487  0014F8  EC16  F00F         	call	___awmod	;wreg free
  2488  0014FC  5029               	movf	?___awmod^0,w,c
  2489  0014FE  0F30               	addlw	48
  2490  001500  EC30  F010         	call	_LCDPutChar
  2491  001504  0012               	return		;funcret
  2492  001506                     __end_of_displayModMinute:
  2493                           	opt callstack 0
  2494                           
  2495 ;; *************** function _displayModHour *****************
  2496 ;; Defined at:
  2497 ;;		line 100 in file "statesModify.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;		None
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;		None
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  1    wreg      void 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2514 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;Total ram usage:        2 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; Hardware stack levels required when called:    7
  2518 ;; This function calls:
  2519 ;;		_LCDPutChar
  2520 ;;		_LCDPutInst
  2521 ;;		_LCDPutStr
  2522 ;;		___awdiv
  2523 ;;		___awmod
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text11
  2530  001506                     __ptext11:
  2531                           	opt callstack 0
  2532  001506                     _displayModHour:
  2533                           	opt callstack 23
  2534  001506                     
  2535                           ;statesModify.c: 101:     LCDPutInst(0x80);
  2536  001506  0E80               	movlw	128
  2537  001508  EC5B  F010         	call	_LCDPutInst
  2538  00150C                     
  2539                           ;statesModify.c: 102:     LCDPutStr(" MODIFIES HOUR ");
  2540  00150C  0E23               	movlw	low STR_2
  2541  00150E  6E30               	movwf	LCDPutStr@ptr^0,c
  2542  001510  0E10               	movlw	high STR_2
  2543  001512  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2544  001514  ECF6  F010         	call	_LCDPutStr	;wreg free
  2545  001518                     
  2546                           ;statesModify.c: 103:     LCDPutInst(0xC0);
  2547  001518  0EC0               	movlw	192
  2548  00151A  EC5B  F010         	call	_LCDPutInst
  2549  00151E                     
  2550                           ;statesModify.c: 104:     if (count10ms >= (20/2)) {
  2551  00151E  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2552  001520  EF9B  F00A         	goto	u971
  2553  001524  500E               	movf	(_count10ms+1)^0,w,c
  2554  001526  E109               	bnz	u970
  2555  001528  0E0A               	movlw	10
  2556  00152A  5C0D               	subwf	_count10ms^0,w,c
  2557  00152C  A0D8               	btfss	status,0,c
  2558  00152E  EF9B  F00A         	goto	u971
  2559  001532  EF9D  F00A         	goto	u970
  2560  001536                     u971:
  2561  001536  EF03  F00B         	goto	l416
  2562  00153A                     u970:
  2563  00153A                     
  2564                           ;statesModify.c: 105:         count10ms = 0;
  2565  00153A  0E00               	movlw	0
  2566  00153C  6E0E               	movwf	(_count10ms+1)^0,c
  2567  00153E  0E00               	movlw	0
  2568  001540  6E0D               	movwf	_count10ms^0,c
  2569  001542                     
  2570                           ;statesModify.c: 106:         if (countAuto <= 0) {
  2571  001542  BE1C               	btfsc	(_countAuto+1)^0,7,c
  2572  001544  EFAE  F00A         	goto	u980
  2573  001548  501C               	movf	(_countAuto+1)^0,w,c
  2574  00154A  E106               	bnz	u981
  2575  00154C  041B               	decf	_countAuto^0,w,c
  2576  00154E  B0D8               	btfsc	status,0,c
  2577  001550  EFAC  F00A         	goto	u981
  2578  001554  EFAE  F00A         	goto	u980
  2579  001558                     u981:
  2580  001558  EFE7  F00A         	goto	l2061
  2581  00155C                     u980:
  2582  00155C                     
  2583                           ;statesModify.c: 107:             if (blink == 0) {
  2584  00155C  5003               	movf	_blink^0,w,c
  2585  00155E  1004               	iorwf	(_blink+1)^0,w,c
  2586  001560  A4D8               	btfss	status,2,c
  2587  001562  EFB5  F00A         	goto	u991
  2588  001566  EFB7  F00A         	goto	u990
  2589  00156A                     u991:
  2590  00156A  EFBF  F00A         	goto	l2057
  2591  00156E                     u990:
  2592  00156E                     
  2593                           ;statesModify.c: 108:                 LCDPutChar(' ');
  2594  00156E  0E20               	movlw	32
  2595  001570  EC30  F010         	call	_LCDPutChar
  2596                           
  2597                           ;statesModify.c: 109:                 LCDPutChar(' ');
  2598  001574  0E20               	movlw	32
  2599  001576  EC30  F010         	call	_LCDPutChar
  2600                           
  2601                           ;statesModify.c: 110:             } else {
  2602  00157A  EFDB  F00A         	goto	l2059
  2603  00157E                     l2057:
  2604                           
  2605                           ;statesModify.c: 111:                 LCDPutChar(hr/10+'0');
  2606  00157E  C005  F029         	movff	_hr,___awdiv@dividend
  2607  001582  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2608  001586  0E00               	movlw	0
  2609  001588  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2610  00158A  0E0A               	movlw	10
  2611  00158C  6E2B               	movwf	___awdiv@divisor^0,c
  2612  00158E  EC53  F00E         	call	___awdiv	;wreg free
  2613  001592  5029               	movf	?___awdiv^0,w,c
  2614  001594  0F30               	addlw	48
  2615  001596  EC30  F010         	call	_LCDPutChar
  2616                           
  2617                           ;statesModify.c: 112:                 LCDPutChar(hr%10+'0');
  2618  00159A  C005  F029         	movff	_hr,___awmod@dividend
  2619  00159E  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2620  0015A2  0E00               	movlw	0
  2621  0015A4  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2622  0015A6  0E0A               	movlw	10
  2623  0015A8  6E2B               	movwf	___awmod@divisor^0,c
  2624  0015AA  EC16  F00F         	call	___awmod	;wreg free
  2625  0015AE  5029               	movf	?___awmod^0,w,c
  2626  0015B0  0F30               	addlw	48
  2627  0015B2  EC30  F010         	call	_LCDPutChar
  2628  0015B6                     l2059:
  2629                           
  2630                           ;statesModify.c: 114:             blink = (blink + 1) % 2;
  2631  0015B6  0E01               	movlw	1
  2632  0015B8  2403               	addwf	_blink^0,w,c
  2633  0015BA  6E32               	movwf	??_displayModHour^0,c
  2634  0015BC  0E00               	movlw	0
  2635  0015BE  2004               	addwfc	(_blink+1)^0,w,c
  2636  0015C0  6E33               	movwf	(??_displayModHour+1)^0,c
  2637  0015C2  0E01               	movlw	1
  2638  0015C4  1432               	andwf	??_displayModHour^0,w,c
  2639  0015C6  6E03               	movwf	_blink^0,c
  2640  0015C8  6A04               	clrf	(_blink+1)^0,c
  2641                           
  2642                           ;statesModify.c: 115:         } else {
  2643  0015CA  EF03  F00B         	goto	l416
  2644  0015CE                     l2061:
  2645                           
  2646                           ;statesModify.c: 116:             LCDPutChar(hr/10+'0');
  2647  0015CE  C005  F029         	movff	_hr,___awdiv@dividend
  2648  0015D2  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2649  0015D6  0E00               	movlw	0
  2650  0015D8  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2651  0015DA  0E0A               	movlw	10
  2652  0015DC  6E2B               	movwf	___awdiv@divisor^0,c
  2653  0015DE  EC53  F00E         	call	___awdiv	;wreg free
  2654  0015E2  5029               	movf	?___awdiv^0,w,c
  2655  0015E4  0F30               	addlw	48
  2656  0015E6  EC30  F010         	call	_LCDPutChar
  2657                           
  2658                           ;statesModify.c: 117:             LCDPutChar(hr%10+'0');
  2659  0015EA  C005  F029         	movff	_hr,___awmod@dividend
  2660  0015EE  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2661  0015F2  0E00               	movlw	0
  2662  0015F4  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2663  0015F6  0E0A               	movlw	10
  2664  0015F8  6E2B               	movwf	___awmod@divisor^0,c
  2665  0015FA  EC16  F00F         	call	___awmod	;wreg free
  2666  0015FE  5029               	movf	?___awmod^0,w,c
  2667  001600  0F30               	addlw	48
  2668  001602  EC30  F010         	call	_LCDPutChar
  2669  001606                     l416:
  2670                           
  2671                           ;statesModify.c: 120:     LCDPutInst(0xC2);
  2672  001606  0EC2               	movlw	194
  2673  001608  EC5B  F010         	call	_LCDPutInst
  2674                           
  2675                           ;statesModify.c: 121:     LCDPutChar(':');
  2676  00160C  0E3A               	movlw	58
  2677  00160E  EC30  F010         	call	_LCDPutChar
  2678                           
  2679                           ;statesModify.c: 123:     LCDPutChar(min/10+'0');
  2680  001612  C007  F029         	movff	_min,___awdiv@dividend
  2681  001616  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2682  00161A  0E00               	movlw	0
  2683  00161C  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2684  00161E  0E0A               	movlw	10
  2685  001620  6E2B               	movwf	___awdiv@divisor^0,c
  2686  001622  EC53  F00E         	call	___awdiv	;wreg free
  2687  001626  5029               	movf	?___awdiv^0,w,c
  2688  001628  0F30               	addlw	48
  2689  00162A  EC30  F010         	call	_LCDPutChar
  2690                           
  2691                           ;statesModify.c: 124:     LCDPutChar(min%10+'0');
  2692  00162E  C007  F029         	movff	_min,___awmod@dividend
  2693  001632  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2694  001636  0E00               	movlw	0
  2695  001638  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2696  00163A  0E0A               	movlw	10
  2697  00163C  6E2B               	movwf	___awmod@divisor^0,c
  2698  00163E  EC16  F00F         	call	___awmod	;wreg free
  2699  001642  5029               	movf	?___awmod^0,w,c
  2700  001644  0F30               	addlw	48
  2701  001646  EC30  F010         	call	_LCDPutChar
  2702                           
  2703                           ;statesModify.c: 126:     LCDPutChar(':');
  2704  00164A  0E3A               	movlw	58
  2705  00164C  EC30  F010         	call	_LCDPutChar
  2706                           
  2707                           ;statesModify.c: 128:     LCDPutChar(sec/10+'0');
  2708  001650  C009  F029         	movff	_sec,___awdiv@dividend
  2709  001654  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2710  001658  0E00               	movlw	0
  2711  00165A  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2712  00165C  0E0A               	movlw	10
  2713  00165E  6E2B               	movwf	___awdiv@divisor^0,c
  2714  001660  EC53  F00E         	call	___awdiv	;wreg free
  2715  001664  5029               	movf	?___awdiv^0,w,c
  2716  001666  0F30               	addlw	48
  2717  001668  EC30  F010         	call	_LCDPutChar
  2718                           
  2719                           ;statesModify.c: 129:     LCDPutChar(sec%10+'0');
  2720  00166C  C009  F029         	movff	_sec,___awmod@dividend
  2721  001670  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2722  001674  0E00               	movlw	0
  2723  001676  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2724  001678  0E0A               	movlw	10
  2725  00167A  6E2B               	movwf	___awmod@divisor^0,c
  2726  00167C  EC16  F00F         	call	___awmod	;wreg free
  2727  001680  5029               	movf	?___awmod^0,w,c
  2728  001682  0F30               	addlw	48
  2729  001684  EC30  F010         	call	_LCDPutChar
  2730  001688  0012               	return		;funcret
  2731  00168A                     __end_of_displayModHour:
  2732                           	opt callstack 0
  2733                           
  2734 ;; *************** function _displayClock *****************
  2735 ;; Defined at:
  2736 ;;		line 21 in file "stateClock.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    7
  2757 ;; This function calls:
  2758 ;;		_LCDPutChar
  2759 ;;		_LCDPutInst
  2760 ;;		_LCDPutStr
  2761 ;;		___awdiv
  2762 ;;		___awmod
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text12
  2769  001BD8                     __ptext12:
  2770                           	opt callstack 0
  2771  001BD8                     _displayClock:
  2772                           	opt callstack 23
  2773  001BD8                     
  2774                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2775  001BD8  0E80               	movlw	128
  2776  001BDA  EC5B  F010         	call	_LCDPutInst
  2777  001BDE                     
  2778                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2779  001BDE  0E12               	movlw	low STR_1
  2780  001BE0  6E30               	movwf	LCDPutStr@ptr^0,c
  2781  001BE2  0E10               	movlw	high STR_1
  2782  001BE4  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2783  001BE6  ECF6  F010         	call	_LCDPutStr	;wreg free
  2784  001BEA                     
  2785                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2786  001BEA  0EC0               	movlw	192
  2787  001BEC  EC5B  F010         	call	_LCDPutInst
  2788  001BF0                     
  2789                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2790  001BF0  C005  F029         	movff	_hr,___awdiv@dividend
  2791  001BF4  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2792  001BF8  0E00               	movlw	0
  2793  001BFA  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2794  001BFC  0E0A               	movlw	10
  2795  001BFE  6E2B               	movwf	___awdiv@divisor^0,c
  2796  001C00  EC53  F00E         	call	___awdiv	;wreg free
  2797  001C04  5029               	movf	?___awdiv^0,w,c
  2798  001C06  0F30               	addlw	48
  2799  001C08  EC30  F010         	call	_LCDPutChar
  2800  001C0C                     
  2801                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2802  001C0C  C005  F029         	movff	_hr,___awmod@dividend
  2803  001C10  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2804  001C14  0E00               	movlw	0
  2805  001C16  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2806  001C18  0E0A               	movlw	10
  2807  001C1A  6E2B               	movwf	___awmod@divisor^0,c
  2808  001C1C  EC16  F00F         	call	___awmod	;wreg free
  2809  001C20  5029               	movf	?___awmod^0,w,c
  2810  001C22  0F30               	addlw	48
  2811  001C24  EC30  F010         	call	_LCDPutChar
  2812  001C28                     
  2813                           ;stateClock.c: 27:     LCDPutChar(':');
  2814  001C28  0E3A               	movlw	58
  2815  001C2A  EC30  F010         	call	_LCDPutChar
  2816  001C2E                     
  2817                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2818  001C2E  C007  F029         	movff	_min,___awdiv@dividend
  2819  001C32  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2820  001C36  0E00               	movlw	0
  2821  001C38  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2822  001C3A  0E0A               	movlw	10
  2823  001C3C  6E2B               	movwf	___awdiv@divisor^0,c
  2824  001C3E  EC53  F00E         	call	___awdiv	;wreg free
  2825  001C42  5029               	movf	?___awdiv^0,w,c
  2826  001C44  0F30               	addlw	48
  2827  001C46  EC30  F010         	call	_LCDPutChar
  2828  001C4A                     
  2829                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2830  001C4A  C007  F029         	movff	_min,___awmod@dividend
  2831  001C4E  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2832  001C52  0E00               	movlw	0
  2833  001C54  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2834  001C56  0E0A               	movlw	10
  2835  001C58  6E2B               	movwf	___awmod@divisor^0,c
  2836  001C5A  EC16  F00F         	call	___awmod	;wreg free
  2837  001C5E  5029               	movf	?___awmod^0,w,c
  2838  001C60  0F30               	addlw	48
  2839  001C62  EC30  F010         	call	_LCDPutChar
  2840  001C66                     
  2841                           ;stateClock.c: 30:     LCDPutChar(':');
  2842  001C66  0E3A               	movlw	58
  2843  001C68  EC30  F010         	call	_LCDPutChar
  2844  001C6C                     
  2845                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2846  001C6C  C009  F029         	movff	_sec,___awdiv@dividend
  2847  001C70  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2848  001C74  0E00               	movlw	0
  2849  001C76  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2850  001C78  0E0A               	movlw	10
  2851  001C7A  6E2B               	movwf	___awdiv@divisor^0,c
  2852  001C7C  EC53  F00E         	call	___awdiv	;wreg free
  2853  001C80  5029               	movf	?___awdiv^0,w,c
  2854  001C82  0F30               	addlw	48
  2855  001C84  EC30  F010         	call	_LCDPutChar
  2856  001C88                     
  2857                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2858  001C88  C009  F029         	movff	_sec,___awmod@dividend
  2859  001C8C  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2860  001C90  0E00               	movlw	0
  2861  001C92  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2862  001C94  0E0A               	movlw	10
  2863  001C96  6E2B               	movwf	___awmod@divisor^0,c
  2864  001C98  EC16  F00F         	call	___awmod	;wreg free
  2865  001C9C  5029               	movf	?___awmod^0,w,c
  2866  001C9E  0F30               	addlw	48
  2867  001CA0  EC30  F010         	call	_LCDPutChar
  2868  001CA4  0012               	return		;funcret
  2869  001CA6                     __end_of_displayClock:
  2870                           	opt callstack 0
  2871                           
  2872 ;; *************** function ___awmod *****************
  2873 ;; Defined at:
  2874 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  dividend        2    8[COMRAM] int 
  2877 ;;  divisor         2   10[COMRAM] int 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  sign            1   13[COMRAM] unsigned char 
  2880 ;;  counter         1   12[COMRAM] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  2    8[COMRAM] int 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2, status,0
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2890 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;Total ram usage:        6 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    3
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_displayClock
  2901 ;;		_displayModHour
  2902 ;;		_displayModMinute
  2903 ;;		_displayModSecond
  2904 ;;		_displayStpWatch
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text13
  2909  001E2C                     __ptext13:
  2910                           	opt callstack 0
  2911  001E2C                     ___awmod:
  2912                           	opt callstack 26
  2913  001E2C  0E00               	movlw	0
  2914  001E2E  6E2E               	movwf	___awmod@sign^0,c
  2915  001E30  BE2A               	btfsc	(___awmod@dividend+1)^0,7,c
  2916  001E32  EF1F  F00F         	goto	u910
  2917  001E36  EF1D  F00F         	goto	u911
  2918  001E3A                     u911:
  2919  001E3A  EF25  F00F         	goto	l1963
  2920  001E3E                     u910:
  2921  001E3E  6C29               	negf	___awmod@dividend^0,c
  2922  001E40  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  2923  001E42  B0D8               	btfsc	status,0,c
  2924  001E44  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  2925  001E46  0E01               	movlw	1
  2926  001E48  6E2E               	movwf	___awmod@sign^0,c
  2927  001E4A                     l1963:
  2928  001E4A  BE2C               	btfsc	(___awmod@divisor+1)^0,7,c
  2929  001E4C  EF2C  F00F         	goto	u920
  2930  001E50  EF2A  F00F         	goto	u921
  2931  001E54                     u921:
  2932  001E54  EF30  F00F         	goto	l1967
  2933  001E58                     u920:
  2934  001E58  6C2B               	negf	___awmod@divisor^0,c
  2935  001E5A  1E2C               	comf	(___awmod@divisor+1)^0,f,c
  2936  001E5C  B0D8               	btfsc	status,0,c
  2937  001E5E  2A2C               	incf	(___awmod@divisor+1)^0,f,c
  2938  001E60                     l1967:
  2939  001E60  502B               	movf	___awmod@divisor^0,w,c
  2940  001E62  102C               	iorwf	(___awmod@divisor+1)^0,w,c
  2941  001E64  B4D8               	btfsc	status,2,c
  2942  001E66  EF37  F00F         	goto	u931
  2943  001E6A  EF39  F00F         	goto	u930
  2944  001E6E                     u931:
  2945  001E6E  EF5D  F00F         	goto	l1983
  2946  001E72                     u930:
  2947  001E72  0E01               	movlw	1
  2948  001E74  6E2D               	movwf	___awmod@counter^0,c
  2949  001E76  EF41  F00F         	goto	l1973
  2950  001E7A                     l1971:
  2951  001E7A  90D8               	bcf	status,0,c
  2952  001E7C  362B               	rlcf	___awmod@divisor^0,f,c
  2953  001E7E  362C               	rlcf	(___awmod@divisor+1)^0,f,c
  2954  001E80  2A2D               	incf	___awmod@counter^0,f,c
  2955  001E82                     l1973:
  2956  001E82  AE2C               	btfss	(___awmod@divisor+1)^0,7,c
  2957  001E84  EF46  F00F         	goto	u941
  2958  001E88  EF48  F00F         	goto	u940
  2959  001E8C                     u941:
  2960  001E8C  EF3D  F00F         	goto	l1971
  2961  001E90                     u940:
  2962  001E90                     l1975:
  2963  001E90  502B               	movf	___awmod@divisor^0,w,c
  2964  001E92  5C29               	subwf	___awmod@dividend^0,w,c
  2965  001E94  502C               	movf	(___awmod@divisor+1)^0,w,c
  2966  001E96  582A               	subwfb	(___awmod@dividend+1)^0,w,c
  2967  001E98  A0D8               	btfss	status,0,c
  2968  001E9A  EF51  F00F         	goto	u951
  2969  001E9E  EF53  F00F         	goto	u950
  2970  001EA2                     u951:
  2971  001EA2  EF57  F00F         	goto	l1979
  2972  001EA6                     u950:
  2973  001EA6  502B               	movf	___awmod@divisor^0,w,c
  2974  001EA8  5E29               	subwf	___awmod@dividend^0,f,c
  2975  001EAA  502C               	movf	(___awmod@divisor+1)^0,w,c
  2976  001EAC  5A2A               	subwfb	(___awmod@dividend+1)^0,f,c
  2977  001EAE                     l1979:
  2978  001EAE  90D8               	bcf	status,0,c
  2979  001EB0  322C               	rrcf	(___awmod@divisor+1)^0,f,c
  2980  001EB2  322B               	rrcf	___awmod@divisor^0,f,c
  2981  001EB4  2E2D               	decfsz	___awmod@counter^0,f,c
  2982  001EB6  EF48  F00F         	goto	l1975
  2983  001EBA                     l1983:
  2984  001EBA  502E               	movf	___awmod@sign^0,w,c
  2985  001EBC  B4D8               	btfsc	status,2,c
  2986  001EBE  EF63  F00F         	goto	u961
  2987  001EC2  EF65  F00F         	goto	u960
  2988  001EC6                     u961:
  2989  001EC6  EF69  F00F         	goto	l1987
  2990  001ECA                     u960:
  2991  001ECA  6C29               	negf	___awmod@dividend^0,c
  2992  001ECC  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  2993  001ECE  B0D8               	btfsc	status,0,c
  2994  001ED0  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  2995  001ED2                     l1987:
  2996  001ED2  C029  F029         	movff	___awmod@dividend,?___awmod
  2997  001ED6  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  2998  001EDA  0012               	return		;funcret
  2999  001EDC                     __end_of___awmod:
  3000                           	opt callstack 0
  3001                           
  3002 ;; *************** function ___awdiv *****************
  3003 ;; Defined at:
  3004 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  dividend        2    8[COMRAM] int 
  3007 ;;  divisor         2   10[COMRAM] int 
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  quotient        2   14[COMRAM] int 
  3010 ;;  sign            1   13[COMRAM] unsigned char 
  3011 ;;  counter         1   12[COMRAM] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  2    8[COMRAM] int 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;Total ram usage:        8 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    3
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_displayClock
  3032 ;;		_displayModHour
  3033 ;;		_displayModMinute
  3034 ;;		_displayModSecond
  3035 ;;		_displayStpWatch
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text14
  3040  001CA6                     __ptext14:
  3041                           	opt callstack 0
  3042  001CA6                     ___awdiv:
  3043                           	opt callstack 26
  3044  001CA6  0E00               	movlw	0
  3045  001CA8  6E2E               	movwf	___awdiv@sign^0,c
  3046  001CAA  BE2C               	btfsc	(___awdiv@divisor+1)^0,7,c
  3047  001CAC  EF5C  F00E         	goto	u850
  3048  001CB0  EF5A  F00E         	goto	u851
  3049  001CB4                     u851:
  3050  001CB4  EF62  F00E         	goto	l1919
  3051  001CB8                     u850:
  3052  001CB8  6C2B               	negf	___awdiv@divisor^0,c
  3053  001CBA  1E2C               	comf	(___awdiv@divisor+1)^0,f,c
  3054  001CBC  B0D8               	btfsc	status,0,c
  3055  001CBE  2A2C               	incf	(___awdiv@divisor+1)^0,f,c
  3056  001CC0  0E01               	movlw	1
  3057  001CC2  6E2E               	movwf	___awdiv@sign^0,c
  3058  001CC4                     l1919:
  3059  001CC4  BE2A               	btfsc	(___awdiv@dividend+1)^0,7,c
  3060  001CC6  EF69  F00E         	goto	u860
  3061  001CCA  EF67  F00E         	goto	u861
  3062  001CCE                     u861:
  3063  001CCE  EF6F  F00E         	goto	l1925
  3064  001CD2                     u860:
  3065  001CD2  6C29               	negf	___awdiv@dividend^0,c
  3066  001CD4  1E2A               	comf	(___awdiv@dividend+1)^0,f,c
  3067  001CD6  B0D8               	btfsc	status,0,c
  3068  001CD8  2A2A               	incf	(___awdiv@dividend+1)^0,f,c
  3069  001CDA  0E01               	movlw	1
  3070  001CDC  1A2E               	xorwf	___awdiv@sign^0,f,c
  3071  001CDE                     l1925:
  3072  001CDE  0E00               	movlw	0
  3073  001CE0  6E30               	movwf	(___awdiv@quotient+1)^0,c
  3074  001CE2  0E00               	movlw	0
  3075  001CE4  6E2F               	movwf	___awdiv@quotient^0,c
  3076  001CE6  502B               	movf	___awdiv@divisor^0,w,c
  3077  001CE8  102C               	iorwf	(___awdiv@divisor+1)^0,w,c
  3078  001CEA  B4D8               	btfsc	status,2,c
  3079  001CEC  EF7A  F00E         	goto	u871
  3080  001CF0  EF7C  F00E         	goto	u870
  3081  001CF4                     u871:
  3082  001CF4  EFA4  F00E         	goto	l1947
  3083  001CF8                     u870:
  3084  001CF8  0E01               	movlw	1
  3085  001CFA  6E2D               	movwf	___awdiv@counter^0,c
  3086  001CFC  EF84  F00E         	goto	l1933
  3087  001D00                     l1931:
  3088  001D00  90D8               	bcf	status,0,c
  3089  001D02  362B               	rlcf	___awdiv@divisor^0,f,c
  3090  001D04  362C               	rlcf	(___awdiv@divisor+1)^0,f,c
  3091  001D06  2A2D               	incf	___awdiv@counter^0,f,c
  3092  001D08                     l1933:
  3093  001D08  AE2C               	btfss	(___awdiv@divisor+1)^0,7,c
  3094  001D0A  EF89  F00E         	goto	u881
  3095  001D0E  EF8B  F00E         	goto	u880
  3096  001D12                     u881:
  3097  001D12  EF80  F00E         	goto	l1931
  3098  001D16                     u880:
  3099  001D16                     l1935:
  3100  001D16  90D8               	bcf	status,0,c
  3101  001D18  362F               	rlcf	___awdiv@quotient^0,f,c
  3102  001D1A  3630               	rlcf	(___awdiv@quotient+1)^0,f,c
  3103  001D1C  502B               	movf	___awdiv@divisor^0,w,c
  3104  001D1E  5C29               	subwf	___awdiv@dividend^0,w,c
  3105  001D20  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3106  001D22  582A               	subwfb	(___awdiv@dividend+1)^0,w,c
  3107  001D24  A0D8               	btfss	status,0,c
  3108  001D26  EF97  F00E         	goto	u891
  3109  001D2A  EF99  F00E         	goto	u890
  3110  001D2E                     u891:
  3111  001D2E  EF9E  F00E         	goto	l1943
  3112  001D32                     u890:
  3113  001D32  502B               	movf	___awdiv@divisor^0,w,c
  3114  001D34  5E29               	subwf	___awdiv@dividend^0,f,c
  3115  001D36  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3116  001D38  5A2A               	subwfb	(___awdiv@dividend+1)^0,f,c
  3117  001D3A  802F               	bsf	___awdiv@quotient^0,0,c
  3118  001D3C                     l1943:
  3119  001D3C  90D8               	bcf	status,0,c
  3120  001D3E  322C               	rrcf	(___awdiv@divisor+1)^0,f,c
  3121  001D40  322B               	rrcf	___awdiv@divisor^0,f,c
  3122  001D42  2E2D               	decfsz	___awdiv@counter^0,f,c
  3123  001D44  EF8B  F00E         	goto	l1935
  3124  001D48                     l1947:
  3125  001D48  502E               	movf	___awdiv@sign^0,w,c
  3126  001D4A  B4D8               	btfsc	status,2,c
  3127  001D4C  EFAA  F00E         	goto	u901
  3128  001D50  EFAC  F00E         	goto	u900
  3129  001D54                     u901:
  3130  001D54  EFB0  F00E         	goto	l1951
  3131  001D58                     u900:
  3132  001D58  6C2F               	negf	___awdiv@quotient^0,c
  3133  001D5A  1E30               	comf	(___awdiv@quotient+1)^0,f,c
  3134  001D5C  B0D8               	btfsc	status,0,c
  3135  001D5E  2A30               	incf	(___awdiv@quotient+1)^0,f,c
  3136  001D60                     l1951:
  3137  001D60  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  3138  001D64  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  3139  001D68  0012               	return		;funcret
  3140  001D6A                     __end_of___awdiv:
  3141                           	opt callstack 0
  3142                           
  3143 ;; *************** function _LCDPutStr *****************
  3144 ;; Defined at:
  3145 ;;		line 198 in file "BBSPI_LCD.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  3148 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  3149 ;;		 -> STR_1(17), 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:        2 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    6
  3168 ;; This function calls:
  3169 ;;		_LCDPutChar
  3170 ;; This function is called by:
  3171 ;;		_displayClock
  3172 ;;		_displayModHour
  3173 ;;		_displayModMinute
  3174 ;;		_displayModSecond
  3175 ;;		_displayStpWatch
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text15
  3180  0021EC                     __ptext15:
  3181                           	opt callstack 0
  3182  0021EC                     _LCDPutStr:
  3183                           	opt callstack 23
  3184  0021EC                     
  3185                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  3186  0021EC  EF04  F011         	goto	l1909
  3187  0021F0                     l1905:
  3188  0021F0  C030  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3189  0021F4  C031  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3190  0021F8                     	if	0	;tblptru may be non-zero
  3191  0021F8                     	endif
  3192  0021F8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3193  0021F8  0E00               	movlw	low (__mediumconst shr (0+16))
  3194  0021FA  6EF8               	movwf	tblptru,c
  3195  0021FC                     	endif
  3196  0021FC  0008               	tblrd		*
  3197  0021FE  50F5               	movf	tablat,w,c
  3198  002200  EC30  F010         	call	_LCDPutChar
  3199  002204  4A30               	infsnz	LCDPutStr@ptr^0,f,c
  3200  002206  2A31               	incf	(LCDPutStr@ptr+1)^0,f,c
  3201  002208                     l1909:
  3202  002208  C030  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3203  00220C  C031  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3204  002210                     	if	0	;tblptru may be non-zero
  3205  002210                     	endif
  3206  002210                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3207  002210  0E00               	movlw	low (__mediumconst shr (0+16))
  3208  002212  6EF8               	movwf	tblptru,c
  3209  002214                     	endif
  3210  002214  0008               	tblrd		*
  3211  002216  50F5               	movf	tablat,w,c
  3212  002218  0900               	iorlw	0
  3213  00221A  A4D8               	btfss	status,2,c
  3214  00221C  EF12  F011         	goto	u841
  3215  002220  EF14  F011         	goto	u840
  3216  002224                     u841:
  3217  002224  EFF8  F010         	goto	l1905
  3218  002228                     u840:
  3219  002228  0012               	return		;funcret
  3220  00222A                     __end_of_LCDPutStr:
  3221                           	opt callstack 0
  3222                           
  3223 ;; *************** function _LCDPutChar *****************
  3224 ;; Defined at:
  3225 ;;		line 160 in file "BBSPI_LCD.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  ch              1    wreg     unsigned char 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  ch              1   14[COMRAM] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:        2 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    5
  3246 ;; This function calls:
  3247 ;;		_WritePort_BBSPI
  3248 ;; This function is called by:
  3249 ;;		_LCDPutStr
  3250 ;;		_displayClock
  3251 ;;		_displayModHour
  3252 ;;		_displayModMinute
  3253 ;;		_displayModSecond
  3254 ;;		_displayStpWatch
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text16
  3259  002060                     __ptext16:
  3260                           	opt callstack 0
  3261  002060                     _LCDPutChar:
  3262                           	opt callstack 23
  3263                           
  3264                           ;incstack = 0
  3265                           ;LCDPutChar@ch stored from wreg
  3266  002060  6E2F               	movwf	LCDPutChar@ch^0,c
  3267  002062                     
  3268                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3269  002062  0E80               	movlw	128
  3270  002064  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3271  002066  0E12               	movlw	18
  3272  002068  EC3D  F011         	call	_WritePort_BBSPI
  3273  00206C                     
  3274                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3275  00206C  0E04               	movlw	4
  3276  00206E  6E2E               	movwf	??_LCDPutChar^0,c
  3277  002070  0E3E               	movlw	62
  3278  002072                     u1197:
  3279  002072  2EE8               	decfsz	wreg,f,c
  3280  002074  D7FE               	bra	u1197
  3281  002076  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3282  002078  D7FC               	bra	u1197
  3283  00207A                     
  3284                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3285  00207A  C02F  F02C         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3286  00207E  0E13               	movlw	19
  3287  002080  EC3D  F011         	call	_WritePort_BBSPI
  3288                           
  3289                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3290  002084  0E04               	movlw	4
  3291  002086  6E2E               	movwf	??_LCDPutChar^0,c
  3292  002088  0E3E               	movlw	62
  3293  00208A                     u1207:
  3294  00208A  2EE8               	decfsz	wreg,f,c
  3295  00208C  D7FE               	bra	u1207
  3296  00208E  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3297  002090  D7FC               	bra	u1207
  3298  002092                     
  3299                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3300  002092  0EC0               	movlw	192
  3301  002094  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3302  002096  0E12               	movlw	18
  3303  002098  EC3D  F011         	call	_WritePort_BBSPI
  3304  00209C                     
  3305                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3306  00209C  0E04               	movlw	4
  3307  00209E  6E2E               	movwf	??_LCDPutChar^0,c
  3308  0020A0  0E3E               	movlw	62
  3309  0020A2                     u1217:
  3310  0020A2  2EE8               	decfsz	wreg,f,c
  3311  0020A4  D7FE               	bra	u1217
  3312  0020A6  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3313  0020A8  D7FC               	bra	u1217
  3314                           
  3315                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3316  0020AA  0E00               	movlw	0
  3317  0020AC  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3318  0020AE  0E12               	movlw	18
  3319  0020B0  EC3D  F011         	call	_WritePort_BBSPI
  3320  0020B4  0012               	return		;funcret
  3321  0020B6                     __end_of_LCDPutChar:
  3322                           	opt callstack 0
  3323                           
  3324 ;; *************** function _buttonInitialize *****************
  3325 ;; Defined at:
  3326 ;;		line 23 in file "system.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;		None
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;		None
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;Total ram usage:        0 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    3
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text17
  3355  0022C4                     __ptext17:
  3356                           	opt callstack 0
  3357  0022C4                     _buttonInitialize:
  3358                           	opt callstack 27
  3359  0022C4                     
  3360                           ;system.c: 24:     TRISAbits.TRISA5 = 1;
  3361  0022C4  8A92               	bsf	146,5,c	;volatile
  3362                           
  3363                           ;system.c: 25:     TRISBbits.TRISB0 = 1;
  3364  0022C6  8093               	bsf	147,0,c	;volatile
  3365  0022C8                     
  3366                           ;system.c: 26:     ADCON1 = 0b00001111;
  3367  0022C8  0E0F               	movlw	15
  3368  0022CA  6EC1               	movwf	193,c	;volatile
  3369  0022CC  0012               	return		;funcret
  3370  0022CE                     __end_of_buttonInitialize:
  3371                           	opt callstack 0
  3372                           
  3373 ;; *************** function _LCDInit *****************
  3374 ;; Defined at:
  3375 ;;		line 45 in file "BBSPI_LCD.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;Total ram usage:        1 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    6
  3396 ;; This function calls:
  3397 ;;		_InitBBSPI
  3398 ;;		_LCDPutInst
  3399 ;;		_Port_BBSPIInit
  3400 ;;		_WritePort_BBSPI
  3401 ;; This function is called by:
  3402 ;;		_main
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text18
  3407  00210C                     __ptext18:
  3408                           	opt callstack 0
  3409  00210C                     _LCDInit:
  3410                           	opt callstack 24
  3411  00210C                     
  3412                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3413  00210C  EC54  F011         	call	_InitBBSPI	;wreg free
  3414  002110                     
  3415                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3416  002110  9C97               	bcf	151,6,c	;volatile
  3417  002112                     
  3418                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3419  002112  9C8E               	bcf	142,6,c	;volatile
  3420  002114                     
  3421                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3422  002114  8C8E               	bsf	142,6,c	;volatile
  3423  002116                     
  3424                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3425  002116  0E00               	movlw	0
  3426  002118  EC30  F011         	call	_Port_BBSPIInit
  3427  00211C                     
  3428                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3429  00211C  0E01               	movlw	1
  3430  00211E  EC30  F011         	call	_Port_BBSPIInit
  3431  002122                     
  3432                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3433  002122  0E00               	movlw	0
  3434  002124  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3435  002126  0E12               	movlw	18
  3436  002128  EC3D  F011         	call	_WritePort_BBSPI
  3437  00212C                     
  3438                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3439  00212C  0E31               	movlw	49
  3440  00212E  6E30               	movwf	??_LCDInit^0,c
  3441  002130  0EB2               	movlw	178
  3442  002132                     u1227:
  3443  002132  2EE8               	decfsz	wreg,f,c
  3444  002134  D7FE               	bra	u1227
  3445  002136  2E30               	decfsz	??_LCDInit^0,f,c
  3446  002138  D7FC               	bra	u1227
  3447  00213A  D000               	nop2	
  3448  00213C                     
  3449                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3450  00213C  0E32               	movlw	50
  3451  00213E  EC5B  F010         	call	_LCDPutInst
  3452  002142                     
  3453                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3454  002142  0E3C               	movlw	60
  3455  002144  EC5B  F010         	call	_LCDPutInst
  3456  002148                     
  3457                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3458  002148  0E0C               	movlw	12
  3459  00214A  EC5B  F010         	call	_LCDPutInst
  3460  00214E                     
  3461                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3462  00214E  0E01               	movlw	1
  3463  002150  EC5B  F010         	call	_LCDPutInst
  3464  002154                     
  3465                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3466  002154  0E06               	movlw	6
  3467  002156  EC5B  F010         	call	_LCDPutInst
  3468  00215A  0012               	return		;funcret
  3469  00215C                     __end_of_LCDInit:
  3470                           	opt callstack 0
  3471                           
  3472 ;; *************** function _Port_BBSPIInit *****************
  3473 ;; Defined at:
  3474 ;;		line 123 in file "BBSPI_LCD.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  port_dir        1    wreg     unsigned char 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  port_dir        1   11[COMRAM] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;Total ram usage:        1 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    4
  3495 ;; This function calls:
  3496 ;;		_SendByteBBSPI
  3497 ;; This function is called by:
  3498 ;;		_LCDInit
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text19
  3503  002260                     __ptext19:
  3504                           	opt callstack 0
  3505  002260                     _Port_BBSPIInit:
  3506                           	opt callstack 25
  3507                           
  3508                           ;incstack = 0
  3509                           ;Port_BBSPIInit@port_dir stored from wreg
  3510  002260  6E2C               	movwf	Port_BBSPIInit@port_dir^0,c
  3511  002262                     
  3512                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3513  002262  9489               	bcf	137,2,c	;volatile
  3514  002264                     
  3515                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3516  002264  0E40               	movlw	64
  3517  002266  ECF8  F00F         	call	_SendByteBBSPI
  3518                           
  3519                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3520  00226A  502C               	movf	Port_BBSPIInit@port_dir^0,w,c
  3521  00226C  ECF8  F00F         	call	_SendByteBBSPI
  3522                           
  3523                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3524  002270  0E00               	movlw	0
  3525  002272  ECF8  F00F         	call	_SendByteBBSPI
  3526  002276                     
  3527                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3528  002276  8489               	bsf	137,2,c	;volatile
  3529  002278  0012               	return		;funcret
  3530  00227A                     __end_of_Port_BBSPIInit:
  3531                           	opt callstack 0
  3532                           
  3533 ;; *************** function _LCDPutInst *****************
  3534 ;; Defined at:
  3535 ;;		line 179 in file "BBSPI_LCD.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  ch              1    wreg     unsigned char 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  ch              1   14[COMRAM] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    5
  3556 ;; This function calls:
  3557 ;;		_WritePort_BBSPI
  3558 ;; This function is called by:
  3559 ;;		_LCDInit
  3560 ;;		_displayClock
  3561 ;;		_displayModHour
  3562 ;;		_displayModMinute
  3563 ;;		_displayModSecond
  3564 ;;		_displayStpWatch
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text20
  3569  0020B6                     __ptext20:
  3570                           	opt callstack 0
  3571  0020B6                     _LCDPutInst:
  3572                           	opt callstack 24
  3573                           
  3574                           ;incstack = 0
  3575                           ;LCDPutInst@ch stored from wreg
  3576  0020B6  6E2F               	movwf	LCDPutInst@ch^0,c
  3577  0020B8                     
  3578                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3579  0020B8  0E00               	movlw	0
  3580  0020BA  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3581  0020BC  0E12               	movlw	18
  3582  0020BE  EC3D  F011         	call	_WritePort_BBSPI
  3583  0020C2                     
  3584                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3585  0020C2  0E04               	movlw	4
  3586  0020C4  6E2E               	movwf	??_LCDPutInst^0,c
  3587  0020C6  0E3E               	movlw	62
  3588  0020C8                     u1237:
  3589  0020C8  2EE8               	decfsz	wreg,f,c
  3590  0020CA  D7FE               	bra	u1237
  3591  0020CC  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3592  0020CE  D7FC               	bra	u1237
  3593  0020D0                     
  3594                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3595  0020D0  C02F  F02C         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3596  0020D4  0E13               	movlw	19
  3597  0020D6  EC3D  F011         	call	_WritePort_BBSPI
  3598                           
  3599                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3600  0020DA  0E04               	movlw	4
  3601  0020DC  6E2E               	movwf	??_LCDPutInst^0,c
  3602  0020DE  0E3E               	movlw	62
  3603  0020E0                     u1247:
  3604  0020E0  2EE8               	decfsz	wreg,f,c
  3605  0020E2  D7FE               	bra	u1247
  3606  0020E4  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3607  0020E6  D7FC               	bra	u1247
  3608  0020E8                     
  3609                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3610  0020E8  0E40               	movlw	64
  3611  0020EA  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3612  0020EC  0E12               	movlw	18
  3613  0020EE  EC3D  F011         	call	_WritePort_BBSPI
  3614  0020F2                     
  3615                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3616  0020F2  0E04               	movlw	4
  3617  0020F4  6E2E               	movwf	??_LCDPutInst^0,c
  3618  0020F6  0E3E               	movlw	62
  3619  0020F8                     u1257:
  3620  0020F8  2EE8               	decfsz	wreg,f,c
  3621  0020FA  D7FE               	bra	u1257
  3622  0020FC  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3623  0020FE  D7FC               	bra	u1257
  3624                           
  3625                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3626  002100  0E00               	movlw	0
  3627  002102  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3628  002104  0E12               	movlw	18
  3629  002106  EC3D  F011         	call	_WritePort_BBSPI
  3630  00210A  0012               	return		;funcret
  3631  00210C                     __end_of_LCDPutInst:
  3632                           	opt callstack 0
  3633                           
  3634 ;; *************** function _WritePort_BBSPI *****************
  3635 ;; Defined at:
  3636 ;;		line 144 in file "BBSPI_LCD.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  port_add        1    wreg     unsigned char 
  3639 ;;  a               1   11[COMRAM] unsigned char 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  port_add        1   12[COMRAM] unsigned char 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3651 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    4
  3658 ;; This function calls:
  3659 ;;		_SendByteBBSPI
  3660 ;; This function is called by:
  3661 ;;		_LCDInit
  3662 ;;		_LCDPutChar
  3663 ;;		_LCDPutInst
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text21
  3668  00227A                     __ptext21:
  3669                           	opt callstack 0
  3670  00227A                     _WritePort_BBSPI:
  3671                           	opt callstack 23
  3672                           
  3673                           ;incstack = 0
  3674                           ;WritePort_BBSPI@port_add stored from wreg
  3675  00227A  6E2D               	movwf	WritePort_BBSPI@port_add^0,c
  3676  00227C                     
  3677                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3678  00227C  9489               	bcf	137,2,c	;volatile
  3679  00227E                     
  3680                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3681  00227E  0E40               	movlw	64
  3682  002280  ECF8  F00F         	call	_SendByteBBSPI
  3683                           
  3684                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3685  002284  502D               	movf	WritePort_BBSPI@port_add^0,w,c
  3686  002286  ECF8  F00F         	call	_SendByteBBSPI
  3687                           
  3688                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3689  00228A  502C               	movf	WritePort_BBSPI@a^0,w,c
  3690  00228C  ECF8  F00F         	call	_SendByteBBSPI
  3691  002290                     
  3692                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3693  002290  8489               	bsf	137,2,c	;volatile
  3694  002292  0012               	return		;funcret
  3695  002294                     __end_of_WritePort_BBSPI:
  3696                           	opt callstack 0
  3697                           
  3698 ;; *************** function _SendByteBBSPI *****************
  3699 ;; Defined at:
  3700 ;;		line 91 in file "BBSPI_LCD.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  output          1    wreg     unsigned char 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  output          1    8[COMRAM] unsigned char 
  3705 ;;  input           1   10[COMRAM] unsigned char 
  3706 ;;  bitcount        1    9[COMRAM] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;Total ram usage:        3 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    3
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_Port_BBSPIInit
  3727 ;;		_WritePort_BBSPI
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text22
  3732  001FF0                     __ptext22:
  3733                           	opt callstack 0
  3734  001FF0                     _SendByteBBSPI:
  3735                           	opt callstack 23
  3736                           
  3737                           ;incstack = 0
  3738                           ;SendByteBBSPI@output stored from wreg
  3739  001FF0  6E29               	movwf	SendByteBBSPI@output^0,c
  3740  001FF2                     
  3741                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3742  001FF2  C029  F02B         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3743  001FF6                     
  3744                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3745  001FF6  0E00               	movlw	0
  3746  001FF8  6E2A               	movwf	SendByteBBSPI@bitcount^0,c
  3747  001FFA                     l189:
  3748                           
  3749                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3750  001FFA  AE29               	btfss	SendByteBBSPI@output^0,7,c
  3751  001FFC  EF02  F010         	goto	u11
  3752  002000  EF04  F010         	goto	u10
  3753  002004                     u11:
  3754  002004  EF07  F010         	goto	l191
  3755  002008                     u10:
  3756  002008                     
  3757                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3758  002008  8A8B               	bsf	139,5,c	;volatile
  3759  00200A  EF08  F010         	goto	l192
  3760  00200E                     l191:
  3761                           
  3762                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3763  00200E  9A8B               	bcf	139,5,c	;volatile
  3764  002010                     l192:
  3765                           
  3766                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3767  002010  A88B               	btfss	139,4,c	;volatile
  3768  002012  EF0D  F010         	goto	u21
  3769  002016  EF0F  F010         	goto	u20
  3770  00201A                     u21:
  3771  00201A  EF13  F010         	goto	l1173
  3772  00201E                     u20:
  3773  00201E                     
  3774                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3775  00201E  80D8               	bsf	status,0,c
  3776  002020  362B               	rlcf	SendByteBBSPI@input^0,f,c
  3777  002022  EF16  F010         	goto	l1175
  3778  002026                     l1173:
  3779                           
  3780                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3781  002026  502B               	movf	SendByteBBSPI@input^0,w,c
  3782  002028  242B               	addwf	SendByteBBSPI@input^0,w,c
  3783  00202A  6E2B               	movwf	SendByteBBSPI@input^0,c
  3784  00202C                     l1175:
  3785                           
  3786                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3787  00202C  868B               	bsf	139,3,c	;volatile
  3788  00202E                     
  3789                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3790  00202E  F000               	nop	
  3791  002030  F000               	nop	
  3792  002032  F000               	nop	
  3793  002034  F000               	nop	
  3794  002036  F000               	nop	
  3795  002038  F000               	nop	
  3796  00203A                     
  3797                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3798  00203A  F000               	nop	
  3799  00203C  F000               	nop	
  3800  00203E  F000               	nop	
  3801  002040  F000               	nop	
  3802  002042  F000               	nop	
  3803  002044  F000               	nop	
  3804  002046                     
  3805                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3806  002046  968B               	bcf	139,3,c	;volatile
  3807                           
  3808                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3809  002048  90D8               	bcf	status,0,c
  3810  00204A  3629               	rlcf	SendByteBBSPI@output^0,f,c
  3811  00204C                     
  3812                           ;BBSPI_LCD.c: 113:     }
  3813  00204C  2A2A               	incf	SendByteBBSPI@bitcount^0,f,c
  3814  00204E  0E07               	movlw	7
  3815  002050  642A               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3816  002052  EF2D  F010         	goto	u31
  3817  002056  EF2F  F010         	goto	u30
  3818  00205A                     u31:
  3819  00205A  EFFD  F00F         	goto	l189
  3820  00205E                     u30:
  3821  00205E  0012               	return		;funcret
  3822  002060                     __end_of_SendByteBBSPI:
  3823                           	opt callstack 0
  3824                           
  3825 ;; *************** function _InitBBSPI *****************
  3826 ;; Defined at:
  3827 ;;		line 70 in file "BBSPI_LCD.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;		None
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		None
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3845 ;;Total ram usage:        0 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    3
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_LCDInit
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text23
  3856  0022A8                     __ptext23:
  3857                           	opt callstack 0
  3858  0022A8                     _InitBBSPI:
  3859                           	opt callstack 26
  3860  0022A8                     
  3861                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3862  0022A8  9492               	bcf	146,2,c	;volatile
  3863                           
  3864                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  3865  0022AA  8894               	bsf	148,4,c	;volatile
  3866                           
  3867                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  3868  0022AC  9A94               	bcf	148,5,c	;volatile
  3869                           
  3870                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  3871  0022AE  9694               	bcf	148,3,c	;volatile
  3872                           
  3873                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  3874  0022B0  8489               	bsf	137,2,c	;volatile
  3875                           
  3876                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  3877  0022B2  888B               	bsf	139,4,c	;volatile
  3878                           
  3879                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  3880  0022B4  9A8B               	bcf	139,5,c	;volatile
  3881                           
  3882                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  3883  0022B6  968B               	bcf	139,3,c	;volatile
  3884  0022B8  0012               	return		;funcret
  3885  0022BA                     __end_of_InitBBSPI:
  3886                           	opt callstack 0
  3887                           
  3888 ;; *************** function _deviceInterrupt *****************
  3889 ;; Defined at:
  3890 ;;		line 3 in file "interrupt.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    2
  3911 ;; This function calls:
  3912 ;;		_button
  3913 ;; This function is called by:
  3914 ;;		Interrupt level 2
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	intcode
  3919  000008                     __pintcode:
  3920                           	opt callstack 0
  3921  000008                     _deviceInterrupt:
  3922                           	opt callstack 23
  3923                           
  3924                           ;incstack = 0
  3925  000008  823A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3926  00000A  EDBD  F00F         	call	int_func,f	;refresh shadow registers
  3927                           
  3928                           	psect	intcode_body
  3929  001F7A                     __pintcode_body:
  3930                           	opt callstack 23
  3931  001F7A                     int_func:
  3932                           	opt callstack 23
  3933  001F7A  0006               	pop		; remove dummy address from shadow register refresh
  3934  001F7C                     
  3935                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  3936  001F7C  A4F2               	btfss	242,2,c	;volatile
  3937  001F7E  EFC3  F00F         	goto	i2u115_41
  3938  001F82  EFC5  F00F         	goto	i2u115_40
  3939  001F86                     i2u115_41:
  3940  001F86  EFF6  F00F         	goto	i2l259
  3941  001F8A                     i2u115_40:
  3942  001F8A  AAF2               	btfss	242,5,c	;volatile
  3943  001F8C  EFCA  F00F         	goto	i2u116_41
  3944  001F90  EFCC  F00F         	goto	i2u116_40
  3945  001F94                     i2u116_41:
  3946  001F94  EFF6  F00F         	goto	i2l259
  3947  001F98                     i2u116_40:
  3948  001F98                     
  3949                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  3950  001F98  94F2               	bcf	242,2,c	;volatile
  3951  001F9A                     
  3952                           ;interrupt.c: 7:         TMR0H = 0xfd;
  3953  001F9A  0EFD               	movlw	253
  3954  001F9C  6ED7               	movwf	215,c	;volatile
  3955                           
  3956                           ;interrupt.c: 8:         TMR0L = 0x5f;
  3957  001F9E  0E5F               	movlw	95
  3958  001FA0  6ED6               	movwf	214,c	;volatile
  3959  001FA2                     
  3960                           ;interrupt.c: 10:         count10ms++;
  3961  001FA2  4A0D               	infsnz	_count10ms^0,f,c
  3962  001FA4  2A0E               	incf	(_count10ms+1)^0,f,c
  3963  001FA6                     
  3964                           ;interrupt.c: 12:         if (runSTW == 1) {
  3965  001FA6  0415               	decf	_runSTW^0,w,c
  3966  001FA8  1016               	iorwf	(_runSTW+1)^0,w,c
  3967  001FAA  A4D8               	btfss	status,2,c
  3968  001FAC  EFDA  F00F         	goto	i2u117_41
  3969  001FB0  EFDC  F00F         	goto	i2u117_40
  3970  001FB4                     i2u117_41:
  3971  001FB4  EFF4  F00F         	goto	i2l2259
  3972  001FB8                     i2u117_40:
  3973  001FB8                     
  3974                           ;interrupt.c: 13:             miliSecSTW++;
  3975  001FB8  4A0F               	infsnz	_miliSecSTW^0,f,c
  3976  001FBA  2A10               	incf	(_miliSecSTW+1)^0,f,c
  3977  001FBC                     
  3978                           ;interrupt.c: 14:             if (miliSecSTW >= 100) {
  3979  001FBC  BE10               	btfsc	(_miliSecSTW+1)^0,7,c
  3980  001FBE  EFEA  F00F         	goto	i2u118_41
  3981  001FC2  5010               	movf	(_miliSecSTW+1)^0,w,c
  3982  001FC4  E109               	bnz	i2u118_40
  3983  001FC6  0E64               	movlw	100
  3984  001FC8  5C0F               	subwf	_miliSecSTW^0,w,c
  3985  001FCA  A0D8               	btfss	status,0,c
  3986  001FCC  EFEA  F00F         	goto	i2u118_41
  3987  001FD0  EFEC  F00F         	goto	i2u118_40
  3988  001FD4                     i2u118_41:
  3989  001FD4  EFF4  F00F         	goto	i2l2259
  3990  001FD8                     i2u118_40:
  3991  001FD8                     
  3992                           ;interrupt.c: 15:                 miliSecSTW = 0;
  3993  001FD8  0E00               	movlw	0
  3994  001FDA  6E10               	movwf	(_miliSecSTW+1)^0,c
  3995  001FDC  0E00               	movlw	0
  3996  001FDE  6E0F               	movwf	_miliSecSTW^0,c
  3997                           
  3998                           ;interrupt.c: 16:                 flag = 1;
  3999  001FE0  0E00               	movlw	0
  4000  001FE2  6E0C               	movwf	(_flag+1)^0,c
  4001  001FE4  0E01               	movlw	1
  4002  001FE6  6E0B               	movwf	_flag^0,c
  4003  001FE8                     i2l2259:
  4004                           
  4005                           ;interrupt.c: 22:         button();
  4006  001FE8  ECB5  F00E         	call	_button	;wreg free
  4007  001FEC                     i2l259:
  4008  001FEC  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4009  001FEE  0011               	retfie		f
  4010  001FF0                     __end_of_deviceInterrupt:
  4011                           	opt callstack 0
  4012                           
  4013 ;; *************** function _button *****************
  4014 ;; Defined at:
  4015 ;;		line 27 in file "button.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  checkRB0        2    6[COMRAM] int 
  4020 ;;  checkRA5        2    4[COMRAM] int 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;Total ram usage:        4 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    1
  4037 ;; This function calls:
  4038 ;;		_readRA5Button
  4039 ;;		_readRB0Button
  4040 ;; This function is called by:
  4041 ;;		_deviceInterrupt
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text25
  4046  001D6A                     __ptext25:
  4047                           	opt callstack 0
  4048  001D6A                     _button:
  4049                           	opt callstack 23
  4050  001D6A                     
  4051                           ;button.c: 28:     int checkRA5 = readRA5Button();
  4052  001D6A  ECD2  F010         	call	_readRA5Button	;wreg free
  4053  001D6E  C021  F025         	movff	?_readRA5Button,button@checkRA5
  4054  001D72  C022  F026         	movff	?_readRA5Button+1,button@checkRA5+1
  4055                           
  4056                           ;button.c: 29:     int checkRB0 = readRB0Button();
  4057  001D76  ECAE  F010         	call	_readRB0Button	;wreg free
  4058  001D7A  C021  F027         	movff	?_readRB0Button,button@checkRB0
  4059  001D7E  C022  F028         	movff	?_readRB0Button+1,button@checkRB0+1
  4060  001D82                     
  4061                           ;button.c: 30:     if (checkRA5 == 1) {
  4062  001D82  0425               	decf	button@checkRA5^0,w,c
  4063  001D84  1026               	iorwf	(button@checkRA5+1)^0,w,c
  4064  001D86  A4D8               	btfss	status,2,c
  4065  001D88  EFC8  F00E         	goto	i2u106_41
  4066  001D8C  EFCA  F00E         	goto	i2u106_40
  4067  001D90                     i2u106_41:
  4068  001D90  EFD0  F00E         	goto	i2l2169
  4069  001D94                     i2u106_40:
  4070  001D94                     
  4071                           ;button.c: 31:         changeModePressed = 1;
  4072  001D94  0E00               	movlw	0
  4073  001D96  6E1A               	movwf	(_changeModePressed+1)^0,c
  4074  001D98  0E01               	movlw	1
  4075  001D9A  6E19               	movwf	_changeModePressed^0,c
  4076                           
  4077                           ;button.c: 32:     }
  4078  001D9C  EF15  F00F         	goto	i2l156
  4079  001DA0                     i2l2169:
  4080  001DA0  0427               	decf	button@checkRB0^0,w,c
  4081  001DA2  1028               	iorwf	(button@checkRB0+1)^0,w,c
  4082  001DA4  A4D8               	btfss	status,2,c
  4083  001DA6  EFD7  F00E         	goto	i2u107_41
  4084  001DAA  EFD9  F00E         	goto	i2u107_40
  4085  001DAE                     i2u107_41:
  4086  001DAE  EF03  F00F         	goto	i2l2181
  4087  001DB2                     i2u107_40:
  4088  001DB2                     
  4089                           ;button.c: 34:         countPressed++;
  4090  001DB2  4A1D               	infsnz	_countPressed^0,f,c
  4091  001DB4  2A1E               	incf	(_countPressed+1)^0,f,c
  4092  001DB6                     
  4093                           ;button.c: 35:         if (countPressed >= 100) {
  4094  001DB6  BE1E               	btfsc	(_countPressed+1)^0,7,c
  4095  001DB8  EFE7  F00E         	goto	i2u108_41
  4096  001DBC  501E               	movf	(_countPressed+1)^0,w,c
  4097  001DBE  E109               	bnz	i2u108_40
  4098  001DC0  0E64               	movlw	100
  4099  001DC2  5C1D               	subwf	_countPressed^0,w,c
  4100  001DC4  A0D8               	btfss	status,0,c
  4101  001DC6  EFE7  F00E         	goto	i2u108_41
  4102  001DCA  EFE9  F00E         	goto	i2u108_40
  4103  001DCE                     i2u108_41:
  4104  001DCE  EF15  F00F         	goto	i2l156
  4105  001DD2                     i2u108_40:
  4106  001DD2                     
  4107                           ;button.c: 36:             countAuto++;
  4108  001DD2  4A1B               	infsnz	_countAuto^0,f,c
  4109  001DD4  2A1C               	incf	(_countAuto+1)^0,f,c
  4110  001DD6                     
  4111                           ;button.c: 37:             if (countAuto > 20) {
  4112  001DD6  BE1C               	btfsc	(_countAuto+1)^0,7,c
  4113  001DD8  EFF7  F00E         	goto	i2u109_41
  4114  001DDC  501C               	movf	(_countAuto+1)^0,w,c
  4115  001DDE  E109               	bnz	i2u109_40
  4116  001DE0  0E15               	movlw	21
  4117  001DE2  5C1B               	subwf	_countAuto^0,w,c
  4118  001DE4  A0D8               	btfss	status,0,c
  4119  001DE6  EFF7  F00E         	goto	i2u109_41
  4120  001DEA  EFF9  F00E         	goto	i2u109_40
  4121  001DEE                     i2u109_41:
  4122  001DEE  EF15  F00F         	goto	i2l155
  4123  001DF2                     i2u109_40:
  4124  001DF2                     
  4125                           ;button.c: 38:                 increaseTime = 1;
  4126  001DF2  0E00               	movlw	0
  4127  001DF4  6E18               	movwf	(_increaseTime+1)^0,c
  4128  001DF6  0E01               	movlw	1
  4129  001DF8  6E17               	movwf	_increaseTime^0,c
  4130                           
  4131                           ;button.c: 39:                 countAuto = 0;
  4132  001DFA  0E00               	movlw	0
  4133  001DFC  6E1C               	movwf	(_countAuto+1)^0,c
  4134  001DFE  0E00               	movlw	0
  4135  001E00  6E1B               	movwf	_countAuto^0,c
  4136  001E02  EF15  F00F         	goto	i2l156
  4137  001E06                     i2l2181:
  4138                           
  4139                           ;button.c: 44:         countPressed = 0;
  4140  001E06  0E00               	movlw	0
  4141  001E08  6E1E               	movwf	(_countPressed+1)^0,c
  4142  001E0A  0E00               	movlw	0
  4143  001E0C  6E1D               	movwf	_countPressed^0,c
  4144                           
  4145                           ;button.c: 45:         countAuto = 0;
  4146  001E0E  0E00               	movlw	0
  4147  001E10  6E1C               	movwf	(_countAuto+1)^0,c
  4148  001E12  0E00               	movlw	0
  4149  001E14  6E1B               	movwf	_countAuto^0,c
  4150                           
  4151                           ;button.c: 46:         changeModePressed = 0;
  4152  001E16  0E00               	movlw	0
  4153  001E18  6E1A               	movwf	(_changeModePressed+1)^0,c
  4154  001E1A  0E00               	movlw	0
  4155  001E1C  6E19               	movwf	_changeModePressed^0,c
  4156                           
  4157                           ;button.c: 47:         increaseTime = 0;
  4158  001E1E  0E00               	movlw	0
  4159  001E20  6E18               	movwf	(_increaseTime+1)^0,c
  4160  001E22  0E00               	movlw	0
  4161  001E24  6E17               	movwf	_increaseTime^0,c
  4162  001E26  EF15  F00F         	goto	i2l156
  4163  001E2A                     i2l155:
  4164  001E2A                     i2l156:
  4165  001E2A  0012               	return		;funcret
  4166  001E2C                     __end_of_button:
  4167                           	opt callstack 0
  4168                           
  4169 ;; *************** function _readRB0Button *****************
  4170 ;; Defined at:
  4171 ;;		line 15 in file "button.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  check           2    2[COMRAM] int 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  2    0[COMRAM] int 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4185 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;Total ram usage:        4 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_button
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text26
  4199  00215C                     __ptext26:
  4200                           	opt callstack 0
  4201  00215C                     _readRB0Button:
  4202                           	opt callstack 23
  4203  00215C                     
  4204                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  4205  00215C  C036  F037         	movff	_secondReadRB0,_firstReadRB0
  4206  002160                     
  4207                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  4208  002160  0E00               	movlw	0
  4209  002162  B081               	btfsc	129,0,c	;volatile
  4210  002164  0E01               	movlw	1
  4211  002166  6E36               	movwf	_secondReadRB0^0,c
  4212  002168                     
  4213                           ;button.c: 18:     int check = 0;
  4214  002168  0E00               	movlw	0
  4215  00216A  6E24               	movwf	(readRB0Button@check+1)^0,c
  4216  00216C  0E00               	movlw	0
  4217  00216E  6E23               	movwf	readRB0Button@check^0,c
  4218  002170                     
  4219                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  4220  002170  5036               	movf	_secondReadRB0^0,w,c
  4221  002172  1837               	xorwf	_firstReadRB0^0,w,c
  4222  002174  A4D8               	btfss	status,2,c
  4223  002176  EFBF  F010         	goto	i2u82_41
  4224  00217A  EFC1  F010         	goto	i2u82_40
  4225  00217E                     i2u82_41:
  4226  00217E  EFCD  F010         	goto	i2l1887
  4227  002182                     i2u82_40:
  4228  002182                     
  4229                           ;button.c: 20:         if (firstReadRB0 == 0) {
  4230  002182  5037               	movf	_firstReadRB0^0,w,c
  4231  002184  A4D8               	btfss	status,2,c
  4232  002186  EFC7  F010         	goto	i2u83_41
  4233  00218A  EFC9  F010         	goto	i2u83_40
  4234  00218E                     i2u83_41:
  4235  00218E  EFCD  F010         	goto	i2l1887
  4236  002192                     i2u83_40:
  4237  002192                     
  4238                           ;button.c: 21:             check = 1;
  4239  002192  0E00               	movlw	0
  4240  002194  6E24               	movwf	(readRB0Button@check+1)^0,c
  4241  002196  0E01               	movlw	1
  4242  002198  6E23               	movwf	readRB0Button@check^0,c
  4243  00219A                     i2l1887:
  4244                           
  4245                           ;button.c: 24:     return check;
  4246  00219A  C023  F021         	movff	readRB0Button@check,?_readRB0Button
  4247  00219E  C024  F022         	movff	readRB0Button@check+1,?_readRB0Button+1
  4248  0021A2  0012               	return		;funcret
  4249  0021A4                     __end_of_readRB0Button:
  4250                           	opt callstack 0
  4251                           
  4252 ;; *************** function _readRA5Button *****************
  4253 ;; Defined at:
  4254 ;;		line 3 in file "button.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;		None
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  check           2    2[COMRAM] int 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  2    0[COMRAM] int 
  4261 ;; Registers used:
  4262 ;;		wreg, status,2, status,0
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;Total ram usage:        4 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; This function calls:
  4275 ;;		Nothing
  4276 ;; This function is called by:
  4277 ;;		_button
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text27
  4282  0021A4                     __ptext27:
  4283                           	opt callstack 0
  4284  0021A4                     _readRA5Button:
  4285                           	opt callstack 23
  4286  0021A4                     
  4287                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4288  0021A4  C038  F039         	movff	_secondReadRA5,_firstReadRA5
  4289  0021A8                     
  4290                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4291  0021A8  0E00               	movlw	0
  4292  0021AA  BA80               	btfsc	128,5,c	;volatile
  4293  0021AC  0E01               	movlw	1
  4294  0021AE  6E38               	movwf	_secondReadRA5^0,c
  4295  0021B0                     
  4296                           ;button.c: 6:     int check = 0;
  4297  0021B0  0E00               	movlw	0
  4298  0021B2  6E24               	movwf	(readRA5Button@check+1)^0,c
  4299  0021B4  0E00               	movlw	0
  4300  0021B6  6E23               	movwf	readRA5Button@check^0,c
  4301  0021B8                     
  4302                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4303  0021B8  5038               	movf	_secondReadRA5^0,w,c
  4304  0021BA  1839               	xorwf	_firstReadRA5^0,w,c
  4305  0021BC  A4D8               	btfss	status,2,c
  4306  0021BE  EFE3  F010         	goto	i2u80_41
  4307  0021C2  EFE5  F010         	goto	i2u80_40
  4308  0021C6                     i2u80_41:
  4309  0021C6  EFF1  F010         	goto	i2l1871
  4310  0021CA                     i2u80_40:
  4311  0021CA                     
  4312                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4313  0021CA  5039               	movf	_firstReadRA5^0,w,c
  4314  0021CC  A4D8               	btfss	status,2,c
  4315  0021CE  EFEB  F010         	goto	i2u81_41
  4316  0021D2  EFED  F010         	goto	i2u81_40
  4317  0021D6                     i2u81_41:
  4318  0021D6  EFF1  F010         	goto	i2l1871
  4319  0021DA                     i2u81_40:
  4320  0021DA                     
  4321                           ;button.c: 9:             check = 1;
  4322  0021DA  0E00               	movlw	0
  4323  0021DC  6E24               	movwf	(readRA5Button@check+1)^0,c
  4324  0021DE  0E01               	movlw	1
  4325  0021E0  6E23               	movwf	readRA5Button@check^0,c
  4326  0021E2                     i2l1871:
  4327                           
  4328                           ;button.c: 12:    return check;
  4329  0021E2  C023  F021         	movff	readRA5Button@check,?_readRA5Button
  4330  0021E6  C024  F022         	movff	readRA5Button@check+1,?_readRA5Button+1
  4331  0021EA  0012               	return		;funcret
  4332  0021EC                     __end_of_readRA5Button:
  4333                           	opt callstack 0
  4334                           
  4335                           	psect	rparam
  4336  0000                     
  4337                           	psect	temp
  4338  00003A                     btemp:
  4339                           	opt callstack 0
  4340  00003A                     	ds	1
  4341  0000                     int$flags	set	btemp
  4342  0000                     wtemp8	set	btemp+1
  4343  0000                     ttemp5	set	btemp+1
  4344  0000                     ttemp6	set	btemp+4
  4345  0000                     ttemp7	set	btemp+8
  4346                           tosu	equ	0xFFF
  4347                           tosh	equ	0xFFE
  4348                           tosl	equ	0xFFD
  4349                           stkptr	equ	0xFFC
  4350                           pclatu	equ	0xFFB
  4351                           pclath	equ	0xFFA
  4352                           pcl	equ	0xFF9
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           indf0	equ	0xFEF
  4360                           postinc0	equ	0xFEE
  4361                           postdec0	equ	0xFED
  4362                           preinc0	equ	0xFEC
  4363                           plusw0	equ	0xFEB
  4364                           fsr0h	equ	0xFEA
  4365                           fsr0l	equ	0xFE9
  4366                           wreg	equ	0xFE8
  4367                           indf1	equ	0xFE7
  4368                           postinc1	equ	0xFE6
  4369                           postdec1	equ	0xFE5
  4370                           preinc1	equ	0xFE4
  4371                           plusw1	equ	0xFE3
  4372                           fsr1h	equ	0xFE2
  4373                           fsr1l	equ	0xFE1
  4374                           bsr	equ	0xFE0
  4375                           indf2	equ	0xFDF
  4376                           postinc2	equ	0xFDE
  4377                           postdec2	equ	0xFDD
  4378                           preinc2	equ	0xFDC
  4379                           plusw2	equ	0xFDB
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8


Data Sizes:
    Strings     82
    Constant    0
    Data        4
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModHour
    _main->_displayModMinute
    _main->_displayModSecond
    _displayStpWatch->_LCDPutStr
    _displayModSecond->_LCDPutStr
    _displayModMinute->_LCDPutStr
    _displayModHour->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   46828
                                             19 COMRAM     2     2      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                     _displayModHour
                   _displayModMinute
                   _displayModSecond
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModSecond                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModMinute                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModHour                                       2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3036
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModHour
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModMinute
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModSecond
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      39       1       60.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      32        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Sep 27 12:35:54 2019

      __end_of_displayModMinute 1506        __end_of_displayModSecond 137C                     ?_LCDPutChar 0021  
                            l76 11A6                              u10 2008                              u11 2004  
                            u20 201E                              u21 201A                              u30 205E  
                            u31 205A                    ___awdiv@sign 002E                     ?_LCDPutInst 0021  
                            _hr 0005                   ?_displayClock 0021           SendByteBBSPI@bitcount 002A  
                           l111 22C2                             l201 2292                             l114 22A6  
                           l204 20B4                             l117 22CC                             l213 2228  
                           l207 210A                             l311 1CA4                             l308 1F78  
                           l421 1688                             l413 17B8                             l191 200E  
                           l183 215A                             l192 2010                             l416 1606  
                           l424 14C0                             l186 22B8                             l195 205E  
                           l189 1FFA                             l429 1504                             l437 137A  
                           l198 2278                             l377 1A18                             l482 1BD6  
                           l395 18E8                             l732 1EDA                             l485 1AFE  
                           l719 1D68                             u210 1EF8                             u211 1EF4  
                           u300 198A                             u220 1F20                             u301 1986  
                           u221 1F1C                             u310 199C                             u230 1F48  
                           u311 1998                             u231 1F44                             u320 19B2  
                           u400 181A                             u240 1F70                             u321 19AE  
                           u401 1816                             u241 1F6C                             u330 1A10  
                           u250 1900                             u410 1838                             u331 1A0C  
                           u251 18FC                             u411 1834                             u260 191A  
                           u420 185A                             u500 16BA                             u261 1916  
                           u421 1856                             u501 16B6                             u270 1938  
                           u430 186C                             u510 16D8                             u271 1934  
                           u431 1868                             u511 16D4                             u280 194A  
                           u440 1882                             u520 16EA                             u281 1946  
                           u441 187E                             u521 16E6                             u290 1968  
                           u450 18E0                             u370 17D0                             u530 1708  
                           u610 1B1C                             u291 1964                             u451 18DC  
                           u371 17CC                             u531 1704                             u611 1B18  
                           u380 17EA                             u540 172A                             u620 1B2E  
                           u381 17E6                             u541 1726                             u621 1B2A  
                           u390 1808                             u550 173C                             u630 1B6C  
                           u391 1804                             u551 1738                             u631 1B68  
                           u560 1752                             u640 1B7E                             u561 174E  
                           u641 1B7A                             u570 17B0                             u490 16A0  
                           u650 1BA6                             u571 17AC                             u491 169C  
                           u651 1BA2                             u900 1D58                             u660 1BCE  
                           u901 1D54                             u661 1BCA                             u910 1E3E  
                           u911 1E3A                             u840 2228                             u920 1E58  
                           u841 2224                             u921 1E54                             u850 1CB8  
                           u930 1E72                             u851 1CB4                             u931 1E6E  
                           u860 1CD2                             u940 1E90                             u861 1CCE  
                           u941 1E8C                             u870 1CF8                             u950 1EA6  
                           u871 1CF4                             u951 1EA2                             u880 1D16  
                           u960 1ECA                             u881 1D12                             u961 1EC6  
                           u890 1D32                             u970 153A                             u891 1D2E  
                           u971 1536                             u980 155C                             u981 1558  
                           u990 156E                             u991 156A          __size_of_readRB0Button 0048  
                           _min 0007                             _sec 0009         __end_of_displayStpWatch 1B00  
                  ___awmod@sign 002E          __size_of_readRA5Button 0048                             wreg 000FE8  
               __end_of_LCDInit 215C                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l1201 2046                            l2001 2116                            l1203 204C  
                          l2011 2142                            l2003 211C                            l1205 204E  
                          l2013 2148                            l2005 2122                            l2021 1BDE  
                          l2101 1220                            l2015 214E                            l2007 212C  
                          l2031 1C2E                            l2023 1BEA                            l2111 1280  
                          l2103 123C                            l1161 1FF2                            l2017 2154  
                          l2009 213C                            l2033 1C4A                            l2025 1BF0  
                          l2041 1506                            l2121 12B6                            l2113 1286  
                          l2105 1242                            l2201 10C2                            l1171 201E  
                          l1163 1FF6                            l2035 1C66                            l2027 1C0C  
                          l2019 1BD8                            l2051 1542                            l2043 150C  
                          l2123 12D0                            l2131 1342                            l2115 128C  
                          l2107 1248                            l1411 1F20                            l1403 1EDC  
                          l2211 1100                            l2203 10C6                            l1181 2032  
                          l1173 2026                            l1261 2264                            l2037 1C6C  
                          l2029 1C28                            l2053 155C                            l2061 15CE  
                          l2045 1518                            l2125 12E2                            l2117 1292  
                          l2109 1264                            l2141 1A4E                            l2133 1A1A  
                          l1421 1F54                            l1413 1F28                            l1405 1EF8  
                          l2221 113E                            l2213 1104                            l2205 10CA  
                          l1191 203C                            l1183 2034                            l1175 202C  
                          l1263 2276                            l2039 1C88                            l2055 156E  
                          l2047 151E                            l2071 13B0                            l2063 137C  
                          l2127 12F2                            l2119 12AE                            l2151 1A98  
                          l2143 1A6A                            l2135 1A20                            l1423 1F70  
                          l1415 1F2C                            l1407 1F00                            l2231 118E  
                          l2223 1150                            l2215 1116                            l2207 10DC  
                          l1257 22A8                            l1193 203E                            l1185 2036  
                          l1177 202E                            l1169 2008                            l2057 157E  
                          l2049 153A                            l2081 13FC                            l2073 13CC  
                          l2065 1382                            l2129 132A                            l2161 1AE2  
                          l2153 1AB4                            l2145 1A70                            l2137 1A2C  
                          l1521 17EE                            l1513 17BA                            l1601 16EA  
                          l1417 1F48                            l1409 1F04                            l2225 1170  
                          l2217 1136                            l2209 10FC                            l1195 2040  
                          l1187 2038                            l1179 2030                            l1259 2262  
                          l1371 22C4                            l2059 15B6                            l2083 1416  
                          l2091 1488                            l2075 13D2                            l2067 138E  
                          l2155 1ABA                            l2147 1A76                            l2139 1A32  
                          l1451 1900                            l1531 1838                            l1523 17F6  
                          l1515 17BE                            l1611 173C                            l1603 16EE  
                          l1419 1F50                            l2227 1178                            l2219 113A  
                          l2235 11A6                            l1197 2042                            l1189 203A  
                          l1373 22C8                            l2085 1428                            l2077 13D8  
                          l2069 1394                            l2093 11EC                            l2157 1AC0  
                          l2149 1A7C                            l1461 194A                            l1453 191A  
                          l1541 1882                            l1533 1848                            l1525 1808  
                          l1517 17D0                            l1613 1740                            l1605 1708  
                          l1621 1762                            l1365 22BA                            l2229 117C  
                          l1199 2044                            l2087 1438                            l2079 13F4  
                          l2095 11F2                            l2159 1AC6                            l1471 199C  
                          l1463 194E                            l1455 191E                            l1447 18EA  
                          l1551 18E0                            l1543 188A                            l1535 185A  
                          l1527 181A                            l1519 17EA                            l1615 1752  
                          l1607 1718                            l1623 1794                            l1367 2294  
                          l2191 1070                            l2183 1054                            l2089 1470  
                          l2097 11FE                            l1473 19A0                            l1465 1968  
                          l1457 1926                            l1449 18EE                            l1481 19C2  
                          l2281 18A6                            l1537 186C                            l1529 181E  
                          l1625 17B0                            l1617 175A                            l1609 172A  
                          l1369 229A                            l2193 1088                            l2185 1060  
                          l2099 1204                            l2283 19D6                            l1475 19B2  
                          l1467 1978                            l1459 1938                            l1483 19F4  
                          l1539 1870                            l1547 1892                            l2195 108C  
                          l2187 1064                            l1901 20F2                            l1485 1A10  
                          l1477 19BA                            l1469 198A                            l1549 18C4  
                          l2277 11BA                            l2197 1090                            l2189 1068  
                          l1903 21EC                            l1911 1CA6                            l2279 1776  
                          l1591 16A0                            l1671 1B00                            l2199 10A2  
                          l1841 227C                            l1905 21F0                            l1921 1CD2  
                          l1913 1CAA                            l1593 16BA                            l1681 1B6C  
                          l1673 1B1C                            l1843 227E                            l1851 206C  
                          l1907 2204                            l1931 1D00                            l1923 1CDA  
                          l1915 1CB8                            l1595 16BE                            l1587 168A  
                          l1691 1BAE                            l1683 1B7E                            l1675 1B2E  
                          l1845 2290                            l1853 207A                            l1909 2208  
                          l1941 1D3A                            l1933 1D08                            l1925 1CDE  
                          l1917 1CC0                            l1597 16C6                            l1589 168E  
                          l1693 1BB2                            l1685 1B86                            l1677 1B46  
                          l1855 2092                            l1847 2062                            l1951 1D60  
                          l1943 1D3C                            l1935 1D16                            l1927 1CE6  
                          l1919 1CC4                            l1599 16D8                            l1695 1BCE  
                          l1687 1B8A                            l1679 1B5A                            l1857 209C  
                          l1849 2062                            l1945 1D42                            l1937 1D1C  
                          l1929 1CF8                            l1961 1E46                            l1689 1BA6  
                          l1891 20B8                            l1939 1D32                            l1947 1D48  
                          l1971 1E7A                            l1963 1E4A                            l1955 1E2C  
                          l1893 20B8                            l1949 1D58                            l1981 1EB4  
                          l1973 1E82                            l1965 1E58                            l1957 1E30  
                          l1895 20C2                            l1991 210C                            l1975 1E90  
                          l1983 1EBA                            l1967 1E60                            l1959 1E3E  
                          l1897 20D0                            l1993 2110                            l1985 1ECA  
                          l1977 1EA6                            l1969 1E72                            l1899 20E8  
                          l1995 2112                            l1987 1ED2                            l1979 1EAE  
                          l1997 2114                            l1999 2114                            STR_1 1012  
                          STR_2 1023                            STR_3 1043                            STR_4 1033  
                          STR_5 1001                            u1000 13F4                            u1001 13F0  
                          u1010 1416                            u1011 1412                            u1020 1428  
                          u1100 10A2                            u1021 1424                            u1101 109E  
                          u1030 12AE                            u1110 10DC                            u1031 12AA  
                          u1111 10D8                            u1040 12D0                            u1120 1116  
                          u1041 12CC                            u1121 1112                            u1050 12E2  
                          u1130 1150                            u1051 12DE                            u1131 114C  
                          u1140 118E                            u1141 118A                            u1207 208A  
                          u1217 20A2                            u1227 2132                            u1237 20C8  
                          u1247 20E0                            u1257 20F8                            u1197 2072  
                          _flag 000B                            _main 1054                            fsr1l 000FE1  
                          btemp 003A                ?_WritePort_BBSPI 002C                            start 000E  
            __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
               ?_displayModHour 0021                    ___param_bank 000000               _changeModePressed 0019  
               _deviceInterrupt 0008                  ??_displayClock 0032                           ?_main 0021  
               __end_of___awdiv 1D6A                 __end_of___awmod 1EDC                           _T0CON 000FD5  
               ___awdiv@divisor 002B                           i2l142 21EA                           i2l147 21A2  
                         i2l155 1E2A                           i2l156 1E2A                           i2l259 1FEC  
               ___awdiv@counter 002D                           _TMR0H 000FD7                           _TMR0L 000FD6  
                 __CFG_PWRT$OFF 000000                  __CFG_FCMEN$OFF 000000         __size_of_Port_BBSPIInit 001A  
                         _blink 0003                           _count 0001                           _state 0020  
__size_of_oscillationInitialize 000A   __end_of_oscillationInitialize 22C4                  __CFG_BOREN$OFF 000000  
                         tablat 000FF5             __size_of_LCDPutChar 0056             __size_of_LCDPutInst 0056  
                         ttemp5 003B                           ttemp6 003E                           ttemp7 0042  
                         status 000FD8               ??_timerInitialize 0029                           wtemp8 003B  
                 _readRB0Button 215C                   _readRA5Button 21A4                 __initialization 222A  
                  __end_of_main 11EC                  __CFG_OSC$HSPLL 000000                          ??_main 0034  
                 __activetblptr 000003                       ??_LCDInit 0030                    LCDPutChar@ch 002F  
             __end_of_LCDPutStr 222A                ?_displayStpWatch 0021                          _ADCON1 000FC1  
            __size_of_InitBBSPI 0012                ___awdiv@dividend 0029                    LCDPutInst@ch 002F  
                        i2l2241 1F7C                          i2l2171 1DB2                          i2l2163 1D6A  
                        i2l2251 1FA6                          i2l2243 1F8A                          i2l2173 1DB6  
                        i2l2181 1E06                          i2l2165 1D82                          i2l2253 1FB8  
                        i2l2245 1F98                          i2l2175 1DD2                          i2l2167 1D94  
                        i2l2255 1FBC                          i2l2247 1F9A                          i2l2177 1DD6  
                        i2l2169 1DA0                          i2l2257 1FD8                          i2l2249 1FA2  
                        i2l2179 1DF2                          i2l2259 1FE8                          i2l1861 21A8  
                        i2l1871 21E2                          i2l1863 21B0                          i2l1865 21B8  
                        i2l1881 2170                          i2l1867 21CA                          i2l1859 21A4  
                        i2l1883 2182                          i2l1875 215C                          i2l1869 21DA  
                        i2l1885 2192                          i2l1877 2160                          i2l1887 219A  
                        i2l1879 2168                          _OSCCON 000FD3                    LCDPutStr@ptr 0030  
                ?_readRB0Button 0021                  ?_readRA5Button 0021         __end_of_deviceInterrupt 1FF0  
                __CFG_XINST$OFF 000000                       ??___awdiv 002D                       ??___awmod 002D  
                        _minSTW 0013                          _secSTW 0011                          _button 1D6A  
                        clear_0 2250       __size_of_buttonInitialize 000A                ___awdiv@quotient 002F  
               ___awmod@divisor 002B                          _runSTW 0015                 ___awmod@counter 002D  
              __end_of_norClock 1F7A                    __pdataCOMRAM 0036          Port_BBSPIInit@port_dir 002C  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __end_of_displayClock 1CA6                      __accesstop 0060  
       __end_of__initialization 2256                   ___rparam_used 000001          __size_of_SendByteBBSPI 0070  
                 ?_modifyMinute 0021                   ?_modifySecond 0021                  __pcstackCOMRAM 0021  
             ?_displayModMinute 0021               ?_displayModSecond 0021               __end_of_InitBBSPI 22BA  
                  ??_LCDPutChar 002E                    ??_LCDPutInst 002E              ??_displayModMinute 0032  
            ??_displayModSecond 0032                  _Port_BBSPIInit 2260                 ??_readRB0Button 0023  
               ??_readRA5Button 0023              __end_of_LCDPutChar 20B6                ??_displayModHour 0032  
            __end_of_LCDPutInst 210C                ?_deviceInterrupt 0021                  ??_modifyMinute 0029  
                ??_modifySecond 0029                         ?_button 0021          __end_of_Port_BBSPIInit 227A  
                       _LCDInit 210C                   _SendByteBBSPI 1FF0                 _timerInitialize 2294  
                       _OSCTUNE 000F9B                         i2u80_40 21CA                         i2u80_41 21C6  
                       i2u81_40 21DA                         i2u81_41 21D6                         i2u82_40 2182  
                       i2u82_41 217E                         i2u83_40 2192                         i2u83_41 218E  
            __size_of_stopWatch 00D8                WritePort_BBSPI@a 002C                       ?_norClock 0021  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1CA6  
                       ___awmod 1E2C                      _miliSecSTW 000F        __size_of_WritePort_BBSPI 001A  
                  __psmallconst 1000                _buttonInitialize 22C4                         __pcinit 222A  
               __size_of_button 00C2                         __ramtop 1000                         __ptext0 1054  
                       __ptext1 2294                         __ptext2 1B00                         __ptext3 22BA  
                       __ptext4 1EDC                         __ptext5 168A                         __ptext6 17BA  
                       __ptext7 18EA                         __ptext8 1A1A                         __ptext9 11EC  
                ?_SendByteBBSPI 0021                 ?_Port_BBSPIInit 0021                ___awmod@dividend 0029  
                    _modifyHour 18EA           __size_of_displayClock 00CE                       _LCDPutStr 21EC  
                __pintcode_body 1F7A            end_of_initialization 2256                         int_func 1F7A  
         _oscillationInitialize 22BA                      ??_norClock 0029                         postdec1 000FE5  
                       postinc0 000FEE         __end_of_timerInitialize 22A8               __end_of_stopWatch 1BD8  
                  _displayClock 1BD8                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _TRISAbits 000F92            __end_of_modifyMinute 18EA            __end_of_modifySecond 17BA  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISFbits 000F97  
                    ?_LCDPutStr 0030             SendByteBBSPI@output 0029        __size_of_displayStpWatch 00E6  
                 __pidataCOMRAM 22CE                    _firstReadRB0 0037                    _firstReadRA5 0039  
               ??_SendByteBBSPI 0029                   _secondReadRB0 0036                   _secondReadRA5 0038  
                __end_of_button 1E2C                       _InitBBSPI 22A8               ??_WritePort_BBSPI 002D  
           start_initialization 222A                    _countPressed 001D                     ?_modifyHour 0021  
     __size_of_displayModMinute 018A       __size_of_displayModSecond 0190          ?_oscillationInitialize 0021  
                  _increaseTime 0017                        ??_button 0025                ?_timerInitialize 0021  
                    ?_InitBBSPI 0021                        ?_LCDInit 0021                     __pbssCOMRAM 0001  
            readRB0Button@check 0023                     ??_LCDPutStr 0032        __end_of_buttonInitialize 22CE  
         __end_of_readRB0Button 21A4           __end_of_readRA5Button 21EC               ??_displayStpWatch 0032  
             __size_of_norClock 009E                       __pintcode 0008             __size_of_modifyHour 0130  
                button@checkRB0 0027                  button@checkRA5 0025                        ?___awdiv 0029  
                      ?___awmod 0029                ??_Port_BBSPIInit 002C        __size_of_deviceInterrupt 1FE8  
         __size_of_modifyMinute 0130           __size_of_modifySecond 0130                       _count10ms 000D  
                   __smallconst 1000                       _countAuto 001B                        _LATAbits 000F89  
                      _LATCbits 000F8B                        _LATFbits 000F8E                        i2u106_40 1D94  
                      i2u106_41 1D90                        i2u107_40 1DB2                        i2u115_40 1F8A  
                      i2u107_41 1DAE                        i2u115_41 1F86                        i2u108_40 1DD2  
                      i2u116_40 1F98                        i2u108_41 1DCE                        i2u116_41 1F94  
                      i2u109_40 1DF2                        i2u117_40 1FB8                        i2u109_41 1DEE  
                      i2u117_41 1FB4                        i2u118_40 1FD8                        i2u118_41 1FD4  
                  _modifyMinute 17BA                    _modifySecond 168A         __size_of_displayModHour 0184  
                   ??_InitBBSPI 0029              SendByteBBSPI@input 002B                       _stopWatch 1B00  
              __size_of_LCDInit 0050                _displayModMinute 137C                _displayModSecond 11EC  
                     copy_data0 223E                        __Hrparam 0000                        __Lrparam 0000  
               _WritePort_BBSPI 227A                __size_of___awdiv 00C4                __size_of___awmod 00B0  
                    ?_stopWatch 0021               ??_deviceInterrupt 0029                    ??_modifyHour 0029  
            readRA5Button@check 0023                        __ptext10 137C                        __ptext11 1506  
                      __ptext20 20B6                        __ptext12 1BD8                        __ptext21 227A  
                      __ptext13 1E2C                        __ptext22 1FF0                        __ptext14 1CA6  
                      __ptext23 22A8                        __ptext15 21EC         ??_oscillationInitialize 0029  
                      __ptext16 2060                        __ptext25 1D6A                        __ptext17 22C4  
                      __ptext26 215C                        __ptext18 210C                        __ptext27 21A4  
                      __ptext19 2260                   __size_of_main 0198                        _norClock 1EDC  
                      _stModify 001F                        int$flags 003A              __end_of_modifyHour 1A1A  
                    _LCDPutChar 2060                      _LCDPutInst 20B6           __end_of_SendByteBBSPI 2060  
                    _INTCONbits 000FF2                 _displayStpWatch 1A1A                        intlevel2 0000  
             ?_buttonInitialize 0021         __end_of_WritePort_BBSPI 2294              ??_buttonInitialize 0029  
                _displayModHour 1506         WritePort_BBSPI@port_add 002D                     ??_stopWatch 0029  
      __size_of_timerInitialize 0014          __end_of_displayModHour 168A  
