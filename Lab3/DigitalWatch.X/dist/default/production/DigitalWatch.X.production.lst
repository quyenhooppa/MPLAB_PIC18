

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Nov 22 20:20:58 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F8722 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0023BE                     __pidataCOMRAM:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _secondReadRB0
    84  0023BE  01                 	db	1
    85                           
    86                           ;initializer for _firstReadRB0
    87  0023BF  01                 	db	1
    88                           
    89                           ;initializer for _secondReadRA5
    90  0023C0  01                 	db	1
    91                           
    92                           ;initializer for _firstReadRA5
    93  0023C1  01                 	db	1
    94  0000                     _LATCbits	set	3979
    95  0000                     _LATAbits	set	3977
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATFbits	set	3982
    98  0000                     _TRISFbits	set	3991
    99  0000                     _PORTBbits	set	3969
   100  0000                     _PORTAbits	set	3968
   101  0000                     _ADCON1	set	4033
   102  0000                     _TRISBbits	set	3987
   103  0000                     _TRISAbits	set	3986
   104  0000                     _TMR0L	set	4054
   105  0000                     _TMR0H	set	4055
   106  0000                     _T0CON	set	4053
   107  0000                     _INTCONbits	set	4082
   108  0000                     _OSCTUNE	set	3995
   109  0000                     _OSCCON	set	4051
   110                           
   111                           	psect	smallconst
   112  001000                     __psmallconst:
   113                           	opt callstack 0
   114  001000  00                 	db	0
   115  001001                     STR_5:
   116  001001  20                 	db	32
   117  001002  20                 	db	32
   118  001003  20                 	db	32
   119  001004  53                 	db	83	;'S'
   120  001005  54                 	db	84	;'T'
   121  001006  4F                 	db	79	;'O'
   122  001007  50                 	db	80	;'P'
   123  001008  20                 	db	32
   124  001009  57                 	db	87	;'W'
   125  00100A  41                 	db	65	;'A'
   126  00100B  54                 	db	84	;'T'
   127  00100C  43                 	db	67	;'C'
   128  00100D  48                 	db	72	;'H'
   129  00100E  20                 	db	32
   130  00100F  20                 	db	32
   131  001010  20                 	db	32
   132  001011  00                 	db	0
   133  001012                     STR_1:
   134  001012  20                 	db	32
   135  001013  20                 	db	32
   136  001014  4E                 	db	78	;'N'
   137  001015  4F                 	db	79	;'O'
   138  001016  52                 	db	82	;'R'
   139  001017  4D                 	db	77	;'M'
   140  001018  41                 	db	65	;'A'
   141  001019  4C                 	db	76	;'L'
   142  00101A  20                 	db	32
   143  00101B  43                 	db	67	;'C'
   144  00101C  4C                 	db	76	;'L'
   145  00101D  4F                 	db	79	;'O'
   146  00101E  43                 	db	67	;'C'
   147  00101F  4B                 	db	75	;'K'
   148  001020  20                 	db	32
   149  001021  20                 	db	32
   150  001022  00                 	db	0
   151  001023                     STR_2:
   152  001023  20                 	db	32
   153  001024  4D                 	db	77	;'M'
   154  001025  4F                 	db	79	;'O'
   155  001026  44                 	db	68	;'D'
   156  001027  49                 	db	73	;'I'
   157  001028  46                 	db	70	;'F'
   158  001029  49                 	db	73	;'I'
   159  00102A  45                 	db	69	;'E'
   160  00102B  53                 	db	83	;'S'
   161  00102C  20                 	db	32
   162  00102D  48                 	db	72	;'H'
   163  00102E  4F                 	db	79	;'O'
   164  00102F  55                 	db	85	;'U'
   165  001030  52                 	db	82	;'R'
   166  001031  20                 	db	32
   167  001032  00                 	db	0
   168  001033                     STR_4:
   169  001033  4D                 	db	77	;'M'
   170  001034  4F                 	db	79	;'O'
   171  001035  44                 	db	68	;'D'
   172  001036  49                 	db	73	;'I'
   173  001037  46                 	db	70	;'F'
   174  001038  49                 	db	73	;'I'
   175  001039  45                 	db	69	;'E'
   176  00103A  53                 	db	83	;'S'
   177  00103B  20                 	db	32
   178  00103C  53                 	db	83	;'S'
   179  00103D  45                 	db	69	;'E'
   180  00103E  43                 	db	67	;'C'
   181  00103F  4F                 	db	79	;'O'
   182  001040  4E                 	db	78	;'N'
   183  001041  44                 	db	68	;'D'
   184  001042  00                 	db	0
   185  001043                     STR_3:
   186  001043  4D                 	db	77	;'M'
   187  001044  4F                 	db	79	;'O'
   188  001045  44                 	db	68	;'D'
   189  001046  49                 	db	73	;'I'
   190  001047  46                 	db	70	;'F'
   191  001048  49                 	db	73	;'I'
   192  001049  45                 	db	69	;'E'
   193  00104A  53                 	db	83	;'S'
   194  00104B  20                 	db	32
   195  00104C  4D                 	db	77	;'M'
   196  00104D  49                 	db	73	;'I'
   197  00104E  4E                 	db	78	;'N'
   198  00104F  55                 	db	85	;'U'
   199  001050  54                 	db	84	;'T'
   200  001051  45                 	db	69	;'E'
   201  001052  00                 	db	0
   202                           
   203                           ; #config settings
   204  001053  00                 	db	0	; dummy byte at the end
   205  0000                     
   206                           	psect	cinit
   207  00231A                     __pcinit:
   208                           	opt callstack 0
   209  00231A                     start_initialization:
   210                           	opt callstack 0
   211  00231A                     __initialization:
   212                           	opt callstack 0
   213                           
   214                           ; Initialize objects allocated to COMRAM (4 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216  00231A  0EBE               	movlw	low __pidataCOMRAM
   217  00231C  6EF6               	movwf	tblptrl,c
   218  00231E  0E23               	movlw	high __pidataCOMRAM
   219  002320  6EF7               	movwf	tblptrh,c
   220  002322  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221  002324  6EF8               	movwf	tblptru,c
   222  002326  EE00  F03C         	lfsr	0,__pdataCOMRAM
   223  00232A  EE10 F004          	lfsr	1,4
   224  00232E                     copy_data0:
   225  00232E  0009               	tblrd		*+
   226  002330  CFF5 FFEE          	movff	tablat,postinc0
   227  002334  50E5               	movf	postdec1,w,c
   228  002336  50E1               	movf	fsr1l,w,c
   229  002338  E1FA               	bnz	copy_data0
   230                           
   231                           ; Clear objects allocated to COMRAM (36 bytes)
   232  00233A  EE00  F001         	lfsr	0,__pbssCOMRAM
   233  00233E  0E24               	movlw	36
   234  002340                     clear_0:
   235  002340  6AEE               	clrf	postinc0,c
   236  002342  06E8               	decf	wreg,f,c
   237  002344  E1FD               	bnz	clear_0
   238  002346                     end_of_initialization:
   239                           	opt callstack 0
   240  002346                     __end_of__initialization:
   241                           	opt callstack 0
   242  002346  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  002348  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  00234A  0100               	movlb	0
   245  00234C  EF2A  F008         	goto	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMRAM
   248  000001                     __pbssCOMRAM:
   249                           	opt callstack 0
   250  000001                     _count:
   251                           	opt callstack 0
   252  000001                     	ds	2
   253  000003                     _blink:
   254                           	opt callstack 0
   255  000003                     	ds	2
   256  000005                     _hr:
   257                           	opt callstack 0
   258  000005                     	ds	2
   259  000007                     _min:
   260                           	opt callstack 0
   261  000007                     	ds	2
   262  000009                     _sec:
   263                           	opt callstack 0
   264  000009                     	ds	2
   265  00000B                     _flag:
   266                           	opt callstack 0
   267  00000B                     	ds	2
   268  00000D                     _count10ms:
   269                           	opt callstack 0
   270  00000D                     	ds	2
   271  00000F                     _miliSecSTW:
   272                           	opt callstack 0
   273  00000F                     	ds	2
   274  000011                     _secSTW:
   275                           	opt callstack 0
   276  000011                     	ds	2
   277  000013                     _minSTW:
   278                           	opt callstack 0
   279  000013                     	ds	2
   280  000015                     _runSTW:
   281                           	opt callstack 0
   282  000015                     	ds	2
   283  000017                     _btnPressed:
   284                           	opt callstack 0
   285  000017                     	ds	2
   286  000019                     _increaseTime:
   287                           	opt callstack 0
   288  000019                     	ds	2
   289  00001B                     _RB0Pressed:
   290                           	opt callstack 0
   291  00001B                     	ds	2
   292  00001D                     _RA5Pressed:
   293                           	opt callstack 0
   294  00001D                     	ds	2
   295  00001F                     _countAuto:
   296                           	opt callstack 0
   297  00001F                     	ds	2
   298  000021                     _countPressed:
   299                           	opt callstack 0
   300  000021                     	ds	2
   301  000023                     _stModify:
   302                           	opt callstack 0
   303  000023                     	ds	1
   304  000024                     _state:
   305                           	opt callstack 0
   306  000024                     	ds	1
   307                           
   308                           	psect	dataCOMRAM
   309  00003C                     __pdataCOMRAM:
   310                           	opt callstack 0
   311  00003C                     _secondReadRB0:
   312                           	opt callstack 0
   313  00003C                     	ds	1
   314  00003D                     _firstReadRB0:
   315                           	opt callstack 0
   316  00003D                     	ds	1
   317  00003E                     _secondReadRA5:
   318                           	opt callstack 0
   319  00003E                     	ds	1
   320  00003F                     _firstReadRA5:
   321                           	opt callstack 0
   322  00003F                     	ds	1
   323                           
   324                           	psect	cstackCOMRAM
   325  000025                     __pcstackCOMRAM:
   326                           	opt callstack 0
   327  000025                     ?_readRA5Button:
   328                           	opt callstack 0
   329  000025                     ?_readRB0Button:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x0
   333  000025                     	ds	2
   334  000027                     readRA5Button@check:
   335                           	opt callstack 0
   336  000027                     readRB0Button@check:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x2
   340  000027                     	ds	2
   341  000029                     button@checkRA5:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x4
   345  000029                     	ds	2
   346  00002B                     button@checkRB0:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x6
   350  00002B                     	ds	2
   351  00002D                     ??_modifyHour:
   352  00002D                     ??_modifyMinute:
   353  00002D                     ??_modifySecond:
   354  00002D                     ??_stopWatch:
   355  00002D                     ?___awdiv:
   356                           	opt callstack 0
   357  00002D                     ?___awmod:
   358                           	opt callstack 0
   359  00002D                     SendByteBBSPI@output:
   360                           	opt callstack 0
   361  00002D                     ___awdiv@dividend:
   362                           	opt callstack 0
   363  00002D                     ___awmod@dividend:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x8
   367  00002D                     	ds	1
   368  00002E                     SendByteBBSPI@bitcount:
   369                           	opt callstack 0
   370                           
   371                           ; 1 bytes @ 0x9
   372  00002E                     	ds	1
   373  00002F                     SendByteBBSPI@input:
   374                           	opt callstack 0
   375  00002F                     ___awdiv@divisor:
   376                           	opt callstack 0
   377  00002F                     ___awmod@divisor:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0xA
   381  00002F                     	ds	1
   382  000030                     Port_BBSPIInit@port_dir:
   383                           	opt callstack 0
   384  000030                     WritePort_BBSPI@a:
   385                           	opt callstack 0
   386                           
   387                           ; 1 bytes @ 0xB
   388  000030                     	ds	1
   389  000031                     WritePort_BBSPI@port_add:
   390                           	opt callstack 0
   391  000031                     ___awdiv@counter:
   392                           	opt callstack 0
   393  000031                     ___awmod@counter:
   394                           	opt callstack 0
   395                           
   396                           ; 1 bytes @ 0xC
   397  000031                     	ds	1
   398  000032                     ??_LCDPutInst:
   399  000032                     ??_LCDPutChar:
   400  000032                     ___awdiv@sign:
   401                           	opt callstack 0
   402  000032                     ___awmod@sign:
   403                           	opt callstack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  000032                     	ds	1
   407  000033                     LCDPutChar@ch:
   408                           	opt callstack 0
   409  000033                     LCDPutInst@ch:
   410                           	opt callstack 0
   411  000033                     ___awdiv@quotient:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0xE
   415  000033                     	ds	1
   416  000034                     ??_LCDInit:
   417  000034                     LCDPutStr@ptr:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0xF
   421  000034                     	ds	2
   422  000036                     ??_displayModHour:
   423  000036                     ??_displayModMinute:
   424  000036                     ??_displayModSecond:
   425  000036                     
   426                           ; 1 bytes @ 0x11
   427  000036                     	ds	2
   428  000038                     ??_main:
   429                           
   430                           ; 1 bytes @ 0x13
   431  000038                     	ds	2
   432  00003A                     main@changeModePressed:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x15
   436  00003A                     	ds	2
   437                           
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 15 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  changeModePr    2   21[COMRAM] int 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   461 ;;Total ram usage:        4 bytes
   462 ;; Hardware stack levels required when called:    8
   463 ;; This function calls:
   464 ;;		_LCDInit
   465 ;;		_buttonInitialize
   466 ;;		_displayClock
   467 ;;		_displayModHour
   468 ;;		_displayModMinute
   469 ;;		_displayModSecond
   470 ;;		_displayStpWatch
   471 ;;		_modifyHour
   472 ;;		_modifyMinute
   473 ;;		_modifySecond
   474 ;;		_norClock
   475 ;;		_oscillationInitialize
   476 ;;		_stopWatch
   477 ;;		_timerInitialize
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text0
   484  001054                     __ptext0:
   485                           	opt callstack 0
   486  001054                     _main:
   487                           	opt callstack 23
   488  001054                     
   489                           ;main.c: 16:     oscillationInitialize();
   490  001054  ECD5  F011         	call	_oscillationInitialize	;wreg free
   491                           
   492                           ;main.c: 17:     timerInitialize();
   493  001058  ECC2  F011         	call	_timerInitialize	;wreg free
   494                           
   495                           ;main.c: 18:     buttonInitialize();
   496  00105C  ECDA  F011         	call	_buttonInitialize	;wreg free
   497  001060                     
   498                           ;main.c: 19:     LCDInit();
   499  001060  ECFE  F010         	call	_LCDInit	;wreg free
   500  001064                     
   501                           ;main.c: 20:     state = norClk;
   502  001064  0E00               	movlw	0
   503  001066  6E24               	movwf	_state^0,c
   504  001068                     
   505                           ;main.c: 21:     stModify = init;
   506  001068  0E00               	movlw	0
   507  00106A  6E23               	movwf	_stModify^0,c
   508  00106C                     
   509                           ;main.c: 22:     int changeModePressed = 0;
   510  00106C  0E00               	movlw	0
   511  00106E  6E3B               	movwf	(main@changeModePressed+1)^0,c
   512  001070  0E00               	movlw	0
   513  001072  6E3A               	movwf	main@changeModePressed^0,c
   514  001074                     l79:
   515                           
   516                           ;main.c: 24:     {;main.c: 25:         if (RA5Pressed == 0) {
   517  001074  501D               	movf	_RA5Pressed^0,w,c
   518  001076  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   519  001078  A4D8               	btfss	status,2,c
   520  00107A  EF41  F008         	goto	u1241
   521  00107E  EF43  F008         	goto	u1240
   522  001082                     u1241:
   523  001082  EF11  F009         	goto	l2309
   524  001086                     u1240:
   525  001086                     
   526                           ;main.c: 26:             changeModePressed = 0;
   527  001086  0E00               	movlw	0
   528  001088  6E3B               	movwf	(main@changeModePressed+1)^0,c
   529  00108A  0E00               	movlw	0
   530  00108C  6E3A               	movwf	main@changeModePressed^0,c
   531  00108E  EF11  F009         	goto	l2309
   532  001092                     l2255:
   533                           
   534                           ;main.c: 30:                 miliSecSTW = 0;
   535  001092  0E00               	movlw	0
   536  001094  6E10               	movwf	(_miliSecSTW+1)^0,c
   537  001096  0E00               	movlw	0
   538  001098  6E0F               	movwf	_miliSecSTW^0,c
   539                           
   540                           ;main.c: 31:                 secSTW = 0;
   541  00109A  0E00               	movlw	0
   542  00109C  6E12               	movwf	(_secSTW+1)^0,c
   543  00109E  0E00               	movlw	0
   544  0010A0  6E11               	movwf	_secSTW^0,c
   545                           
   546                           ;main.c: 32:                 minSTW = 0;
   547  0010A2  0E00               	movlw	0
   548  0010A4  6E14               	movwf	(_minSTW+1)^0,c
   549  0010A6  0E00               	movlw	0
   550  0010A8  6E13               	movwf	_minSTW^0,c
   551  0010AA                     
   552                           ;main.c: 33:                 norClock();
   553  0010AA  ECE6  F00F         	call	_norClock	;wreg free
   554  0010AE                     
   555                           ;main.c: 34:                 displayClock();
   556  0010AE  ECC5  F00E         	call	_displayClock	;wreg free
   557  0010B2                     
   558                           ;main.c: 35:                 if (RA5Pressed == 1) {
   559  0010B2  041D               	decf	_RA5Pressed^0,w,c
   560  0010B4  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   561  0010B6  A4D8               	btfss	status,2,c
   562  0010B8  EF60  F008         	goto	u1251
   563  0010BC  EF62  F008         	goto	u1250
   564  0010C0                     u1251:
   565  0010C0  EF3A  F008         	goto	l79
   566  0010C4                     u1250:
   567  0010C4                     
   568                           ;main.c: 36:                     if (changeModePressed == 0) {
   569  0010C4  503A               	movf	main@changeModePressed^0,w,c
   570  0010C6  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   571  0010C8  A4D8               	btfss	status,2,c
   572  0010CA  EF69  F008         	goto	u1261
   573  0010CE  EF6B  F008         	goto	u1260
   574  0010D2                     u1261:
   575  0010D2  EF32  F009         	goto	l85
   576  0010D6                     u1260:
   577  0010D6                     
   578                           ;main.c: 37:                         changeModePressed = 1;
   579  0010D6  0E00               	movlw	0
   580  0010D8  6E3B               	movwf	(main@changeModePressed+1)^0,c
   581  0010DA  0E01               	movlw	1
   582  0010DC  6E3A               	movwf	main@changeModePressed^0,c
   583                           
   584                           ;main.c: 38:                         state = modHr;
   585  0010DE  0E01               	movlw	1
   586  0010E0  6E24               	movwf	_state^0,c
   587                           
   588                           ;main.c: 39:                         blink = 0;
   589  0010E2  0E00               	movlw	0
   590  0010E4  6E04               	movwf	(_blink+1)^0,c
   591  0010E6  0E00               	movlw	0
   592  0010E8  6E03               	movwf	_blink^0,c
   593                           
   594                           ;main.c: 40:                         count10ms = 0;
   595  0010EA  0E00               	movlw	0
   596  0010EC  6E0E               	movwf	(_count10ms+1)^0,c
   597  0010EE  0E00               	movlw	0
   598  0010F0  6E0D               	movwf	_count10ms^0,c
   599  0010F2  EF3A  F008         	goto	l79
   600  0010F6                     l2267:
   601                           
   602                           ;main.c: 45:                 modifyHour();
   603  0010F6  ECD6  F00C         	call	_modifyHour	;wreg free
   604  0010FA                     
   605                           ;main.c: 46:                 displayModHour();
   606  0010FA  ECD9  F00A         	call	_displayModHour	;wreg free
   607  0010FE                     
   608                           ;main.c: 47:                 if (RA5Pressed == 1) {
   609  0010FE  041D               	decf	_RA5Pressed^0,w,c
   610  001100  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   611  001102  A4D8               	btfss	status,2,c
   612  001104  EF86  F008         	goto	u1271
   613  001108  EF88  F008         	goto	u1270
   614  00110C                     u1271:
   615  00110C  EF3A  F008         	goto	l79
   616  001110                     u1270:
   617  001110                     
   618                           ;main.c: 48:                     if (changeModePressed == 0) {
   619  001110  503A               	movf	main@changeModePressed^0,w,c
   620  001112  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   621  001114  A4D8               	btfss	status,2,c
   622  001116  EF8F  F008         	goto	u1281
   623  00111A  EF91  F008         	goto	u1280
   624  00111E                     u1281:
   625  00111E  EF32  F009         	goto	l85
   626  001122                     u1280:
   627  001122                     
   628                           ;main.c: 49:                         changeModePressed = 1;
   629  001122  0E00               	movlw	0
   630  001124  6E3B               	movwf	(main@changeModePressed+1)^0,c
   631  001126  0E01               	movlw	1
   632  001128  6E3A               	movwf	main@changeModePressed^0,c
   633                           
   634                           ;main.c: 50:                         state = modMin;
   635  00112A  0E02               	movlw	2
   636  00112C  6E24               	movwf	_state^0,c
   637                           
   638                           ;main.c: 51:                         blink = 0;
   639  00112E  0E00               	movlw	0
   640  001130  6E04               	movwf	(_blink+1)^0,c
   641  001132  0E00               	movlw	0
   642  001134  6E03               	movwf	_blink^0,c
   643                           
   644                           ;main.c: 52:                         count10ms = 0;
   645  001136  0E00               	movlw	0
   646  001138  6E0E               	movwf	(_count10ms+1)^0,c
   647  00113A  0E00               	movlw	0
   648  00113C  6E0D               	movwf	_count10ms^0,c
   649  00113E  EF3A  F008         	goto	l79
   650  001142                     l2277:
   651                           
   652                           ;main.c: 57:                 modifyMinute();
   653  001142  EC3E  F00C         	call	_modifyMinute	;wreg free
   654  001146                     
   655                           ;main.c: 58:                 displayModMinute();
   656  001146  EC09  F00A         	call	_displayModMinute	;wreg free
   657  00114A                     
   658                           ;main.c: 59:                 if (RA5Pressed == 1) {
   659  00114A  041D               	decf	_RA5Pressed^0,w,c
   660  00114C  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   661  00114E  A4D8               	btfss	status,2,c
   662  001150  EFAC  F008         	goto	u1291
   663  001154  EFAE  F008         	goto	u1290
   664  001158                     u1291:
   665  001158  EF3A  F008         	goto	l79
   666  00115C                     u1290:
   667  00115C                     
   668                           ;main.c: 60:                     if (changeModePressed == 0) {
   669  00115C  503A               	movf	main@changeModePressed^0,w,c
   670  00115E  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   671  001160  A4D8               	btfss	status,2,c
   672  001162  EFB5  F008         	goto	u1301
   673  001166  EFB7  F008         	goto	u1300
   674  00116A                     u1301:
   675  00116A  EF32  F009         	goto	l85
   676  00116E                     u1300:
   677  00116E                     
   678                           ;main.c: 61:                         changeModePressed = 1;
   679  00116E  0E00               	movlw	0
   680  001170  6E3B               	movwf	(main@changeModePressed+1)^0,c
   681  001172  0E01               	movlw	1
   682  001174  6E3A               	movwf	main@changeModePressed^0,c
   683                           
   684                           ;main.c: 62:                         state = modSec;
   685  001176  0E03               	movlw	3
   686  001178  6E24               	movwf	_state^0,c
   687                           
   688                           ;main.c: 63:                         blink = 0;
   689  00117A  0E00               	movlw	0
   690  00117C  6E04               	movwf	(_blink+1)^0,c
   691  00117E  0E00               	movlw	0
   692  001180  6E03               	movwf	_blink^0,c
   693                           
   694                           ;main.c: 64:                         count10ms = 0;
   695  001182  0E00               	movlw	0
   696  001184  6E0E               	movwf	(_count10ms+1)^0,c
   697  001186  0E00               	movlw	0
   698  001188  6E0D               	movwf	_count10ms^0,c
   699  00118A  EF3A  F008         	goto	l79
   700  00118E                     l2287:
   701                           
   702                           ;main.c: 69:                 modifySecond();
   703  00118E  ECA6  F00B         	call	_modifySecond	;wreg free
   704  001192                     
   705                           ;main.c: 70:                 displayModSecond();
   706  001192  EC36  F009         	call	_displayModSecond	;wreg free
   707  001196                     
   708                           ;main.c: 71:                 if (RA5Pressed == 1) {
   709  001196  041D               	decf	_RA5Pressed^0,w,c
   710  001198  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   711  00119A  A4D8               	btfss	status,2,c
   712  00119C  EFD2  F008         	goto	u1311
   713  0011A0  EFD4  F008         	goto	u1310
   714  0011A4                     u1311:
   715  0011A4  EF3A  F008         	goto	l79
   716  0011A8                     u1310:
   717  0011A8                     
   718                           ;main.c: 72:                     if (changeModePressed == 0) {
   719  0011A8  503A               	movf	main@changeModePressed^0,w,c
   720  0011AA  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   721  0011AC  A4D8               	btfss	status,2,c
   722  0011AE  EFDB  F008         	goto	u1321
   723  0011B2  EFDD  F008         	goto	u1320
   724  0011B6                     u1321:
   725  0011B6  EF32  F009         	goto	l85
   726  0011BA                     u1320:
   727  0011BA                     
   728                           ;main.c: 73:                         changeModePressed = 1;
   729  0011BA  0E00               	movlw	0
   730  0011BC  6E3B               	movwf	(main@changeModePressed+1)^0,c
   731  0011BE  0E01               	movlw	1
   732  0011C0  6E3A               	movwf	main@changeModePressed^0,c
   733                           
   734                           ;main.c: 74:                         state = stpWatch;
   735  0011C2  0E04               	movlw	4
   736  0011C4  6E24               	movwf	_state^0,c
   737                           
   738                           ;main.c: 75:                         runSTW = 0;
   739  0011C6  0E00               	movlw	0
   740  0011C8  6E16               	movwf	(_runSTW+1)^0,c
   741  0011CA  0E00               	movlw	0
   742  0011CC  6E15               	movwf	_runSTW^0,c
   743                           
   744                           ;main.c: 76:                         count10ms = 0;
   745  0011CE  0E00               	movlw	0
   746  0011D0  6E0E               	movwf	(_count10ms+1)^0,c
   747  0011D2  0E00               	movlw	0
   748  0011D4  6E0D               	movwf	_count10ms^0,c
   749  0011D6  EF3A  F008         	goto	l79
   750  0011DA                     l2297:
   751                           
   752                           ;main.c: 81:                 norClock();
   753  0011DA  ECE6  F00F         	call	_norClock	;wreg free
   754                           
   755                           ;main.c: 82:                 stopWatch();
   756  0011DE  EC6E  F00D         	call	_stopWatch	;wreg free
   757  0011E2                     
   758                           ;main.c: 83:                 displayStpWatch();
   759  0011E2  ECEF  F00D         	call	_displayStpWatch	;wreg free
   760  0011E6                     
   761                           ;main.c: 84:                 if (RA5Pressed == 1) {
   762  0011E6  041D               	decf	_RA5Pressed^0,w,c
   763  0011E8  101E               	iorwf	(_RA5Pressed+1)^0,w,c
   764  0011EA  A4D8               	btfss	status,2,c
   765  0011EC  EFFA  F008         	goto	u1331
   766  0011F0  EFFC  F008         	goto	u1330
   767  0011F4                     u1331:
   768  0011F4  EF3A  F008         	goto	l79
   769  0011F8                     u1330:
   770  0011F8                     
   771                           ;main.c: 85:                     if (changeModePressed == 0) {
   772  0011F8  503A               	movf	main@changeModePressed^0,w,c
   773  0011FA  103B               	iorwf	(main@changeModePressed+1)^0,w,c
   774  0011FC  A4D8               	btfss	status,2,c
   775  0011FE  EF03  F009         	goto	u1341
   776  001202  EF05  F009         	goto	u1340
   777  001206                     u1341:
   778  001206  EF32  F009         	goto	l85
   779  00120A                     u1340:
   780  00120A                     
   781                           ;main.c: 86:                         changeModePressed = 1;
   782  00120A  0E00               	movlw	0
   783  00120C  6E3B               	movwf	(main@changeModePressed+1)^0,c
   784  00120E  0E01               	movlw	1
   785  001210  6E3A               	movwf	main@changeModePressed^0,c
   786                           
   787                           ;main.c: 87:                         state = norClk;
   788  001212  0E00               	movlw	0
   789  001214  6E24               	movwf	_state^0,c
   790                           
   791                           ;main.c: 88:                         runSTW = 0;
   792  001216  0E00               	movlw	0
   793  001218  6E16               	movwf	(_runSTW+1)^0,c
   794  00121A  0E00               	movlw	0
   795  00121C  6E15               	movwf	_runSTW^0,c
   796  00121E  EF3A  F008         	goto	l79
   797  001222                     l2309:
   798  001222  5024               	movf	_state^0,w,c
   799  001224  6E38               	movwf	??_main^0,c
   800  001226  6A39               	clrf	(??_main+1)^0,c
   801                           
   802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   803                           ; Switch size 1, requested type "simple"
   804                           ; Number of cases is 1, Range of values is 0 to 0
   805                           ; switch strategies available:
   806                           ; Name         Instructions Cycles
   807                           ; simple_byte            4     3 (average)
   808                           ;	Chosen strategy is simple_byte
   809  001228  5039               	movf	(??_main+1)^0,w,c
   810  00122A  0A00               	xorlw	0	; case 0
   811  00122C  B4D8               	btfsc	status,2,c
   812  00122E  EF1B  F009         	goto	l2351
   813  001232  EF3A  F008         	goto	l79
   814  001236                     l2351:
   815                           
   816                           ; Switch size 1, requested type "simple"
   817                           ; Number of cases is 5, Range of values is 0 to 4
   818                           ; switch strategies available:
   819                           ; Name         Instructions Cycles
   820                           ; simple_byte           16     9 (average)
   821                           ;	Chosen strategy is simple_byte
   822  001236  5038               	movf	??_main^0,w,c
   823  001238  0A00               	xorlw	0	; case 0
   824  00123A  B4D8               	btfsc	status,2,c
   825  00123C  EF49  F008         	goto	l2255
   826  001240  0A01               	xorlw	1	; case 1
   827  001242  B4D8               	btfsc	status,2,c
   828  001244  EF7B  F008         	goto	l2267
   829  001248  0A03               	xorlw	3	; case 2
   830  00124A  B4D8               	btfsc	status,2,c
   831  00124C  EFA1  F008         	goto	l2277
   832  001250  0A01               	xorlw	1	; case 3
   833  001252  B4D8               	btfsc	status,2,c
   834  001254  EFC7  F008         	goto	l2287
   835  001258  0A07               	xorlw	7	; case 4
   836  00125A  B4D8               	btfsc	status,2,c
   837  00125C  EFED  F008         	goto	l2297
   838  001260  EF3A  F008         	goto	l79
   839  001264                     l85:
   840  001264  EF3A  F008         	goto	l79
   841  001268  EF07  F000         	goto	start
   842  00126C                     __end_of_main:
   843                           	opt callstack 0
   844                           
   845 ;; *************** function _timerInitialize *****************
   846 ;; Defined at:
   847 ;;		line 8 in file "system.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;Total ram usage:        0 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    3
   868 ;; This function calls:
   869 ;;		Nothing
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text1
   876  002384                     __ptext1:
   877                           	opt callstack 0
   878  002384                     _timerInitialize:
   879                           	opt callstack 27
   880  002384                     
   881                           ;system.c: 9:     INTCONbits.GIE = 1;
   882  002384  8EF2               	bsf	242,7,c	;volatile
   883                           
   884                           ;system.c: 11:     INTCONbits.TMR0IE = 1;
   885  002386  8AF2               	bsf	242,5,c	;volatile
   886                           
   887                           ;system.c: 12:     INTCONbits.TMR0IF = 0;
   888  002388  94F2               	bcf	242,2,c	;volatile
   889  00238A                     
   890                           ;system.c: 13:     T0CON = 0b10000100;
   891  00238A  0E84               	movlw	132
   892  00238C  6ED5               	movwf	213,c	;volatile
   893                           
   894                           ;system.c: 15:     TMR0H = 0xfd;
   895  00238E  0EFD               	movlw	253
   896  002390  6ED7               	movwf	215,c	;volatile
   897                           
   898                           ;system.c: 16:     TMR0L = 0x7f;
   899  002392  0E7F               	movlw	127
   900  002394  6ED6               	movwf	214,c	;volatile
   901  002396  0012               	return		;funcret
   902  002398                     __end_of_timerInitialize:
   903                           	opt callstack 0
   904                           
   905 ;; *************** function _stopWatch *****************
   906 ;; Defined at:
   907 ;;		line 3 in file "stateStpWatch.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;		None
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, status,2, status,0
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;Total ram usage:        2 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    3
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_main
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text2
   936  001ADC                     __ptext2:
   937                           	opt callstack 0
   938  001ADC                     _stopWatch:
   939                           	opt callstack 27
   940  001ADC                     
   941                           ;stateStpWatch.c: 4:     if (RB0Pressed == 1) {
   942  001ADC  041B               	decf	_RB0Pressed^0,w,c
   943  001ADE  101C               	iorwf	(_RB0Pressed+1)^0,w,c
   944  001AE0  A4D8               	btfss	status,2,c
   945  001AE2  EF75  F00D         	goto	u641
   946  001AE6  EF77  F00D         	goto	u640
   947  001AEA                     u641:
   948  001AEA  EFA3  F00D         	goto	l1719
   949  001AEE                     u640:
   950  001AEE                     
   951                           ;stateStpWatch.c: 5:         if (btnPressed == 0) {
   952  001AEE  5017               	movf	_btnPressed^0,w,c
   953  001AF0  1018               	iorwf	(_btnPressed+1)^0,w,c
   954  001AF2  A4D8               	btfss	status,2,c
   955  001AF4  EF7E  F00D         	goto	u651
   956  001AF8  EF80  F00D         	goto	u650
   957  001AFC                     u651:
   958  001AFC  EFA3  F00D         	goto	l1719
   959  001B00                     u650:
   960  001B00                     
   961                           ;stateStpWatch.c: 6:             btnPressed = 1;
   962  001B00  0E00               	movlw	0
   963  001B02  6E18               	movwf	(_btnPressed+1)^0,c
   964  001B04  0E01               	movlw	1
   965  001B06  6E17               	movwf	_btnPressed^0,c
   966  001B08                     
   967                           ;stateStpWatch.c: 7:         if (runSTW == 0) {
   968  001B08  5015               	movf	_runSTW^0,w,c
   969  001B0A  1016               	iorwf	(_runSTW+1)^0,w,c
   970  001B0C  A4D8               	btfss	status,2,c
   971  001B0E  EF8B  F00D         	goto	u661
   972  001B12  EF8D  F00D         	goto	u660
   973  001B16                     u661:
   974  001B16  EF99  F00D         	goto	l1717
   975  001B1A                     u660:
   976  001B1A                     
   977                           ;stateStpWatch.c: 8:             miliSecSTW = 0;
   978  001B1A  0E00               	movlw	0
   979  001B1C  6E10               	movwf	(_miliSecSTW+1)^0,c
   980  001B1E  0E00               	movlw	0
   981  001B20  6E0F               	movwf	_miliSecSTW^0,c
   982                           
   983                           ;stateStpWatch.c: 9:             secSTW = 0;
   984  001B22  0E00               	movlw	0
   985  001B24  6E12               	movwf	(_secSTW+1)^0,c
   986  001B26  0E00               	movlw	0
   987  001B28  6E11               	movwf	_secSTW^0,c
   988                           
   989                           ;stateStpWatch.c: 10:             minSTW = 0;
   990  001B2A  0E00               	movlw	0
   991  001B2C  6E14               	movwf	(_minSTW+1)^0,c
   992  001B2E  0E00               	movlw	0
   993  001B30  6E13               	movwf	_minSTW^0,c
   994  001B32                     l1717:
   995                           
   996                           ;stateStpWatch.c: 12:         runSTW = (runSTW + 1) % 2;
   997  001B32  0E01               	movlw	1
   998  001B34  2415               	addwf	_runSTW^0,w,c
   999  001B36  6E2D               	movwf	??_stopWatch^0,c
  1000  001B38  0E00               	movlw	0
  1001  001B3A  2016               	addwfc	(_runSTW+1)^0,w,c
  1002  001B3C  6E2E               	movwf	(??_stopWatch+1)^0,c
  1003  001B3E  0E01               	movlw	1
  1004  001B40  142D               	andwf	??_stopWatch^0,w,c
  1005  001B42  6E15               	movwf	_runSTW^0,c
  1006  001B44  6A16               	clrf	(_runSTW+1)^0,c
  1007  001B46                     l1719:
  1008                           
  1009                           ;stateStpWatch.c: 15:     if (RB0Pressed == 0) {
  1010  001B46  501B               	movf	_RB0Pressed^0,w,c
  1011  001B48  101C               	iorwf	(_RB0Pressed+1)^0,w,c
  1012  001B4A  A4D8               	btfss	status,2,c
  1013  001B4C  EFAA  F00D         	goto	u671
  1014  001B50  EFAC  F00D         	goto	u670
  1015  001B54                     u671:
  1016  001B54  EFB0  F00D         	goto	l1723
  1017  001B58                     u670:
  1018  001B58                     
  1019                           ;stateStpWatch.c: 16:         btnPressed = 0;
  1020  001B58  0E00               	movlw	0
  1021  001B5A  6E18               	movwf	(_btnPressed+1)^0,c
  1022  001B5C  0E00               	movlw	0
  1023  001B5E  6E17               	movwf	_btnPressed^0,c
  1024  001B60                     l1723:
  1025                           
  1026                           ;stateStpWatch.c: 18:     if (runSTW == 1) {
  1027  001B60  0415               	decf	_runSTW^0,w,c
  1028  001B62  1016               	iorwf	(_runSTW+1)^0,w,c
  1029  001B64  A4D8               	btfss	status,2,c
  1030  001B66  EFB7  F00D         	goto	u681
  1031  001B6A  EFB9  F00D         	goto	u680
  1032  001B6E                     u681:
  1033  001B6E  EFEE  F00D         	goto	l512
  1034  001B72                     u680:
  1035  001B72                     
  1036                           ;stateStpWatch.c: 19:         if (flag == 1) {
  1037  001B72  040B               	decf	_flag^0,w,c
  1038  001B74  100C               	iorwf	(_flag+1)^0,w,c
  1039  001B76  A4D8               	btfss	status,2,c
  1040  001B78  EFC0  F00D         	goto	u691
  1041  001B7C  EFC2  F00D         	goto	u690
  1042  001B80                     u691:
  1043  001B80  EFC8  F00D         	goto	l1731
  1044  001B84                     u690:
  1045  001B84                     
  1046                           ;stateStpWatch.c: 20:             flag = 0;
  1047  001B84  0E00               	movlw	0
  1048  001B86  6E0C               	movwf	(_flag+1)^0,c
  1049  001B88  0E00               	movlw	0
  1050  001B8A  6E0B               	movwf	_flag^0,c
  1051  001B8C                     
  1052                           ;stateStpWatch.c: 21:             secSTW++;
  1053  001B8C  4A11               	infsnz	_secSTW^0,f,c
  1054  001B8E  2A12               	incf	(_secSTW+1)^0,f,c
  1055  001B90                     l1731:
  1056                           
  1057                           ;stateStpWatch.c: 23:         if (secSTW >= 60) {
  1058  001B90  BE12               	btfsc	(_secSTW+1)^0,7,c
  1059  001B92  EFD4  F00D         	goto	u701
  1060  001B96  5012               	movf	(_secSTW+1)^0,w,c
  1061  001B98  E109               	bnz	u700
  1062  001B9A  0E3C               	movlw	60
  1063  001B9C  5C11               	subwf	_secSTW^0,w,c
  1064  001B9E  A0D8               	btfss	status,0,c
  1065  001BA0  EFD4  F00D         	goto	u701
  1066  001BA4  EFD6  F00D         	goto	u700
  1067  001BA8                     u701:
  1068  001BA8  EFDC  F00D         	goto	l1737
  1069  001BAC                     u700:
  1070  001BAC                     
  1071                           ;stateStpWatch.c: 24:             secSTW = 0;
  1072  001BAC  0E00               	movlw	0
  1073  001BAE  6E12               	movwf	(_secSTW+1)^0,c
  1074  001BB0  0E00               	movlw	0
  1075  001BB2  6E11               	movwf	_secSTW^0,c
  1076  001BB4                     
  1077                           ;stateStpWatch.c: 25:             minSTW++;
  1078  001BB4  4A13               	infsnz	_minSTW^0,f,c
  1079  001BB6  2A14               	incf	(_minSTW+1)^0,f,c
  1080  001BB8                     l1737:
  1081                           
  1082                           ;stateStpWatch.c: 27:         if (minSTW >= 60) {
  1083  001BB8  BE14               	btfsc	(_minSTW+1)^0,7,c
  1084  001BBA  EFE8  F00D         	goto	u711
  1085  001BBE  5014               	movf	(_minSTW+1)^0,w,c
  1086  001BC0  E109               	bnz	u710
  1087  001BC2  0E3C               	movlw	60
  1088  001BC4  5C13               	subwf	_minSTW^0,w,c
  1089  001BC6  A0D8               	btfss	status,0,c
  1090  001BC8  EFE8  F00D         	goto	u711
  1091  001BCC  EFEA  F00D         	goto	u710
  1092  001BD0                     u711:
  1093  001BD0  EFEE  F00D         	goto	l512
  1094  001BD4                     u710:
  1095  001BD4                     
  1096                           ;stateStpWatch.c: 28:             minSTW = 0;
  1097  001BD4  0E00               	movlw	0
  1098  001BD6  6E14               	movwf	(_minSTW+1)^0,c
  1099  001BD8  0E00               	movlw	0
  1100  001BDA  6E13               	movwf	_minSTW^0,c
  1101  001BDC                     l512:
  1102  001BDC  0012               	return		;funcret
  1103  001BDE                     __end_of_stopWatch:
  1104                           	opt callstack 0
  1105                           
  1106 ;; *************** function _oscillationInitialize *****************
  1107 ;; Defined at:
  1108 ;;		line 3 in file "system.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;		None
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, status,2
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;Total ram usage:        0 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    3
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text3
  1137  0023AA                     __ptext3:
  1138                           	opt callstack 0
  1139  0023AA                     _oscillationInitialize:
  1140                           	opt callstack 27
  1141  0023AA                     
  1142                           ;system.c: 4:     OSCCON = 0b01110111;
  1143  0023AA  0E77               	movlw	119
  1144  0023AC  6ED3               	movwf	211,c	;volatile
  1145                           
  1146                           ;system.c: 5:     OSCTUNE = 0b00001111;
  1147  0023AE  0E0F               	movlw	15
  1148  0023B0  6E9B               	movwf	155,c	;volatile
  1149  0023B2  0012               	return		;funcret
  1150  0023B4                     __end_of_oscillationInitialize:
  1151                           	opt callstack 0
  1152                           
  1153 ;; *************** function _norClock *****************
  1154 ;; Defined at:
  1155 ;;		line 3 in file "stateClock.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    3
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text4
  1184  001FCC                     __ptext4:
  1185                           	opt callstack 0
  1186  001FCC                     _norClock:
  1187                           	opt callstack 27
  1188  001FCC                     
  1189                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1190  001FCC  BE0E               	btfsc	(_count10ms+1)^0,7,c
  1191  001FCE  EFF2  F00F         	goto	u211
  1192  001FD2  500E               	movf	(_count10ms+1)^0,w,c
  1193  001FD4  E109               	bnz	u210
  1194  001FD6  0E64               	movlw	100
  1195  001FD8  5C0D               	subwf	_count10ms^0,w,c
  1196  001FDA  A0D8               	btfss	status,0,c
  1197  001FDC  EFF2  F00F         	goto	u211
  1198  001FE0  EFF4  F00F         	goto	u210
  1199  001FE4                     u211:
  1200  001FE4  EF34  F010         	goto	l328
  1201  001FE8                     u210:
  1202  001FE8                     
  1203                           ;stateClock.c: 5:         count10ms = 0;
  1204  001FE8  0E00               	movlw	0
  1205  001FEA  6E0E               	movwf	(_count10ms+1)^0,c
  1206  001FEC  0E00               	movlw	0
  1207  001FEE  6E0D               	movwf	_count10ms^0,c
  1208  001FF0                     
  1209                           ;stateClock.c: 6:         sec++;
  1210  001FF0  4A09               	infsnz	_sec^0,f,c
  1211  001FF2  2A0A               	incf	(_sec+1)^0,f,c
  1212  001FF4                     
  1213                           ;stateClock.c: 7:         if (sec >= 60) {
  1214  001FF4  BE0A               	btfsc	(_sec+1)^0,7,c
  1215  001FF6  EF06  F010         	goto	u221
  1216  001FFA  500A               	movf	(_sec+1)^0,w,c
  1217  001FFC  E109               	bnz	u220
  1218  001FFE  0E3C               	movlw	60
  1219  002000  5C09               	subwf	_sec^0,w,c
  1220  002002  A0D8               	btfss	status,0,c
  1221  002004  EF06  F010         	goto	u221
  1222  002008  EF08  F010         	goto	u220
  1223  00200C                     u221:
  1224  00200C  EF0E  F010         	goto	l1445
  1225  002010                     u220:
  1226  002010                     
  1227                           ;stateClock.c: 8:             sec = 0;
  1228  002010  0E00               	movlw	0
  1229  002012  6E0A               	movwf	(_sec+1)^0,c
  1230  002014  0E00               	movlw	0
  1231  002016  6E09               	movwf	_sec^0,c
  1232  002018                     
  1233                           ;stateClock.c: 9:             min++;
  1234  002018  4A07               	infsnz	_min^0,f,c
  1235  00201A  2A08               	incf	(_min+1)^0,f,c
  1236  00201C                     l1445:
  1237                           
  1238                           ;stateClock.c: 11:         if (min >= 60) {
  1239  00201C  BE08               	btfsc	(_min+1)^0,7,c
  1240  00201E  EF1A  F010         	goto	u231
  1241  002022  5008               	movf	(_min+1)^0,w,c
  1242  002024  E109               	bnz	u230
  1243  002026  0E3C               	movlw	60
  1244  002028  5C07               	subwf	_min^0,w,c
  1245  00202A  A0D8               	btfss	status,0,c
  1246  00202C  EF1A  F010         	goto	u231
  1247  002030  EF1C  F010         	goto	u230
  1248  002034                     u231:
  1249  002034  EF22  F010         	goto	l1451
  1250  002038                     u230:
  1251  002038                     
  1252                           ;stateClock.c: 12:             min = 0;
  1253  002038  0E00               	movlw	0
  1254  00203A  6E08               	movwf	(_min+1)^0,c
  1255  00203C  0E00               	movlw	0
  1256  00203E  6E07               	movwf	_min^0,c
  1257  002040                     
  1258                           ;stateClock.c: 13:             hr++;
  1259  002040  4A05               	infsnz	_hr^0,f,c
  1260  002042  2A06               	incf	(_hr+1)^0,f,c
  1261  002044                     l1451:
  1262                           
  1263                           ;stateClock.c: 15:         if (hr >= 24) {
  1264  002044  BE06               	btfsc	(_hr+1)^0,7,c
  1265  002046  EF2E  F010         	goto	u241
  1266  00204A  5006               	movf	(_hr+1)^0,w,c
  1267  00204C  E109               	bnz	u240
  1268  00204E  0E18               	movlw	24
  1269  002050  5C05               	subwf	_hr^0,w,c
  1270  002052  A0D8               	btfss	status,0,c
  1271  002054  EF2E  F010         	goto	u241
  1272  002058  EF30  F010         	goto	u240
  1273  00205C                     u241:
  1274  00205C  EF34  F010         	goto	l328
  1275  002060                     u240:
  1276  002060                     
  1277                           ;stateClock.c: 16:             hr = 0;
  1278  002060  0E00               	movlw	0
  1279  002062  6E06               	movwf	(_hr+1)^0,c
  1280  002064  0E00               	movlw	0
  1281  002066  6E05               	movwf	_hr^0,c
  1282  002068                     l328:
  1283  002068  0012               	return		;funcret
  1284  00206A                     __end_of_norClock:
  1285                           	opt callstack 0
  1286                           
  1287 ;; *************** function _modifySecond *****************
  1288 ;; Defined at:
  1289 ;;		line 68 in file "statesModify.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;Total ram usage:        2 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    3
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text5
  1318  00174C                     __ptext5:
  1319                           	opt callstack 0
  1320  00174C                     _modifySecond:
  1321                           	opt callstack 27
  1322  00174C                     
  1323                           ;statesModify.c: 69:     switch (stModify) {
  1324  00174C  EF12  F00C         	goto	l1655
  1325  001750                     l1623:
  1326                           
  1327                           ;statesModify.c: 71:             if (RA5Pressed == 0 && countPressed > 0) {
  1328  001750  501D               	movf	_RA5Pressed^0,w,c
  1329  001752  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1330  001754  A4D8               	btfss	status,2,c
  1331  001756  EFAF  F00B         	goto	u511
  1332  00175A  EFB1  F00B         	goto	u510
  1333  00175E                     u511:
  1334  00175E  EF2B  F00C         	goto	l1657
  1335  001762                     u510:
  1336  001762  BE22               	btfsc	(_countPressed+1)^0,7,c
  1337  001764  EFBC  F00B         	goto	u521
  1338  001768  5022               	movf	(_countPressed+1)^0,w,c
  1339  00176A  E108               	bnz	u520
  1340  00176C  0421               	decf	_countPressed^0,w,c
  1341  00176E  A0D8               	btfss	status,0,c
  1342  001770  EFBC  F00B         	goto	u521
  1343  001774  EFBE  F00B         	goto	u520
  1344  001778                     u521:
  1345  001778  EF2B  F00C         	goto	l1657
  1346  00177C                     u520:
  1347  00177C                     
  1348                           ;statesModify.c: 72:                 sec++;
  1349  00177C  4A09               	infsnz	_sec^0,f,c
  1350  00177E  2A0A               	incf	(_sec+1)^0,f,c
  1351  001780                     
  1352                           ;statesModify.c: 73:                 stModify = iNor;
  1353  001780  0E01               	movlw	1
  1354  001782  6E23               	movwf	_stModify^0,c
  1355  001784  EF2B  F00C         	goto	l1657
  1356  001788                     l1631:
  1357                           
  1358                           ;statesModify.c: 77:             if (countPressed == 0 || RA5Pressed == 1) {
  1359  001788  5021               	movf	_countPressed^0,w,c
  1360  00178A  1022               	iorwf	(_countPressed+1)^0,w,c
  1361  00178C  B4D8               	btfsc	status,2,c
  1362  00178E  EFCB  F00B         	goto	u531
  1363  001792  EFCD  F00B         	goto	u530
  1364  001796                     u531:
  1365  001796  EFD6  F00B         	goto	l1635
  1366  00179A                     u530:
  1367  00179A  041D               	decf	_RA5Pressed^0,w,c
  1368  00179C  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1369  00179E  A4D8               	btfss	status,2,c
  1370  0017A0  EFD4  F00B         	goto	u541
  1371  0017A4  EFD6  F00B         	goto	u540
  1372  0017A8                     u541:
  1373  0017A8  EFD8  F00B         	goto	l1637
  1374  0017AC                     u540:
  1375  0017AC                     l1635:
  1376                           
  1377                           ;statesModify.c: 78:                 stModify = init;
  1378  0017AC  0E00               	movlw	0
  1379  0017AE  6E23               	movwf	_stModify^0,c
  1380  0017B0                     l1637:
  1381                           
  1382                           ;statesModify.c: 80:             if (countAuto > 0) {
  1383  0017B0  BE20               	btfsc	(_countAuto+1)^0,7,c
  1384  0017B2  EFE3  F00B         	goto	u551
  1385  0017B6  5020               	movf	(_countAuto+1)^0,w,c
  1386  0017B8  E108               	bnz	u550
  1387  0017BA  041F               	decf	_countAuto^0,w,c
  1388  0017BC  A0D8               	btfss	status,0,c
  1389  0017BE  EFE3  F00B         	goto	u551
  1390  0017C2  EFE5  F00B         	goto	u550
  1391  0017C6                     u551:
  1392  0017C6  EF2B  F00C         	goto	l1657
  1393  0017CA                     u550:
  1394  0017CA                     
  1395                           ;statesModify.c: 81:                 increaseTime = 1;
  1396  0017CA  0E00               	movlw	0
  1397  0017CC  6E1A               	movwf	(_increaseTime+1)^0,c
  1398  0017CE  0E01               	movlw	1
  1399  0017D0  6E19               	movwf	_increaseTime^0,c
  1400                           
  1401                           ;statesModify.c: 82:                 stModify = iAuto;
  1402  0017D2  0E02               	movlw	2
  1403  0017D4  6E23               	movwf	_stModify^0,c
  1404  0017D6  EF2B  F00C         	goto	l1657
  1405  0017DA                     l1641:
  1406                           
  1407                           ;statesModify.c: 86:             if (countPressed == 0 || RA5Pressed == 1) {
  1408  0017DA  5021               	movf	_countPressed^0,w,c
  1409  0017DC  1022               	iorwf	(_countPressed+1)^0,w,c
  1410  0017DE  B4D8               	btfsc	status,2,c
  1411  0017E0  EFF4  F00B         	goto	u561
  1412  0017E4  EFF6  F00B         	goto	u560
  1413  0017E8                     u561:
  1414  0017E8  EFFF  F00B         	goto	l1645
  1415  0017EC                     u560:
  1416  0017EC  041D               	decf	_RA5Pressed^0,w,c
  1417  0017EE  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1418  0017F0  A4D8               	btfss	status,2,c
  1419  0017F2  EFFD  F00B         	goto	u571
  1420  0017F6  EFFF  F00B         	goto	u570
  1421  0017FA                     u571:
  1422  0017FA  EF01  F00C         	goto	l1647
  1423  0017FE                     u570:
  1424  0017FE                     l1645:
  1425                           
  1426                           ;statesModify.c: 87:                 stModify = init;
  1427  0017FE  0E00               	movlw	0
  1428  001800  6E23               	movwf	_stModify^0,c
  1429  001802                     l1647:
  1430                           
  1431                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1432  001802  0419               	decf	_increaseTime^0,w,c
  1433  001804  101A               	iorwf	(_increaseTime+1)^0,w,c
  1434  001806  A4D8               	btfss	status,2,c
  1435  001808  EF08  F00C         	goto	u581
  1436  00180C  EF0A  F00C         	goto	u580
  1437  001810                     u581:
  1438  001810  EF2B  F00C         	goto	l1657
  1439  001814                     u580:
  1440  001814                     
  1441                           ;statesModify.c: 90:                 increaseTime = 0;
  1442  001814  0E00               	movlw	0
  1443  001816  6E1A               	movwf	(_increaseTime+1)^0,c
  1444  001818  0E00               	movlw	0
  1445  00181A  6E19               	movwf	_increaseTime^0,c
  1446  00181C                     
  1447                           ;statesModify.c: 91:                 sec++;
  1448  00181C  4A09               	infsnz	_sec^0,f,c
  1449  00181E  2A0A               	incf	(_sec+1)^0,f,c
  1450  001820  EF2B  F00C         	goto	l1657
  1451  001824                     l1655:
  1452  001824  5023               	movf	_stModify^0,w,c
  1453  001826  6E2D               	movwf	??_modifySecond^0,c
  1454  001828  6A2E               	clrf	(??_modifySecond+1)^0,c
  1455                           
  1456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1457                           ; Switch size 1, requested type "simple"
  1458                           ; Number of cases is 1, Range of values is 0 to 0
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte            4     3 (average)
  1462                           ;	Chosen strategy is simple_byte
  1463  00182A  502E               	movf	(??_modifySecond+1)^0,w,c
  1464  00182C  0A00               	xorlw	0	; case 0
  1465  00182E  B4D8               	btfsc	status,2,c
  1466  001830  EF1C  F00C         	goto	l2353
  1467  001834  EF2B  F00C         	goto	l1657
  1468  001838                     l2353:
  1469                           
  1470                           ; Switch size 1, requested type "simple"
  1471                           ; Number of cases is 3, Range of values is 0 to 2
  1472                           ; switch strategies available:
  1473                           ; Name         Instructions Cycles
  1474                           ; simple_byte           10     6 (average)
  1475                           ;	Chosen strategy is simple_byte
  1476  001838  502D               	movf	??_modifySecond^0,w,c
  1477  00183A  0A00               	xorlw	0	; case 0
  1478  00183C  B4D8               	btfsc	status,2,c
  1479  00183E  EFA8  F00B         	goto	l1623
  1480  001842  0A01               	xorlw	1	; case 1
  1481  001844  B4D8               	btfsc	status,2,c
  1482  001846  EFC4  F00B         	goto	l1631
  1483  00184A  0A03               	xorlw	3	; case 2
  1484  00184C  B4D8               	btfsc	status,2,c
  1485  00184E  EFED  F00B         	goto	l1641
  1486  001852  EF2B  F00C         	goto	l1657
  1487  001856                     l1657:
  1488                           
  1489                           ;statesModify.c: 95:     if (sec >= 60) {
  1490  001856  BE0A               	btfsc	(_sec+1)^0,7,c
  1491  001858  EF37  F00C         	goto	u591
  1492  00185C  500A               	movf	(_sec+1)^0,w,c
  1493  00185E  E109               	bnz	u590
  1494  001860  0E3C               	movlw	60
  1495  001862  5C09               	subwf	_sec^0,w,c
  1496  001864  A0D8               	btfss	status,0,c
  1497  001866  EF37  F00C         	goto	u591
  1498  00186A  EF39  F00C         	goto	u590
  1499  00186E                     u591:
  1500  00186E  EF3D  F00C         	goto	l437
  1501  001872                     u590:
  1502  001872                     
  1503                           ;statesModify.c: 96:         sec = 0;
  1504  001872  0E00               	movlw	0
  1505  001874  6E0A               	movwf	(_sec+1)^0,c
  1506  001876  0E00               	movlw	0
  1507  001878  6E09               	movwf	_sec^0,c
  1508  00187A                     l437:
  1509  00187A  0012               	return		;funcret
  1510  00187C                     __end_of_modifySecond:
  1511                           	opt callstack 0
  1512                           
  1513 ;; *************** function _modifyMinute *****************
  1514 ;; Defined at:
  1515 ;;		line 36 in file "statesModify.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;Total ram usage:        2 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    3
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text6
  1544  00187C                     __ptext6:
  1545                           	opt callstack 0
  1546  00187C                     _modifyMinute:
  1547                           	opt callstack 27
  1548  00187C                     
  1549                           ;statesModify.c: 37:     switch (stModify) {
  1550  00187C  EFAA  F00C         	goto	l1579
  1551  001880                     l1547:
  1552                           
  1553                           ;statesModify.c: 39:             if (RA5Pressed == 0 && countPressed > 0) {
  1554  001880  501D               	movf	_RA5Pressed^0,w,c
  1555  001882  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1556  001884  A4D8               	btfss	status,2,c
  1557  001886  EF47  F00C         	goto	u381
  1558  00188A  EF49  F00C         	goto	u380
  1559  00188E                     u381:
  1560  00188E  EFC3  F00C         	goto	l1581
  1561  001892                     u380:
  1562  001892  BE22               	btfsc	(_countPressed+1)^0,7,c
  1563  001894  EF54  F00C         	goto	u391
  1564  001898  5022               	movf	(_countPressed+1)^0,w,c
  1565  00189A  E108               	bnz	u390
  1566  00189C  0421               	decf	_countPressed^0,w,c
  1567  00189E  A0D8               	btfss	status,0,c
  1568  0018A0  EF54  F00C         	goto	u391
  1569  0018A4  EF56  F00C         	goto	u390
  1570  0018A8                     u391:
  1571  0018A8  EFC3  F00C         	goto	l1581
  1572  0018AC                     u390:
  1573  0018AC                     
  1574                           ;statesModify.c: 40:                 min++;
  1575  0018AC  4A07               	infsnz	_min^0,f,c
  1576  0018AE  2A08               	incf	(_min+1)^0,f,c
  1577  0018B0                     
  1578                           ;statesModify.c: 41:                 stModify = iNor;
  1579  0018B0  0E01               	movlw	1
  1580  0018B2  6E23               	movwf	_stModify^0,c
  1581  0018B4  EFC3  F00C         	goto	l1581
  1582  0018B8                     l1555:
  1583                           
  1584                           ;statesModify.c: 45:             if (countPressed == 0 || RA5Pressed == 1) {
  1585  0018B8  5021               	movf	_countPressed^0,w,c
  1586  0018BA  1022               	iorwf	(_countPressed+1)^0,w,c
  1587  0018BC  B4D8               	btfsc	status,2,c
  1588  0018BE  EF63  F00C         	goto	u401
  1589  0018C2  EF65  F00C         	goto	u400
  1590  0018C6                     u401:
  1591  0018C6  EF6E  F00C         	goto	l1559
  1592  0018CA                     u400:
  1593  0018CA  041D               	decf	_RA5Pressed^0,w,c
  1594  0018CC  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1595  0018CE  A4D8               	btfss	status,2,c
  1596  0018D0  EF6C  F00C         	goto	u411
  1597  0018D4  EF6E  F00C         	goto	u410
  1598  0018D8                     u411:
  1599  0018D8  EF70  F00C         	goto	l1561
  1600  0018DC                     u410:
  1601  0018DC                     l1559:
  1602                           
  1603                           ;statesModify.c: 46:                 stModify = init;
  1604  0018DC  0E00               	movlw	0
  1605  0018DE  6E23               	movwf	_stModify^0,c
  1606  0018E0                     l1561:
  1607                           
  1608                           ;statesModify.c: 48:             if (countAuto > 0) {
  1609  0018E0  BE20               	btfsc	(_countAuto+1)^0,7,c
  1610  0018E2  EF7B  F00C         	goto	u421
  1611  0018E6  5020               	movf	(_countAuto+1)^0,w,c
  1612  0018E8  E108               	bnz	u420
  1613  0018EA  041F               	decf	_countAuto^0,w,c
  1614  0018EC  A0D8               	btfss	status,0,c
  1615  0018EE  EF7B  F00C         	goto	u421
  1616  0018F2  EF7D  F00C         	goto	u420
  1617  0018F6                     u421:
  1618  0018F6  EFC3  F00C         	goto	l1581
  1619  0018FA                     u420:
  1620  0018FA                     
  1621                           ;statesModify.c: 49:                 increaseTime = 1;
  1622  0018FA  0E00               	movlw	0
  1623  0018FC  6E1A               	movwf	(_increaseTime+1)^0,c
  1624  0018FE  0E01               	movlw	1
  1625  001900  6E19               	movwf	_increaseTime^0,c
  1626                           
  1627                           ;statesModify.c: 50:                 stModify = iAuto;
  1628  001902  0E02               	movlw	2
  1629  001904  6E23               	movwf	_stModify^0,c
  1630  001906  EFC3  F00C         	goto	l1581
  1631  00190A                     l1565:
  1632                           
  1633                           ;statesModify.c: 54:             if (countPressed == 0 || RA5Pressed == 1) {
  1634  00190A  5021               	movf	_countPressed^0,w,c
  1635  00190C  1022               	iorwf	(_countPressed+1)^0,w,c
  1636  00190E  B4D8               	btfsc	status,2,c
  1637  001910  EF8C  F00C         	goto	u431
  1638  001914  EF8E  F00C         	goto	u430
  1639  001918                     u431:
  1640  001918  EF97  F00C         	goto	l1569
  1641  00191C                     u430:
  1642  00191C  041D               	decf	_RA5Pressed^0,w,c
  1643  00191E  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1644  001920  A4D8               	btfss	status,2,c
  1645  001922  EF95  F00C         	goto	u441
  1646  001926  EF97  F00C         	goto	u440
  1647  00192A                     u441:
  1648  00192A  EF99  F00C         	goto	l1571
  1649  00192E                     u440:
  1650  00192E                     l1569:
  1651                           
  1652                           ;statesModify.c: 55:                 stModify = init;
  1653  00192E  0E00               	movlw	0
  1654  001930  6E23               	movwf	_stModify^0,c
  1655  001932                     l1571:
  1656                           
  1657                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1658  001932  0419               	decf	_increaseTime^0,w,c
  1659  001934  101A               	iorwf	(_increaseTime+1)^0,w,c
  1660  001936  A4D8               	btfss	status,2,c
  1661  001938  EFA0  F00C         	goto	u451
  1662  00193C  EFA2  F00C         	goto	u450
  1663  001940                     u451:
  1664  001940  EFC3  F00C         	goto	l1581
  1665  001944                     u450:
  1666  001944                     
  1667                           ;statesModify.c: 58:                 increaseTime = 0;
  1668  001944  0E00               	movlw	0
  1669  001946  6E1A               	movwf	(_increaseTime+1)^0,c
  1670  001948  0E00               	movlw	0
  1671  00194A  6E19               	movwf	_increaseTime^0,c
  1672  00194C                     
  1673                           ;statesModify.c: 59:                 min++;
  1674  00194C  4A07               	infsnz	_min^0,f,c
  1675  00194E  2A08               	incf	(_min+1)^0,f,c
  1676  001950  EFC3  F00C         	goto	l1581
  1677  001954                     l1579:
  1678  001954  5023               	movf	_stModify^0,w,c
  1679  001956  6E2D               	movwf	??_modifyMinute^0,c
  1680  001958  6A2E               	clrf	(??_modifyMinute+1)^0,c
  1681                           
  1682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1683                           ; Switch size 1, requested type "simple"
  1684                           ; Number of cases is 1, Range of values is 0 to 0
  1685                           ; switch strategies available:
  1686                           ; Name         Instructions Cycles
  1687                           ; simple_byte            4     3 (average)
  1688                           ;	Chosen strategy is simple_byte
  1689  00195A  502E               	movf	(??_modifyMinute+1)^0,w,c
  1690  00195C  0A00               	xorlw	0	; case 0
  1691  00195E  B4D8               	btfsc	status,2,c
  1692  001960  EFB4  F00C         	goto	l2355
  1693  001964  EFC3  F00C         	goto	l1581
  1694  001968                     l2355:
  1695                           
  1696                           ; Switch size 1, requested type "simple"
  1697                           ; Number of cases is 3, Range of values is 0 to 2
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte           10     6 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  001968  502D               	movf	??_modifyMinute^0,w,c
  1703  00196A  0A00               	xorlw	0	; case 0
  1704  00196C  B4D8               	btfsc	status,2,c
  1705  00196E  EF40  F00C         	goto	l1547
  1706  001972  0A01               	xorlw	1	; case 1
  1707  001974  B4D8               	btfsc	status,2,c
  1708  001976  EF5C  F00C         	goto	l1555
  1709  00197A  0A03               	xorlw	3	; case 2
  1710  00197C  B4D8               	btfsc	status,2,c
  1711  00197E  EF85  F00C         	goto	l1565
  1712  001982  EFC3  F00C         	goto	l1581
  1713  001986                     l1581:
  1714                           
  1715                           ;statesModify.c: 63:     if (min >= 60) {
  1716  001986  BE08               	btfsc	(_min+1)^0,7,c
  1717  001988  EFCF  F00C         	goto	u461
  1718  00198C  5008               	movf	(_min+1)^0,w,c
  1719  00198E  E109               	bnz	u460
  1720  001990  0E3C               	movlw	60
  1721  001992  5C07               	subwf	_min^0,w,c
  1722  001994  A0D8               	btfss	status,0,c
  1723  001996  EFCF  F00C         	goto	u461
  1724  00199A  EFD1  F00C         	goto	u460
  1725  00199E                     u461:
  1726  00199E  EFD5  F00C         	goto	l419
  1727  0019A2                     u460:
  1728  0019A2                     
  1729                           ;statesModify.c: 64:         min = 0;
  1730  0019A2  0E00               	movlw	0
  1731  0019A4  6E08               	movwf	(_min+1)^0,c
  1732  0019A6  0E00               	movlw	0
  1733  0019A8  6E07               	movwf	_min^0,c
  1734  0019AA                     l419:
  1735  0019AA  0012               	return		;funcret
  1736  0019AC                     __end_of_modifyMinute:
  1737                           	opt callstack 0
  1738                           
  1739 ;; *************** function _modifyHour *****************
  1740 ;; Defined at:
  1741 ;;		line 4 in file "statesModify.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;Total ram usage:        2 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    3
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text7
  1770  0019AC                     __ptext7:
  1771                           	opt callstack 0
  1772  0019AC                     _modifyHour:
  1773                           	opt callstack 27
  1774  0019AC                     
  1775                           ;statesModify.c: 5:     switch (stModify) {
  1776  0019AC  EF42  F00D         	goto	l1511
  1777  0019B0                     l1479:
  1778                           
  1779                           ;statesModify.c: 7:             if (RA5Pressed == 0 && countPressed > 0) {
  1780  0019B0  501D               	movf	_RA5Pressed^0,w,c
  1781  0019B2  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1782  0019B4  A4D8               	btfss	status,2,c
  1783  0019B6  EFDF  F00C         	goto	u251
  1784  0019BA  EFE1  F00C         	goto	u250
  1785  0019BE                     u251:
  1786  0019BE  EF5B  F00D         	goto	l1513
  1787  0019C2                     u250:
  1788  0019C2  BE22               	btfsc	(_countPressed+1)^0,7,c
  1789  0019C4  EFEC  F00C         	goto	u261
  1790  0019C8  5022               	movf	(_countPressed+1)^0,w,c
  1791  0019CA  E108               	bnz	u260
  1792  0019CC  0421               	decf	_countPressed^0,w,c
  1793  0019CE  A0D8               	btfss	status,0,c
  1794  0019D0  EFEC  F00C         	goto	u261
  1795  0019D4  EFEE  F00C         	goto	u260
  1796  0019D8                     u261:
  1797  0019D8  EF5B  F00D         	goto	l1513
  1798  0019DC                     u260:
  1799  0019DC                     
  1800                           ;statesModify.c: 8:                 hr++;
  1801  0019DC  4A05               	infsnz	_hr^0,f,c
  1802  0019DE  2A06               	incf	(_hr+1)^0,f,c
  1803  0019E0                     
  1804                           ;statesModify.c: 9:                 stModify = iNor;
  1805  0019E0  0E01               	movlw	1
  1806  0019E2  6E23               	movwf	_stModify^0,c
  1807  0019E4  EF5B  F00D         	goto	l1513
  1808  0019E8                     l1487:
  1809                           
  1810                           ;statesModify.c: 13:             if (countPressed == 0 || RA5Pressed == 1) {
  1811  0019E8  5021               	movf	_countPressed^0,w,c
  1812  0019EA  1022               	iorwf	(_countPressed+1)^0,w,c
  1813  0019EC  B4D8               	btfsc	status,2,c
  1814  0019EE  EFFB  F00C         	goto	u271
  1815  0019F2  EFFD  F00C         	goto	u270
  1816  0019F6                     u271:
  1817  0019F6  EF06  F00D         	goto	l1491
  1818  0019FA                     u270:
  1819  0019FA  041D               	decf	_RA5Pressed^0,w,c
  1820  0019FC  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1821  0019FE  A4D8               	btfss	status,2,c
  1822  001A00  EF04  F00D         	goto	u281
  1823  001A04  EF06  F00D         	goto	u280
  1824  001A08                     u281:
  1825  001A08  EF08  F00D         	goto	l1493
  1826  001A0C                     u280:
  1827  001A0C                     l1491:
  1828                           
  1829                           ;statesModify.c: 14:                 stModify = init;
  1830  001A0C  0E00               	movlw	0
  1831  001A0E  6E23               	movwf	_stModify^0,c
  1832  001A10                     l1493:
  1833                           
  1834                           ;statesModify.c: 16:             if (countAuto > 0) {
  1835  001A10  BE20               	btfsc	(_countAuto+1)^0,7,c
  1836  001A12  EF13  F00D         	goto	u291
  1837  001A16  5020               	movf	(_countAuto+1)^0,w,c
  1838  001A18  E108               	bnz	u290
  1839  001A1A  041F               	decf	_countAuto^0,w,c
  1840  001A1C  A0D8               	btfss	status,0,c
  1841  001A1E  EF13  F00D         	goto	u291
  1842  001A22  EF15  F00D         	goto	u290
  1843  001A26                     u291:
  1844  001A26  EF5B  F00D         	goto	l1513
  1845  001A2A                     u290:
  1846  001A2A                     
  1847                           ;statesModify.c: 17:                 increaseTime = 1;
  1848  001A2A  0E00               	movlw	0
  1849  001A2C  6E1A               	movwf	(_increaseTime+1)^0,c
  1850  001A2E  0E01               	movlw	1
  1851  001A30  6E19               	movwf	_increaseTime^0,c
  1852                           
  1853                           ;statesModify.c: 18:                 stModify = iAuto;
  1854  001A32  0E02               	movlw	2
  1855  001A34  6E23               	movwf	_stModify^0,c
  1856  001A36  EF5B  F00D         	goto	l1513
  1857  001A3A                     l1497:
  1858                           
  1859                           ;statesModify.c: 22:             if (countPressed == 0 || RA5Pressed == 1) {
  1860  001A3A  5021               	movf	_countPressed^0,w,c
  1861  001A3C  1022               	iorwf	(_countPressed+1)^0,w,c
  1862  001A3E  B4D8               	btfsc	status,2,c
  1863  001A40  EF24  F00D         	goto	u301
  1864  001A44  EF26  F00D         	goto	u300
  1865  001A48                     u301:
  1866  001A48  EF2F  F00D         	goto	l1501
  1867  001A4C                     u300:
  1868  001A4C  041D               	decf	_RA5Pressed^0,w,c
  1869  001A4E  101E               	iorwf	(_RA5Pressed+1)^0,w,c
  1870  001A50  A4D8               	btfss	status,2,c
  1871  001A52  EF2D  F00D         	goto	u311
  1872  001A56  EF2F  F00D         	goto	u310
  1873  001A5A                     u311:
  1874  001A5A  EF31  F00D         	goto	l1503
  1875  001A5E                     u310:
  1876  001A5E                     l1501:
  1877                           
  1878                           ;statesModify.c: 23:                 stModify = init;
  1879  001A5E  0E00               	movlw	0
  1880  001A60  6E23               	movwf	_stModify^0,c
  1881  001A62                     l1503:
  1882                           
  1883                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1884  001A62  0419               	decf	_increaseTime^0,w,c
  1885  001A64  101A               	iorwf	(_increaseTime+1)^0,w,c
  1886  001A66  A4D8               	btfss	status,2,c
  1887  001A68  EF38  F00D         	goto	u321
  1888  001A6C  EF3A  F00D         	goto	u320
  1889  001A70                     u321:
  1890  001A70  EF5B  F00D         	goto	l1513
  1891  001A74                     u320:
  1892  001A74                     
  1893                           ;statesModify.c: 26:                 increaseTime = 0;
  1894  001A74  0E00               	movlw	0
  1895  001A76  6E1A               	movwf	(_increaseTime+1)^0,c
  1896  001A78  0E00               	movlw	0
  1897  001A7A  6E19               	movwf	_increaseTime^0,c
  1898  001A7C                     
  1899                           ;statesModify.c: 27:                 hr++;
  1900  001A7C  4A05               	infsnz	_hr^0,f,c
  1901  001A7E  2A06               	incf	(_hr+1)^0,f,c
  1902  001A80  EF5B  F00D         	goto	l1513
  1903  001A84                     l1511:
  1904  001A84  5023               	movf	_stModify^0,w,c
  1905  001A86  6E2D               	movwf	??_modifyHour^0,c
  1906  001A88  6A2E               	clrf	(??_modifyHour+1)^0,c
  1907                           
  1908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1909                           ; Switch size 1, requested type "simple"
  1910                           ; Number of cases is 1, Range of values is 0 to 0
  1911                           ; switch strategies available:
  1912                           ; Name         Instructions Cycles
  1913                           ; simple_byte            4     3 (average)
  1914                           ;	Chosen strategy is simple_byte
  1915  001A8A  502E               	movf	(??_modifyHour+1)^0,w,c
  1916  001A8C  0A00               	xorlw	0	; case 0
  1917  001A8E  B4D8               	btfsc	status,2,c
  1918  001A90  EF4C  F00D         	goto	l2357
  1919  001A94  EF5B  F00D         	goto	l1513
  1920  001A98                     l2357:
  1921                           
  1922                           ; Switch size 1, requested type "simple"
  1923                           ; Number of cases is 3, Range of values is 0 to 2
  1924                           ; switch strategies available:
  1925                           ; Name         Instructions Cycles
  1926                           ; simple_byte           10     6 (average)
  1927                           ;	Chosen strategy is simple_byte
  1928  001A98  502D               	movf	??_modifyHour^0,w,c
  1929  001A9A  0A00               	xorlw	0	; case 0
  1930  001A9C  B4D8               	btfsc	status,2,c
  1931  001A9E  EFD8  F00C         	goto	l1479
  1932  001AA2  0A01               	xorlw	1	; case 1
  1933  001AA4  B4D8               	btfsc	status,2,c
  1934  001AA6  EFF4  F00C         	goto	l1487
  1935  001AAA  0A03               	xorlw	3	; case 2
  1936  001AAC  B4D8               	btfsc	status,2,c
  1937  001AAE  EF1D  F00D         	goto	l1497
  1938  001AB2  EF5B  F00D         	goto	l1513
  1939  001AB6                     l1513:
  1940                           
  1941                           ;statesModify.c: 31:     if (hr >= 24) {
  1942  001AB6  BE06               	btfsc	(_hr+1)^0,7,c
  1943  001AB8  EF67  F00D         	goto	u331
  1944  001ABC  5006               	movf	(_hr+1)^0,w,c
  1945  001ABE  E109               	bnz	u330
  1946  001AC0  0E18               	movlw	24
  1947  001AC2  5C05               	subwf	_hr^0,w,c
  1948  001AC4  A0D8               	btfss	status,0,c
  1949  001AC6  EF67  F00D         	goto	u331
  1950  001ACA  EF69  F00D         	goto	u330
  1951  001ACE                     u331:
  1952  001ACE  EF6D  F00D         	goto	l401
  1953  001AD2                     u330:
  1954  001AD2                     
  1955                           ;statesModify.c: 32:         hr = 0;
  1956  001AD2  0E00               	movlw	0
  1957  001AD4  6E06               	movwf	(_hr+1)^0,c
  1958  001AD6  0E00               	movlw	0
  1959  001AD8  6E05               	movwf	_hr^0,c
  1960  001ADA                     l401:
  1961  001ADA  0012               	return		;funcret
  1962  001ADC                     __end_of_modifyHour:
  1963                           	opt callstack 0
  1964                           
  1965 ;; *************** function _displayStpWatch *****************
  1966 ;; Defined at:
  1967 ;;		line 33 in file "stateStpWatch.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;Total ram usage:        0 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    7
  1988 ;; This function calls:
  1989 ;;		_LCDPutChar
  1990 ;;		_LCDPutInst
  1991 ;;		_LCDPutStr
  1992 ;;		___awdiv
  1993 ;;		___awmod
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text8
  2000  001BDE                     __ptext8:
  2001                           	opt callstack 0
  2002  001BDE                     _displayStpWatch:
  2003                           	opt callstack 23
  2004  001BDE                     
  2005                           ;stateStpWatch.c: 35:     LCDPutInst(0x80);
  2006  001BDE  0E80               	movlw	128
  2007  001BE0  ECD3  F010         	call	_LCDPutInst
  2008  001BE4                     
  2009                           ;stateStpWatch.c: 36:     LCDPutStr("   STOP WATCH   ");
  2010  001BE4  0E01               	movlw	low STR_5
  2011  001BE6  6E34               	movwf	LCDPutStr@ptr^0,c
  2012  001BE8  0E10               	movlw	high STR_5
  2013  001BEA  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2014  001BEC  EC6E  F011         	call	_LCDPutStr	;wreg free
  2015  001BF0                     
  2016                           ;stateStpWatch.c: 37:     LCDPutInst(0xC0);
  2017  001BF0  0EC0               	movlw	192
  2018  001BF2  ECD3  F010         	call	_LCDPutInst
  2019  001BF6                     
  2020                           ;stateStpWatch.c: 38:     LCDPutChar(minSTW/10+'0');
  2021  001BF6  C013  F02D         	movff	_minSTW,___awdiv@dividend
  2022  001BFA  C014  F02E         	movff	_minSTW+1,___awdiv@dividend+1
  2023  001BFE  0E00               	movlw	0
  2024  001C00  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2025  001C02  0E0A               	movlw	10
  2026  001C04  6E2F               	movwf	___awdiv@divisor^0,c
  2027  001C06  EC2C  F00F         	call	___awdiv	;wreg free
  2028  001C0A  502D               	movf	?___awdiv^0,w,c
  2029  001C0C  0F30               	addlw	48
  2030  001C0E  ECA8  F010         	call	_LCDPutChar
  2031  001C12                     
  2032                           ;stateStpWatch.c: 39:     LCDPutChar(minSTW%10+'0');
  2033  001C12  C013  F02D         	movff	_minSTW,___awmod@dividend
  2034  001C16  C014  F02E         	movff	_minSTW+1,___awmod@dividend+1
  2035  001C1A  0E00               	movlw	0
  2036  001C1C  6E30               	movwf	(___awmod@divisor+1)^0,c
  2037  001C1E  0E0A               	movlw	10
  2038  001C20  6E2F               	movwf	___awmod@divisor^0,c
  2039  001C22  EC8E  F00F         	call	___awmod	;wreg free
  2040  001C26  502D               	movf	?___awmod^0,w,c
  2041  001C28  0F30               	addlw	48
  2042  001C2A  ECA8  F010         	call	_LCDPutChar
  2043  001C2E                     
  2044                           ;stateStpWatch.c: 40:     LCDPutChar(':');
  2045  001C2E  0E3A               	movlw	58
  2046  001C30  ECA8  F010         	call	_LCDPutChar
  2047  001C34                     
  2048                           ;stateStpWatch.c: 41:     LCDPutInst(0xC3);
  2049  001C34  0EC3               	movlw	195
  2050  001C36  ECD3  F010         	call	_LCDPutInst
  2051  001C3A                     
  2052                           ;stateStpWatch.c: 42:     LCDPutChar(secSTW/10+'0');
  2053  001C3A  C011  F02D         	movff	_secSTW,___awdiv@dividend
  2054  001C3E  C012  F02E         	movff	_secSTW+1,___awdiv@dividend+1
  2055  001C42  0E00               	movlw	0
  2056  001C44  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2057  001C46  0E0A               	movlw	10
  2058  001C48  6E2F               	movwf	___awdiv@divisor^0,c
  2059  001C4A  EC2C  F00F         	call	___awdiv	;wreg free
  2060  001C4E  502D               	movf	?___awdiv^0,w,c
  2061  001C50  0F30               	addlw	48
  2062  001C52  ECA8  F010         	call	_LCDPutChar
  2063  001C56                     
  2064                           ;stateStpWatch.c: 43:     LCDPutChar(secSTW%10+'0');
  2065  001C56  C011  F02D         	movff	_secSTW,___awmod@dividend
  2066  001C5A  C012  F02E         	movff	_secSTW+1,___awmod@dividend+1
  2067  001C5E  0E00               	movlw	0
  2068  001C60  6E30               	movwf	(___awmod@divisor+1)^0,c
  2069  001C62  0E0A               	movlw	10
  2070  001C64  6E2F               	movwf	___awmod@divisor^0,c
  2071  001C66  EC8E  F00F         	call	___awmod	;wreg free
  2072  001C6A  502D               	movf	?___awmod^0,w,c
  2073  001C6C  0F30               	addlw	48
  2074  001C6E  ECA8  F010         	call	_LCDPutChar
  2075  001C72                     
  2076                           ;stateStpWatch.c: 44:     LCDPutChar(':');
  2077  001C72  0E3A               	movlw	58
  2078  001C74  ECA8  F010         	call	_LCDPutChar
  2079  001C78                     
  2080                           ;stateStpWatch.c: 45:     LCDPutInst(0xC6);
  2081  001C78  0EC6               	movlw	198
  2082  001C7A  ECD3  F010         	call	_LCDPutInst
  2083  001C7E                     
  2084                           ;stateStpWatch.c: 46:     LCDPutChar(miliSecSTW/10+'0');
  2085  001C7E  C00F  F02D         	movff	_miliSecSTW,___awdiv@dividend
  2086  001C82  C010  F02E         	movff	_miliSecSTW+1,___awdiv@dividend+1
  2087  001C86  0E00               	movlw	0
  2088  001C88  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2089  001C8A  0E0A               	movlw	10
  2090  001C8C  6E2F               	movwf	___awdiv@divisor^0,c
  2091  001C8E  EC2C  F00F         	call	___awdiv	;wreg free
  2092  001C92  502D               	movf	?___awdiv^0,w,c
  2093  001C94  0F30               	addlw	48
  2094  001C96  ECA8  F010         	call	_LCDPutChar
  2095  001C9A                     
  2096                           ;stateStpWatch.c: 47:     LCDPutChar(miliSecSTW%10+'0');
  2097  001C9A  C00F  F02D         	movff	_miliSecSTW,___awmod@dividend
  2098  001C9E  C010  F02E         	movff	_miliSecSTW+1,___awmod@dividend+1
  2099  001CA2  0E00               	movlw	0
  2100  001CA4  6E30               	movwf	(___awmod@divisor+1)^0,c
  2101  001CA6  0E0A               	movlw	10
  2102  001CA8  6E2F               	movwf	___awmod@divisor^0,c
  2103  001CAA  EC8E  F00F         	call	___awmod	;wreg free
  2104  001CAE  502D               	movf	?___awmod^0,w,c
  2105  001CB0  0F30               	addlw	48
  2106  001CB2  ECA8  F010         	call	_LCDPutChar
  2107  001CB6  0012               	return		;funcret
  2108  001CB8                     __end_of_displayStpWatch:
  2109                           	opt callstack 0
  2110                           
  2111 ;; *************** function _displayModSecond *****************
  2112 ;; Defined at:
  2113 ;;		line 166 in file "statesModify.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:        2 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    7
  2134 ;; This function calls:
  2135 ;;		_LCDPutChar
  2136 ;;		_LCDPutInst
  2137 ;;		_LCDPutStr
  2138 ;;		___awdiv
  2139 ;;		___awmod
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text9
  2146  00126C                     __ptext9:
  2147                           	opt callstack 0
  2148  00126C                     _displayModSecond:
  2149                           	opt callstack 23
  2150  00126C                     
  2151                           ;statesModify.c: 167:     LCDPutInst(0x80);
  2152  00126C  0E80               	movlw	128
  2153  00126E  ECD3  F010         	call	_LCDPutInst
  2154  001272                     
  2155                           ;statesModify.c: 168:     LCDPutStr("MODIFIES SECOND");
  2156  001272  0E33               	movlw	low STR_4
  2157  001274  6E34               	movwf	LCDPutStr@ptr^0,c
  2158  001276  0E10               	movlw	high STR_4
  2159  001278  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2160  00127A  EC6E  F011         	call	_LCDPutStr	;wreg free
  2161  00127E                     
  2162                           ;statesModify.c: 169:     LCDPutInst(0xC0);
  2163  00127E  0EC0               	movlw	192
  2164  001280  ECD3  F010         	call	_LCDPutInst
  2165  001284                     
  2166                           ;statesModify.c: 170:     LCDPutChar(hr/10+'0');
  2167  001284  C005  F02D         	movff	_hr,___awdiv@dividend
  2168  001288  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2169  00128C  0E00               	movlw	0
  2170  00128E  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2171  001290  0E0A               	movlw	10
  2172  001292  6E2F               	movwf	___awdiv@divisor^0,c
  2173  001294  EC2C  F00F         	call	___awdiv	;wreg free
  2174  001298  502D               	movf	?___awdiv^0,w,c
  2175  00129A  0F30               	addlw	48
  2176  00129C  ECA8  F010         	call	_LCDPutChar
  2177  0012A0                     
  2178                           ;statesModify.c: 171:     LCDPutChar(hr%10+'0');
  2179  0012A0  C005  F02D         	movff	_hr,___awmod@dividend
  2180  0012A4  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2181  0012A8  0E00               	movlw	0
  2182  0012AA  6E30               	movwf	(___awmod@divisor+1)^0,c
  2183  0012AC  0E0A               	movlw	10
  2184  0012AE  6E2F               	movwf	___awmod@divisor^0,c
  2185  0012B0  EC8E  F00F         	call	___awmod	;wreg free
  2186  0012B4  502D               	movf	?___awmod^0,w,c
  2187  0012B6  0F30               	addlw	48
  2188  0012B8  ECA8  F010         	call	_LCDPutChar
  2189  0012BC                     
  2190                           ;statesModify.c: 172:     LCDPutInst(0xC2);
  2191  0012BC  0EC2               	movlw	194
  2192  0012BE  ECD3  F010         	call	_LCDPutInst
  2193  0012C2                     
  2194                           ;statesModify.c: 173:     LCDPutChar(':');
  2195  0012C2  0E3A               	movlw	58
  2196  0012C4  ECA8  F010         	call	_LCDPutChar
  2197  0012C8                     
  2198                           ;statesModify.c: 175:     LCDPutChar(min/10+'0');
  2199  0012C8  C007  F02D         	movff	_min,___awdiv@dividend
  2200  0012CC  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2201  0012D0  0E00               	movlw	0
  2202  0012D2  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2203  0012D4  0E0A               	movlw	10
  2204  0012D6  6E2F               	movwf	___awdiv@divisor^0,c
  2205  0012D8  EC2C  F00F         	call	___awdiv	;wreg free
  2206  0012DC  502D               	movf	?___awdiv^0,w,c
  2207  0012DE  0F30               	addlw	48
  2208  0012E0  ECA8  F010         	call	_LCDPutChar
  2209  0012E4                     
  2210                           ;statesModify.c: 176:     LCDPutChar(min%10+'0');
  2211  0012E4  C007  F02D         	movff	_min,___awmod@dividend
  2212  0012E8  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2213  0012EC  0E00               	movlw	0
  2214  0012EE  6E30               	movwf	(___awmod@divisor+1)^0,c
  2215  0012F0  0E0A               	movlw	10
  2216  0012F2  6E2F               	movwf	___awmod@divisor^0,c
  2217  0012F4  EC8E  F00F         	call	___awmod	;wreg free
  2218  0012F8  502D               	movf	?___awmod^0,w,c
  2219  0012FA  0F30               	addlw	48
  2220  0012FC  ECA8  F010         	call	_LCDPutChar
  2221  001300                     
  2222                           ;statesModify.c: 177:     LCDPutInst(0xC5);
  2223  001300  0EC5               	movlw	197
  2224  001302  ECD3  F010         	call	_LCDPutInst
  2225  001306                     
  2226                           ;statesModify.c: 178:     LCDPutChar(':');
  2227  001306  0E3A               	movlw	58
  2228  001308  ECA8  F010         	call	_LCDPutChar
  2229  00130C                     
  2230                           ;statesModify.c: 179:     LCDPutInst(0xC6);
  2231  00130C  0EC6               	movlw	198
  2232  00130E  ECD3  F010         	call	_LCDPutInst
  2233  001312                     
  2234                           ;statesModify.c: 180:     if (count10ms >= (20/2)) {
  2235  001312  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2236  001314  EF95  F009         	goto	u1161
  2237  001318  500E               	movf	(_count10ms+1)^0,w,c
  2238  00131A  E109               	bnz	u1160
  2239  00131C  0E0A               	movlw	10
  2240  00131E  5C0D               	subwf	_count10ms^0,w,c
  2241  001320  A0D8               	btfss	status,0,c
  2242  001322  EF95  F009         	goto	u1161
  2243  001326  EF97  F009         	goto	u1160
  2244  00132A                     u1161:
  2245  00132A  EFDF  F009         	goto	l2191
  2246  00132E                     u1160:
  2247  00132E                     
  2248                           ;statesModify.c: 181:         count10ms = 0;
  2249  00132E  0E00               	movlw	0
  2250  001330  6E0E               	movwf	(_count10ms+1)^0,c
  2251  001332  0E00               	movlw	0
  2252  001334  6E0D               	movwf	_count10ms^0,c
  2253  001336                     
  2254                           ;statesModify.c: 182:         if (countAuto <= 0) {
  2255  001336  BE20               	btfsc	(_countAuto+1)^0,7,c
  2256  001338  EFA8  F009         	goto	u1170
  2257  00133C  5020               	movf	(_countAuto+1)^0,w,c
  2258  00133E  E106               	bnz	u1171
  2259  001340  041F               	decf	_countAuto^0,w,c
  2260  001342  B0D8               	btfsc	status,0,c
  2261  001344  EFA6  F009         	goto	u1171
  2262  001348  EFA8  F009         	goto	u1170
  2263  00134C                     u1171:
  2264  00134C  EFDF  F009         	goto	l2191
  2265  001350                     u1170:
  2266  001350                     
  2267                           ;statesModify.c: 183:             if (blink == 0) {
  2268  001350  5003               	movf	_blink^0,w,c
  2269  001352  1004               	iorwf	(_blink+1)^0,w,c
  2270  001354  A4D8               	btfss	status,2,c
  2271  001356  EFAF  F009         	goto	u1181
  2272  00135A  EFB1  F009         	goto	u1180
  2273  00135E                     u1181:
  2274  00135E  EFB9  F009         	goto	l2187
  2275  001362                     u1180:
  2276  001362                     
  2277                           ;statesModify.c: 184:                 LCDPutChar(' ');
  2278  001362  0E20               	movlw	32
  2279  001364  ECA8  F010         	call	_LCDPutChar
  2280                           
  2281                           ;statesModify.c: 185:                 LCDPutChar(' ');
  2282  001368  0E20               	movlw	32
  2283  00136A  ECA8  F010         	call	_LCDPutChar
  2284                           
  2285                           ;statesModify.c: 186:             } else {
  2286  00136E  EFD5  F009         	goto	l2189
  2287  001372                     l2187:
  2288                           
  2289                           ;statesModify.c: 187:                 LCDPutChar(sec/10+'0');
  2290  001372  C009  F02D         	movff	_sec,___awdiv@dividend
  2291  001376  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2292  00137A  0E00               	movlw	0
  2293  00137C  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2294  00137E  0E0A               	movlw	10
  2295  001380  6E2F               	movwf	___awdiv@divisor^0,c
  2296  001382  EC2C  F00F         	call	___awdiv	;wreg free
  2297  001386  502D               	movf	?___awdiv^0,w,c
  2298  001388  0F30               	addlw	48
  2299  00138A  ECA8  F010         	call	_LCDPutChar
  2300                           
  2301                           ;statesModify.c: 188:                 LCDPutChar(sec%10+'0');
  2302  00138E  C009  F02D         	movff	_sec,___awmod@dividend
  2303  001392  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2304  001396  0E00               	movlw	0
  2305  001398  6E30               	movwf	(___awmod@divisor+1)^0,c
  2306  00139A  0E0A               	movlw	10
  2307  00139C  6E2F               	movwf	___awmod@divisor^0,c
  2308  00139E  EC8E  F00F         	call	___awmod	;wreg free
  2309  0013A2  502D               	movf	?___awmod^0,w,c
  2310  0013A4  0F30               	addlw	48
  2311  0013A6  ECA8  F010         	call	_LCDPutChar
  2312  0013AA                     l2189:
  2313                           
  2314                           ;statesModify.c: 190:             blink = (blink + 1) % 2;
  2315  0013AA  0E01               	movlw	1
  2316  0013AC  2403               	addwf	_blink^0,w,c
  2317  0013AE  6E36               	movwf	??_displayModSecond^0,c
  2318  0013B0  0E00               	movlw	0
  2319  0013B2  2004               	addwfc	(_blink+1)^0,w,c
  2320  0013B4  6E37               	movwf	(??_displayModSecond+1)^0,c
  2321  0013B6  0E01               	movlw	1
  2322  0013B8  1436               	andwf	??_displayModSecond^0,w,c
  2323  0013BA  6E03               	movwf	_blink^0,c
  2324  0013BC  6A04               	clrf	(_blink+1)^0,c
  2325  0013BE                     l2191:
  2326                           
  2327                           ;statesModify.c: 193:     if (countAuto > 0) {
  2328  0013BE  BE20               	btfsc	(_countAuto+1)^0,7,c
  2329  0013C0  EFEA  F009         	goto	u1191
  2330  0013C4  5020               	movf	(_countAuto+1)^0,w,c
  2331  0013C6  E108               	bnz	u1190
  2332  0013C8  041F               	decf	_countAuto^0,w,c
  2333  0013CA  A0D8               	btfss	status,0,c
  2334  0013CC  EFEA  F009         	goto	u1191
  2335  0013D0  EFEC  F009         	goto	u1190
  2336  0013D4                     u1191:
  2337  0013D4  EF08  F00A         	goto	l461
  2338  0013D8                     u1190:
  2339  0013D8                     
  2340                           ;statesModify.c: 194:         LCDPutChar(sec/10+'0');
  2341  0013D8  C009  F02D         	movff	_sec,___awdiv@dividend
  2342  0013DC  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2343  0013E0  0E00               	movlw	0
  2344  0013E2  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2345  0013E4  0E0A               	movlw	10
  2346  0013E6  6E2F               	movwf	___awdiv@divisor^0,c
  2347  0013E8  EC2C  F00F         	call	___awdiv	;wreg free
  2348  0013EC  502D               	movf	?___awdiv^0,w,c
  2349  0013EE  0F30               	addlw	48
  2350  0013F0  ECA8  F010         	call	_LCDPutChar
  2351                           
  2352                           ;statesModify.c: 195:         LCDPutChar(sec%10+'0');
  2353  0013F4  C009  F02D         	movff	_sec,___awmod@dividend
  2354  0013F8  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2355  0013FC  0E00               	movlw	0
  2356  0013FE  6E30               	movwf	(___awmod@divisor+1)^0,c
  2357  001400  0E0A               	movlw	10
  2358  001402  6E2F               	movwf	___awmod@divisor^0,c
  2359  001404  EC8E  F00F         	call	___awmod	;wreg free
  2360  001408  502D               	movf	?___awmod^0,w,c
  2361  00140A  0F30               	addlw	48
  2362  00140C  ECA8  F010         	call	_LCDPutChar
  2363  001410                     l461:
  2364  001410  0012               	return		;funcret
  2365  001412                     __end_of_displayModSecond:
  2366                           	opt callstack 0
  2367                           
  2368 ;; *************** function _displayModMinute *****************
  2369 ;; Defined at:
  2370 ;;		line 133 in file "statesModify.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;Total ram usage:        2 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    7
  2391 ;; This function calls:
  2392 ;;		_LCDPutChar
  2393 ;;		_LCDPutInst
  2394 ;;		_LCDPutStr
  2395 ;;		___awdiv
  2396 ;;		___awmod
  2397 ;; This function is called by:
  2398 ;;		_main
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text10
  2403  001412                     __ptext10:
  2404                           	opt callstack 0
  2405  001412                     _displayModMinute:
  2406                           	opt callstack 23
  2407  001412                     
  2408                           ;statesModify.c: 134:     LCDPutInst(0x80);
  2409  001412  0E80               	movlw	128
  2410  001414  ECD3  F010         	call	_LCDPutInst
  2411  001418                     
  2412                           ;statesModify.c: 135:     LCDPutStr("MODIFIES MINUTE");
  2413  001418  0E43               	movlw	low STR_3
  2414  00141A  6E34               	movwf	LCDPutStr@ptr^0,c
  2415  00141C  0E10               	movlw	high STR_3
  2416  00141E  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2417  001420  EC6E  F011         	call	_LCDPutStr	;wreg free
  2418  001424                     
  2419                           ;statesModify.c: 136:     LCDPutInst(0xC0);
  2420  001424  0EC0               	movlw	192
  2421  001426  ECD3  F010         	call	_LCDPutInst
  2422  00142A                     
  2423                           ;statesModify.c: 137:     LCDPutChar(hr/10+'0');
  2424  00142A  C005  F02D         	movff	_hr,___awdiv@dividend
  2425  00142E  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2426  001432  0E00               	movlw	0
  2427  001434  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2428  001436  0E0A               	movlw	10
  2429  001438  6E2F               	movwf	___awdiv@divisor^0,c
  2430  00143A  EC2C  F00F         	call	___awdiv	;wreg free
  2431  00143E  502D               	movf	?___awdiv^0,w,c
  2432  001440  0F30               	addlw	48
  2433  001442  ECA8  F010         	call	_LCDPutChar
  2434  001446                     
  2435                           ;statesModify.c: 138:     LCDPutChar(hr%10+'0');
  2436  001446  C005  F02D         	movff	_hr,___awmod@dividend
  2437  00144A  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2438  00144E  0E00               	movlw	0
  2439  001450  6E30               	movwf	(___awmod@divisor+1)^0,c
  2440  001452  0E0A               	movlw	10
  2441  001454  6E2F               	movwf	___awmod@divisor^0,c
  2442  001456  EC8E  F00F         	call	___awmod	;wreg free
  2443  00145A  502D               	movf	?___awmod^0,w,c
  2444  00145C  0F30               	addlw	48
  2445  00145E  ECA8  F010         	call	_LCDPutChar
  2446  001462                     
  2447                           ;statesModify.c: 140:     LCDPutChar(':');
  2448  001462  0E3A               	movlw	58
  2449  001464  ECA8  F010         	call	_LCDPutChar
  2450  001468                     
  2451                           ;statesModify.c: 141:     LCDPutInst(0xC3);
  2452  001468  0EC3               	movlw	195
  2453  00146A  ECD3  F010         	call	_LCDPutInst
  2454  00146E                     
  2455                           ;statesModify.c: 142:     if (count10ms >= (20/2)) {
  2456  00146E  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2457  001470  EF43  F00A         	goto	u1121
  2458  001474  500E               	movf	(_count10ms+1)^0,w,c
  2459  001476  E109               	bnz	u1120
  2460  001478  0E0A               	movlw	10
  2461  00147A  5C0D               	subwf	_count10ms^0,w,c
  2462  00147C  A0D8               	btfss	status,0,c
  2463  00147E  EF43  F00A         	goto	u1121
  2464  001482  EF45  F00A         	goto	u1120
  2465  001486                     u1121:
  2466  001486  EF8D  F00A         	goto	l2149
  2467  00148A                     u1120:
  2468  00148A                     
  2469                           ;statesModify.c: 143:         count10ms = 0;
  2470  00148A  0E00               	movlw	0
  2471  00148C  6E0E               	movwf	(_count10ms+1)^0,c
  2472  00148E  0E00               	movlw	0
  2473  001490  6E0D               	movwf	_count10ms^0,c
  2474  001492                     
  2475                           ;statesModify.c: 144:         if (countAuto <= 0) {
  2476  001492  BE20               	btfsc	(_countAuto+1)^0,7,c
  2477  001494  EF56  F00A         	goto	u1130
  2478  001498  5020               	movf	(_countAuto+1)^0,w,c
  2479  00149A  E106               	bnz	u1131
  2480  00149C  041F               	decf	_countAuto^0,w,c
  2481  00149E  B0D8               	btfsc	status,0,c
  2482  0014A0  EF54  F00A         	goto	u1131
  2483  0014A4  EF56  F00A         	goto	u1130
  2484  0014A8                     u1131:
  2485  0014A8  EF8D  F00A         	goto	l2149
  2486  0014AC                     u1130:
  2487  0014AC                     
  2488                           ;statesModify.c: 145:             if (blink == 0) {
  2489  0014AC  5003               	movf	_blink^0,w,c
  2490  0014AE  1004               	iorwf	(_blink+1)^0,w,c
  2491  0014B0  A4D8               	btfss	status,2,c
  2492  0014B2  EF5D  F00A         	goto	u1141
  2493  0014B6  EF5F  F00A         	goto	u1140
  2494  0014BA                     u1141:
  2495  0014BA  EF67  F00A         	goto	l2145
  2496  0014BE                     u1140:
  2497  0014BE                     
  2498                           ;statesModify.c: 146:                 LCDPutChar(' ');
  2499  0014BE  0E20               	movlw	32
  2500  0014C0  ECA8  F010         	call	_LCDPutChar
  2501                           
  2502                           ;statesModify.c: 147:                 LCDPutChar(' ');
  2503  0014C4  0E20               	movlw	32
  2504  0014C6  ECA8  F010         	call	_LCDPutChar
  2505                           
  2506                           ;statesModify.c: 148:             } else {
  2507  0014CA  EF83  F00A         	goto	l2147
  2508  0014CE                     l2145:
  2509                           
  2510                           ;statesModify.c: 149:                 LCDPutChar(min/10+'0');
  2511  0014CE  C007  F02D         	movff	_min,___awdiv@dividend
  2512  0014D2  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2513  0014D6  0E00               	movlw	0
  2514  0014D8  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2515  0014DA  0E0A               	movlw	10
  2516  0014DC  6E2F               	movwf	___awdiv@divisor^0,c
  2517  0014DE  EC2C  F00F         	call	___awdiv	;wreg free
  2518  0014E2  502D               	movf	?___awdiv^0,w,c
  2519  0014E4  0F30               	addlw	48
  2520  0014E6  ECA8  F010         	call	_LCDPutChar
  2521                           
  2522                           ;statesModify.c: 150:                 LCDPutChar(min%10+'0');
  2523  0014EA  C007  F02D         	movff	_min,___awmod@dividend
  2524  0014EE  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2525  0014F2  0E00               	movlw	0
  2526  0014F4  6E30               	movwf	(___awmod@divisor+1)^0,c
  2527  0014F6  0E0A               	movlw	10
  2528  0014F8  6E2F               	movwf	___awmod@divisor^0,c
  2529  0014FA  EC8E  F00F         	call	___awmod	;wreg free
  2530  0014FE  502D               	movf	?___awmod^0,w,c
  2531  001500  0F30               	addlw	48
  2532  001502  ECA8  F010         	call	_LCDPutChar
  2533  001506                     l2147:
  2534                           
  2535                           ;statesModify.c: 152:             blink = (blink + 1) % 2;
  2536  001506  0E01               	movlw	1
  2537  001508  2403               	addwf	_blink^0,w,c
  2538  00150A  6E36               	movwf	??_displayModMinute^0,c
  2539  00150C  0E00               	movlw	0
  2540  00150E  2004               	addwfc	(_blink+1)^0,w,c
  2541  001510  6E37               	movwf	(??_displayModMinute+1)^0,c
  2542  001512  0E01               	movlw	1
  2543  001514  1436               	andwf	??_displayModMinute^0,w,c
  2544  001516  6E03               	movwf	_blink^0,c
  2545  001518  6A04               	clrf	(_blink+1)^0,c
  2546  00151A                     l2149:
  2547                           
  2548                           ;statesModify.c: 155:     if (countAuto > 0) {
  2549  00151A  BE20               	btfsc	(_countAuto+1)^0,7,c
  2550  00151C  EF98  F00A         	goto	u1151
  2551  001520  5020               	movf	(_countAuto+1)^0,w,c
  2552  001522  E108               	bnz	u1150
  2553  001524  041F               	decf	_countAuto^0,w,c
  2554  001526  A0D8               	btfss	status,0,c
  2555  001528  EF98  F00A         	goto	u1151
  2556  00152C  EF9A  F00A         	goto	u1150
  2557  001530                     u1151:
  2558  001530  EFB6  F00A         	goto	l452
  2559  001534                     u1150:
  2560  001534                     
  2561                           ;statesModify.c: 156:         LCDPutChar(min/10+'0');
  2562  001534  C007  F02D         	movff	_min,___awdiv@dividend
  2563  001538  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2564  00153C  0E00               	movlw	0
  2565  00153E  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2566  001540  0E0A               	movlw	10
  2567  001542  6E2F               	movwf	___awdiv@divisor^0,c
  2568  001544  EC2C  F00F         	call	___awdiv	;wreg free
  2569  001548  502D               	movf	?___awdiv^0,w,c
  2570  00154A  0F30               	addlw	48
  2571  00154C  ECA8  F010         	call	_LCDPutChar
  2572                           
  2573                           ;statesModify.c: 157:         LCDPutChar(min%10+'0');
  2574  001550  C007  F02D         	movff	_min,___awmod@dividend
  2575  001554  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2576  001558  0E00               	movlw	0
  2577  00155A  6E30               	movwf	(___awmod@divisor+1)^0,c
  2578  00155C  0E0A               	movlw	10
  2579  00155E  6E2F               	movwf	___awmod@divisor^0,c
  2580  001560  EC8E  F00F         	call	___awmod	;wreg free
  2581  001564  502D               	movf	?___awmod^0,w,c
  2582  001566  0F30               	addlw	48
  2583  001568  ECA8  F010         	call	_LCDPutChar
  2584  00156C                     l452:
  2585                           
  2586                           ;statesModify.c: 159:     LCDPutInst(0xC5);
  2587  00156C  0EC5               	movlw	197
  2588  00156E  ECD3  F010         	call	_LCDPutInst
  2589                           
  2590                           ;statesModify.c: 160:     LCDPutChar(':');
  2591  001572  0E3A               	movlw	58
  2592  001574  ECA8  F010         	call	_LCDPutChar
  2593                           
  2594                           ;statesModify.c: 162:     LCDPutChar(sec/10+'0');
  2595  001578  C009  F02D         	movff	_sec,___awdiv@dividend
  2596  00157C  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2597  001580  0E00               	movlw	0
  2598  001582  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2599  001584  0E0A               	movlw	10
  2600  001586  6E2F               	movwf	___awdiv@divisor^0,c
  2601  001588  EC2C  F00F         	call	___awdiv	;wreg free
  2602  00158C  502D               	movf	?___awdiv^0,w,c
  2603  00158E  0F30               	addlw	48
  2604  001590  ECA8  F010         	call	_LCDPutChar
  2605                           
  2606                           ;statesModify.c: 163:     LCDPutChar(sec%10+'0');
  2607  001594  C009  F02D         	movff	_sec,___awmod@dividend
  2608  001598  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2609  00159C  0E00               	movlw	0
  2610  00159E  6E30               	movwf	(___awmod@divisor+1)^0,c
  2611  0015A0  0E0A               	movlw	10
  2612  0015A2  6E2F               	movwf	___awmod@divisor^0,c
  2613  0015A4  EC8E  F00F         	call	___awmod	;wreg free
  2614  0015A8  502D               	movf	?___awmod^0,w,c
  2615  0015AA  0F30               	addlw	48
  2616  0015AC  ECA8  F010         	call	_LCDPutChar
  2617  0015B0  0012               	return		;funcret
  2618  0015B2                     __end_of_displayModMinute:
  2619                           	opt callstack 0
  2620                           
  2621 ;; *************** function _displayModHour *****************
  2622 ;; Defined at:
  2623 ;;		line 100 in file "statesModify.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        2 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    7
  2644 ;; This function calls:
  2645 ;;		_LCDPutChar
  2646 ;;		_LCDPutInst
  2647 ;;		_LCDPutStr
  2648 ;;		___awdiv
  2649 ;;		___awmod
  2650 ;; This function is called by:
  2651 ;;		_main
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text11
  2656  0015B2                     __ptext11:
  2657                           	opt callstack 0
  2658  0015B2                     _displayModHour:
  2659                           	opt callstack 23
  2660  0015B2                     
  2661                           ;statesModify.c: 101:     LCDPutInst(0x80);
  2662  0015B2  0E80               	movlw	128
  2663  0015B4  ECD3  F010         	call	_LCDPutInst
  2664  0015B8                     
  2665                           ;statesModify.c: 102:     LCDPutStr(" MODIFIES HOUR ");
  2666  0015B8  0E23               	movlw	low STR_2
  2667  0015BA  6E34               	movwf	LCDPutStr@ptr^0,c
  2668  0015BC  0E10               	movlw	high STR_2
  2669  0015BE  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2670  0015C0  EC6E  F011         	call	_LCDPutStr	;wreg free
  2671  0015C4                     
  2672                           ;statesModify.c: 103:     LCDPutInst(0xC0);
  2673  0015C4  0EC0               	movlw	192
  2674  0015C6  ECD3  F010         	call	_LCDPutInst
  2675  0015CA                     
  2676                           ;statesModify.c: 104:     if (count10ms >= (20/2)) {
  2677  0015CA  BE0E               	btfsc	(_count10ms+1)^0,7,c
  2678  0015CC  EFF1  F00A         	goto	u1081
  2679  0015D0  500E               	movf	(_count10ms+1)^0,w,c
  2680  0015D2  E109               	bnz	u1080
  2681  0015D4  0E0A               	movlw	10
  2682  0015D6  5C0D               	subwf	_count10ms^0,w,c
  2683  0015D8  A0D8               	btfss	status,0,c
  2684  0015DA  EFF1  F00A         	goto	u1081
  2685  0015DE  EFF3  F00A         	goto	u1080
  2686  0015E2                     u1081:
  2687  0015E2  EF3B  F00B         	goto	l2117
  2688  0015E6                     u1080:
  2689  0015E6                     
  2690                           ;statesModify.c: 105:         count10ms = 0;
  2691  0015E6  0E00               	movlw	0
  2692  0015E8  6E0E               	movwf	(_count10ms+1)^0,c
  2693  0015EA  0E00               	movlw	0
  2694  0015EC  6E0D               	movwf	_count10ms^0,c
  2695  0015EE                     
  2696                           ;statesModify.c: 106:         if (countAuto <= 0) {
  2697  0015EE  BE20               	btfsc	(_countAuto+1)^0,7,c
  2698  0015F0  EF04  F00B         	goto	u1090
  2699  0015F4  5020               	movf	(_countAuto+1)^0,w,c
  2700  0015F6  E106               	bnz	u1091
  2701  0015F8  041F               	decf	_countAuto^0,w,c
  2702  0015FA  B0D8               	btfsc	status,0,c
  2703  0015FC  EF02  F00B         	goto	u1091
  2704  001600  EF04  F00B         	goto	u1090
  2705  001604                     u1091:
  2706  001604  EF3B  F00B         	goto	l2117
  2707  001608                     u1090:
  2708  001608                     
  2709                           ;statesModify.c: 107:             if (blink == 0) {
  2710  001608  5003               	movf	_blink^0,w,c
  2711  00160A  1004               	iorwf	(_blink+1)^0,w,c
  2712  00160C  A4D8               	btfss	status,2,c
  2713  00160E  EF0B  F00B         	goto	u1101
  2714  001612  EF0D  F00B         	goto	u1100
  2715  001616                     u1101:
  2716  001616  EF15  F00B         	goto	l2113
  2717  00161A                     u1100:
  2718  00161A                     
  2719                           ;statesModify.c: 108:                 LCDPutChar(' ');
  2720  00161A  0E20               	movlw	32
  2721  00161C  ECA8  F010         	call	_LCDPutChar
  2722                           
  2723                           ;statesModify.c: 109:                 LCDPutChar(' ');
  2724  001620  0E20               	movlw	32
  2725  001622  ECA8  F010         	call	_LCDPutChar
  2726                           
  2727                           ;statesModify.c: 110:             } else {
  2728  001626  EF31  F00B         	goto	l2115
  2729  00162A                     l2113:
  2730                           
  2731                           ;statesModify.c: 111:                 LCDPutChar(hr/10+'0');
  2732  00162A  C005  F02D         	movff	_hr,___awdiv@dividend
  2733  00162E  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2734  001632  0E00               	movlw	0
  2735  001634  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2736  001636  0E0A               	movlw	10
  2737  001638  6E2F               	movwf	___awdiv@divisor^0,c
  2738  00163A  EC2C  F00F         	call	___awdiv	;wreg free
  2739  00163E  502D               	movf	?___awdiv^0,w,c
  2740  001640  0F30               	addlw	48
  2741  001642  ECA8  F010         	call	_LCDPutChar
  2742                           
  2743                           ;statesModify.c: 112:                 LCDPutChar(hr%10+'0');
  2744  001646  C005  F02D         	movff	_hr,___awmod@dividend
  2745  00164A  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2746  00164E  0E00               	movlw	0
  2747  001650  6E30               	movwf	(___awmod@divisor+1)^0,c
  2748  001652  0E0A               	movlw	10
  2749  001654  6E2F               	movwf	___awmod@divisor^0,c
  2750  001656  EC8E  F00F         	call	___awmod	;wreg free
  2751  00165A  502D               	movf	?___awmod^0,w,c
  2752  00165C  0F30               	addlw	48
  2753  00165E  ECA8  F010         	call	_LCDPutChar
  2754  001662                     l2115:
  2755                           
  2756                           ;statesModify.c: 114:             blink = (blink + 1) % 2;
  2757  001662  0E01               	movlw	1
  2758  001664  2403               	addwf	_blink^0,w,c
  2759  001666  6E36               	movwf	??_displayModHour^0,c
  2760  001668  0E00               	movlw	0
  2761  00166A  2004               	addwfc	(_blink+1)^0,w,c
  2762  00166C  6E37               	movwf	(??_displayModHour+1)^0,c
  2763  00166E  0E01               	movlw	1
  2764  001670  1436               	andwf	??_displayModHour^0,w,c
  2765  001672  6E03               	movwf	_blink^0,c
  2766  001674  6A04               	clrf	(_blink+1)^0,c
  2767  001676                     l2117:
  2768                           
  2769                           ;statesModify.c: 117:     if (countAuto > 0) {
  2770  001676  BE20               	btfsc	(_countAuto+1)^0,7,c
  2771  001678  EF46  F00B         	goto	u1111
  2772  00167C  5020               	movf	(_countAuto+1)^0,w,c
  2773  00167E  E108               	bnz	u1110
  2774  001680  041F               	decf	_countAuto^0,w,c
  2775  001682  A0D8               	btfss	status,0,c
  2776  001684  EF46  F00B         	goto	u1111
  2777  001688  EF48  F00B         	goto	u1110
  2778  00168C                     u1111:
  2779  00168C  EF64  F00B         	goto	l444
  2780  001690                     u1110:
  2781  001690                     
  2782                           ;statesModify.c: 118:         LCDPutChar(hr/10+'0');
  2783  001690  C005  F02D         	movff	_hr,___awdiv@dividend
  2784  001694  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2785  001698  0E00               	movlw	0
  2786  00169A  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2787  00169C  0E0A               	movlw	10
  2788  00169E  6E2F               	movwf	___awdiv@divisor^0,c
  2789  0016A0  EC2C  F00F         	call	___awdiv	;wreg free
  2790  0016A4  502D               	movf	?___awdiv^0,w,c
  2791  0016A6  0F30               	addlw	48
  2792  0016A8  ECA8  F010         	call	_LCDPutChar
  2793                           
  2794                           ;statesModify.c: 119:         LCDPutChar(hr%10+'0');
  2795  0016AC  C005  F02D         	movff	_hr,___awmod@dividend
  2796  0016B0  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2797  0016B4  0E00               	movlw	0
  2798  0016B6  6E30               	movwf	(___awmod@divisor+1)^0,c
  2799  0016B8  0E0A               	movlw	10
  2800  0016BA  6E2F               	movwf	___awmod@divisor^0,c
  2801  0016BC  EC8E  F00F         	call	___awmod	;wreg free
  2802  0016C0  502D               	movf	?___awmod^0,w,c
  2803  0016C2  0F30               	addlw	48
  2804  0016C4  ECA8  F010         	call	_LCDPutChar
  2805  0016C8                     l444:
  2806                           
  2807                           ;statesModify.c: 121:     LCDPutInst(0xC2);
  2808  0016C8  0EC2               	movlw	194
  2809  0016CA  ECD3  F010         	call	_LCDPutInst
  2810                           
  2811                           ;statesModify.c: 122:     LCDPutChar(':');
  2812  0016CE  0E3A               	movlw	58
  2813  0016D0  ECA8  F010         	call	_LCDPutChar
  2814                           
  2815                           ;statesModify.c: 124:     LCDPutChar(min/10+'0');
  2816  0016D4  C007  F02D         	movff	_min,___awdiv@dividend
  2817  0016D8  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2818  0016DC  0E00               	movlw	0
  2819  0016DE  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2820  0016E0  0E0A               	movlw	10
  2821  0016E2  6E2F               	movwf	___awdiv@divisor^0,c
  2822  0016E4  EC2C  F00F         	call	___awdiv	;wreg free
  2823  0016E8  502D               	movf	?___awdiv^0,w,c
  2824  0016EA  0F30               	addlw	48
  2825  0016EC  ECA8  F010         	call	_LCDPutChar
  2826                           
  2827                           ;statesModify.c: 125:     LCDPutChar(min%10+'0');
  2828  0016F0  C007  F02D         	movff	_min,___awmod@dividend
  2829  0016F4  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2830  0016F8  0E00               	movlw	0
  2831  0016FA  6E30               	movwf	(___awmod@divisor+1)^0,c
  2832  0016FC  0E0A               	movlw	10
  2833  0016FE  6E2F               	movwf	___awmod@divisor^0,c
  2834  001700  EC8E  F00F         	call	___awmod	;wreg free
  2835  001704  502D               	movf	?___awmod^0,w,c
  2836  001706  0F30               	addlw	48
  2837  001708  ECA8  F010         	call	_LCDPutChar
  2838                           
  2839                           ;statesModify.c: 127:     LCDPutChar(':');
  2840  00170C  0E3A               	movlw	58
  2841  00170E  ECA8  F010         	call	_LCDPutChar
  2842                           
  2843                           ;statesModify.c: 129:     LCDPutChar(sec/10+'0');
  2844  001712  C009  F02D         	movff	_sec,___awdiv@dividend
  2845  001716  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2846  00171A  0E00               	movlw	0
  2847  00171C  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2848  00171E  0E0A               	movlw	10
  2849  001720  6E2F               	movwf	___awdiv@divisor^0,c
  2850  001722  EC2C  F00F         	call	___awdiv	;wreg free
  2851  001726  502D               	movf	?___awdiv^0,w,c
  2852  001728  0F30               	addlw	48
  2853  00172A  ECA8  F010         	call	_LCDPutChar
  2854                           
  2855                           ;statesModify.c: 130:     LCDPutChar(sec%10+'0');
  2856  00172E  C009  F02D         	movff	_sec,___awmod@dividend
  2857  001732  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2858  001736  0E00               	movlw	0
  2859  001738  6E30               	movwf	(___awmod@divisor+1)^0,c
  2860  00173A  0E0A               	movlw	10
  2861  00173C  6E2F               	movwf	___awmod@divisor^0,c
  2862  00173E  EC8E  F00F         	call	___awmod	;wreg free
  2863  001742  502D               	movf	?___awmod^0,w,c
  2864  001744  0F30               	addlw	48
  2865  001746  ECA8  F010         	call	_LCDPutChar
  2866  00174A  0012               	return		;funcret
  2867  00174C                     __end_of_displayModHour:
  2868                           	opt callstack 0
  2869                           
  2870 ;; *************** function _displayClock *****************
  2871 ;; Defined at:
  2872 ;;		line 21 in file "stateClock.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;		None
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;Total ram usage:        0 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    7
  2893 ;; This function calls:
  2894 ;;		_LCDPutChar
  2895 ;;		_LCDPutInst
  2896 ;;		_LCDPutStr
  2897 ;;		___awdiv
  2898 ;;		___awmod
  2899 ;; This function is called by:
  2900 ;;		_main
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text12
  2905  001D8A                     __ptext12:
  2906                           	opt callstack 0
  2907  001D8A                     _displayClock:
  2908                           	opt callstack 23
  2909  001D8A                     
  2910                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2911  001D8A  0E80               	movlw	128
  2912  001D8C  ECD3  F010         	call	_LCDPutInst
  2913  001D90                     
  2914                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2915  001D90  0E12               	movlw	low STR_1
  2916  001D92  6E34               	movwf	LCDPutStr@ptr^0,c
  2917  001D94  0E10               	movlw	high STR_1
  2918  001D96  6E35               	movwf	(LCDPutStr@ptr+1)^0,c
  2919  001D98  EC6E  F011         	call	_LCDPutStr	;wreg free
  2920  001D9C                     
  2921                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2922  001D9C  0EC0               	movlw	192
  2923  001D9E  ECD3  F010         	call	_LCDPutInst
  2924  001DA2                     
  2925                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2926  001DA2  C005  F02D         	movff	_hr,___awdiv@dividend
  2927  001DA6  C006  F02E         	movff	_hr+1,___awdiv@dividend+1
  2928  001DAA  0E00               	movlw	0
  2929  001DAC  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2930  001DAE  0E0A               	movlw	10
  2931  001DB0  6E2F               	movwf	___awdiv@divisor^0,c
  2932  001DB2  EC2C  F00F         	call	___awdiv	;wreg free
  2933  001DB6  502D               	movf	?___awdiv^0,w,c
  2934  001DB8  0F30               	addlw	48
  2935  001DBA  ECA8  F010         	call	_LCDPutChar
  2936  001DBE                     
  2937                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2938  001DBE  C005  F02D         	movff	_hr,___awmod@dividend
  2939  001DC2  C006  F02E         	movff	_hr+1,___awmod@dividend+1
  2940  001DC6  0E00               	movlw	0
  2941  001DC8  6E30               	movwf	(___awmod@divisor+1)^0,c
  2942  001DCA  0E0A               	movlw	10
  2943  001DCC  6E2F               	movwf	___awmod@divisor^0,c
  2944  001DCE  EC8E  F00F         	call	___awmod	;wreg free
  2945  001DD2  502D               	movf	?___awmod^0,w,c
  2946  001DD4  0F30               	addlw	48
  2947  001DD6  ECA8  F010         	call	_LCDPutChar
  2948  001DDA                     
  2949                           ;stateClock.c: 27:     LCDPutChar(':');
  2950  001DDA  0E3A               	movlw	58
  2951  001DDC  ECA8  F010         	call	_LCDPutChar
  2952  001DE0                     
  2953                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2954  001DE0  C007  F02D         	movff	_min,___awdiv@dividend
  2955  001DE4  C008  F02E         	movff	_min+1,___awdiv@dividend+1
  2956  001DE8  0E00               	movlw	0
  2957  001DEA  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2958  001DEC  0E0A               	movlw	10
  2959  001DEE  6E2F               	movwf	___awdiv@divisor^0,c
  2960  001DF0  EC2C  F00F         	call	___awdiv	;wreg free
  2961  001DF4  502D               	movf	?___awdiv^0,w,c
  2962  001DF6  0F30               	addlw	48
  2963  001DF8  ECA8  F010         	call	_LCDPutChar
  2964  001DFC                     
  2965                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2966  001DFC  C007  F02D         	movff	_min,___awmod@dividend
  2967  001E00  C008  F02E         	movff	_min+1,___awmod@dividend+1
  2968  001E04  0E00               	movlw	0
  2969  001E06  6E30               	movwf	(___awmod@divisor+1)^0,c
  2970  001E08  0E0A               	movlw	10
  2971  001E0A  6E2F               	movwf	___awmod@divisor^0,c
  2972  001E0C  EC8E  F00F         	call	___awmod	;wreg free
  2973  001E10  502D               	movf	?___awmod^0,w,c
  2974  001E12  0F30               	addlw	48
  2975  001E14  ECA8  F010         	call	_LCDPutChar
  2976  001E18                     
  2977                           ;stateClock.c: 30:     LCDPutChar(':');
  2978  001E18  0E3A               	movlw	58
  2979  001E1A  ECA8  F010         	call	_LCDPutChar
  2980  001E1E                     
  2981                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2982  001E1E  C009  F02D         	movff	_sec,___awdiv@dividend
  2983  001E22  C00A  F02E         	movff	_sec+1,___awdiv@dividend+1
  2984  001E26  0E00               	movlw	0
  2985  001E28  6E30               	movwf	(___awdiv@divisor+1)^0,c
  2986  001E2A  0E0A               	movlw	10
  2987  001E2C  6E2F               	movwf	___awdiv@divisor^0,c
  2988  001E2E  EC2C  F00F         	call	___awdiv	;wreg free
  2989  001E32  502D               	movf	?___awdiv^0,w,c
  2990  001E34  0F30               	addlw	48
  2991  001E36  ECA8  F010         	call	_LCDPutChar
  2992  001E3A                     
  2993                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2994  001E3A  C009  F02D         	movff	_sec,___awmod@dividend
  2995  001E3E  C00A  F02E         	movff	_sec+1,___awmod@dividend+1
  2996  001E42  0E00               	movlw	0
  2997  001E44  6E30               	movwf	(___awmod@divisor+1)^0,c
  2998  001E46  0E0A               	movlw	10
  2999  001E48  6E2F               	movwf	___awmod@divisor^0,c
  3000  001E4A  EC8E  F00F         	call	___awmod	;wreg free
  3001  001E4E  502D               	movf	?___awmod^0,w,c
  3002  001E50  0F30               	addlw	48
  3003  001E52  ECA8  F010         	call	_LCDPutChar
  3004  001E56  0012               	return		;funcret
  3005  001E58                     __end_of_displayClock:
  3006                           	opt callstack 0
  3007                           
  3008 ;; *************** function ___awmod *****************
  3009 ;; Defined at:
  3010 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  dividend        2    8[COMRAM] int 
  3013 ;;  divisor         2   10[COMRAM] int 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  sign            1   13[COMRAM] unsigned char 
  3016 ;;  counter         1   12[COMRAM] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  2    8[COMRAM] int 
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;Total ram usage:        6 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    3
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_displayClock
  3037 ;;		_displayModHour
  3038 ;;		_displayModMinute
  3039 ;;		_displayModSecond
  3040 ;;		_displayStpWatch
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text13
  3045  001F1C                     __ptext13:
  3046                           	opt callstack 0
  3047  001F1C                     ___awmod:
  3048                           	opt callstack 26
  3049  001F1C  0E00               	movlw	0
  3050  001F1E  6E32               	movwf	___awmod@sign^0,c
  3051  001F20  BE2E               	btfsc	(___awmod@dividend+1)^0,7,c
  3052  001F22  EF97  F00F         	goto	u1020
  3053  001F26  EF95  F00F         	goto	u1021
  3054  001F2A                     u1021:
  3055  001F2A  EF9D  F00F         	goto	l2019
  3056  001F2E                     u1020:
  3057  001F2E  6C2D               	negf	___awmod@dividend^0,c
  3058  001F30  1E2E               	comf	(___awmod@dividend+1)^0,f,c
  3059  001F32  B0D8               	btfsc	status,0,c
  3060  001F34  2A2E               	incf	(___awmod@dividend+1)^0,f,c
  3061  001F36  0E01               	movlw	1
  3062  001F38  6E32               	movwf	___awmod@sign^0,c
  3063  001F3A                     l2019:
  3064  001F3A  BE30               	btfsc	(___awmod@divisor+1)^0,7,c
  3065  001F3C  EFA4  F00F         	goto	u1030
  3066  001F40  EFA2  F00F         	goto	u1031
  3067  001F44                     u1031:
  3068  001F44  EFA8  F00F         	goto	l2023
  3069  001F48                     u1030:
  3070  001F48  6C2F               	negf	___awmod@divisor^0,c
  3071  001F4A  1E30               	comf	(___awmod@divisor+1)^0,f,c
  3072  001F4C  B0D8               	btfsc	status,0,c
  3073  001F4E  2A30               	incf	(___awmod@divisor+1)^0,f,c
  3074  001F50                     l2023:
  3075  001F50  502F               	movf	___awmod@divisor^0,w,c
  3076  001F52  1030               	iorwf	(___awmod@divisor+1)^0,w,c
  3077  001F54  B4D8               	btfsc	status,2,c
  3078  001F56  EFAF  F00F         	goto	u1041
  3079  001F5A  EFB1  F00F         	goto	u1040
  3080  001F5E                     u1041:
  3081  001F5E  EFD5  F00F         	goto	l2039
  3082  001F62                     u1040:
  3083  001F62  0E01               	movlw	1
  3084  001F64  6E31               	movwf	___awmod@counter^0,c
  3085  001F66  EFB9  F00F         	goto	l2029
  3086  001F6A                     l2027:
  3087  001F6A  90D8               	bcf	status,0,c
  3088  001F6C  362F               	rlcf	___awmod@divisor^0,f,c
  3089  001F6E  3630               	rlcf	(___awmod@divisor+1)^0,f,c
  3090  001F70  2A31               	incf	___awmod@counter^0,f,c
  3091  001F72                     l2029:
  3092  001F72  AE30               	btfss	(___awmod@divisor+1)^0,7,c
  3093  001F74  EFBE  F00F         	goto	u1051
  3094  001F78  EFC0  F00F         	goto	u1050
  3095  001F7C                     u1051:
  3096  001F7C  EFB5  F00F         	goto	l2027
  3097  001F80                     u1050:
  3098  001F80                     l2031:
  3099  001F80  502F               	movf	___awmod@divisor^0,w,c
  3100  001F82  5C2D               	subwf	___awmod@dividend^0,w,c
  3101  001F84  5030               	movf	(___awmod@divisor+1)^0,w,c
  3102  001F86  582E               	subwfb	(___awmod@dividend+1)^0,w,c
  3103  001F88  A0D8               	btfss	status,0,c
  3104  001F8A  EFC9  F00F         	goto	u1061
  3105  001F8E  EFCB  F00F         	goto	u1060
  3106  001F92                     u1061:
  3107  001F92  EFCF  F00F         	goto	l2035
  3108  001F96                     u1060:
  3109  001F96  502F               	movf	___awmod@divisor^0,w,c
  3110  001F98  5E2D               	subwf	___awmod@dividend^0,f,c
  3111  001F9A  5030               	movf	(___awmod@divisor+1)^0,w,c
  3112  001F9C  5A2E               	subwfb	(___awmod@dividend+1)^0,f,c
  3113  001F9E                     l2035:
  3114  001F9E  90D8               	bcf	status,0,c
  3115  001FA0  3230               	rrcf	(___awmod@divisor+1)^0,f,c
  3116  001FA2  322F               	rrcf	___awmod@divisor^0,f,c
  3117  001FA4  2E31               	decfsz	___awmod@counter^0,f,c
  3118  001FA6  EFC0  F00F         	goto	l2031
  3119  001FAA                     l2039:
  3120  001FAA  5032               	movf	___awmod@sign^0,w,c
  3121  001FAC  B4D8               	btfsc	status,2,c
  3122  001FAE  EFDB  F00F         	goto	u1071
  3123  001FB2  EFDD  F00F         	goto	u1070
  3124  001FB6                     u1071:
  3125  001FB6  EFE1  F00F         	goto	l2043
  3126  001FBA                     u1070:
  3127  001FBA  6C2D               	negf	___awmod@dividend^0,c
  3128  001FBC  1E2E               	comf	(___awmod@dividend+1)^0,f,c
  3129  001FBE  B0D8               	btfsc	status,0,c
  3130  001FC0  2A2E               	incf	(___awmod@dividend+1)^0,f,c
  3131  001FC2                     l2043:
  3132  001FC2  C02D  F02D         	movff	___awmod@dividend,?___awmod
  3133  001FC6  C02E  F02E         	movff	___awmod@dividend+1,?___awmod+1
  3134  001FCA  0012               	return		;funcret
  3135  001FCC                     __end_of___awmod:
  3136                           	opt callstack 0
  3137                           
  3138 ;; *************** function ___awdiv *****************
  3139 ;; Defined at:
  3140 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  dividend        2    8[COMRAM] int 
  3143 ;;  divisor         2   10[COMRAM] int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  quotient        2   14[COMRAM] int 
  3146 ;;  sign            1   13[COMRAM] unsigned char 
  3147 ;;  counter         1   12[COMRAM] unsigned char 
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  2    8[COMRAM] int 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3157 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;Total ram usage:        8 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    3
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_displayClock
  3168 ;;		_displayModHour
  3169 ;;		_displayModMinute
  3170 ;;		_displayModSecond
  3171 ;;		_displayStpWatch
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text14
  3176  001E58                     __ptext14:
  3177                           	opt callstack 0
  3178  001E58                     ___awdiv:
  3179                           	opt callstack 26
  3180  001E58  0E00               	movlw	0
  3181  001E5A  6E32               	movwf	___awdiv@sign^0,c
  3182  001E5C  BE30               	btfsc	(___awdiv@divisor+1)^0,7,c
  3183  001E5E  EF35  F00F         	goto	u960
  3184  001E62  EF33  F00F         	goto	u961
  3185  001E66                     u961:
  3186  001E66  EF3B  F00F         	goto	l1975
  3187  001E6A                     u960:
  3188  001E6A  6C2F               	negf	___awdiv@divisor^0,c
  3189  001E6C  1E30               	comf	(___awdiv@divisor+1)^0,f,c
  3190  001E6E  B0D8               	btfsc	status,0,c
  3191  001E70  2A30               	incf	(___awdiv@divisor+1)^0,f,c
  3192  001E72  0E01               	movlw	1
  3193  001E74  6E32               	movwf	___awdiv@sign^0,c
  3194  001E76                     l1975:
  3195  001E76  BE2E               	btfsc	(___awdiv@dividend+1)^0,7,c
  3196  001E78  EF42  F00F         	goto	u970
  3197  001E7C  EF40  F00F         	goto	u971
  3198  001E80                     u971:
  3199  001E80  EF48  F00F         	goto	l1981
  3200  001E84                     u970:
  3201  001E84  6C2D               	negf	___awdiv@dividend^0,c
  3202  001E86  1E2E               	comf	(___awdiv@dividend+1)^0,f,c
  3203  001E88  B0D8               	btfsc	status,0,c
  3204  001E8A  2A2E               	incf	(___awdiv@dividend+1)^0,f,c
  3205  001E8C  0E01               	movlw	1
  3206  001E8E  1A32               	xorwf	___awdiv@sign^0,f,c
  3207  001E90                     l1981:
  3208  001E90  0E00               	movlw	0
  3209  001E92  6E34               	movwf	(___awdiv@quotient+1)^0,c
  3210  001E94  0E00               	movlw	0
  3211  001E96  6E33               	movwf	___awdiv@quotient^0,c
  3212  001E98  502F               	movf	___awdiv@divisor^0,w,c
  3213  001E9A  1030               	iorwf	(___awdiv@divisor+1)^0,w,c
  3214  001E9C  B4D8               	btfsc	status,2,c
  3215  001E9E  EF53  F00F         	goto	u981
  3216  001EA2  EF55  F00F         	goto	u980
  3217  001EA6                     u981:
  3218  001EA6  EF7D  F00F         	goto	l2003
  3219  001EAA                     u980:
  3220  001EAA  0E01               	movlw	1
  3221  001EAC  6E31               	movwf	___awdiv@counter^0,c
  3222  001EAE  EF5D  F00F         	goto	l1989
  3223  001EB2                     l1987:
  3224  001EB2  90D8               	bcf	status,0,c
  3225  001EB4  362F               	rlcf	___awdiv@divisor^0,f,c
  3226  001EB6  3630               	rlcf	(___awdiv@divisor+1)^0,f,c
  3227  001EB8  2A31               	incf	___awdiv@counter^0,f,c
  3228  001EBA                     l1989:
  3229  001EBA  AE30               	btfss	(___awdiv@divisor+1)^0,7,c
  3230  001EBC  EF62  F00F         	goto	u991
  3231  001EC0  EF64  F00F         	goto	u990
  3232  001EC4                     u991:
  3233  001EC4  EF59  F00F         	goto	l1987
  3234  001EC8                     u990:
  3235  001EC8                     l1991:
  3236  001EC8  90D8               	bcf	status,0,c
  3237  001ECA  3633               	rlcf	___awdiv@quotient^0,f,c
  3238  001ECC  3634               	rlcf	(___awdiv@quotient+1)^0,f,c
  3239  001ECE  502F               	movf	___awdiv@divisor^0,w,c
  3240  001ED0  5C2D               	subwf	___awdiv@dividend^0,w,c
  3241  001ED2  5030               	movf	(___awdiv@divisor+1)^0,w,c
  3242  001ED4  582E               	subwfb	(___awdiv@dividend+1)^0,w,c
  3243  001ED6  A0D8               	btfss	status,0,c
  3244  001ED8  EF70  F00F         	goto	u1001
  3245  001EDC  EF72  F00F         	goto	u1000
  3246  001EE0                     u1001:
  3247  001EE0  EF77  F00F         	goto	l1999
  3248  001EE4                     u1000:
  3249  001EE4  502F               	movf	___awdiv@divisor^0,w,c
  3250  001EE6  5E2D               	subwf	___awdiv@dividend^0,f,c
  3251  001EE8  5030               	movf	(___awdiv@divisor+1)^0,w,c
  3252  001EEA  5A2E               	subwfb	(___awdiv@dividend+1)^0,f,c
  3253  001EEC  8033               	bsf	___awdiv@quotient^0,0,c
  3254  001EEE                     l1999:
  3255  001EEE  90D8               	bcf	status,0,c
  3256  001EF0  3230               	rrcf	(___awdiv@divisor+1)^0,f,c
  3257  001EF2  322F               	rrcf	___awdiv@divisor^0,f,c
  3258  001EF4  2E31               	decfsz	___awdiv@counter^0,f,c
  3259  001EF6  EF64  F00F         	goto	l1991
  3260  001EFA                     l2003:
  3261  001EFA  5032               	movf	___awdiv@sign^0,w,c
  3262  001EFC  B4D8               	btfsc	status,2,c
  3263  001EFE  EF83  F00F         	goto	u1011
  3264  001F02  EF85  F00F         	goto	u1010
  3265  001F06                     u1011:
  3266  001F06  EF89  F00F         	goto	l2007
  3267  001F0A                     u1010:
  3268  001F0A  6C33               	negf	___awdiv@quotient^0,c
  3269  001F0C  1E34               	comf	(___awdiv@quotient+1)^0,f,c
  3270  001F0E  B0D8               	btfsc	status,0,c
  3271  001F10  2A34               	incf	(___awdiv@quotient+1)^0,f,c
  3272  001F12                     l2007:
  3273  001F12  C033  F02D         	movff	___awdiv@quotient,?___awdiv
  3274  001F16  C034  F02E         	movff	___awdiv@quotient+1,?___awdiv+1
  3275  001F1A  0012               	return		;funcret
  3276  001F1C                     __end_of___awdiv:
  3277                           	opt callstack 0
  3278                           
  3279 ;; *************** function _LCDPutStr *****************
  3280 ;; Defined at:
  3281 ;;		line 198 in file "BBSPI_LCD.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  3284 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  3285 ;;		 -> STR_1(17), 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;Total ram usage:        2 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    6
  3304 ;; This function calls:
  3305 ;;		_LCDPutChar
  3306 ;; This function is called by:
  3307 ;;		_displayClock
  3308 ;;		_displayModHour
  3309 ;;		_displayModMinute
  3310 ;;		_displayModSecond
  3311 ;;		_displayStpWatch
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text15
  3316  0022DC                     __ptext15:
  3317                           	opt callstack 0
  3318  0022DC                     _LCDPutStr:
  3319                           	opt callstack 23
  3320  0022DC                     
  3321                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  3322  0022DC  EF7C  F011         	goto	l1965
  3323  0022E0                     l1961:
  3324  0022E0  C034  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3325  0022E4  C035  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3326  0022E8                     	if	0	;tblptru may be non-zero
  3327  0022E8                     	endif
  3328  0022E8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3329  0022E8  0E00               	movlw	low (__mediumconst shr (0+16))
  3330  0022EA  6EF8               	movwf	tblptru,c
  3331  0022EC                     	endif
  3332  0022EC  0008               	tblrd		*
  3333  0022EE  50F5               	movf	tablat,w,c
  3334  0022F0  ECA8  F010         	call	_LCDPutChar
  3335  0022F4  4A34               	infsnz	LCDPutStr@ptr^0,f,c
  3336  0022F6  2A35               	incf	(LCDPutStr@ptr+1)^0,f,c
  3337  0022F8                     l1965:
  3338  0022F8  C034  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3339  0022FC  C035  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3340  002300                     	if	0	;tblptru may be non-zero
  3341  002300                     	endif
  3342  002300                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3343  002300  0E00               	movlw	low (__mediumconst shr (0+16))
  3344  002302  6EF8               	movwf	tblptru,c
  3345  002304                     	endif
  3346  002304  0008               	tblrd		*
  3347  002306  50F5               	movf	tablat,w,c
  3348  002308  0900               	iorlw	0
  3349  00230A  A4D8               	btfss	status,2,c
  3350  00230C  EF8A  F011         	goto	u951
  3351  002310  EF8C  F011         	goto	u950
  3352  002314                     u951:
  3353  002314  EF70  F011         	goto	l1961
  3354  002318                     u950:
  3355  002318  0012               	return		;funcret
  3356  00231A                     __end_of_LCDPutStr:
  3357                           	opt callstack 0
  3358                           
  3359 ;; *************** function _LCDPutChar *****************
  3360 ;; Defined at:
  3361 ;;		line 160 in file "BBSPI_LCD.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  ch              1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  ch              1   14[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;Total ram usage:        2 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    5
  3382 ;; This function calls:
  3383 ;;		_WritePort_BBSPI
  3384 ;; This function is called by:
  3385 ;;		_LCDPutStr
  3386 ;;		_displayClock
  3387 ;;		_displayModHour
  3388 ;;		_displayModMinute
  3389 ;;		_displayModSecond
  3390 ;;		_displayStpWatch
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text16
  3395  002150                     __ptext16:
  3396                           	opt callstack 0
  3397  002150                     _LCDPutChar:
  3398                           	opt callstack 23
  3399                           
  3400                           ;incstack = 0
  3401                           ;LCDPutChar@ch stored from wreg
  3402  002150  6E33               	movwf	LCDPutChar@ch^0,c
  3403  002152                     
  3404                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3405  002152  0E80               	movlw	128
  3406  002154  6E30               	movwf	WritePort_BBSPI@a^0,c
  3407  002156  0E12               	movlw	18
  3408  002158  ECB5  F011         	call	_WritePort_BBSPI
  3409  00215C                     
  3410                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3411  00215C  0E04               	movlw	4
  3412  00215E  6E32               	movwf	??_LCDPutChar^0,c
  3413  002160  0E3E               	movlw	62
  3414  002162                     u1397:
  3415  002162  2EE8               	decfsz	wreg,f,c
  3416  002164  D7FE               	bra	u1397
  3417  002166  2E32               	decfsz	??_LCDPutChar^0,f,c
  3418  002168  D7FC               	bra	u1397
  3419  00216A                     
  3420                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3421  00216A  C033  F030         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3422  00216E  0E13               	movlw	19
  3423  002170  ECB5  F011         	call	_WritePort_BBSPI
  3424                           
  3425                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3426  002174  0E04               	movlw	4
  3427  002176  6E32               	movwf	??_LCDPutChar^0,c
  3428  002178  0E3E               	movlw	62
  3429  00217A                     u1407:
  3430  00217A  2EE8               	decfsz	wreg,f,c
  3431  00217C  D7FE               	bra	u1407
  3432  00217E  2E32               	decfsz	??_LCDPutChar^0,f,c
  3433  002180  D7FC               	bra	u1407
  3434  002182                     
  3435                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3436  002182  0EC0               	movlw	192
  3437  002184  6E30               	movwf	WritePort_BBSPI@a^0,c
  3438  002186  0E12               	movlw	18
  3439  002188  ECB5  F011         	call	_WritePort_BBSPI
  3440  00218C                     
  3441                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3442  00218C  0E04               	movlw	4
  3443  00218E  6E32               	movwf	??_LCDPutChar^0,c
  3444  002190  0E3E               	movlw	62
  3445  002192                     u1417:
  3446  002192  2EE8               	decfsz	wreg,f,c
  3447  002194  D7FE               	bra	u1417
  3448  002196  2E32               	decfsz	??_LCDPutChar^0,f,c
  3449  002198  D7FC               	bra	u1417
  3450                           
  3451                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3452  00219A  0E00               	movlw	0
  3453  00219C  6E30               	movwf	WritePort_BBSPI@a^0,c
  3454  00219E  0E12               	movlw	18
  3455  0021A0  ECB5  F011         	call	_WritePort_BBSPI
  3456  0021A4  0012               	return		;funcret
  3457  0021A6                     __end_of_LCDPutChar:
  3458                           	opt callstack 0
  3459                           
  3460 ;; *************** function _buttonInitialize *****************
  3461 ;; Defined at:
  3462 ;;		line 19 in file "system.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;		None
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      void 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;Total ram usage:        0 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    3
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_main
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text17
  3491  0023B4                     __ptext17:
  3492                           	opt callstack 0
  3493  0023B4                     _buttonInitialize:
  3494                           	opt callstack 27
  3495  0023B4                     
  3496                           ;system.c: 20:     TRISAbits.TRISA5 = 1;
  3497  0023B4  8A92               	bsf	146,5,c	;volatile
  3498                           
  3499                           ;system.c: 21:     TRISBbits.TRISB0 = 1;
  3500  0023B6  8093               	bsf	147,0,c	;volatile
  3501  0023B8                     
  3502                           ;system.c: 22:     ADCON1 = 0b00001111;
  3503  0023B8  0E0F               	movlw	15
  3504  0023BA  6EC1               	movwf	193,c	;volatile
  3505  0023BC  0012               	return		;funcret
  3506  0023BE                     __end_of_buttonInitialize:
  3507                           	opt callstack 0
  3508                           
  3509 ;; *************** function _LCDInit *****************
  3510 ;; Defined at:
  3511 ;;		line 45 in file "BBSPI_LCD.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;		None
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;Total ram usage:        1 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    6
  3532 ;; This function calls:
  3533 ;;		_InitBBSPI
  3534 ;;		_LCDPutInst
  3535 ;;		_Port_BBSPIInit
  3536 ;;		_WritePort_BBSPI
  3537 ;; This function is called by:
  3538 ;;		_main
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text18
  3543  0021FC                     __ptext18:
  3544                           	opt callstack 0
  3545  0021FC                     _LCDInit:
  3546                           	opt callstack 24
  3547  0021FC                     
  3548                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3549  0021FC  ECCC  F011         	call	_InitBBSPI	;wreg free
  3550  002200                     
  3551                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3552  002200  9C97               	bcf	151,6,c	;volatile
  3553  002202                     
  3554                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3555  002202  9C8E               	bcf	142,6,c	;volatile
  3556  002204                     
  3557                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3558  002204  8C8E               	bsf	142,6,c	;volatile
  3559  002206                     
  3560                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3561  002206  0E00               	movlw	0
  3562  002208  ECA8  F011         	call	_Port_BBSPIInit
  3563  00220C                     
  3564                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3565  00220C  0E01               	movlw	1
  3566  00220E  ECA8  F011         	call	_Port_BBSPIInit
  3567  002212                     
  3568                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3569  002212  0E00               	movlw	0
  3570  002214  6E30               	movwf	WritePort_BBSPI@a^0,c
  3571  002216  0E12               	movlw	18
  3572  002218  ECB5  F011         	call	_WritePort_BBSPI
  3573  00221C                     
  3574                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3575  00221C  0E31               	movlw	49
  3576  00221E  6E34               	movwf	??_LCDInit^0,c
  3577  002220  0EB2               	movlw	178
  3578  002222                     u1427:
  3579  002222  2EE8               	decfsz	wreg,f,c
  3580  002224  D7FE               	bra	u1427
  3581  002226  2E34               	decfsz	??_LCDInit^0,f,c
  3582  002228  D7FC               	bra	u1427
  3583  00222A  D000               	nop2	
  3584  00222C                     
  3585                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3586  00222C  0E32               	movlw	50
  3587  00222E  ECD3  F010         	call	_LCDPutInst
  3588  002232                     
  3589                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3590  002232  0E3C               	movlw	60
  3591  002234  ECD3  F010         	call	_LCDPutInst
  3592  002238                     
  3593                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3594  002238  0E0C               	movlw	12
  3595  00223A  ECD3  F010         	call	_LCDPutInst
  3596  00223E                     
  3597                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3598  00223E  0E01               	movlw	1
  3599  002240  ECD3  F010         	call	_LCDPutInst
  3600  002244                     
  3601                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3602  002244  0E06               	movlw	6
  3603  002246  ECD3  F010         	call	_LCDPutInst
  3604  00224A  0012               	return		;funcret
  3605  00224C                     __end_of_LCDInit:
  3606                           	opt callstack 0
  3607                           
  3608 ;; *************** function _Port_BBSPIInit *****************
  3609 ;; Defined at:
  3610 ;;		line 123 in file "BBSPI_LCD.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  port_dir        1    wreg     unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  port_dir        1   11[COMRAM] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;Total ram usage:        1 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    4
  3631 ;; This function calls:
  3632 ;;		_SendByteBBSPI
  3633 ;; This function is called by:
  3634 ;;		_LCDInit
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text19
  3639  002350                     __ptext19:
  3640                           	opt callstack 0
  3641  002350                     _Port_BBSPIInit:
  3642                           	opt callstack 25
  3643                           
  3644                           ;incstack = 0
  3645                           ;Port_BBSPIInit@port_dir stored from wreg
  3646  002350  6E30               	movwf	Port_BBSPIInit@port_dir^0,c
  3647  002352                     
  3648                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3649  002352  9489               	bcf	137,2,c	;volatile
  3650  002354                     
  3651                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3652  002354  0E40               	movlw	64
  3653  002356  EC70  F010         	call	_SendByteBBSPI
  3654                           
  3655                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3656  00235A  5030               	movf	Port_BBSPIInit@port_dir^0,w,c
  3657  00235C  EC70  F010         	call	_SendByteBBSPI
  3658                           
  3659                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3660  002360  0E00               	movlw	0
  3661  002362  EC70  F010         	call	_SendByteBBSPI
  3662  002366                     
  3663                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3664  002366  8489               	bsf	137,2,c	;volatile
  3665  002368  0012               	return		;funcret
  3666  00236A                     __end_of_Port_BBSPIInit:
  3667                           	opt callstack 0
  3668                           
  3669 ;; *************** function _LCDPutInst *****************
  3670 ;; Defined at:
  3671 ;;		line 179 in file "BBSPI_LCD.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  ch              1    wreg     unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  ch              1   14[COMRAM] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;Total ram usage:        2 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    5
  3692 ;; This function calls:
  3693 ;;		_WritePort_BBSPI
  3694 ;; This function is called by:
  3695 ;;		_LCDInit
  3696 ;;		_displayClock
  3697 ;;		_displayModHour
  3698 ;;		_displayModMinute
  3699 ;;		_displayModSecond
  3700 ;;		_displayStpWatch
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text20
  3705  0021A6                     __ptext20:
  3706                           	opt callstack 0
  3707  0021A6                     _LCDPutInst:
  3708                           	opt callstack 24
  3709                           
  3710                           ;incstack = 0
  3711                           ;LCDPutInst@ch stored from wreg
  3712  0021A6  6E33               	movwf	LCDPutInst@ch^0,c
  3713  0021A8                     
  3714                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3715  0021A8  0E00               	movlw	0
  3716  0021AA  6E30               	movwf	WritePort_BBSPI@a^0,c
  3717  0021AC  0E12               	movlw	18
  3718  0021AE  ECB5  F011         	call	_WritePort_BBSPI
  3719  0021B2                     
  3720                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3721  0021B2  0E04               	movlw	4
  3722  0021B4  6E32               	movwf	??_LCDPutInst^0,c
  3723  0021B6  0E3E               	movlw	62
  3724  0021B8                     u1437:
  3725  0021B8  2EE8               	decfsz	wreg,f,c
  3726  0021BA  D7FE               	bra	u1437
  3727  0021BC  2E32               	decfsz	??_LCDPutInst^0,f,c
  3728  0021BE  D7FC               	bra	u1437
  3729  0021C0                     
  3730                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3731  0021C0  C033  F030         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3732  0021C4  0E13               	movlw	19
  3733  0021C6  ECB5  F011         	call	_WritePort_BBSPI
  3734                           
  3735                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3736  0021CA  0E04               	movlw	4
  3737  0021CC  6E32               	movwf	??_LCDPutInst^0,c
  3738  0021CE  0E3E               	movlw	62
  3739  0021D0                     u1447:
  3740  0021D0  2EE8               	decfsz	wreg,f,c
  3741  0021D2  D7FE               	bra	u1447
  3742  0021D4  2E32               	decfsz	??_LCDPutInst^0,f,c
  3743  0021D6  D7FC               	bra	u1447
  3744  0021D8                     
  3745                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3746  0021D8  0E40               	movlw	64
  3747  0021DA  6E30               	movwf	WritePort_BBSPI@a^0,c
  3748  0021DC  0E12               	movlw	18
  3749  0021DE  ECB5  F011         	call	_WritePort_BBSPI
  3750  0021E2                     
  3751                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3752  0021E2  0E04               	movlw	4
  3753  0021E4  6E32               	movwf	??_LCDPutInst^0,c
  3754  0021E6  0E3E               	movlw	62
  3755  0021E8                     u1457:
  3756  0021E8  2EE8               	decfsz	wreg,f,c
  3757  0021EA  D7FE               	bra	u1457
  3758  0021EC  2E32               	decfsz	??_LCDPutInst^0,f,c
  3759  0021EE  D7FC               	bra	u1457
  3760                           
  3761                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3762  0021F0  0E00               	movlw	0
  3763  0021F2  6E30               	movwf	WritePort_BBSPI@a^0,c
  3764  0021F4  0E12               	movlw	18
  3765  0021F6  ECB5  F011         	call	_WritePort_BBSPI
  3766  0021FA  0012               	return		;funcret
  3767  0021FC                     __end_of_LCDPutInst:
  3768                           	opt callstack 0
  3769                           
  3770 ;; *************** function _WritePort_BBSPI *****************
  3771 ;; Defined at:
  3772 ;;		line 144 in file "BBSPI_LCD.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  port_add        1    wreg     unsigned char 
  3775 ;;  a               1   11[COMRAM] unsigned char 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  port_add        1   12[COMRAM] unsigned char 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3787 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;Total ram usage:        2 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    4
  3794 ;; This function calls:
  3795 ;;		_SendByteBBSPI
  3796 ;; This function is called by:
  3797 ;;		_LCDInit
  3798 ;;		_LCDPutChar
  3799 ;;		_LCDPutInst
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text21
  3804  00236A                     __ptext21:
  3805                           	opt callstack 0
  3806  00236A                     _WritePort_BBSPI:
  3807                           	opt callstack 23
  3808                           
  3809                           ;incstack = 0
  3810                           ;WritePort_BBSPI@port_add stored from wreg
  3811  00236A  6E31               	movwf	WritePort_BBSPI@port_add^0,c
  3812  00236C                     
  3813                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3814  00236C  9489               	bcf	137,2,c	;volatile
  3815  00236E                     
  3816                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3817  00236E  0E40               	movlw	64
  3818  002370  EC70  F010         	call	_SendByteBBSPI
  3819                           
  3820                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3821  002374  5031               	movf	WritePort_BBSPI@port_add^0,w,c
  3822  002376  EC70  F010         	call	_SendByteBBSPI
  3823                           
  3824                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3825  00237A  5030               	movf	WritePort_BBSPI@a^0,w,c
  3826  00237C  EC70  F010         	call	_SendByteBBSPI
  3827  002380                     
  3828                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3829  002380  8489               	bsf	137,2,c	;volatile
  3830  002382  0012               	return		;funcret
  3831  002384                     __end_of_WritePort_BBSPI:
  3832                           	opt callstack 0
  3833                           
  3834 ;; *************** function _SendByteBBSPI *****************
  3835 ;; Defined at:
  3836 ;;		line 91 in file "BBSPI_LCD.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  output          1    wreg     unsigned char 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  output          1    8[COMRAM] unsigned char 
  3841 ;;  input           1   10[COMRAM] unsigned char 
  3842 ;;  bitcount        1    9[COMRAM] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;Total ram usage:        3 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    3
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_Port_BBSPIInit
  3863 ;;		_WritePort_BBSPI
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text22
  3868  0020E0                     __ptext22:
  3869                           	opt callstack 0
  3870  0020E0                     _SendByteBBSPI:
  3871                           	opt callstack 23
  3872                           
  3873                           ;incstack = 0
  3874                           ;SendByteBBSPI@output stored from wreg
  3875  0020E0  6E2D               	movwf	SendByteBBSPI@output^0,c
  3876  0020E2                     
  3877                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3878  0020E2  C02D  F02F         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3879  0020E6                     
  3880                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3881  0020E6  0E00               	movlw	0
  3882  0020E8  6E2E               	movwf	SendByteBBSPI@bitcount^0,c
  3883  0020EA                     l201:
  3884                           
  3885                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3886  0020EA  AE2D               	btfss	SendByteBBSPI@output^0,7,c
  3887  0020EC  EF7A  F010         	goto	u11
  3888  0020F0  EF7C  F010         	goto	u10
  3889  0020F4                     u11:
  3890  0020F4  EF7F  F010         	goto	l203
  3891  0020F8                     u10:
  3892  0020F8                     
  3893                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3894  0020F8  8A8B               	bsf	139,5,c	;volatile
  3895  0020FA  EF80  F010         	goto	l204
  3896  0020FE                     l203:
  3897                           
  3898                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3899  0020FE  9A8B               	bcf	139,5,c	;volatile
  3900  002100                     l204:
  3901                           
  3902                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3903  002100  A88B               	btfss	139,4,c	;volatile
  3904  002102  EF85  F010         	goto	u21
  3905  002106  EF87  F010         	goto	u20
  3906  00210A                     u21:
  3907  00210A  EF8B  F010         	goto	l1203
  3908  00210E                     u20:
  3909  00210E                     
  3910                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3911  00210E  80D8               	bsf	status,0,c
  3912  002110  362F               	rlcf	SendByteBBSPI@input^0,f,c
  3913  002112  EF8E  F010         	goto	l1205
  3914  002116                     l1203:
  3915                           
  3916                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3917  002116  502F               	movf	SendByteBBSPI@input^0,w,c
  3918  002118  242F               	addwf	SendByteBBSPI@input^0,w,c
  3919  00211A  6E2F               	movwf	SendByteBBSPI@input^0,c
  3920  00211C                     l1205:
  3921                           
  3922                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3923  00211C  868B               	bsf	139,3,c	;volatile
  3924  00211E                     
  3925                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3926  00211E  F000               	nop	
  3927  002120  F000               	nop	
  3928  002122  F000               	nop	
  3929  002124  F000               	nop	
  3930  002126  F000               	nop	
  3931  002128  F000               	nop	
  3932  00212A                     
  3933                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3934  00212A  F000               	nop	
  3935  00212C  F000               	nop	
  3936  00212E  F000               	nop	
  3937  002130  F000               	nop	
  3938  002132  F000               	nop	
  3939  002134  F000               	nop	
  3940  002136                     
  3941                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3942  002136  968B               	bcf	139,3,c	;volatile
  3943                           
  3944                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3945  002138  90D8               	bcf	status,0,c
  3946  00213A  362D               	rlcf	SendByteBBSPI@output^0,f,c
  3947  00213C                     
  3948                           ;BBSPI_LCD.c: 113:     }
  3949  00213C  2A2E               	incf	SendByteBBSPI@bitcount^0,f,c
  3950  00213E  0E07               	movlw	7
  3951  002140  642E               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3952  002142  EFA5  F010         	goto	u31
  3953  002146  EFA7  F010         	goto	u30
  3954  00214A                     u31:
  3955  00214A  EF75  F010         	goto	l201
  3956  00214E                     u30:
  3957  00214E  0012               	return		;funcret
  3958  002150                     __end_of_SendByteBBSPI:
  3959                           	opt callstack 0
  3960                           
  3961 ;; *************** function _InitBBSPI *****************
  3962 ;; Defined at:
  3963 ;;		line 70 in file "BBSPI_LCD.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      void 
  3970 ;; Registers used:
  3971 ;;		None
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        0 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    3
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_LCDInit
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text23
  3992  002398                     __ptext23:
  3993                           	opt callstack 0
  3994  002398                     _InitBBSPI:
  3995                           	opt callstack 26
  3996  002398                     
  3997                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3998  002398  9492               	bcf	146,2,c	;volatile
  3999                           
  4000                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  4001  00239A  8894               	bsf	148,4,c	;volatile
  4002                           
  4003                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  4004  00239C  9A94               	bcf	148,5,c	;volatile
  4005                           
  4006                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  4007  00239E  9694               	bcf	148,3,c	;volatile
  4008                           
  4009                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  4010  0023A0  8489               	bsf	137,2,c	;volatile
  4011                           
  4012                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  4013  0023A2  888B               	bsf	139,4,c	;volatile
  4014                           
  4015                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  4016  0023A4  9A8B               	bcf	139,5,c	;volatile
  4017                           
  4018                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  4019  0023A6  968B               	bcf	139,3,c	;volatile
  4020  0023A8  0012               	return		;funcret
  4021  0023AA                     __end_of_InitBBSPI:
  4022                           	opt callstack 0
  4023                           
  4024 ;; *************** function _deviceInterrupt *****************
  4025 ;; Defined at:
  4026 ;;		line 3 in file "interrupt.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    2
  4047 ;; This function calls:
  4048 ;;		_button
  4049 ;; This function is called by:
  4050 ;;		Interrupt level 2
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	intcode
  4055  000008                     __pintcode:
  4056                           	opt callstack 0
  4057  000008                     _deviceInterrupt:
  4058                           	opt callstack 23
  4059                           
  4060                           ;incstack = 0
  4061  000008  8240               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4062  00000A  ED35  F010         	call	int_func,f	;refresh shadow registers
  4063                           
  4064                           	psect	intcode_body
  4065  00206A                     __pintcode_body:
  4066                           	opt callstack 23
  4067  00206A                     int_func:
  4068                           	opt callstack 23
  4069  00206A  0006               	pop		; remove dummy address from shadow register refresh
  4070  00206C                     
  4071                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  4072  00206C  A4F2               	btfss	242,2,c	;volatile
  4073  00206E  EF3B  F010         	goto	i2u135_41
  4074  002072  EF3D  F010         	goto	i2u135_40
  4075  002076                     i2u135_41:
  4076  002076  EF6E  F010         	goto	i2l275
  4077  00207A                     i2u135_40:
  4078  00207A  AAF2               	btfss	242,5,c	;volatile
  4079  00207C  EF42  F010         	goto	i2u136_41
  4080  002080  EF44  F010         	goto	i2u136_40
  4081  002084                     i2u136_41:
  4082  002084  EF6E  F010         	goto	i2l275
  4083  002088                     i2u136_40:
  4084  002088                     
  4085                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  4086  002088  94F2               	bcf	242,2,c	;volatile
  4087  00208A                     
  4088                           ;interrupt.c: 7:         TMR0H = 0xfd;
  4089  00208A  0EFD               	movlw	253
  4090  00208C  6ED7               	movwf	215,c	;volatile
  4091                           
  4092                           ;interrupt.c: 8:         TMR0L = 0x5f;
  4093  00208E  0E5F               	movlw	95
  4094  002090  6ED6               	movwf	214,c	;volatile
  4095  002092                     
  4096                           ;interrupt.c: 9:         count10ms++;
  4097  002092  4A0D               	infsnz	_count10ms^0,f,c
  4098  002094  2A0E               	incf	(_count10ms+1)^0,f,c
  4099  002096                     
  4100                           ;interrupt.c: 10:         if (runSTW == 1) {
  4101  002096  0415               	decf	_runSTW^0,w,c
  4102  002098  1016               	iorwf	(_runSTW+1)^0,w,c
  4103  00209A  A4D8               	btfss	status,2,c
  4104  00209C  EF52  F010         	goto	i2u137_41
  4105  0020A0  EF54  F010         	goto	i2u137_40
  4106  0020A4                     i2u137_41:
  4107  0020A4  EF6C  F010         	goto	i2l2333
  4108  0020A8                     i2u137_40:
  4109  0020A8                     
  4110                           ;interrupt.c: 11:             miliSecSTW++;
  4111  0020A8  4A0F               	infsnz	_miliSecSTW^0,f,c
  4112  0020AA  2A10               	incf	(_miliSecSTW+1)^0,f,c
  4113  0020AC                     
  4114                           ;interrupt.c: 12:             if (miliSecSTW >= 100) {
  4115  0020AC  BE10               	btfsc	(_miliSecSTW+1)^0,7,c
  4116  0020AE  EF62  F010         	goto	i2u138_41
  4117  0020B2  5010               	movf	(_miliSecSTW+1)^0,w,c
  4118  0020B4  E109               	bnz	i2u138_40
  4119  0020B6  0E64               	movlw	100
  4120  0020B8  5C0F               	subwf	_miliSecSTW^0,w,c
  4121  0020BA  A0D8               	btfss	status,0,c
  4122  0020BC  EF62  F010         	goto	i2u138_41
  4123  0020C0  EF64  F010         	goto	i2u138_40
  4124  0020C4                     i2u138_41:
  4125  0020C4  EF6C  F010         	goto	i2l2333
  4126  0020C8                     i2u138_40:
  4127  0020C8                     
  4128                           ;interrupt.c: 13:                 miliSecSTW = 0;
  4129  0020C8  0E00               	movlw	0
  4130  0020CA  6E10               	movwf	(_miliSecSTW+1)^0,c
  4131  0020CC  0E00               	movlw	0
  4132  0020CE  6E0F               	movwf	_miliSecSTW^0,c
  4133                           
  4134                           ;interrupt.c: 14:                 flag = 1;
  4135  0020D0  0E00               	movlw	0
  4136  0020D2  6E0C               	movwf	(_flag+1)^0,c
  4137  0020D4  0E01               	movlw	1
  4138  0020D6  6E0B               	movwf	_flag^0,c
  4139  0020D8                     i2l2333:
  4140                           
  4141                           ;interrupt.c: 17:         button();
  4142  0020D8  EC5C  F00E         	call	_button	;wreg free
  4143  0020DC                     i2l275:
  4144  0020DC  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4145  0020DE  0011               	retfie		f
  4146  0020E0                     __end_of_deviceInterrupt:
  4147                           	opt callstack 0
  4148                           
  4149 ;; *************** function _button *****************
  4150 ;; Defined at:
  4151 ;;		line 27 in file "button.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  checkRB0        2    6[COMRAM] int 
  4156 ;;  checkRA5        2    4[COMRAM] int 
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;Total ram usage:        4 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    1
  4173 ;; This function calls:
  4174 ;;		_readRA5Button
  4175 ;;		_readRB0Button
  4176 ;; This function is called by:
  4177 ;;		_deviceInterrupt
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text25
  4182  001CB8                     __ptext25:
  4183                           	opt callstack 0
  4184  001CB8                     _button:
  4185                           	opt callstack 23
  4186  001CB8                     
  4187                           ;button.c: 28:     int checkRA5 = readRA5Button();
  4188  001CB8  EC4A  F011         	call	_readRA5Button	;wreg free
  4189  001CBC  C025  F029         	movff	?_readRA5Button,button@checkRA5
  4190  001CC0  C026  F02A         	movff	?_readRA5Button+1,button@checkRA5+1
  4191                           
  4192                           ;button.c: 29:     int checkRB0 = readRB0Button();
  4193  001CC4  EC26  F011         	call	_readRB0Button	;wreg free
  4194  001CC8  C025  F02B         	movff	?_readRB0Button,button@checkRB0
  4195  001CCC  C026  F02C         	movff	?_readRB0Button+1,button@checkRB0+1
  4196  001CD0                     
  4197                           ;button.c: 30:     if (checkRA5 == 1) {
  4198  001CD0  0429               	decf	button@checkRA5^0,w,c
  4199  001CD2  102A               	iorwf	(button@checkRA5+1)^0,w,c
  4200  001CD4  A4D8               	btfss	status,2,c
  4201  001CD6  EF6F  F00E         	goto	i2u120_41
  4202  001CDA  EF71  F00E         	goto	i2u120_40
  4203  001CDE                     i2u120_41:
  4204  001CDE  EF77  F00E         	goto	i2l2227
  4205  001CE2                     i2u120_40:
  4206  001CE2                     
  4207                           ;button.c: 31:         RA5Pressed = 1;
  4208  001CE2  0E00               	movlw	0
  4209  001CE4  6E1E               	movwf	(_RA5Pressed+1)^0,c
  4210  001CE6  0E01               	movlw	1
  4211  001CE8  6E1D               	movwf	_RA5Pressed^0,c
  4212                           
  4213                           ;button.c: 32:     }
  4214  001CEA  EFC4  F00E         	goto	i2l168
  4215  001CEE                     i2l2227:
  4216  001CEE  042B               	decf	button@checkRB0^0,w,c
  4217  001CF0  102C               	iorwf	(button@checkRB0+1)^0,w,c
  4218  001CF2  A4D8               	btfss	status,2,c
  4219  001CF4  EF7E  F00E         	goto	i2u121_41
  4220  001CF8  EF80  F00E         	goto	i2u121_40
  4221  001CFC                     i2u121_41:
  4222  001CFC  EFAE  F00E         	goto	i2l2241
  4223  001D00                     i2u121_40:
  4224  001D00                     
  4225                           ;button.c: 34:         countPressed++;
  4226  001D00  4A21               	infsnz	_countPressed^0,f,c
  4227  001D02  2A22               	incf	(_countPressed+1)^0,f,c
  4228  001D04                     
  4229                           ;button.c: 35:         RB0Pressed = 1;
  4230  001D04  0E00               	movlw	0
  4231  001D06  6E1C               	movwf	(_RB0Pressed+1)^0,c
  4232  001D08  0E01               	movlw	1
  4233  001D0A  6E1B               	movwf	_RB0Pressed^0,c
  4234  001D0C                     
  4235                           ;button.c: 36:         if (countPressed >= 100) {
  4236  001D0C  BE22               	btfsc	(_countPressed+1)^0,7,c
  4237  001D0E  EF92  F00E         	goto	i2u122_41
  4238  001D12  5022               	movf	(_countPressed+1)^0,w,c
  4239  001D14  E109               	bnz	i2u122_40
  4240  001D16  0E64               	movlw	100
  4241  001D18  5C21               	subwf	_countPressed^0,w,c
  4242  001D1A  A0D8               	btfss	status,0,c
  4243  001D1C  EF92  F00E         	goto	i2u122_41
  4244  001D20  EF94  F00E         	goto	i2u122_40
  4245  001D24                     i2u122_41:
  4246  001D24  EFC4  F00E         	goto	i2l168
  4247  001D28                     i2u122_40:
  4248  001D28                     
  4249                           ;button.c: 37:             countAuto++;
  4250  001D28  4A1F               	infsnz	_countAuto^0,f,c
  4251  001D2A  2A20               	incf	(_countAuto+1)^0,f,c
  4252  001D2C                     
  4253                           ;button.c: 38:             if (countAuto > 20) {
  4254  001D2C  BE20               	btfsc	(_countAuto+1)^0,7,c
  4255  001D2E  EFA2  F00E         	goto	i2u123_41
  4256  001D32  5020               	movf	(_countAuto+1)^0,w,c
  4257  001D34  E109               	bnz	i2u123_40
  4258  001D36  0E15               	movlw	21
  4259  001D38  5C1F               	subwf	_countAuto^0,w,c
  4260  001D3A  A0D8               	btfss	status,0,c
  4261  001D3C  EFA2  F00E         	goto	i2u123_41
  4262  001D40  EFA4  F00E         	goto	i2u123_40
  4263  001D44                     i2u123_41:
  4264  001D44  EFC4  F00E         	goto	i2l167
  4265  001D48                     i2u123_40:
  4266  001D48                     
  4267                           ;button.c: 39:                 increaseTime = 1;
  4268  001D48  0E00               	movlw	0
  4269  001D4A  6E1A               	movwf	(_increaseTime+1)^0,c
  4270  001D4C  0E01               	movlw	1
  4271  001D4E  6E19               	movwf	_increaseTime^0,c
  4272                           
  4273                           ;button.c: 40:                 countAuto = 0;
  4274  001D50  0E00               	movlw	0
  4275  001D52  6E20               	movwf	(_countAuto+1)^0,c
  4276  001D54  0E00               	movlw	0
  4277  001D56  6E1F               	movwf	_countAuto^0,c
  4278  001D58  EFC4  F00E         	goto	i2l168
  4279  001D5C                     i2l2241:
  4280                           
  4281                           ;button.c: 45:         countPressed = 0;
  4282  001D5C  0E00               	movlw	0
  4283  001D5E  6E22               	movwf	(_countPressed+1)^0,c
  4284  001D60  0E00               	movlw	0
  4285  001D62  6E21               	movwf	_countPressed^0,c
  4286                           
  4287                           ;button.c: 46:         countAuto = 0;
  4288  001D64  0E00               	movlw	0
  4289  001D66  6E20               	movwf	(_countAuto+1)^0,c
  4290  001D68  0E00               	movlw	0
  4291  001D6A  6E1F               	movwf	_countAuto^0,c
  4292                           
  4293                           ;button.c: 47:         RA5Pressed = 0;
  4294  001D6C  0E00               	movlw	0
  4295  001D6E  6E1E               	movwf	(_RA5Pressed+1)^0,c
  4296  001D70  0E00               	movlw	0
  4297  001D72  6E1D               	movwf	_RA5Pressed^0,c
  4298                           
  4299                           ;button.c: 48:         RB0Pressed = 0;
  4300  001D74  0E00               	movlw	0
  4301  001D76  6E1C               	movwf	(_RB0Pressed+1)^0,c
  4302  001D78  0E00               	movlw	0
  4303  001D7A  6E1B               	movwf	_RB0Pressed^0,c
  4304                           
  4305                           ;button.c: 49:         increaseTime = 0;
  4306  001D7C  0E00               	movlw	0
  4307  001D7E  6E1A               	movwf	(_increaseTime+1)^0,c
  4308  001D80  0E00               	movlw	0
  4309  001D82  6E19               	movwf	_increaseTime^0,c
  4310  001D84  EFC4  F00E         	goto	i2l168
  4311  001D88                     i2l167:
  4312  001D88                     i2l168:
  4313  001D88  0012               	return		;funcret
  4314  001D8A                     __end_of_button:
  4315                           	opt callstack 0
  4316                           
  4317 ;; *************** function _readRB0Button *****************
  4318 ;; Defined at:
  4319 ;;		line 15 in file "button.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  check           2    2[COMRAM] int 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  2    0[COMRAM] int 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;Total ram usage:        4 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; This function calls:
  4340 ;;		Nothing
  4341 ;; This function is called by:
  4342 ;;		_button
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text26
  4347  00224C                     __ptext26:
  4348                           	opt callstack 0
  4349  00224C                     _readRB0Button:
  4350                           	opt callstack 23
  4351  00224C                     
  4352                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  4353  00224C  C03C  F03D         	movff	_secondReadRB0,_firstReadRB0
  4354  002250                     
  4355                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  4356  002250  0E00               	movlw	0
  4357  002252  B081               	btfsc	129,0,c	;volatile
  4358  002254  0E01               	movlw	1
  4359  002256  6E3C               	movwf	_secondReadRB0^0,c
  4360  002258                     
  4361                           ;button.c: 18:     int check = 0;
  4362  002258  0E00               	movlw	0
  4363  00225A  6E28               	movwf	(readRB0Button@check+1)^0,c
  4364  00225C  0E00               	movlw	0
  4365  00225E  6E27               	movwf	readRB0Button@check^0,c
  4366  002260                     
  4367                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  4368  002260  503C               	movf	_secondReadRB0^0,w,c
  4369  002262  183D               	xorwf	_firstReadRB0^0,w,c
  4370  002264  A4D8               	btfss	status,2,c
  4371  002266  EF37  F011         	goto	i2u93_41
  4372  00226A  EF39  F011         	goto	i2u93_40
  4373  00226E                     i2u93_41:
  4374  00226E  EF45  F011         	goto	i2l1943
  4375  002272                     i2u93_40:
  4376  002272                     
  4377                           ;button.c: 20:         if (firstReadRB0 == 0) {
  4378  002272  503D               	movf	_firstReadRB0^0,w,c
  4379  002274  A4D8               	btfss	status,2,c
  4380  002276  EF3F  F011         	goto	i2u94_41
  4381  00227A  EF41  F011         	goto	i2u94_40
  4382  00227E                     i2u94_41:
  4383  00227E  EF45  F011         	goto	i2l1943
  4384  002282                     i2u94_40:
  4385  002282                     
  4386                           ;button.c: 21:             check = 1;
  4387  002282  0E00               	movlw	0
  4388  002284  6E28               	movwf	(readRB0Button@check+1)^0,c
  4389  002286  0E01               	movlw	1
  4390  002288  6E27               	movwf	readRB0Button@check^0,c
  4391  00228A                     i2l1943:
  4392                           
  4393                           ;button.c: 24:     return check;
  4394  00228A  C027  F025         	movff	readRB0Button@check,?_readRB0Button
  4395  00228E  C028  F026         	movff	readRB0Button@check+1,?_readRB0Button+1
  4396  002292  0012               	return		;funcret
  4397  002294                     __end_of_readRB0Button:
  4398                           	opt callstack 0
  4399                           
  4400 ;; *************** function _readRA5Button *****************
  4401 ;; Defined at:
  4402 ;;		line 3 in file "button.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  check           2    2[COMRAM] int 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  2    0[COMRAM] int 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4416 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;Total ram usage:        4 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_button
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text27
  4430  002294                     __ptext27:
  4431                           	opt callstack 0
  4432  002294                     _readRA5Button:
  4433                           	opt callstack 23
  4434  002294                     
  4435                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4436  002294  C03E  F03F         	movff	_secondReadRA5,_firstReadRA5
  4437  002298                     
  4438                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4439  002298  0E00               	movlw	0
  4440  00229A  BA80               	btfsc	128,5,c	;volatile
  4441  00229C  0E01               	movlw	1
  4442  00229E  6E3E               	movwf	_secondReadRA5^0,c
  4443  0022A0                     
  4444                           ;button.c: 6:     int check = 0;
  4445  0022A0  0E00               	movlw	0
  4446  0022A2  6E28               	movwf	(readRA5Button@check+1)^0,c
  4447  0022A4  0E00               	movlw	0
  4448  0022A6  6E27               	movwf	readRA5Button@check^0,c
  4449  0022A8                     
  4450                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4451  0022A8  503E               	movf	_secondReadRA5^0,w,c
  4452  0022AA  183F               	xorwf	_firstReadRA5^0,w,c
  4453  0022AC  A4D8               	btfss	status,2,c
  4454  0022AE  EF5B  F011         	goto	i2u91_41
  4455  0022B2  EF5D  F011         	goto	i2u91_40
  4456  0022B6                     i2u91_41:
  4457  0022B6  EF69  F011         	goto	i2l1927
  4458  0022BA                     i2u91_40:
  4459  0022BA                     
  4460                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4461  0022BA  503F               	movf	_firstReadRA5^0,w,c
  4462  0022BC  A4D8               	btfss	status,2,c
  4463  0022BE  EF63  F011         	goto	i2u92_41
  4464  0022C2  EF65  F011         	goto	i2u92_40
  4465  0022C6                     i2u92_41:
  4466  0022C6  EF69  F011         	goto	i2l1927
  4467  0022CA                     i2u92_40:
  4468  0022CA                     
  4469                           ;button.c: 9:             check = 1;
  4470  0022CA  0E00               	movlw	0
  4471  0022CC  6E28               	movwf	(readRA5Button@check+1)^0,c
  4472  0022CE  0E01               	movlw	1
  4473  0022D0  6E27               	movwf	readRA5Button@check^0,c
  4474  0022D2                     i2l1927:
  4475                           
  4476                           ;button.c: 12:    return check;
  4477  0022D2  C027  F025         	movff	readRA5Button@check,?_readRA5Button
  4478  0022D6  C028  F026         	movff	readRA5Button@check+1,?_readRA5Button+1
  4479  0022DA  0012               	return		;funcret
  4480  0022DC                     __end_of_readRA5Button:
  4481                           	opt callstack 0
  4482                           
  4483                           	psect	rparam
  4484  0000                     
  4485                           	psect	temp
  4486  000040                     btemp:
  4487                           	opt callstack 0
  4488  000040                     	ds	1
  4489  0000                     int$flags	set	btemp
  4490  0000                     wtemp8	set	btemp+1
  4491  0000                     ttemp5	set	btemp+1
  4492  0000                     ttemp6	set	btemp+4
  4493  0000                     ttemp7	set	btemp+8
  4494                           tosu	equ	0xFFF
  4495                           tosh	equ	0xFFE
  4496                           tosl	equ	0xFFD
  4497                           stkptr	equ	0xFFC
  4498                           pclatu	equ	0xFFB
  4499                           pclath	equ	0xFFA
  4500                           pcl	equ	0xFF9
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           indf0	equ	0xFEF
  4508                           postinc0	equ	0xFEE
  4509                           postdec0	equ	0xFED
  4510                           preinc0	equ	0xFEC
  4511                           plusw0	equ	0xFEB
  4512                           fsr0h	equ	0xFEA
  4513                           fsr0l	equ	0xFE9
  4514                           wreg	equ	0xFE8
  4515                           indf1	equ	0xFE7
  4516                           postinc1	equ	0xFE6
  4517                           postdec1	equ	0xFE5
  4518                           preinc1	equ	0xFE4
  4519                           plusw1	equ	0xFE3
  4520                           fsr1h	equ	0xFE2
  4521                           fsr1l	equ	0xFE1
  4522                           bsr	equ	0xFE0
  4523                           indf2	equ	0xFDF
  4524                           postinc2	equ	0xFDE
  4525                           postdec2	equ	0xFDD
  4526                           preinc2	equ	0xFDC
  4527                           plusw2	equ	0xFDB
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8


Data Sizes:
    Strings     82
    Constant    0
    Data        4
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     23      63
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModHour
    _main->_displayModMinute
    _main->_displayModSecond
    _displayStpWatch->_LCDPutStr
    _displayModSecond->_LCDPutStr
    _displayModMinute->_LCDPutStr
    _displayModHour->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   46945
                                             19 COMRAM     4     4      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                     _displayModHour
                   _displayModMinute
                   _displayModSecond
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModSecond                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModMinute                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModHour                                       2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3036
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModHour
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModMinute
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModSecond
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     17      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      32        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Nov 22 20:20:58 2019

      __end_of_displayModMinute 15B2        __end_of_displayModSecond 1412                     ?_LCDPutChar 0025  
                            l85 1264                              l79 1074                              u10 20F8  
                            u11 20F4                              u20 210E                              u21 210A  
                            u30 214E                              u31 214A                    ___awdiv@sign 0032  
                   ?_LCDPutInst 0025                              _hr 0005                   ?_displayClock 0025  
         SendByteBBSPI@bitcount 002E                             l201 20EA                             l121 23B2  
                           l210 2368                             l203 20FE                             l204 2100  
                           l124 2396                             l213 2382                             l207 214E  
                           l127 23BC                             l216 21A4                             l225 2318  
                           l401 1ADA                             l219 21FA                             l331 1E56  
                           l328 2068                             l512 1BDC                             l195 224A  
                           l515 1CB6                             l419 19AA                             l444 16C8  
                           l452 156C                             l445 174A                             l453 15B0  
                           l461 1410                             l437 187A                             l198 23A8  
                           l762 1FCA                             l749 1F1A                             u210 1FE8  
                           u211 1FE4                             u300 1A4C                             u220 2010  
                           u301 1A48                             u221 200C                             u310 1A5E  
                           u230 2038                             u311 1A5A                             u231 2034  
                           u320 1A74                             u400 18CA                             u240 2060  
                           u321 1A70                             u401 18C6                             u241 205C  
                           u330 1AD2                             u250 19C2                             u410 18DC  
                           u331 1ACE                             u251 19BE                             u411 18D8  
                           u260 19DC                             u420 18FA                             u261 19D8  
                           u421 18F6                             u270 19FA                             u430 191C  
                           u510 1762                             u271 19F6                             u431 1918  
                           u511 175E                             u280 1A0C                             u440 192E  
                           u520 177C                             u281 1A08                             u441 192A  
                           u521 1778                             u290 1A2A                             u450 1944  
                           u530 179A                             u291 1A26                             u451 1940  
                           u531 1796                             u460 19A2                             u380 1892  
                           u540 17AC                             u700 1BAC                             u461 199E  
                           u381 188E                             u541 17A8                             u701 1BA8  
                           u390 18AC                             u550 17CA                             u710 1BD4  
                           u391 18A8                             u551 17C6                             u711 1BD0  
                           u560 17EC                             u640 1AEE                             u561 17E8  
                           u641 1AEA                             u570 17FE                             u650 1B00  
                           u571 17FA                             u651 1AFC                             u580 1814  
                           u660 1B1A                             u581 1810                             u661 1B16  
                           u590 1872                             u670 1B58                             u591 186E  
                           u671 1B54                             u680 1B72                             u681 1B6E  
                           u690 1B84                             u691 1B80                             u950 2318  
                           u951 2314                             u960 1E6A                             u961 1E66  
                           u970 1E84                             u971 1E80                             u980 1EAA  
                           u981 1EA6                             u990 1EC8                             u991 1EC4  
        __size_of_readRB0Button 0048                             _min 0007                             _sec 0009  
       __end_of_displayStpWatch 1CB8                    ___awmod@sign 0032          __size_of_readRA5Button 0048  
                           wreg 000FE8                 __end_of_LCDInit 224C                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l1201 210E                            l2001 1EF4  
                          l1211 2122                            l1203 2116                            l2003 1EFA  
                          l2011 1F1C                            l1221 212C                            l1213 2124  
                          l1205 211C                            l2005 1F0A                            l2021 1F48  
                          l2013 1F20                            l2101 15C4                            l1231 2136  
                          l1223 212E                            l1215 2126                            l1207 211E  
                          l2007 1F12                            l2031 1F80                            l2023 1F50  
                          l2015 1F2E                            l2111 161A                            l2103 15CA  
                          l1233 213C                            l1225 2130                            l1217 2128  
                          l1209 2120                            l1401 23B4                            l2041 1FBA  
                          l2033 1F96                            l2025 1F62                            l2017 1F36  
                          l2113 162A                            l2105 15E6                            l2121 1412  
                          l2201 1BF6                            l1235 213E                            l1227 2132  
                          l1219 212A                            l2051 2202                            l1403 23B8  
                          l2043 1FC2                            l2035 1F9E                            l2027 1F6A  
                          l2019 1F3A                            l2115 1662                            l2107 15EE  
                          l2131 1462                            l2123 1418                            l2211 1C56  
                          l2203 1C12                            l1229 2134                            l2061 2212  
                          l2053 2204                            l2037 1FA4                            l2029 1F72  
                          l2109 1608                            l2117 1676                            l2141 14AC  
                          l2133 1468                            l2125 1424                            l2213 1C72  
                          l2205 1C2E                            l1501 1A5E                            l2301 11E6  
                          l1191 20E2                            l2071 223E                            l2063 221C  
                          l2055 2204                            l2047 21FC                            l2039 1FAA  
                          l2119 1690                            l2151 1534                            l2143 14BE  
                          l2135 146E                            l2127 142A                            l2215 1C78  
                          l2207 1C34                            l1503 1A62                            l1511 1A84  
                          l2303 11F8                            l1193 20E6                            l2073 2244  
                          l2065 222C                            l2057 2206                            l2049 2200  
                          l2081 1DA2                            l2145 14CE                            l2137 148A  
                          l2129 1446                            l2161 12A0                            l2153 126C  
                          l2217 1C7E                            l2209 1C3A                            l1505 1A74  
                          l1513 1AB6                            l1441 2010                            l1433 1FCC  
                          l2305 120A                            l1291 2354                            l2067 2232  
                          l2059 220C                            l2091 1E18                            l2083 1DBE  
                          l2075 1D8A                            l2147 1506                            l2139 1492  
                          l2171 1300                            l2163 12BC                            l2155 1272  
                          l2219 1C9A                            l1515 1AD2                            l1507 1A7C  
                          l1451 2044                            l1443 2018                            l1435 1FE8  
                          l2251 106C                            l2243 1054                            l1293 2366  
                          l2069 2238                            l2093 1E1E                            l2085 1DDA  
                          l2077 1D90                            l2149 151A                            l2181 1336  
                          l2173 1306                            l2165 12C2                            l2157 127E  
                          l1621 174C                            l1453 2060                            l1445 201C  
                          l1437 1FF0                            l2261 10B2                            l2253 1086  
                          l2309 1222                            l2245 1060                            l1287 2398  
                          l1199 20F8                            l2095 1E3A                            l2087 1DE0  
                          l2079 1D9C                            l2183 1350                            l2191 13BE  
                          l2175 130C                            l2167 12C8                            l2159 1284  
                          l1551 18AC                            l1631 1788                            l1623 1750  
                          l1447 2038                            l1439 1FF4                            l1711 1B00  
                          l2351 1236                            l2271 10FE                            l2263 10C4  
                          l2255 1092                            l2247 1064                            l1289 2352  
                          l2089 1DFC                            l2097 15B2                            l2193 13D8  
                          l2185 1362                            l2177 1312                            l2169 12E4  
                          l1481 19C2                            l1561 18E0                            l1553 18B0  
                          l1545 187C                            l2353 1838                            l1641 17DA  
                          l1633 179A                            l1625 1762                            l1449 2040  
                          l1721 1B58                            l1713 1B08                            l2281 114A  
                          l2273 1110                            l2265 10D6                            l2257 10AA  
                          l2249 1068                            l2099 15B8                            l2187 1372  
                          l2179 132E                            l2195 1BDE                            l1491 1A0C  
                          l1483 19DC                            l2355 1968                            l1571 1932  
                          l1563 18FA                            l1555 18B8                            l1547 1880  
                          l1651 181C                            l1643 17EC                            l1635 17AC  
                          l1627 177C                            l1395 23AA                            l1731 1B90  
                          l1723 1B60                            l1715 1B1A                            l1707 1ADC  
                          l2291 1196                            l2283 115C                            l2275 1122  
                          l2267 10F6                            l2259 10AE                            l1901 2380  
                          l2189 13AA                            l2197 1BE4                            l2357 1A98  
                          l1493 1A10                            l1485 19E0                            l1477 19AC  
                          l1573 1944                            l1565 190A                            l1557 18CA  
                          l1549 1892                            l1581 1986                            l1645 17FE  
                          l1637 17B0                            l1629 1780                            l1733 1BAC  
                          l1725 1B72                            l1717 1B32                            l1709 1AEE  
                          l1397 2384                            l2293 11A8                            l2285 116E  
                          l2277 1142                            l2269 10FA                            l1911 2182  
                          l1903 2152                            l2199 1BF0                            l1495 1A2A  
                          l1487 19E8                            l1479 19B0                            l1583 19A2  
                          l1575 194C                            l1567 191C                            l1559 18DC  
                          l1647 1802                            l1639 17CA                            l1655 1824  
                          l1735 1BB4                            l1727 1B84                            l1719 1B46  
                          l1399 238A                            l2295 11BA                            l2287 118E  
                          l2279 1146                            l1913 218C                            l1905 2152  
                          l1497 1A3A                            l1489 19FA                            l1569 192E  
                          l1649 1814                            l1657 1856                            l1737 1BB8  
                          l1729 1B8C                            l2297 11DA                            l2289 1192  
                          l1907 215C                            l1499 1A4C                            l1579 1954  
                          l1659 1872                            l1739 1BD4                            l2299 11E2  
                          l1909 216A                            l1951 21B2                            l1953 21C0  
                          l1961 22E0                            l1955 21D8                            l1947 21A8  
                          l1963 22F4                            l1971 1E6A                            l1957 21E2  
                          l1949 21A8                            l1965 22F8                            l1981 1E90  
                          l1973 1E72                            l1959 22DC                            l1991 1EC8  
                          l1983 1E98                            l1975 1E76                            l1967 1E58  
                          l1897 236C                            l1993 1ECE                            l1985 1EAA  
                          l1977 1E84                            l1969 1E5C                            l1899 236E  
                          l1995 1EE4                            l1987 1EB2                            l1979 1E8C  
                          l1997 1EEC                            l1989 1EBA                            l1999 1EEE  
                          STR_1 1012                            STR_2 1023                            STR_3 1043  
                          STR_4 1033                            STR_5 1001                            u1000 1EE4  
                          u1001 1EE0                            u1010 1F0A                            u1011 1F06  
                          u1020 1F2E                            u1100 161A                            u1021 1F2A  
                          u1101 1616                            u1030 1F48                            u1110 1690  
                          u1031 1F44                            u1111 168C                            u1040 1F62  
                          u1120 148A                            u1041 1F5E                            u1121 1486  
                          u1050 1F80                            u1130 14AC                            u1051 1F7C  
                          u1131 14A8                            u1060 1F96                            u1140 14BE  
                          u1300 116E                            u1061 1F92                            u1141 14BA  
                          u1301 116A                            u1070 1FBA                            u1150 1534  
                          u1310 11A8                            u1071 1FB6                            u1151 1530  
                          u1311 11A4                            u1080 15E6                            u1160 132E  
                          u1320 11BA                            u1240 1086                            u1081 15E2  
                          u1161 132A                            u1321 11B6                            u1241 1082  
                          u1090 1608                            u1170 1350                            u1330 11F8  
                          u1250 10C4                            u1091 1604                            u1171 134C  
                          u1331 11F4                            u1251 10C0                            u1180 1362  
                          u1340 120A                            u1260 10D6                            u1181 135E  
                          u1341 1206                            u1261 10D2                            u1190 13D8  
                          u1270 1110                            u1407 217A                            u1191 13D4  
                          u1271 110C                            u1280 1122                            u1417 2192  
                          u1281 111E                            u1290 115C                            u1427 2222  
                          u1291 1158                            u1437 21B8                            u1447 21D0  
                          u1457 21E8                            u1397 2162                            _flag 000B  
                          _main 1054                            fsr1l 000FE1                            btemp 0040  
              ?_WritePort_BBSPI 0030                            start 000E              __size_of_LCDPutStr 003E  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000                 ?_displayModHour 0025  
                  ___param_bank 000000                 _deviceInterrupt 0008                  ??_displayClock 0036  
                         ?_main 0025                 __end_of___awdiv 1F1C                 __end_of___awmod 1FCC  
                         _T0CON 000FD5                 ___awdiv@divisor 002F                           i2l154 22DA  
                         i2l159 2292                           i2l167 1D88                           i2l168 1D88  
                         i2l275 20DC                 ___awdiv@counter 0031                           _TMR0H 000FD7  
                         _TMR0L 000FD6                   __CFG_PWRT$OFF 000000                  __CFG_FCMEN$OFF 000000  
       __size_of_Port_BBSPIInit 001A                           _blink 0003                           _count 0001  
                         _state 0024  __size_of_oscillationInitialize 000A   __end_of_oscillationInitialize 23B4  
                __CFG_BOREN$OFF 000000                           tablat 000FF5             __size_of_LCDPutChar 0056  
           __size_of_LCDPutInst 0056                           ttemp5 0041                           ttemp6 0044  
                         ttemp7 0048                           status 000FD8               ??_timerInitialize 002D  
                         wtemp8 0041                   _readRB0Button 224C                   _readRA5Button 2294  
               __initialization 231A                    __end_of_main 126C                  __CFG_OSC$HSPLL 000000  
                        ??_main 0038                   __activetblptr 000003                       ??_LCDInit 0034  
                  LCDPutChar@ch 0033               __end_of_LCDPutStr 231A                ?_displayStpWatch 0025  
                        _ADCON1 000FC1              __size_of_InitBBSPI 0012                ___awdiv@dividend 002D  
                  LCDPutInst@ch 0033                          i2l2221 1CB8                          i2l2231 1D04  
                        i2l2223 1CD0                          i2l2233 1D0C                          i2l2241 1D5C  
                        i2l2225 1CE2                          i2l2321 208A                          i2l2235 1D28  
                        i2l2227 1CEE                          i2l2331 20C8                          i2l2323 2092  
                        i2l2315 206C                          i2l2237 1D2C                          i2l2229 1D00  
                        i2l2333 20D8                          i2l2325 2096                          i2l2317 207A  
                        i2l2239 1D48                          i2l2327 20A8                          i2l2319 2088  
                        i2l2329 20AC                          i2l1921 22A8                          i2l1923 22BA  
                        i2l1915 2294                          i2l1931 224C                          i2l1925 22CA  
                        i2l1917 2298                          i2l1941 2282                          i2l1933 2250  
                        i2l1927 22D2                          i2l1919 22A0                          i2l1943 228A  
                        i2l1935 2258                          i2l1937 2260                          i2l1939 2272  
                        _OSCCON 000FD3                    LCDPutStr@ptr 0034                  ?_readRB0Button 0025  
                ?_readRA5Button 0025         __end_of_deviceInterrupt 20E0                  __CFG_XINST$OFF 000000  
                     ??___awdiv 0031                       ??___awmod 0031                          _minSTW 0013  
                        _secSTW 0011                          _button 1CB8                          clear_0 2340  
     __size_of_buttonInitialize 000A                ___awdiv@quotient 0033                 ___awmod@divisor 002F  
                        _runSTW 0015                 ___awmod@counter 0031                __end_of_norClock 206A  
                  __pdataCOMRAM 003C          Port_BBSPIInit@port_dir 0030                    __mediumconst 0000  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
          __end_of_displayClock 1E58                      __accesstop 0060         __end_of__initialization 2346  
                 ___rparam_used 000001          __size_of_SendByteBBSPI 0070                   ?_modifyMinute 0025  
                 ?_modifySecond 0025                  __pcstackCOMRAM 0025               ?_displayModMinute 0025  
             ?_displayModSecond 0025               __end_of_InitBBSPI 23AA                    ??_LCDPutChar 0032  
                  ??_LCDPutInst 0032              ??_displayModMinute 0036              ??_displayModSecond 0036  
                _Port_BBSPIInit 2350                 ??_readRB0Button 0027                 ??_readRA5Button 0027  
            __end_of_LCDPutChar 21A6                ??_displayModHour 0036              __end_of_LCDPutInst 21FC  
              ?_deviceInterrupt 0025                  ??_modifyMinute 002D                  ??_modifySecond 002D  
                       ?_button 0025          __end_of_Port_BBSPIInit 236A                         _LCDInit 21FC  
                 _SendByteBBSPI 20E0                      _btnPressed 0017                 _timerInitialize 2384  
                       _OSCTUNE 000F9B                         i2u91_40 22BA                         i2u91_41 22B6  
                       i2u92_40 22CA                         i2u92_41 22C6                         i2u93_40 2272  
                       i2u93_41 226E                         i2u94_40 2282                         i2u94_41 227E  
            __size_of_stopWatch 0102                WritePort_BBSPI@a 0030                       ?_norClock 0025  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1E58  
                       ___awmod 1F1C                      _miliSecSTW 000F        __size_of_WritePort_BBSPI 001A  
                  __psmallconst 1000                _buttonInitialize 23B4                         __pcinit 231A  
               __size_of_button 00D2                         __ramtop 1000                         __ptext0 1054  
                       __ptext1 2384                         __ptext2 1ADC                         __ptext3 23AA  
                       __ptext4 1FCC                         __ptext5 174C                         __ptext6 187C  
                       __ptext7 19AC                         __ptext8 1BDE                         __ptext9 126C  
                ?_SendByteBBSPI 0025                 ?_Port_BBSPIInit 0025                ___awmod@dividend 002D  
                    _modifyHour 19AC           __size_of_displayClock 00CE                       _LCDPutStr 22DC  
                __pintcode_body 206A            end_of_initialization 2346                         int_func 206A  
         _oscillationInitialize 23AA                      ??_norClock 002D                         postdec1 000FE5  
                       postinc0 000FEE         __end_of_timerInitialize 2398               __end_of_stopWatch 1BDE  
                  _displayClock 1D8A                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _TRISAbits 000F92            __end_of_modifyMinute 19AC            __end_of_modifySecond 187C  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISFbits 000F97  
                    ?_LCDPutStr 0034             SendByteBBSPI@output 002D        __size_of_displayStpWatch 00DA  
                 __pidataCOMRAM 23BE                    _firstReadRB0 003D                    _firstReadRA5 003F  
               ??_SendByteBBSPI 002D                   _secondReadRB0 003C                   _secondReadRA5 003E  
                __end_of_button 1D8A                       _InitBBSPI 2398               ??_WritePort_BBSPI 0031  
           start_initialization 231A                    _countPressed 0021                     ?_modifyHour 0025  
     __size_of_displayModMinute 01A0       __size_of_displayModSecond 01A6          ?_oscillationInitialize 0025  
                  _increaseTime 0019                        ??_button 0029                ?_timerInitialize 0025  
                    ?_InitBBSPI 0025                        ?_LCDInit 0025                     __pbssCOMRAM 0001  
            readRB0Button@check 0027                     ??_LCDPutStr 0036        __end_of_buttonInitialize 23BE  
         __end_of_readRB0Button 2294           __end_of_readRA5Button 22DC               ??_displayStpWatch 0036  
             __size_of_norClock 009E                       __pintcode 0008             __size_of_modifyHour 0130  
                button@checkRB0 002B                  button@checkRA5 0029                        ?___awdiv 002D  
                      ?___awmod 002D                ??_Port_BBSPIInit 0030        __size_of_deviceInterrupt 20D8  
         __size_of_modifyMinute 0130           __size_of_modifySecond 0130                       _count10ms 000D  
                   __smallconst 1000                       _countAuto 001F                        _LATAbits 000F89  
                      _LATCbits 000F8B                        _LATFbits 000F8E                        i2u120_40 1CE2  
                      i2u120_41 1CDE                        i2u121_40 1D00                        i2u121_41 1CFC  
                      i2u122_40 1D28                        i2u122_41 1D24                        i2u123_40 1D48  
                      i2u123_41 1D44                        i2u135_40 207A                        i2u135_41 2076  
                      i2u136_40 2088                        i2u136_41 2084                        i2u137_40 20A8  
                      i2u137_41 20A4                        i2u138_40 20C8                        i2u138_41 20C4  
                  _modifyMinute 187C                    _modifySecond 174C         __size_of_displayModHour 019A  
                   ??_InitBBSPI 002D              SendByteBBSPI@input 002F                       _stopWatch 1ADC  
              __size_of_LCDInit 0050           main@changeModePressed 003A                _displayModMinute 1412  
              _displayModSecond 126C                       copy_data0 232E                        __Hrparam 0000  
                      __Lrparam 0000                 _WritePort_BBSPI 236A                __size_of___awdiv 00C4  
              __size_of___awmod 00B0                      ?_stopWatch 0025               ??_deviceInterrupt 002D  
                  ??_modifyHour 002D              readRA5Button@check 0027                        __ptext10 1412  
                      __ptext11 15B2                        __ptext20 21A6                        __ptext12 1D8A  
                      __ptext21 236A                        __ptext13 1F1C                        __ptext22 20E0  
                      __ptext14 1E58                        __ptext23 2398                        __ptext15 22DC  
       ??_oscillationInitialize 002D                        __ptext16 2150                        __ptext25 1CB8  
                      __ptext17 23B4                        __ptext26 224C                        __ptext18 21FC  
                      __ptext27 2294                        __ptext19 2350                   __size_of_main 0218  
                      _norClock 1FCC                        _stModify 0023                        int$flags 0040  
            __end_of_modifyHour 1ADC                      _LCDPutChar 2150                      _LCDPutInst 21A6  
                    _RB0Pressed 001B                      _RA5Pressed 001D           __end_of_SendByteBBSPI 2150  
                    _INTCONbits 000FF2                 _displayStpWatch 1BDE                        intlevel2 0000  
             ?_buttonInitialize 0025         __end_of_WritePort_BBSPI 2384              ??_buttonInitialize 002D  
                _displayModHour 15B2         WritePort_BBSPI@port_add 0031                     ??_stopWatch 002D  
      __size_of_timerInitialize 0014          __end_of_displayModHour 174C  
