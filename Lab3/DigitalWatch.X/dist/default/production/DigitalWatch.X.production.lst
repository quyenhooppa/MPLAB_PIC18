

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Sep 23 00:08:02 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F8722 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  0021A2                     __pidataCOMRAM:
    82                           	opt callstack 0
    83                           
    84                           ;initializer for _secondReadRB0
    85  0021A2  01                 	db	1
    86                           
    87                           ;initializer for _firstReadRB0
    88  0021A3  01                 	db	1
    89                           
    90                           ;initializer for _secondReadRA5
    91  0021A4  01                 	db	1
    92                           
    93                           ;initializer for _firstReadRA5
    94  0021A5  01                 	db	1
    95  0000                     _LATCbits	set	3979
    96  0000                     _LATAbits	set	3977
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATFbits	set	3982
    99  0000                     _TRISFbits	set	3991
   100  0000                     _PORTBbits	set	3969
   101  0000                     _PORTAbits	set	3968
   102  0000                     _LATD	set	3980
   103  0000                     _TRISD	set	3989
   104  0000                     _ADCON1	set	4033
   105  0000                     _TRISBbits	set	3987
   106  0000                     _TRISAbits	set	3986
   107  0000                     _TMR0L	set	4054
   108  0000                     _T0CON	set	4053
   109  0000                     _INTCONbits	set	4082
   110  0000                     _OSCTUNE	set	3995
   111  0000                     _OSCCON	set	4051
   112                           
   113                           	psect	smallconst
   114  001000                     __psmallconst:
   115                           	opt callstack 0
   116  001000  00                 	db	0
   117  001001                     STR_5:
   118  001001  20                 	db	32
   119  001002  20                 	db	32
   120  001003  20                 	db	32
   121  001004  53                 	db	83	;'S'
   122  001005  54                 	db	84	;'T'
   123  001006  4F                 	db	79	;'O'
   124  001007  50                 	db	80	;'P'
   125  001008  20                 	db	32
   126  001009  57                 	db	87	;'W'
   127  00100A  41                 	db	65	;'A'
   128  00100B  54                 	db	84	;'T'
   129  00100C  43                 	db	67	;'C'
   130  00100D  48                 	db	72	;'H'
   131  00100E  20                 	db	32
   132  00100F  20                 	db	32
   133  001010  20                 	db	32
   134  001011  00                 	db	0
   135  001012                     STR_1:
   136  001012  20                 	db	32
   137  001013  20                 	db	32
   138  001014  4E                 	db	78	;'N'
   139  001015  4F                 	db	79	;'O'
   140  001016  52                 	db	82	;'R'
   141  001017  4D                 	db	77	;'M'
   142  001018  41                 	db	65	;'A'
   143  001019  4C                 	db	76	;'L'
   144  00101A  20                 	db	32
   145  00101B  43                 	db	67	;'C'
   146  00101C  4C                 	db	76	;'L'
   147  00101D  4F                 	db	79	;'O'
   148  00101E  43                 	db	67	;'C'
   149  00101F  4B                 	db	75	;'K'
   150  001020  20                 	db	32
   151  001021  20                 	db	32
   152  001022  00                 	db	0
   153  001023                     STR_2:
   154  001023  20                 	db	32
   155  001024  4D                 	db	77	;'M'
   156  001025  4F                 	db	79	;'O'
   157  001026  44                 	db	68	;'D'
   158  001027  49                 	db	73	;'I'
   159  001028  46                 	db	70	;'F'
   160  001029  49                 	db	73	;'I'
   161  00102A  45                 	db	69	;'E'
   162  00102B  53                 	db	83	;'S'
   163  00102C  20                 	db	32
   164  00102D  48                 	db	72	;'H'
   165  00102E  4F                 	db	79	;'O'
   166  00102F  55                 	db	85	;'U'
   167  001030  52                 	db	82	;'R'
   168  001031  20                 	db	32
   169  001032  00                 	db	0
   170  001033                     STR_3:
   171  001033  4D                 	db	77	;'M'
   172  001034  4F                 	db	79	;'O'
   173  001035  44                 	db	68	;'D'
   174  001036  49                 	db	73	;'I'
   175  001037  46                 	db	70	;'F'
   176  001038  49                 	db	73	;'I'
   177  001039  45                 	db	69	;'E'
   178  00103A  53                 	db	83	;'S'
   179  00103B  20                 	db	32
   180  00103C  4D                 	db	77	;'M'
   181  00103D  49                 	db	73	;'I'
   182  00103E  4E                 	db	78	;'N'
   183  00103F  55                 	db	85	;'U'
   184  001040  54                 	db	84	;'T'
   185  001041  45                 	db	69	;'E'
   186  001042  00                 	db	0
   187  0000                     
   188                           ; #config settings
   189  001043  00                 	db	0	; dummy byte at the end
   190  0000                     
   191                           	psect	cinit
   192  0020F8                     __pcinit:
   193                           	opt callstack 0
   194  0020F8                     start_initialization:
   195                           	opt callstack 0
   196  0020F8                     __initialization:
   197                           	opt callstack 0
   198                           
   199                           ; Initialize objects allocated to COMRAM (4 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  0020F8  0EA2               	movlw	low __pidataCOMRAM
   202  0020FA  6EF6               	movwf	tblptrl,c
   203  0020FC  0E21               	movlw	high __pidataCOMRAM
   204  0020FE  6EF7               	movwf	tblptrh,c
   205  002100  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  002102  6EF8               	movwf	tblptru,c
   207  002104  EE00  F036         	lfsr	0,__pdataCOMRAM
   208  002108  EE10 F004          	lfsr	1,4
   209  00210C                     copy_data0:
   210  00210C  0009               	tblrd		*+
   211  00210E  CFF5 FFEE          	movff	tablat,postinc0
   212  002112  50E5               	movf	postdec1,w,c
   213  002114  50E1               	movf	fsr1l,w,c
   214  002116  E1FA               	bnz	copy_data0
   215                           
   216                           ; Clear objects allocated to COMRAM (32 bytes)
   217  002118  EE00  F001         	lfsr	0,__pbssCOMRAM
   218  00211C  0E20               	movlw	32
   219  00211E                     clear_0:
   220  00211E  6AEE               	clrf	postinc0,c
   221  002120  06E8               	decf	wreg,f,c
   222  002122  E1FD               	bnz	clear_0
   223  002124                     end_of_initialization:
   224                           	opt callstack 0
   225  002124                     __end_of__initialization:
   226                           	opt callstack 0
   227  002124  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  002126  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  002128  0100               	movlb	0
   230  00212A  EF22  F008         	goto	_main	;jump to C main() function
   231                           
   232                           	psect	bssCOMRAM
   233  000001                     __pbssCOMRAM:
   234                           	opt callstack 0
   235  000001                     _miliSecSTW:
   236                           	opt callstack 0
   237  000001                     	ds	2
   238  000003                     _secSTW:
   239                           	opt callstack 0
   240  000003                     	ds	2
   241  000005                     _minSTW:
   242                           	opt callstack 0
   243  000005                     	ds	2
   244  000007                     _run:
   245                           	opt callstack 0
   246  000007                     	ds	2
   247  000009                     _count:
   248                           	opt callstack 0
   249  000009                     	ds	2
   250  00000B                     _blink:
   251                           	opt callstack 0
   252  00000B                     	ds	2
   253  00000D                     _hr:
   254                           	opt callstack 0
   255  00000D                     	ds	2
   256  00000F                     _min:
   257                           	opt callstack 0
   258  00000F                     	ds	2
   259  000011                     _sec:
   260                           	opt callstack 0
   261  000011                     	ds	2
   262  000013                     _timerFlag:
   263                           	opt callstack 0
   264  000013                     	ds	2
   265  000015                     _count10ms:
   266                           	opt callstack 0
   267  000015                     	ds	2
   268  000017                     _increaseTime:
   269                           	opt callstack 0
   270  000017                     	ds	2
   271  000019                     _changeModePressed:
   272                           	opt callstack 0
   273  000019                     	ds	2
   274  00001B                     _countAuto:
   275                           	opt callstack 0
   276  00001B                     	ds	2
   277  00001D                     _countPressed:
   278                           	opt callstack 0
   279  00001D                     	ds	2
   280  00001F                     _stModify:
   281                           	opt callstack 0
   282  00001F                     	ds	1
   283  000020                     _state:
   284                           	opt callstack 0
   285  000020                     	ds	1
   286                           
   287                           	psect	dataCOMRAM
   288  000036                     __pdataCOMRAM:
   289                           	opt callstack 0
   290  000036                     _secondReadRB0:
   291                           	opt callstack 0
   292  000036                     	ds	1
   293  000037                     _firstReadRB0:
   294                           	opt callstack 0
   295  000037                     	ds	1
   296  000038                     _secondReadRA5:
   297                           	opt callstack 0
   298  000038                     	ds	1
   299  000039                     _firstReadRA5:
   300                           	opt callstack 0
   301  000039                     	ds	1
   302                           
   303                           	psect	cstackCOMRAM
   304  000021                     __pcstackCOMRAM:
   305                           	opt callstack 0
   306  000021                     ?_readRA5Button:
   307                           	opt callstack 0
   308  000021                     ?_readRB0Button:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0x0
   312  000021                     	ds	2
   313  000023                     readRA5Button@check:
   314                           	opt callstack 0
   315  000023                     readRB0Button@check:
   316                           	opt callstack 0
   317                           
   318                           ; 2 bytes @ 0x2
   319  000023                     	ds	2
   320  000025                     button@checkRA5:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0x4
   324  000025                     	ds	2
   325  000027                     button@checkRB0:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0x6
   329  000027                     	ds	2
   330  000029                     ??_modifyHour:
   331  000029                     ??_modifyMinute:
   332  000029                     ??_modifySecond:
   333  000029                     ??_stopWatch:
   334  000029                     ?___awdiv:
   335                           	opt callstack 0
   336  000029                     ?___awmod:
   337                           	opt callstack 0
   338  000029                     SendByteBBSPI@output:
   339                           	opt callstack 0
   340  000029                     ___awdiv@dividend:
   341                           	opt callstack 0
   342  000029                     ___awmod@dividend:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x8
   346  000029                     	ds	1
   347  00002A                     SendByteBBSPI@bitcount:
   348                           	opt callstack 0
   349                           
   350                           ; 1 bytes @ 0x9
   351  00002A                     	ds	1
   352  00002B                     SendByteBBSPI@input:
   353                           	opt callstack 0
   354  00002B                     ___awdiv@divisor:
   355                           	opt callstack 0
   356  00002B                     ___awmod@divisor:
   357                           	opt callstack 0
   358                           
   359                           ; 2 bytes @ 0xA
   360  00002B                     	ds	1
   361  00002C                     Port_BBSPIInit@port_dir:
   362                           	opt callstack 0
   363  00002C                     WritePort_BBSPI@a:
   364                           	opt callstack 0
   365                           
   366                           ; 1 bytes @ 0xB
   367  00002C                     	ds	1
   368  00002D                     WritePort_BBSPI@port_add:
   369                           	opt callstack 0
   370  00002D                     ___awdiv@counter:
   371                           	opt callstack 0
   372  00002D                     ___awmod@counter:
   373                           	opt callstack 0
   374                           
   375                           ; 1 bytes @ 0xC
   376  00002D                     	ds	1
   377  00002E                     ??_LCDPutInst:
   378  00002E                     ??_LCDPutChar:
   379  00002E                     ___awdiv@sign:
   380                           	opt callstack 0
   381  00002E                     ___awmod@sign:
   382                           	opt callstack 0
   383                           
   384                           ; 1 bytes @ 0xD
   385  00002E                     	ds	1
   386  00002F                     LCDPutChar@ch:
   387                           	opt callstack 0
   388  00002F                     LCDPutInst@ch:
   389                           	opt callstack 0
   390  00002F                     ___awdiv@quotient:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0xE
   394  00002F                     	ds	1
   395  000030                     ??_LCDInit:
   396  000030                     LCDPutStr@ptr:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  000030                     	ds	2
   401  000032                     ??_displayModHour:
   402  000032                     ??_displayModMinute:
   403  000032                     ??_displayModSecond:
   404  000032                     
   405                           ; 1 bytes @ 0x11
   406  000032                     	ds	2
   407  000034                     ??_main:
   408                           
   409                           ; 1 bytes @ 0x13
   410  000034                     	ds	2
   411                           
   412 ;;
   413 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   414 ;;
   415 ;; *************** function _main *****************
   416 ;; Defined at:
   417 ;;		line 15 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels required when called:    8
   437 ;; This function calls:
   438 ;;		_LCDInit
   439 ;;		_buttonInitialize
   440 ;;		_displayClock
   441 ;;		_displayModHour
   442 ;;		_displayModMinute
   443 ;;		_displayModSecond
   444 ;;		_displayStpWatch
   445 ;;		_ledInitialize
   446 ;;		_modifyHour
   447 ;;		_modifyMinute
   448 ;;		_modifySecond
   449 ;;		_norClock
   450 ;;		_oscillationInitialize
   451 ;;		_stopWatch
   452 ;;		_timerInitialize
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text0
   459  001044                     __ptext0:
   460                           	opt callstack 0
   461  001044                     _main:
   462                           	opt callstack 23
   463  001044                     
   464                           ;main.c: 16:     oscillationInitialize();
   465  001044  ECC2  F010         	call	_oscillationInitialize	;wreg free
   466                           
   467                           ;main.c: 17:     timerInitialize();
   468  001048  ECBA  F010         	call	_timerInitialize	;wreg free
   469                           
   470                           ;main.c: 18:     buttonInitialize();
   471  00104C  ECCC  F010         	call	_buttonInitialize	;wreg free
   472                           
   473                           ;main.c: 19:     ledInitialize();
   474  001050  ECC7  F010         	call	_ledInitialize	;wreg free
   475  001054                     
   476                           ;main.c: 20:     LCDInit();
   477  001054  ECC9  F00F         	call	_LCDInit	;wreg free
   478  001058                     
   479                           ;main.c: 21:     state = norClk;
   480  001058  0E00               	movlw	0
   481  00105A  6E20               	movwf	_state^0,c
   482  00105C                     
   483                           ;main.c: 22:     stModify = init;
   484  00105C  0E00               	movlw	0
   485  00105E  6E1F               	movwf	_stModify^0,c
   486  001060  EFC9  F008         	goto	l2205
   487  001064                     l2161:
   488                           
   489                           ;main.c: 27:                 miliSecSTW = 0;
   490  001064  0E00               	movlw	0
   491  001066  6E02               	movwf	(_miliSecSTW+1)^0,c
   492  001068  0E00               	movlw	0
   493  00106A  6E01               	movwf	_miliSecSTW^0,c
   494                           
   495                           ;main.c: 28:                 secSTW = 0;
   496  00106C  0E00               	movlw	0
   497  00106E  6E04               	movwf	(_secSTW+1)^0,c
   498  001070  0E00               	movlw	0
   499  001072  6E03               	movwf	_secSTW^0,c
   500                           
   501                           ;main.c: 29:                 minSTW = 0;
   502  001074  0E00               	movlw	0
   503  001076  6E06               	movwf	(_minSTW+1)^0,c
   504  001078  0E00               	movlw	0
   505  00107A  6E05               	movwf	_minSTW^0,c
   506  00107C                     
   507                           ;main.c: 30:                 norClock();
   508  00107C  ECDC  F00E         	call	_norClock	;wreg free
   509  001080                     
   510                           ;main.c: 31:                 displayClock();
   511  001080  EC5A  F00D         	call	_displayClock	;wreg free
   512  001084                     
   513                           ;main.c: 32:                 if (changeModePressed == 1) {
   514  001084  0419               	decf	_changeModePressed^0,w,c
   515  001086  101A               	iorwf	(_changeModePressed+1)^0,w,c
   516  001088  A4D8               	btfss	status,2,c
   517  00108A  EF49  F008         	goto	u1031
   518  00108E  EF4B  F008         	goto	u1030
   519  001092                     u1031:
   520  001092  EFC9  F008         	goto	l78
   521  001096                     u1030:
   522  001096                     
   523                           ;main.c: 33:                     changeModePressed = 0;
   524  001096  0E00               	movlw	0
   525  001098  6E1A               	movwf	(_changeModePressed+1)^0,c
   526  00109A  0E00               	movlw	0
   527  00109C  6E19               	movwf	_changeModePressed^0,c
   528                           
   529                           ;main.c: 34:                     state = modHr;
   530  00109E  0E01               	movlw	1
   531  0010A0  6E20               	movwf	_state^0,c
   532                           
   533                           ;main.c: 35:                     blink = 0;
   534  0010A2  0E00               	movlw	0
   535  0010A4  6E0C               	movwf	(_blink+1)^0,c
   536  0010A6  0E00               	movlw	0
   537  0010A8  6E0B               	movwf	_blink^0,c
   538                           
   539                           ;main.c: 36:                     count10ms = 0;
   540  0010AA  0E00               	movlw	0
   541  0010AC  6E16               	movwf	(_count10ms+1)^0,c
   542  0010AE  0E00               	movlw	0
   543  0010B0  6E15               	movwf	_count10ms^0,c
   544  0010B2  EFC9  F008         	goto	l2205
   545  0010B6                     l2171:
   546                           
   547                           ;main.c: 40:                 modifyHour();
   548  0010B6  EC1C  F00A         	call	_modifyHour	;wreg free
   549  0010BA                     
   550                           ;main.c: 42:                 displayModHour();
   551  0010BA  ECDC  F00B         	call	_displayModHour	;wreg free
   552  0010BE                     
   553                           ;main.c: 43:                 if (changeModePressed == 1) {
   554  0010BE  0419               	decf	_changeModePressed^0,w,c
   555  0010C0  101A               	iorwf	(_changeModePressed+1)^0,w,c
   556  0010C2  A4D8               	btfss	status,2,c
   557  0010C4  EF66  F008         	goto	u1041
   558  0010C8  EF68  F008         	goto	u1040
   559  0010CC                     u1041:
   560  0010CC  EFC9  F008         	goto	l78
   561  0010D0                     u1040:
   562  0010D0                     
   563                           ;main.c: 44:                     changeModePressed = 0;
   564  0010D0  0E00               	movlw	0
   565  0010D2  6E1A               	movwf	(_changeModePressed+1)^0,c
   566  0010D4  0E00               	movlw	0
   567  0010D6  6E19               	movwf	_changeModePressed^0,c
   568                           
   569                           ;main.c: 45:                     state = modMin;
   570  0010D8  0E02               	movlw	2
   571  0010DA  6E20               	movwf	_state^0,c
   572                           
   573                           ;main.c: 46:                     blink = 0;
   574  0010DC  0E00               	movlw	0
   575  0010DE  6E0C               	movwf	(_blink+1)^0,c
   576  0010E0  0E00               	movlw	0
   577  0010E2  6E0B               	movwf	_blink^0,c
   578                           
   579                           ;main.c: 47:                     count10ms = 0;
   580  0010E4  0E00               	movlw	0
   581  0010E6  6E16               	movwf	(_count10ms+1)^0,c
   582  0010E8  0E00               	movlw	0
   583  0010EA  6E15               	movwf	_count10ms^0,c
   584  0010EC  EFC9  F008         	goto	l2205
   585  0010F0                     l2179:
   586                           
   587                           ;main.c: 51:                 modifyMinute();
   588  0010F0  EC84  F009         	call	_modifyMinute	;wreg free
   589  0010F4                     
   590                           ;main.c: 53:                 displayModMinute();
   591  0010F4  EC48  F00B         	call	_displayModMinute	;wreg free
   592  0010F8                     
   593                           ;main.c: 54:                 if (changeModePressed == 1) {
   594  0010F8  0419               	decf	_changeModePressed^0,w,c
   595  0010FA  101A               	iorwf	(_changeModePressed+1)^0,w,c
   596  0010FC  A4D8               	btfss	status,2,c
   597  0010FE  EF83  F008         	goto	u1051
   598  001102  EF85  F008         	goto	u1050
   599  001106                     u1051:
   600  001106  EFC9  F008         	goto	l78
   601  00110A                     u1050:
   602  00110A                     
   603                           ;main.c: 55:                     changeModePressed = 0;
   604  00110A  0E00               	movlw	0
   605  00110C  6E1A               	movwf	(_changeModePressed+1)^0,c
   606  00110E  0E00               	movlw	0
   607  001110  6E19               	movwf	_changeModePressed^0,c
   608                           
   609                           ;main.c: 56:                     state = modSec;
   610  001112  0E03               	movlw	3
   611  001114  6E20               	movwf	_state^0,c
   612                           
   613                           ;main.c: 57:                     blink = 0;
   614  001116  0E00               	movlw	0
   615  001118  6E0C               	movwf	(_blink+1)^0,c
   616  00111A  0E00               	movlw	0
   617  00111C  6E0B               	movwf	_blink^0,c
   618                           
   619                           ;main.c: 58:                     count10ms = 0;
   620  00111E  0E00               	movlw	0
   621  001120  6E16               	movwf	(_count10ms+1)^0,c
   622  001122  0E00               	movlw	0
   623  001124  6E15               	movwf	_count10ms^0,c
   624  001126  EFC9  F008         	goto	l2205
   625  00112A                     l2187:
   626                           
   627                           ;main.c: 62:                 modifySecond();
   628  00112A  ECEC  F008         	call	_modifySecond	;wreg free
   629  00112E                     
   630                           ;main.c: 64:                 displayModSecond();
   631  00112E  ECB4  F00A         	call	_displayModSecond	;wreg free
   632  001132                     
   633                           ;main.c: 65:                 if (changeModePressed == 1) {
   634  001132  0419               	decf	_changeModePressed^0,w,c
   635  001134  101A               	iorwf	(_changeModePressed+1)^0,w,c
   636  001136  A4D8               	btfss	status,2,c
   637  001138  EFA0  F008         	goto	u1061
   638  00113C  EFA2  F008         	goto	u1060
   639  001140                     u1061:
   640  001140  EFC9  F008         	goto	l78
   641  001144                     u1060:
   642  001144                     
   643                           ;main.c: 66:                     changeModePressed = 0;
   644  001144  0E00               	movlw	0
   645  001146  6E1A               	movwf	(_changeModePressed+1)^0,c
   646  001148  0E00               	movlw	0
   647  00114A  6E19               	movwf	_changeModePressed^0,c
   648                           
   649                           ;main.c: 67:                     state = stpWatch;
   650  00114C  0E04               	movlw	4
   651  00114E  6E20               	movwf	_state^0,c
   652                           
   653                           ;main.c: 68:                     run = 0;
   654  001150  0E00               	movlw	0
   655  001152  6E08               	movwf	(_run+1)^0,c
   656  001154  0E00               	movlw	0
   657  001156  6E07               	movwf	_run^0,c
   658                           
   659                           ;main.c: 69:                     count10ms = 0;
   660  001158  0E00               	movlw	0
   661  00115A  6E16               	movwf	(_count10ms+1)^0,c
   662  00115C  0E00               	movlw	0
   663  00115E  6E15               	movwf	_count10ms^0,c
   664  001160  EFC9  F008         	goto	l2205
   665  001164                     l2195:
   666                           
   667                           ;main.c: 73:                 norClock();
   668  001164  ECDC  F00E         	call	_norClock	;wreg free
   669                           
   670                           ;main.c: 74:                 stopWatch();
   671  001168  EC70  F00C         	call	_stopWatch	;wreg free
   672  00116C                     
   673                           ;main.c: 75:                 displayStpWatch();
   674  00116C  ECF3  F00C         	call	_displayStpWatch	;wreg free
   675  001170                     
   676                           ;main.c: 76:                 if (changeModePressed == 1) {
   677  001170  0419               	decf	_changeModePressed^0,w,c
   678  001172  101A               	iorwf	(_changeModePressed+1)^0,w,c
   679  001174  A4D8               	btfss	status,2,c
   680  001176  EFBF  F008         	goto	u1071
   681  00117A  EFC1  F008         	goto	u1070
   682  00117E                     u1071:
   683  00117E  EFC9  F008         	goto	l78
   684  001182                     u1070:
   685  001182                     
   686                           ;main.c: 77:                     changeModePressed = 0;
   687  001182  0E00               	movlw	0
   688  001184  6E1A               	movwf	(_changeModePressed+1)^0,c
   689  001186  0E00               	movlw	0
   690  001188  6E19               	movwf	_changeModePressed^0,c
   691                           
   692                           ;main.c: 78:                     state = norClk;
   693  00118A  0E00               	movlw	0
   694  00118C  6E20               	movwf	_state^0,c
   695  00118E  EFC9  F008         	goto	l2205
   696  001192                     l78:
   697  001192                     l2205:
   698  001192  5020               	movf	_state^0,w,c
   699  001194  6E34               	movwf	??_main^0,c
   700  001196  6A35               	clrf	(??_main+1)^0,c
   701                           
   702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   703                           ; Switch size 1, requested type "simple"
   704                           ; Number of cases is 1, Range of values is 0 to 0
   705                           ; switch strategies available:
   706                           ; Name         Instructions Cycles
   707                           ; simple_byte            4     3 (average)
   708                           ;	Chosen strategy is simple_byte
   709  001198  5035               	movf	(??_main+1)^0,w,c
   710  00119A  0A00               	xorlw	0	; case 0
   711  00119C  B4D8               	btfsc	status,2,c
   712  00119E  EFD3  F008         	goto	l2241
   713  0011A2  EFC9  F008         	goto	l2205
   714  0011A6                     l2241:
   715                           
   716                           ; Switch size 1, requested type "simple"
   717                           ; Number of cases is 5, Range of values is 0 to 4
   718                           ; switch strategies available:
   719                           ; Name         Instructions Cycles
   720                           ; simple_byte           16     9 (average)
   721                           ;	Chosen strategy is simple_byte
   722  0011A6  5034               	movf	??_main^0,w,c
   723  0011A8  0A00               	xorlw	0	; case 0
   724  0011AA  B4D8               	btfsc	status,2,c
   725  0011AC  EF32  F008         	goto	l2161
   726  0011B0  0A01               	xorlw	1	; case 1
   727  0011B2  B4D8               	btfsc	status,2,c
   728  0011B4  EF5B  F008         	goto	l2171
   729  0011B8  0A03               	xorlw	3	; case 2
   730  0011BA  B4D8               	btfsc	status,2,c
   731  0011BC  EF78  F008         	goto	l2179
   732  0011C0  0A01               	xorlw	1	; case 3
   733  0011C2  B4D8               	btfsc	status,2,c
   734  0011C4  EF95  F008         	goto	l2187
   735  0011C8  0A07               	xorlw	7	; case 4
   736  0011CA  B4D8               	btfsc	status,2,c
   737  0011CC  EFB2  F008         	goto	l2195
   738  0011D0  EFC9  F008         	goto	l2205
   739  0011D4  EF07  F000         	goto	start
   740  0011D8                     __end_of_main:
   741                           	opt callstack 0
   742                           
   743 ;; *************** function _timerInitialize *****************
   744 ;; Defined at:
   745 ;;		line 9 in file "system.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;		None
   750 ;; Return value:  Size  Location     Type
   751 ;;                  1    wreg      void 
   752 ;; Registers used:
   753 ;;		wreg, status,2
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;Total ram usage:        0 bytes
   764 ;; Hardware stack levels used:    1
   765 ;; Hardware stack levels required when called:    3
   766 ;; This function calls:
   767 ;;		Nothing
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text1
   774  002174                     __ptext1:
   775                           	opt callstack 0
   776  002174                     _timerInitialize:
   777                           	opt callstack 27
   778  002174                     
   779                           ;system.c: 10:     INTCONbits.GIE = 1;
   780  002174  8EF2               	bsf	242,7,c	;volatile
   781                           
   782                           ;system.c: 12:     INTCONbits.TMR0IE = 1;
   783  002176  8AF2               	bsf	242,5,c	;volatile
   784                           
   785                           ;system.c: 13:     INTCONbits.TMR0IF = 0;
   786  002178  94F2               	bcf	242,2,c	;volatile
   787  00217A                     
   788                           ;system.c: 15:     T0CON = 0b11000110;
   789  00217A  0EC6               	movlw	198
   790  00217C  6ED5               	movwf	213,c	;volatile
   791                           
   792                           ;system.c: 18:     TMR0L = 100;
   793  00217E  0E64               	movlw	100
   794  002180  6ED6               	movwf	214,c	;volatile
   795  002182  0012               	return		;funcret
   796  002184                     __end_of_timerInitialize:
   797                           	opt callstack 0
   798                           
   799 ;; *************** function _stopWatch *****************
   800 ;; Defined at:
   801 ;;		line 3 in file "stateStpWatch.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;Total ram usage:        2 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    3
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text2
   830  0018E0                     __ptext2:
   831                           	opt callstack 0
   832  0018E0                     _stopWatch:
   833                           	opt callstack 27
   834  0018E0                     
   835                           ;stateStpWatch.c: 4:     if (countPressed > 0) {
   836  0018E0  BE1E               	btfsc	(_countPressed+1)^0,7,c
   837  0018E2  EF7B  F00C         	goto	u581
   838  0018E6  501E               	movf	(_countPressed+1)^0,w,c
   839  0018E8  E108               	bnz	u580
   840  0018EA  041D               	decf	_countPressed^0,w,c
   841  0018EC  A0D8               	btfss	status,0,c
   842  0018EE  EF7B  F00C         	goto	u581
   843  0018F2  EF7D  F00C         	goto	u580
   844  0018F6                     u581:
   845  0018F6  EFA0  F00C         	goto	l449
   846  0018FA                     u580:
   847  0018FA                     
   848                           ;stateStpWatch.c: 5:         if (run == 0) {
   849  0018FA  5007               	movf	_run^0,w,c
   850  0018FC  1008               	iorwf	(_run+1)^0,w,c
   851  0018FE  A4D8               	btfss	status,2,c
   852  001900  EF84  F00C         	goto	u591
   853  001904  EF86  F00C         	goto	u590
   854  001908                     u591:
   855  001908  EF92  F00C         	goto	l1659
   856  00190C                     u590:
   857  00190C                     
   858                           ;stateStpWatch.c: 6:             miliSecSTW = 0;
   859  00190C  0E00               	movlw	0
   860  00190E  6E02               	movwf	(_miliSecSTW+1)^0,c
   861  001910  0E00               	movlw	0
   862  001912  6E01               	movwf	_miliSecSTW^0,c
   863                           
   864                           ;stateStpWatch.c: 7:             secSTW = 0;
   865  001914  0E00               	movlw	0
   866  001916  6E04               	movwf	(_secSTW+1)^0,c
   867  001918  0E00               	movlw	0
   868  00191A  6E03               	movwf	_secSTW^0,c
   869                           
   870                           ;stateStpWatch.c: 8:             minSTW = 0;
   871  00191C  0E00               	movlw	0
   872  00191E  6E06               	movwf	(_minSTW+1)^0,c
   873  001920  0E00               	movlw	0
   874  001922  6E05               	movwf	_minSTW^0,c
   875  001924                     l1659:
   876                           
   877                           ;stateStpWatch.c: 10:         run = (run + 1) % 2;
   878  001924  0E01               	movlw	1
   879  001926  2407               	addwf	_run^0,w,c
   880  001928  6E29               	movwf	??_stopWatch^0,c
   881  00192A  0E00               	movlw	0
   882  00192C  2008               	addwfc	(_run+1)^0,w,c
   883  00192E  6E2A               	movwf	(??_stopWatch+1)^0,c
   884  001930  0E01               	movlw	1
   885  001932  1429               	andwf	??_stopWatch^0,w,c
   886  001934  6E07               	movwf	_run^0,c
   887  001936  6A08               	clrf	(_run+1)^0,c
   888  001938                     
   889                           ;stateStpWatch.c: 11:         timerFlag = 0;
   890  001938  0E00               	movlw	0
   891  00193A  6E14               	movwf	(_timerFlag+1)^0,c
   892  00193C  0E00               	movlw	0
   893  00193E  6E13               	movwf	_timerFlag^0,c
   894  001940                     l449:
   895                           
   896                           ;stateStpWatch.c: 13:     if (run == 1) {
   897  001940  0407               	decf	_run^0,w,c
   898  001942  1008               	iorwf	(_run+1)^0,w,c
   899  001944  A4D8               	btfss	status,2,c
   900  001946  EFA7  F00C         	goto	u601
   901  00194A  EFA9  F00C         	goto	u600
   902  00194E                     u601:
   903  00194E  EFF2  F00C         	goto	l456
   904  001952                     u600:
   905  001952                     
   906                           ;stateStpWatch.c: 14:         if (timerFlag == 1) {
   907  001952  0413               	decf	_timerFlag^0,w,c
   908  001954  1014               	iorwf	(_timerFlag+1)^0,w,c
   909  001956  A4D8               	btfss	status,2,c
   910  001958  EFB0  F00C         	goto	u611
   911  00195C  EFB2  F00C         	goto	u610
   912  001960                     u611:
   913  001960  EFF2  F00C         	goto	l456
   914  001964                     u610:
   915  001964                     
   916                           ;stateStpWatch.c: 15:             miliSecSTW++;
   917  001964  4A01               	infsnz	_miliSecSTW^0,f,c
   918  001966  2A02               	incf	(_miliSecSTW+1)^0,f,c
   919  001968                     
   920                           ;stateStpWatch.c: 16:             if (miliSecSTW >= 100) {
   921  001968  BE02               	btfsc	(_miliSecSTW+1)^0,7,c
   922  00196A  EFC0  F00C         	goto	u621
   923  00196E  5002               	movf	(_miliSecSTW+1)^0,w,c
   924  001970  E109               	bnz	u620
   925  001972  0E64               	movlw	100
   926  001974  5C01               	subwf	_miliSecSTW^0,w,c
   927  001976  A0D8               	btfss	status,0,c
   928  001978  EFC0  F00C         	goto	u621
   929  00197C  EFC2  F00C         	goto	u620
   930  001980                     u621:
   931  001980  EFC8  F00C         	goto	l1673
   932  001984                     u620:
   933  001984                     
   934                           ;stateStpWatch.c: 17:                 miliSecSTW = 0;
   935  001984  0E00               	movlw	0
   936  001986  6E02               	movwf	(_miliSecSTW+1)^0,c
   937  001988  0E00               	movlw	0
   938  00198A  6E01               	movwf	_miliSecSTW^0,c
   939  00198C                     
   940                           ;stateStpWatch.c: 18:                 secSTW++;
   941  00198C  4A03               	infsnz	_secSTW^0,f,c
   942  00198E  2A04               	incf	(_secSTW+1)^0,f,c
   943  001990                     l1673:
   944                           
   945                           ;stateStpWatch.c: 20:             if (secSTW >= 60) {
   946  001990  BE04               	btfsc	(_secSTW+1)^0,7,c
   947  001992  EFD4  F00C         	goto	u631
   948  001996  5004               	movf	(_secSTW+1)^0,w,c
   949  001998  E109               	bnz	u630
   950  00199A  0E3C               	movlw	60
   951  00199C  5C03               	subwf	_secSTW^0,w,c
   952  00199E  A0D8               	btfss	status,0,c
   953  0019A0  EFD4  F00C         	goto	u631
   954  0019A4  EFD6  F00C         	goto	u630
   955  0019A8                     u631:
   956  0019A8  EFDC  F00C         	goto	l1679
   957  0019AC                     u630:
   958  0019AC                     
   959                           ;stateStpWatch.c: 21:                 secSTW = 0;
   960  0019AC  0E00               	movlw	0
   961  0019AE  6E04               	movwf	(_secSTW+1)^0,c
   962  0019B0  0E00               	movlw	0
   963  0019B2  6E03               	movwf	_secSTW^0,c
   964  0019B4                     
   965                           ;stateStpWatch.c: 22:                 minSTW++;
   966  0019B4  4A05               	infsnz	_minSTW^0,f,c
   967  0019B6  2A06               	incf	(_minSTW+1)^0,f,c
   968  0019B8                     l1679:
   969                           
   970                           ;stateStpWatch.c: 24:             if (minSTW >= 60) {
   971  0019B8  BE06               	btfsc	(_minSTW+1)^0,7,c
   972  0019BA  EFE8  F00C         	goto	u641
   973  0019BE  5006               	movf	(_minSTW+1)^0,w,c
   974  0019C0  E109               	bnz	u640
   975  0019C2  0E3C               	movlw	60
   976  0019C4  5C05               	subwf	_minSTW^0,w,c
   977  0019C6  A0D8               	btfss	status,0,c
   978  0019C8  EFE8  F00C         	goto	u641
   979  0019CC  EFEA  F00C         	goto	u640
   980  0019D0                     u641:
   981  0019D0  EFEE  F00C         	goto	l455
   982  0019D4                     u640:
   983  0019D4                     
   984                           ;stateStpWatch.c: 25:                 minSTW = 0;
   985  0019D4  0E00               	movlw	0
   986  0019D6  6E06               	movwf	(_minSTW+1)^0,c
   987  0019D8  0E00               	movlw	0
   988  0019DA  6E05               	movwf	_minSTW^0,c
   989  0019DC                     l455:
   990                           
   991                           ;stateStpWatch.c: 27:             timerFlag = 0;
   992  0019DC  0E00               	movlw	0
   993  0019DE  6E14               	movwf	(_timerFlag+1)^0,c
   994  0019E0  0E00               	movlw	0
   995  0019E2  6E13               	movwf	_timerFlag^0,c
   996  0019E4                     l456:
   997  0019E4  0012               	return		;funcret
   998  0019E6                     __end_of_stopWatch:
   999                           	opt callstack 0
  1000                           
  1001 ;; *************** function _oscillationInitialize *****************
  1002 ;; Defined at:
  1003 ;;		line 3 in file "system.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;Total ram usage:        0 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    3
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text3
  1032  002184                     __ptext3:
  1033                           	opt callstack 0
  1034  002184                     _oscillationInitialize:
  1035                           	opt callstack 27
  1036  002184                     
  1037                           ;system.c: 5:     OSCCON = 0b01110111;
  1038  002184  0E77               	movlw	119
  1039  002186  6ED3               	movwf	211,c	;volatile
  1040                           
  1041                           ;system.c: 6:     OSCTUNE = 0b00001111;
  1042  002188  0E0F               	movlw	15
  1043  00218A  6E9B               	movwf	155,c	;volatile
  1044  00218C  0012               	return		;funcret
  1045  00218E                     __end_of_oscillationInitialize:
  1046                           	opt callstack 0
  1047                           
  1048 ;; *************** function _norClock *****************
  1049 ;; Defined at:
  1050 ;;		line 3 in file "stateClock.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;Total ram usage:        0 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    3
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text4
  1079  001DB8                     __ptext4:
  1080                           	opt callstack 0
  1081  001DB8                     _norClock:
  1082                           	opt callstack 27
  1083  001DB8                     
  1084                           ;stateClock.c: 5:         if (count10ms >= 100) {
  1085  001DB8  BE16               	btfsc	(_count10ms+1)^0,7,c
  1086  001DBA  EFE8  F00E         	goto	u211
  1087  001DBE  5016               	movf	(_count10ms+1)^0,w,c
  1088  001DC0  E109               	bnz	u210
  1089  001DC2  0E64               	movlw	100
  1090  001DC4  5C15               	subwf	_count10ms^0,w,c
  1091  001DC6  A0D8               	btfss	status,0,c
  1092  001DC8  EFE8  F00E         	goto	u211
  1093  001DCC  EFEA  F00E         	goto	u210
  1094  001DD0                     u211:
  1095  001DD0  EF2A  F00F         	goto	l295
  1096  001DD4                     u210:
  1097  001DD4                     
  1098                           ;stateClock.c: 6:             count10ms = 0;
  1099  001DD4  0E00               	movlw	0
  1100  001DD6  6E16               	movwf	(_count10ms+1)^0,c
  1101  001DD8  0E00               	movlw	0
  1102  001DDA  6E15               	movwf	_count10ms^0,c
  1103  001DDC                     
  1104                           ;stateClock.c: 7:             sec++;
  1105  001DDC  4A11               	infsnz	_sec^0,f,c
  1106  001DDE  2A12               	incf	(_sec+1)^0,f,c
  1107  001DE0                     
  1108                           ;stateClock.c: 8:             if (sec >= 60) {
  1109  001DE0  BE12               	btfsc	(_sec+1)^0,7,c
  1110  001DE2  EFFC  F00E         	goto	u221
  1111  001DE6  5012               	movf	(_sec+1)^0,w,c
  1112  001DE8  E109               	bnz	u220
  1113  001DEA  0E3C               	movlw	60
  1114  001DEC  5C11               	subwf	_sec^0,w,c
  1115  001DEE  A0D8               	btfss	status,0,c
  1116  001DF0  EFFC  F00E         	goto	u221
  1117  001DF4  EFFE  F00E         	goto	u220
  1118  001DF8                     u221:
  1119  001DF8  EF04  F00F         	goto	l1399
  1120  001DFC                     u220:
  1121  001DFC                     
  1122                           ;stateClock.c: 9:                 sec = 0;
  1123  001DFC  0E00               	movlw	0
  1124  001DFE  6E12               	movwf	(_sec+1)^0,c
  1125  001E00  0E00               	movlw	0
  1126  001E02  6E11               	movwf	_sec^0,c
  1127  001E04                     
  1128                           ;stateClock.c: 10:                 min++;
  1129  001E04  4A0F               	infsnz	_min^0,f,c
  1130  001E06  2A10               	incf	(_min+1)^0,f,c
  1131  001E08                     l1399:
  1132                           
  1133                           ;stateClock.c: 12:             if (min >= 60) {
  1134  001E08  BE10               	btfsc	(_min+1)^0,7,c
  1135  001E0A  EF10  F00F         	goto	u231
  1136  001E0E  5010               	movf	(_min+1)^0,w,c
  1137  001E10  E109               	bnz	u230
  1138  001E12  0E3C               	movlw	60
  1139  001E14  5C0F               	subwf	_min^0,w,c
  1140  001E16  A0D8               	btfss	status,0,c
  1141  001E18  EF10  F00F         	goto	u231
  1142  001E1C  EF12  F00F         	goto	u230
  1143  001E20                     u231:
  1144  001E20  EF18  F00F         	goto	l1405
  1145  001E24                     u230:
  1146  001E24                     
  1147                           ;stateClock.c: 13:                 min = 0;
  1148  001E24  0E00               	movlw	0
  1149  001E26  6E10               	movwf	(_min+1)^0,c
  1150  001E28  0E00               	movlw	0
  1151  001E2A  6E0F               	movwf	_min^0,c
  1152  001E2C                     
  1153                           ;stateClock.c: 14:                 hr++;
  1154  001E2C  4A0D               	infsnz	_hr^0,f,c
  1155  001E2E  2A0E               	incf	(_hr+1)^0,f,c
  1156  001E30                     l1405:
  1157                           
  1158                           ;stateClock.c: 16:             if (hr >= 24) {
  1159  001E30  BE0E               	btfsc	(_hr+1)^0,7,c
  1160  001E32  EF24  F00F         	goto	u241
  1161  001E36  500E               	movf	(_hr+1)^0,w,c
  1162  001E38  E109               	bnz	u240
  1163  001E3A  0E18               	movlw	24
  1164  001E3C  5C0D               	subwf	_hr^0,w,c
  1165  001E3E  A0D8               	btfss	status,0,c
  1166  001E40  EF24  F00F         	goto	u241
  1167  001E44  EF26  F00F         	goto	u240
  1168  001E48                     u241:
  1169  001E48  EF2A  F00F         	goto	l295
  1170  001E4C                     u240:
  1171  001E4C                     
  1172                           ;stateClock.c: 17:                 hr = 0;
  1173  001E4C  0E00               	movlw	0
  1174  001E4E  6E0E               	movwf	(_hr+1)^0,c
  1175  001E50  0E00               	movlw	0
  1176  001E52  6E0D               	movwf	_hr^0,c
  1177  001E54                     l295:
  1178  001E54  0012               	return		;funcret
  1179  001E56                     __end_of_norClock:
  1180                           	opt callstack 0
  1181                           
  1182 ;; *************** function _modifySecond *****************
  1183 ;; Defined at:
  1184 ;;		line 68 in file "statesModify.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;		None
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;Total ram usage:        2 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    3
  1205 ;; This function calls:
  1206 ;;		Nothing
  1207 ;; This function is called by:
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text5
  1213  0011D8                     __ptext5:
  1214                           	opt callstack 0
  1215  0011D8                     _modifySecond:
  1216                           	opt callstack 27
  1217  0011D8                     
  1218                           ;statesModify.c: 69:     switch (stModify) {
  1219  0011D8  EF58  F009         	goto	l1613
  1220  0011DC                     l1581:
  1221                           
  1222                           ;statesModify.c: 71:             if (changeModePressed == 0 && countPressed > 0) {
  1223  0011DC  5019               	movf	_changeModePressed^0,w,c
  1224  0011DE  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1225  0011E0  A4D8               	btfss	status,2,c
  1226  0011E2  EFF5  F008         	goto	u471
  1227  0011E6  EFF7  F008         	goto	u470
  1228  0011EA                     u471:
  1229  0011EA  EF71  F009         	goto	l1615
  1230  0011EE                     u470:
  1231  0011EE  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1232  0011F0  EF02  F009         	goto	u481
  1233  0011F4  501E               	movf	(_countPressed+1)^0,w,c
  1234  0011F6  E108               	bnz	u480
  1235  0011F8  041D               	decf	_countPressed^0,w,c
  1236  0011FA  A0D8               	btfss	status,0,c
  1237  0011FC  EF02  F009         	goto	u481
  1238  001200  EF04  F009         	goto	u480
  1239  001204                     u481:
  1240  001204  EF71  F009         	goto	l1615
  1241  001208                     u480:
  1242  001208                     
  1243                           ;statesModify.c: 72:                 sec++;
  1244  001208  4A11               	infsnz	_sec^0,f,c
  1245  00120A  2A12               	incf	(_sec+1)^0,f,c
  1246  00120C                     
  1247                           ;statesModify.c: 73:                 stModify = iNor;
  1248  00120C  0E01               	movlw	1
  1249  00120E  6E1F               	movwf	_stModify^0,c
  1250  001210  EF71  F009         	goto	l1615
  1251  001214                     l1589:
  1252                           
  1253                           ;statesModify.c: 77:             if (countPressed == 0 || changeModePressed == 1) {
  1254  001214  501D               	movf	_countPressed^0,w,c
  1255  001216  101E               	iorwf	(_countPressed+1)^0,w,c
  1256  001218  B4D8               	btfsc	status,2,c
  1257  00121A  EF11  F009         	goto	u491
  1258  00121E  EF13  F009         	goto	u490
  1259  001222                     u491:
  1260  001222  EF1C  F009         	goto	l1593
  1261  001226                     u490:
  1262  001226  0419               	decf	_changeModePressed^0,w,c
  1263  001228  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1264  00122A  A4D8               	btfss	status,2,c
  1265  00122C  EF1A  F009         	goto	u501
  1266  001230  EF1C  F009         	goto	u500
  1267  001234                     u501:
  1268  001234  EF1E  F009         	goto	l1595
  1269  001238                     u500:
  1270  001238                     l1593:
  1271                           
  1272                           ;statesModify.c: 78:                 stModify = init;
  1273  001238  0E00               	movlw	0
  1274  00123A  6E1F               	movwf	_stModify^0,c
  1275  00123C                     l1595:
  1276                           
  1277                           ;statesModify.c: 80:             if (countAuto > 0) {
  1278  00123C  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1279  00123E  EF29  F009         	goto	u511
  1280  001242  501C               	movf	(_countAuto+1)^0,w,c
  1281  001244  E108               	bnz	u510
  1282  001246  041B               	decf	_countAuto^0,w,c
  1283  001248  A0D8               	btfss	status,0,c
  1284  00124A  EF29  F009         	goto	u511
  1285  00124E  EF2B  F009         	goto	u510
  1286  001252                     u511:
  1287  001252  EF71  F009         	goto	l1615
  1288  001256                     u510:
  1289  001256                     
  1290                           ;statesModify.c: 81:                 increaseTime = 1;
  1291  001256  0E00               	movlw	0
  1292  001258  6E18               	movwf	(_increaseTime+1)^0,c
  1293  00125A  0E01               	movlw	1
  1294  00125C  6E17               	movwf	_increaseTime^0,c
  1295                           
  1296                           ;statesModify.c: 82:                 stModify = iAuto;
  1297  00125E  0E02               	movlw	2
  1298  001260  6E1F               	movwf	_stModify^0,c
  1299  001262  EF71  F009         	goto	l1615
  1300  001266                     l1599:
  1301                           
  1302                           ;statesModify.c: 86:             if (countPressed == 0 || changeModePressed == 1) {
  1303  001266  501D               	movf	_countPressed^0,w,c
  1304  001268  101E               	iorwf	(_countPressed+1)^0,w,c
  1305  00126A  B4D8               	btfsc	status,2,c
  1306  00126C  EF3A  F009         	goto	u521
  1307  001270  EF3C  F009         	goto	u520
  1308  001274                     u521:
  1309  001274  EF45  F009         	goto	l1603
  1310  001278                     u520:
  1311  001278  0419               	decf	_changeModePressed^0,w,c
  1312  00127A  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1313  00127C  A4D8               	btfss	status,2,c
  1314  00127E  EF43  F009         	goto	u531
  1315  001282  EF45  F009         	goto	u530
  1316  001286                     u531:
  1317  001286  EF47  F009         	goto	l1605
  1318  00128A                     u530:
  1319  00128A                     l1603:
  1320                           
  1321                           ;statesModify.c: 87:                 stModify = init;
  1322  00128A  0E00               	movlw	0
  1323  00128C  6E1F               	movwf	_stModify^0,c
  1324  00128E                     l1605:
  1325                           
  1326                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1327  00128E  0417               	decf	_increaseTime^0,w,c
  1328  001290  1018               	iorwf	(_increaseTime+1)^0,w,c
  1329  001292  A4D8               	btfss	status,2,c
  1330  001294  EF4E  F009         	goto	u541
  1331  001298  EF50  F009         	goto	u540
  1332  00129C                     u541:
  1333  00129C  EF71  F009         	goto	l1615
  1334  0012A0                     u540:
  1335  0012A0                     
  1336                           ;statesModify.c: 90:                 increaseTime = 0;
  1337  0012A0  0E00               	movlw	0
  1338  0012A2  6E18               	movwf	(_increaseTime+1)^0,c
  1339  0012A4  0E00               	movlw	0
  1340  0012A6  6E17               	movwf	_increaseTime^0,c
  1341  0012A8                     
  1342                           ;statesModify.c: 91:                 sec++;
  1343  0012A8  4A11               	infsnz	_sec^0,f,c
  1344  0012AA  2A12               	incf	(_sec+1)^0,f,c
  1345  0012AC  EF71  F009         	goto	l1615
  1346  0012B0                     l1613:
  1347  0012B0  501F               	movf	_stModify^0,w,c
  1348  0012B2  6E29               	movwf	??_modifySecond^0,c
  1349  0012B4  6A2A               	clrf	(??_modifySecond+1)^0,c
  1350                           
  1351                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1352                           ; Switch size 1, requested type "simple"
  1353                           ; Number of cases is 1, Range of values is 0 to 0
  1354                           ; switch strategies available:
  1355                           ; Name         Instructions Cycles
  1356                           ; simple_byte            4     3 (average)
  1357                           ;	Chosen strategy is simple_byte
  1358  0012B6  502A               	movf	(??_modifySecond+1)^0,w,c
  1359  0012B8  0A00               	xorlw	0	; case 0
  1360  0012BA  B4D8               	btfsc	status,2,c
  1361  0012BC  EF62  F009         	goto	l2243
  1362  0012C0  EF71  F009         	goto	l1615
  1363  0012C4                     l2243:
  1364                           
  1365                           ; Switch size 1, requested type "simple"
  1366                           ; Number of cases is 3, Range of values is 0 to 2
  1367                           ; switch strategies available:
  1368                           ; Name         Instructions Cycles
  1369                           ; simple_byte           10     6 (average)
  1370                           ;	Chosen strategy is simple_byte
  1371  0012C4  5029               	movf	??_modifySecond^0,w,c
  1372  0012C6  0A00               	xorlw	0	; case 0
  1373  0012C8  B4D8               	btfsc	status,2,c
  1374  0012CA  EFEE  F008         	goto	l1581
  1375  0012CE  0A01               	xorlw	1	; case 1
  1376  0012D0  B4D8               	btfsc	status,2,c
  1377  0012D2  EF0A  F009         	goto	l1589
  1378  0012D6  0A03               	xorlw	3	; case 2
  1379  0012D8  B4D8               	btfsc	status,2,c
  1380  0012DA  EF33  F009         	goto	l1599
  1381  0012DE  EF71  F009         	goto	l1615
  1382  0012E2                     l1615:
  1383                           
  1384                           ;statesModify.c: 95:     if (sec >= 60) {
  1385  0012E2  BE12               	btfsc	(_sec+1)^0,7,c
  1386  0012E4  EF7D  F009         	goto	u551
  1387  0012E8  5012               	movf	(_sec+1)^0,w,c
  1388  0012EA  E109               	bnz	u550
  1389  0012EC  0E3C               	movlw	60
  1390  0012EE  5C11               	subwf	_sec^0,w,c
  1391  0012F0  A0D8               	btfss	status,0,c
  1392  0012F2  EF7D  F009         	goto	u551
  1393  0012F6  EF7F  F009         	goto	u550
  1394  0012FA                     u551:
  1395  0012FA  EF83  F009         	goto	l392
  1396  0012FE                     u550:
  1397  0012FE                     
  1398                           ;statesModify.c: 96:         sec = 0;
  1399  0012FE  0E00               	movlw	0
  1400  001300  6E12               	movwf	(_sec+1)^0,c
  1401  001302  0E00               	movlw	0
  1402  001304  6E11               	movwf	_sec^0,c
  1403  001306                     l392:
  1404  001306  0012               	return		;funcret
  1405  001308                     __end_of_modifySecond:
  1406                           	opt callstack 0
  1407                           
  1408 ;; *************** function _modifyMinute *****************
  1409 ;; Defined at:
  1410 ;;		line 36 in file "statesModify.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, status,0
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;Total ram usage:        2 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; Hardware stack levels required when called:    3
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text6
  1439  001308                     __ptext6:
  1440                           	opt callstack 0
  1441  001308                     _modifyMinute:
  1442                           	opt callstack 27
  1443  001308                     
  1444                           ;statesModify.c: 37:     switch (stModify) {
  1445  001308  EFF0  F009         	goto	l1539
  1446  00130C                     l1507:
  1447                           
  1448                           ;statesModify.c: 39:             if (changeModePressed == 0 && countPressed > 0) {
  1449  00130C  5019               	movf	_changeModePressed^0,w,c
  1450  00130E  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1451  001310  A4D8               	btfss	status,2,c
  1452  001312  EF8D  F009         	goto	u361
  1453  001316  EF8F  F009         	goto	u360
  1454  00131A                     u361:
  1455  00131A  EF09  F00A         	goto	l1541
  1456  00131E                     u360:
  1457  00131E  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1458  001320  EF9A  F009         	goto	u371
  1459  001324  501E               	movf	(_countPressed+1)^0,w,c
  1460  001326  E108               	bnz	u370
  1461  001328  041D               	decf	_countPressed^0,w,c
  1462  00132A  A0D8               	btfss	status,0,c
  1463  00132C  EF9A  F009         	goto	u371
  1464  001330  EF9C  F009         	goto	u370
  1465  001334                     u371:
  1466  001334  EF09  F00A         	goto	l1541
  1467  001338                     u370:
  1468  001338                     
  1469                           ;statesModify.c: 40:                 min++;
  1470  001338  4A0F               	infsnz	_min^0,f,c
  1471  00133A  2A10               	incf	(_min+1)^0,f,c
  1472  00133C                     
  1473                           ;statesModify.c: 41:                 stModify = iNor;
  1474  00133C  0E01               	movlw	1
  1475  00133E  6E1F               	movwf	_stModify^0,c
  1476  001340  EF09  F00A         	goto	l1541
  1477  001344                     l1515:
  1478                           
  1479                           ;statesModify.c: 45:             if (countPressed == 0 || changeModePressed == 1) {
  1480  001344  501D               	movf	_countPressed^0,w,c
  1481  001346  101E               	iorwf	(_countPressed+1)^0,w,c
  1482  001348  B4D8               	btfsc	status,2,c
  1483  00134A  EFA9  F009         	goto	u381
  1484  00134E  EFAB  F009         	goto	u380
  1485  001352                     u381:
  1486  001352  EFB4  F009         	goto	l1519
  1487  001356                     u380:
  1488  001356  0419               	decf	_changeModePressed^0,w,c
  1489  001358  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1490  00135A  A4D8               	btfss	status,2,c
  1491  00135C  EFB2  F009         	goto	u391
  1492  001360  EFB4  F009         	goto	u390
  1493  001364                     u391:
  1494  001364  EFB6  F009         	goto	l1521
  1495  001368                     u390:
  1496  001368                     l1519:
  1497                           
  1498                           ;statesModify.c: 46:                 stModify = init;
  1499  001368  0E00               	movlw	0
  1500  00136A  6E1F               	movwf	_stModify^0,c
  1501  00136C                     l1521:
  1502                           
  1503                           ;statesModify.c: 48:             if (countAuto > 0) {
  1504  00136C  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1505  00136E  EFC1  F009         	goto	u401
  1506  001372  501C               	movf	(_countAuto+1)^0,w,c
  1507  001374  E108               	bnz	u400
  1508  001376  041B               	decf	_countAuto^0,w,c
  1509  001378  A0D8               	btfss	status,0,c
  1510  00137A  EFC1  F009         	goto	u401
  1511  00137E  EFC3  F009         	goto	u400
  1512  001382                     u401:
  1513  001382  EF09  F00A         	goto	l1541
  1514  001386                     u400:
  1515  001386                     
  1516                           ;statesModify.c: 49:                 increaseTime = 1;
  1517  001386  0E00               	movlw	0
  1518  001388  6E18               	movwf	(_increaseTime+1)^0,c
  1519  00138A  0E01               	movlw	1
  1520  00138C  6E17               	movwf	_increaseTime^0,c
  1521                           
  1522                           ;statesModify.c: 50:                 stModify = iAuto;
  1523  00138E  0E02               	movlw	2
  1524  001390  6E1F               	movwf	_stModify^0,c
  1525  001392  EF09  F00A         	goto	l1541
  1526  001396                     l1525:
  1527                           
  1528                           ;statesModify.c: 54:             if (countPressed == 0 || changeModePressed == 1) {
  1529  001396  501D               	movf	_countPressed^0,w,c
  1530  001398  101E               	iorwf	(_countPressed+1)^0,w,c
  1531  00139A  B4D8               	btfsc	status,2,c
  1532  00139C  EFD2  F009         	goto	u411
  1533  0013A0  EFD4  F009         	goto	u410
  1534  0013A4                     u411:
  1535  0013A4  EFDD  F009         	goto	l1529
  1536  0013A8                     u410:
  1537  0013A8  0419               	decf	_changeModePressed^0,w,c
  1538  0013AA  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1539  0013AC  A4D8               	btfss	status,2,c
  1540  0013AE  EFDB  F009         	goto	u421
  1541  0013B2  EFDD  F009         	goto	u420
  1542  0013B6                     u421:
  1543  0013B6  EFDF  F009         	goto	l1531
  1544  0013BA                     u420:
  1545  0013BA                     l1529:
  1546                           
  1547                           ;statesModify.c: 55:                 stModify = init;
  1548  0013BA  0E00               	movlw	0
  1549  0013BC  6E1F               	movwf	_stModify^0,c
  1550  0013BE                     l1531:
  1551                           
  1552                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1553  0013BE  0417               	decf	_increaseTime^0,w,c
  1554  0013C0  1018               	iorwf	(_increaseTime+1)^0,w,c
  1555  0013C2  A4D8               	btfss	status,2,c
  1556  0013C4  EFE6  F009         	goto	u431
  1557  0013C8  EFE8  F009         	goto	u430
  1558  0013CC                     u431:
  1559  0013CC  EF09  F00A         	goto	l1541
  1560  0013D0                     u430:
  1561  0013D0                     
  1562                           ;statesModify.c: 58:                 increaseTime = 0;
  1563  0013D0  0E00               	movlw	0
  1564  0013D2  6E18               	movwf	(_increaseTime+1)^0,c
  1565  0013D4  0E00               	movlw	0
  1566  0013D6  6E17               	movwf	_increaseTime^0,c
  1567  0013D8                     
  1568                           ;statesModify.c: 59:                 min++;
  1569  0013D8  4A0F               	infsnz	_min^0,f,c
  1570  0013DA  2A10               	incf	(_min+1)^0,f,c
  1571  0013DC  EF09  F00A         	goto	l1541
  1572  0013E0                     l1539:
  1573  0013E0  501F               	movf	_stModify^0,w,c
  1574  0013E2  6E29               	movwf	??_modifyMinute^0,c
  1575  0013E4  6A2A               	clrf	(??_modifyMinute+1)^0,c
  1576                           
  1577                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1578                           ; Switch size 1, requested type "simple"
  1579                           ; Number of cases is 1, Range of values is 0 to 0
  1580                           ; switch strategies available:
  1581                           ; Name         Instructions Cycles
  1582                           ; simple_byte            4     3 (average)
  1583                           ;	Chosen strategy is simple_byte
  1584  0013E6  502A               	movf	(??_modifyMinute+1)^0,w,c
  1585  0013E8  0A00               	xorlw	0	; case 0
  1586  0013EA  B4D8               	btfsc	status,2,c
  1587  0013EC  EFFA  F009         	goto	l2245
  1588  0013F0  EF09  F00A         	goto	l1541
  1589  0013F4                     l2245:
  1590                           
  1591                           ; Switch size 1, requested type "simple"
  1592                           ; Number of cases is 3, Range of values is 0 to 2
  1593                           ; switch strategies available:
  1594                           ; Name         Instructions Cycles
  1595                           ; simple_byte           10     6 (average)
  1596                           ;	Chosen strategy is simple_byte
  1597  0013F4  5029               	movf	??_modifyMinute^0,w,c
  1598  0013F6  0A00               	xorlw	0	; case 0
  1599  0013F8  B4D8               	btfsc	status,2,c
  1600  0013FA  EF86  F009         	goto	l1507
  1601  0013FE  0A01               	xorlw	1	; case 1
  1602  001400  B4D8               	btfsc	status,2,c
  1603  001402  EFA2  F009         	goto	l1515
  1604  001406  0A03               	xorlw	3	; case 2
  1605  001408  B4D8               	btfsc	status,2,c
  1606  00140A  EFCB  F009         	goto	l1525
  1607  00140E  EF09  F00A         	goto	l1541
  1608  001412                     l1541:
  1609                           
  1610                           ;statesModify.c: 63:     if (min >= 60) {
  1611  001412  BE10               	btfsc	(_min+1)^0,7,c
  1612  001414  EF15  F00A         	goto	u441
  1613  001418  5010               	movf	(_min+1)^0,w,c
  1614  00141A  E109               	bnz	u440
  1615  00141C  0E3C               	movlw	60
  1616  00141E  5C0F               	subwf	_min^0,w,c
  1617  001420  A0D8               	btfss	status,0,c
  1618  001422  EF15  F00A         	goto	u441
  1619  001426  EF17  F00A         	goto	u440
  1620  00142A                     u441:
  1621  00142A  EF1B  F00A         	goto	l374
  1622  00142E                     u440:
  1623  00142E                     
  1624                           ;statesModify.c: 64:         min = 0;
  1625  00142E  0E00               	movlw	0
  1626  001430  6E10               	movwf	(_min+1)^0,c
  1627  001432  0E00               	movlw	0
  1628  001434  6E0F               	movwf	_min^0,c
  1629  001436                     l374:
  1630  001436  0012               	return		;funcret
  1631  001438                     __end_of_modifyMinute:
  1632                           	opt callstack 0
  1633                           
  1634 ;; *************** function _modifyHour *****************
  1635 ;; Defined at:
  1636 ;;		line 4 in file "statesModify.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;Total ram usage:        2 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    3
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text7
  1665  001438                     __ptext7:
  1666                           	opt callstack 0
  1667  001438                     _modifyHour:
  1668                           	opt callstack 27
  1669  001438                     
  1670                           ;statesModify.c: 5:     switch (stModify) {
  1671  001438  EF88  F00A         	goto	l1465
  1672  00143C                     l1433:
  1673                           
  1674                           ;statesModify.c: 7:             if (changeModePressed == 0 && countPressed > 0) {
  1675  00143C  5019               	movf	_changeModePressed^0,w,c
  1676  00143E  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1677  001440  A4D8               	btfss	status,2,c
  1678  001442  EF25  F00A         	goto	u251
  1679  001446  EF27  F00A         	goto	u250
  1680  00144A                     u251:
  1681  00144A  EFA1  F00A         	goto	l1467
  1682  00144E                     u250:
  1683  00144E  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1684  001450  EF32  F00A         	goto	u261
  1685  001454  501E               	movf	(_countPressed+1)^0,w,c
  1686  001456  E108               	bnz	u260
  1687  001458  041D               	decf	_countPressed^0,w,c
  1688  00145A  A0D8               	btfss	status,0,c
  1689  00145C  EF32  F00A         	goto	u261
  1690  001460  EF34  F00A         	goto	u260
  1691  001464                     u261:
  1692  001464  EFA1  F00A         	goto	l1467
  1693  001468                     u260:
  1694  001468                     
  1695                           ;statesModify.c: 8:                 hr++;
  1696  001468  4A0D               	infsnz	_hr^0,f,c
  1697  00146A  2A0E               	incf	(_hr+1)^0,f,c
  1698  00146C                     
  1699                           ;statesModify.c: 9:                 stModify = iNor;
  1700  00146C  0E01               	movlw	1
  1701  00146E  6E1F               	movwf	_stModify^0,c
  1702  001470  EFA1  F00A         	goto	l1467
  1703  001474                     l1441:
  1704                           
  1705                           ;statesModify.c: 13:             if (countPressed == 0 || changeModePressed == 1) {
  1706  001474  501D               	movf	_countPressed^0,w,c
  1707  001476  101E               	iorwf	(_countPressed+1)^0,w,c
  1708  001478  B4D8               	btfsc	status,2,c
  1709  00147A  EF41  F00A         	goto	u271
  1710  00147E  EF43  F00A         	goto	u270
  1711  001482                     u271:
  1712  001482  EF4C  F00A         	goto	l1445
  1713  001486                     u270:
  1714  001486  0419               	decf	_changeModePressed^0,w,c
  1715  001488  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1716  00148A  A4D8               	btfss	status,2,c
  1717  00148C  EF4A  F00A         	goto	u281
  1718  001490  EF4C  F00A         	goto	u280
  1719  001494                     u281:
  1720  001494  EF4E  F00A         	goto	l1447
  1721  001498                     u280:
  1722  001498                     l1445:
  1723                           
  1724                           ;statesModify.c: 14:                 stModify = init;
  1725  001498  0E00               	movlw	0
  1726  00149A  6E1F               	movwf	_stModify^0,c
  1727  00149C                     l1447:
  1728                           
  1729                           ;statesModify.c: 16:             if (countAuto > 0) {
  1730  00149C  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1731  00149E  EF59  F00A         	goto	u291
  1732  0014A2  501C               	movf	(_countAuto+1)^0,w,c
  1733  0014A4  E108               	bnz	u290
  1734  0014A6  041B               	decf	_countAuto^0,w,c
  1735  0014A8  A0D8               	btfss	status,0,c
  1736  0014AA  EF59  F00A         	goto	u291
  1737  0014AE  EF5B  F00A         	goto	u290
  1738  0014B2                     u291:
  1739  0014B2  EFA1  F00A         	goto	l1467
  1740  0014B6                     u290:
  1741  0014B6                     
  1742                           ;statesModify.c: 17:                 increaseTime = 1;
  1743  0014B6  0E00               	movlw	0
  1744  0014B8  6E18               	movwf	(_increaseTime+1)^0,c
  1745  0014BA  0E01               	movlw	1
  1746  0014BC  6E17               	movwf	_increaseTime^0,c
  1747                           
  1748                           ;statesModify.c: 18:                 stModify = iAuto;
  1749  0014BE  0E02               	movlw	2
  1750  0014C0  6E1F               	movwf	_stModify^0,c
  1751  0014C2  EFA1  F00A         	goto	l1467
  1752  0014C6                     l1451:
  1753                           
  1754                           ;statesModify.c: 22:             if (countPressed == 0 || changeModePressed == 1) {
  1755  0014C6  501D               	movf	_countPressed^0,w,c
  1756  0014C8  101E               	iorwf	(_countPressed+1)^0,w,c
  1757  0014CA  B4D8               	btfsc	status,2,c
  1758  0014CC  EF6A  F00A         	goto	u301
  1759  0014D0  EF6C  F00A         	goto	u300
  1760  0014D4                     u301:
  1761  0014D4  EF75  F00A         	goto	l1455
  1762  0014D8                     u300:
  1763  0014D8  0419               	decf	_changeModePressed^0,w,c
  1764  0014DA  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1765  0014DC  A4D8               	btfss	status,2,c
  1766  0014DE  EF73  F00A         	goto	u311
  1767  0014E2  EF75  F00A         	goto	u310
  1768  0014E6                     u311:
  1769  0014E6  EF77  F00A         	goto	l1457
  1770  0014EA                     u310:
  1771  0014EA                     l1455:
  1772                           
  1773                           ;statesModify.c: 23:                 stModify = init;
  1774  0014EA  0E00               	movlw	0
  1775  0014EC  6E1F               	movwf	_stModify^0,c
  1776  0014EE                     l1457:
  1777                           
  1778                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1779  0014EE  0417               	decf	_increaseTime^0,w,c
  1780  0014F0  1018               	iorwf	(_increaseTime+1)^0,w,c
  1781  0014F2  A4D8               	btfss	status,2,c
  1782  0014F4  EF7E  F00A         	goto	u321
  1783  0014F8  EF80  F00A         	goto	u320
  1784  0014FC                     u321:
  1785  0014FC  EFA1  F00A         	goto	l1467
  1786  001500                     u320:
  1787  001500                     
  1788                           ;statesModify.c: 26:                 increaseTime = 0;
  1789  001500  0E00               	movlw	0
  1790  001502  6E18               	movwf	(_increaseTime+1)^0,c
  1791  001504  0E00               	movlw	0
  1792  001506  6E17               	movwf	_increaseTime^0,c
  1793  001508                     
  1794                           ;statesModify.c: 27:                 hr++;
  1795  001508  4A0D               	infsnz	_hr^0,f,c
  1796  00150A  2A0E               	incf	(_hr+1)^0,f,c
  1797  00150C  EFA1  F00A         	goto	l1467
  1798  001510                     l1465:
  1799  001510  501F               	movf	_stModify^0,w,c
  1800  001512  6E29               	movwf	??_modifyHour^0,c
  1801  001514  6A2A               	clrf	(??_modifyHour+1)^0,c
  1802                           
  1803                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1804                           ; Switch size 1, requested type "simple"
  1805                           ; Number of cases is 1, Range of values is 0 to 0
  1806                           ; switch strategies available:
  1807                           ; Name         Instructions Cycles
  1808                           ; simple_byte            4     3 (average)
  1809                           ;	Chosen strategy is simple_byte
  1810  001516  502A               	movf	(??_modifyHour+1)^0,w,c
  1811  001518  0A00               	xorlw	0	; case 0
  1812  00151A  B4D8               	btfsc	status,2,c
  1813  00151C  EF92  F00A         	goto	l2247
  1814  001520  EFA1  F00A         	goto	l1467
  1815  001524                     l2247:
  1816                           
  1817                           ; Switch size 1, requested type "simple"
  1818                           ; Number of cases is 3, Range of values is 0 to 2
  1819                           ; switch strategies available:
  1820                           ; Name         Instructions Cycles
  1821                           ; simple_byte           10     6 (average)
  1822                           ;	Chosen strategy is simple_byte
  1823  001524  5029               	movf	??_modifyHour^0,w,c
  1824  001526  0A00               	xorlw	0	; case 0
  1825  001528  B4D8               	btfsc	status,2,c
  1826  00152A  EF1E  F00A         	goto	l1433
  1827  00152E  0A01               	xorlw	1	; case 1
  1828  001530  B4D8               	btfsc	status,2,c
  1829  001532  EF3A  F00A         	goto	l1441
  1830  001536  0A03               	xorlw	3	; case 2
  1831  001538  B4D8               	btfsc	status,2,c
  1832  00153A  EF63  F00A         	goto	l1451
  1833  00153E  EFA1  F00A         	goto	l1467
  1834  001542                     l1467:
  1835                           
  1836                           ;statesModify.c: 31:     if (hr >= 24) {
  1837  001542  BE0E               	btfsc	(_hr+1)^0,7,c
  1838  001544  EFAD  F00A         	goto	u331
  1839  001548  500E               	movf	(_hr+1)^0,w,c
  1840  00154A  E109               	bnz	u330
  1841  00154C  0E18               	movlw	24
  1842  00154E  5C0D               	subwf	_hr^0,w,c
  1843  001550  A0D8               	btfss	status,0,c
  1844  001552  EFAD  F00A         	goto	u331
  1845  001556  EFAF  F00A         	goto	u330
  1846  00155A                     u331:
  1847  00155A  EFB3  F00A         	goto	l356
  1848  00155E                     u330:
  1849  00155E                     
  1850                           ;statesModify.c: 32:         hr = 0;
  1851  00155E  0E00               	movlw	0
  1852  001560  6E0E               	movwf	(_hr+1)^0,c
  1853  001562  0E00               	movlw	0
  1854  001564  6E0D               	movwf	_hr^0,c
  1855  001566                     l356:
  1856  001566  0012               	return		;funcret
  1857  001568                     __end_of_modifyHour:
  1858                           	opt callstack 0
  1859                           
  1860 ;; *************** function _ledInitialize *****************
  1861 ;; Defined at:
  1862 ;;		line 28 in file "system.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;Total ram usage:        0 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    3
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_main
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text8
  1891  00218E                     __ptext8:
  1892                           	opt callstack 0
  1893  00218E                     _ledInitialize:
  1894                           	opt callstack 27
  1895  00218E                     
  1896                           ;system.c: 29:     TRISD = 0x00;
  1897  00218E  0E00               	movlw	0
  1898  002190  6E95               	movwf	149,c	;volatile
  1899                           
  1900                           ;system.c: 30:     LATD = 0x00;
  1901  002192  0E00               	movlw	0
  1902  002194  6E8C               	movwf	140,c	;volatile
  1903  002196  0012               	return		;funcret
  1904  002198                     __end_of_ledInitialize:
  1905                           	opt callstack 0
  1906                           
  1907 ;; *************** function _displayStpWatch *****************
  1908 ;; Defined at:
  1909 ;;		line 32 in file "stateStpWatch.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    7
  1930 ;; This function calls:
  1931 ;;		_LCDPutChar
  1932 ;;		_LCDPutInst
  1933 ;;		_LCDPutStr
  1934 ;;		___awdiv
  1935 ;;		___awmod
  1936 ;; This function is called by:
  1937 ;;		_main
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text9
  1942  0019E6                     __ptext9:
  1943                           	opt callstack 0
  1944  0019E6                     _displayStpWatch:
  1945                           	opt callstack 23
  1946  0019E6                     
  1947                           ;stateStpWatch.c: 33:     LCDPutInst(0x80);
  1948  0019E6  0E80               	movlw	128
  1949  0019E8  EC96  F00F         	call	_LCDPutInst
  1950  0019EC                     
  1951                           ;stateStpWatch.c: 34:     LCDPutStr("   STOP WATCH   ");
  1952  0019EC  0E01               	movlw	low STR_5
  1953  0019EE  6E30               	movwf	LCDPutStr@ptr^0,c
  1954  0019F0  0E10               	movlw	high STR_5
  1955  0019F2  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  1956  0019F4  EC41  F010         	call	_LCDPutStr	;wreg free
  1957  0019F8                     
  1958                           ;stateStpWatch.c: 35:     LCDPutInst(0xC0);
  1959  0019F8  0EC0               	movlw	192
  1960  0019FA  EC96  F00F         	call	_LCDPutInst
  1961  0019FE                     
  1962                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW/10+'0');
  1963  0019FE  C005  F029         	movff	_minSTW,___awdiv@dividend
  1964  001A02  C006  F02A         	movff	_minSTW+1,___awdiv@dividend+1
  1965  001A06  0E00               	movlw	0
  1966  001A08  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1967  001A0A  0E0A               	movlw	10
  1968  001A0C  6E2B               	movwf	___awdiv@divisor^0,c
  1969  001A0E  ECC1  F00D         	call	___awdiv	;wreg free
  1970  001A12  5029               	movf	?___awdiv^0,w,c
  1971  001A14  0F30               	addlw	48
  1972  001A16  EC63  F00F         	call	_LCDPutChar
  1973  001A1A                     
  1974                           ;stateStpWatch.c: 37:     LCDPutChar(minSTW%10+'0');
  1975  001A1A  C005  F029         	movff	_minSTW,___awmod@dividend
  1976  001A1E  C006  F02A         	movff	_minSTW+1,___awmod@dividend+1
  1977  001A22  0E00               	movlw	0
  1978  001A24  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1979  001A26  0E0A               	movlw	10
  1980  001A28  6E2B               	movwf	___awmod@divisor^0,c
  1981  001A2A  EC84  F00E         	call	___awmod	;wreg free
  1982  001A2E  5029               	movf	?___awmod^0,w,c
  1983  001A30  0F30               	addlw	48
  1984  001A32  EC63  F00F         	call	_LCDPutChar
  1985  001A36                     
  1986                           ;stateStpWatch.c: 38:     LCDPutChar(':');
  1987  001A36  0E3A               	movlw	58
  1988  001A38  EC63  F00F         	call	_LCDPutChar
  1989  001A3C                     
  1990                           ;stateStpWatch.c: 39:     LCDPutChar(secSTW/10+'0');
  1991  001A3C  C003  F029         	movff	_secSTW,___awdiv@dividend
  1992  001A40  C004  F02A         	movff	_secSTW+1,___awdiv@dividend+1
  1993  001A44  0E00               	movlw	0
  1994  001A46  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1995  001A48  0E0A               	movlw	10
  1996  001A4A  6E2B               	movwf	___awdiv@divisor^0,c
  1997  001A4C  ECC1  F00D         	call	___awdiv	;wreg free
  1998  001A50  5029               	movf	?___awdiv^0,w,c
  1999  001A52  0F30               	addlw	48
  2000  001A54  EC63  F00F         	call	_LCDPutChar
  2001  001A58                     
  2002                           ;stateStpWatch.c: 40:     LCDPutChar(secSTW%10+'0');
  2003  001A58  C003  F029         	movff	_secSTW,___awmod@dividend
  2004  001A5C  C004  F02A         	movff	_secSTW+1,___awmod@dividend+1
  2005  001A60  0E00               	movlw	0
  2006  001A62  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2007  001A64  0E0A               	movlw	10
  2008  001A66  6E2B               	movwf	___awmod@divisor^0,c
  2009  001A68  EC84  F00E         	call	___awmod	;wreg free
  2010  001A6C  5029               	movf	?___awmod^0,w,c
  2011  001A6E  0F30               	addlw	48
  2012  001A70  EC63  F00F         	call	_LCDPutChar
  2013  001A74                     
  2014                           ;stateStpWatch.c: 41:     LCDPutChar(':');
  2015  001A74  0E3A               	movlw	58
  2016  001A76  EC63  F00F         	call	_LCDPutChar
  2017  001A7A                     
  2018                           ;stateStpWatch.c: 42:     LCDPutChar(miliSecSTW/10+'0');
  2019  001A7A  C001  F029         	movff	_miliSecSTW,___awdiv@dividend
  2020  001A7E  C002  F02A         	movff	_miliSecSTW+1,___awdiv@dividend+1
  2021  001A82  0E00               	movlw	0
  2022  001A84  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2023  001A86  0E0A               	movlw	10
  2024  001A88  6E2B               	movwf	___awdiv@divisor^0,c
  2025  001A8A  ECC1  F00D         	call	___awdiv	;wreg free
  2026  001A8E  5029               	movf	?___awdiv^0,w,c
  2027  001A90  0F30               	addlw	48
  2028  001A92  EC63  F00F         	call	_LCDPutChar
  2029  001A96                     
  2030                           ;stateStpWatch.c: 43:     LCDPutChar(miliSecSTW%10+'0');
  2031  001A96  C001  F029         	movff	_miliSecSTW,___awmod@dividend
  2032  001A9A  C002  F02A         	movff	_miliSecSTW+1,___awmod@dividend+1
  2033  001A9E  0E00               	movlw	0
  2034  001AA0  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2035  001AA2  0E0A               	movlw	10
  2036  001AA4  6E2B               	movwf	___awmod@divisor^0,c
  2037  001AA6  EC84  F00E         	call	___awmod	;wreg free
  2038  001AAA  5029               	movf	?___awmod^0,w,c
  2039  001AAC  0F30               	addlw	48
  2040  001AAE  EC63  F00F         	call	_LCDPutChar
  2041  001AB2  0012               	return		;funcret
  2042  001AB4                     __end_of_displayStpWatch:
  2043                           	opt callstack 0
  2044                           
  2045 ;; *************** function _displayModSecond *****************
  2046 ;; Defined at:
  2047 ;;		line 146 in file "statesModify.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;Total ram usage:        2 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    7
  2068 ;; This function calls:
  2069 ;;		_LCDPutChar
  2070 ;;		_LCDPutInst
  2071 ;;		_LCDPutStr
  2072 ;;		___awdiv
  2073 ;;		___awmod
  2074 ;; This function is called by:
  2075 ;;		_main
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text10
  2080  001568                     __ptext10:
  2081                           	opt callstack 0
  2082  001568                     _displayModSecond:
  2083                           	opt callstack 23
  2084  001568                     
  2085                           ;statesModify.c: 147:     LCDPutInst(0x80);
  2086  001568  0E80               	movlw	128
  2087  00156A  EC96  F00F         	call	_LCDPutInst
  2088  00156E                     
  2089                           ;statesModify.c: 148:     LCDPutStr("MODIFIES MINUTE");
  2090  00156E  0E33               	movlw	low STR_3
  2091  001570  6E30               	movwf	LCDPutStr@ptr^0,c
  2092  001572  0E10               	movlw	high STR_3
  2093  001574  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2094  001576  EC41  F010         	call	_LCDPutStr	;wreg free
  2095  00157A                     
  2096                           ;statesModify.c: 149:     LCDPutInst(0xC0);
  2097  00157A  0EC0               	movlw	192
  2098  00157C  EC96  F00F         	call	_LCDPutInst
  2099  001580                     
  2100                           ;statesModify.c: 150:     LCDPutChar(hr/10+'0');
  2101  001580  C00D  F029         	movff	_hr,___awdiv@dividend
  2102  001584  C00E  F02A         	movff	_hr+1,___awdiv@dividend+1
  2103  001588  0E00               	movlw	0
  2104  00158A  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2105  00158C  0E0A               	movlw	10
  2106  00158E  6E2B               	movwf	___awdiv@divisor^0,c
  2107  001590  ECC1  F00D         	call	___awdiv	;wreg free
  2108  001594  5029               	movf	?___awdiv^0,w,c
  2109  001596  0F30               	addlw	48
  2110  001598  EC63  F00F         	call	_LCDPutChar
  2111  00159C                     
  2112                           ;statesModify.c: 151:     LCDPutChar(hr%10+'0');
  2113  00159C  C00D  F029         	movff	_hr,___awmod@dividend
  2114  0015A0  C00E  F02A         	movff	_hr+1,___awmod@dividend+1
  2115  0015A4  0E00               	movlw	0
  2116  0015A6  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2117  0015A8  0E0A               	movlw	10
  2118  0015AA  6E2B               	movwf	___awmod@divisor^0,c
  2119  0015AC  EC84  F00E         	call	___awmod	;wreg free
  2120  0015B0  5029               	movf	?___awmod^0,w,c
  2121  0015B2  0F30               	addlw	48
  2122  0015B4  EC63  F00F         	call	_LCDPutChar
  2123  0015B8                     
  2124                           ;statesModify.c: 152:     LCDPutChar(':');
  2125  0015B8  0E3A               	movlw	58
  2126  0015BA  EC63  F00F         	call	_LCDPutChar
  2127  0015BE                     
  2128                           ;statesModify.c: 153:     LCDPutChar(min/10+'0');
  2129  0015BE  C00F  F029         	movff	_min,___awdiv@dividend
  2130  0015C2  C010  F02A         	movff	_min+1,___awdiv@dividend+1
  2131  0015C6  0E00               	movlw	0
  2132  0015C8  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2133  0015CA  0E0A               	movlw	10
  2134  0015CC  6E2B               	movwf	___awdiv@divisor^0,c
  2135  0015CE  ECC1  F00D         	call	___awdiv	;wreg free
  2136  0015D2  5029               	movf	?___awdiv^0,w,c
  2137  0015D4  0F30               	addlw	48
  2138  0015D6  EC63  F00F         	call	_LCDPutChar
  2139  0015DA                     
  2140                           ;statesModify.c: 154:     LCDPutChar(min%10+'0');
  2141  0015DA  C00F  F029         	movff	_min,___awmod@dividend
  2142  0015DE  C010  F02A         	movff	_min+1,___awmod@dividend+1
  2143  0015E2  0E00               	movlw	0
  2144  0015E4  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2145  0015E6  0E0A               	movlw	10
  2146  0015E8  6E2B               	movwf	___awmod@divisor^0,c
  2147  0015EA  EC84  F00E         	call	___awmod	;wreg free
  2148  0015EE  5029               	movf	?___awmod^0,w,c
  2149  0015F0  0F30               	addlw	48
  2150  0015F2  EC63  F00F         	call	_LCDPutChar
  2151  0015F6                     
  2152                           ;statesModify.c: 155:     LCDPutChar(':');
  2153  0015F6  0E3A               	movlw	58
  2154  0015F8  EC63  F00F         	call	_LCDPutChar
  2155  0015FC                     
  2156                           ;statesModify.c: 156:     if (count10ms >= (20/4)) {
  2157  0015FC  BE16               	btfsc	(_count10ms+1)^0,7,c
  2158  0015FE  EF0A  F00B         	goto	u971
  2159  001602  5016               	movf	(_count10ms+1)^0,w,c
  2160  001604  E109               	bnz	u970
  2161  001606  0E05               	movlw	5
  2162  001608  5C15               	subwf	_count10ms^0,w,c
  2163  00160A  A0D8               	btfss	status,0,c
  2164  00160C  EF0A  F00B         	goto	u971
  2165  001610  EF0C  F00B         	goto	u970
  2166  001614                     u971:
  2167  001614  EF47  F00B         	goto	l410
  2168  001618                     u970:
  2169  001618                     
  2170                           ;statesModify.c: 157:         count10ms = 0;
  2171  001618  0E00               	movlw	0
  2172  00161A  6E16               	movwf	(_count10ms+1)^0,c
  2173  00161C  0E00               	movlw	0
  2174  00161E  6E15               	movwf	_count10ms^0,c
  2175  001620                     
  2176                           ;statesModify.c: 158:             if (blink == 0) {
  2177  001620  500B               	movf	_blink^0,w,c
  2178  001622  100C               	iorwf	(_blink+1)^0,w,c
  2179  001624  A4D8               	btfss	status,2,c
  2180  001626  EF17  F00B         	goto	u981
  2181  00162A  EF19  F00B         	goto	u980
  2182  00162E                     u981:
  2183  00162E  EF21  F00B         	goto	l2107
  2184  001632                     u980:
  2185  001632                     
  2186                           ;statesModify.c: 159:                 LCDPutChar(' ');
  2187  001632  0E20               	movlw	32
  2188  001634  EC63  F00F         	call	_LCDPutChar
  2189                           
  2190                           ;statesModify.c: 160:                 LCDPutChar(' ');
  2191  001638  0E20               	movlw	32
  2192  00163A  EC63  F00F         	call	_LCDPutChar
  2193                           
  2194                           ;statesModify.c: 161:             } else {
  2195  00163E  EF3D  F00B         	goto	l2109
  2196  001642                     l2107:
  2197                           
  2198                           ;statesModify.c: 162:                 LCDPutChar(sec/10+'0');
  2199  001642  C011  F029         	movff	_sec,___awdiv@dividend
  2200  001646  C012  F02A         	movff	_sec+1,___awdiv@dividend+1
  2201  00164A  0E00               	movlw	0
  2202  00164C  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2203  00164E  0E0A               	movlw	10
  2204  001650  6E2B               	movwf	___awdiv@divisor^0,c
  2205  001652  ECC1  F00D         	call	___awdiv	;wreg free
  2206  001656  5029               	movf	?___awdiv^0,w,c
  2207  001658  0F30               	addlw	48
  2208  00165A  EC63  F00F         	call	_LCDPutChar
  2209                           
  2210                           ;statesModify.c: 163:                 LCDPutChar(sec%10+'0');
  2211  00165E  C011  F029         	movff	_sec,___awmod@dividend
  2212  001662  C012  F02A         	movff	_sec+1,___awmod@dividend+1
  2213  001666  0E00               	movlw	0
  2214  001668  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2215  00166A  0E0A               	movlw	10
  2216  00166C  6E2B               	movwf	___awmod@divisor^0,c
  2217  00166E  EC84  F00E         	call	___awmod	;wreg free
  2218  001672  5029               	movf	?___awmod^0,w,c
  2219  001674  0F30               	addlw	48
  2220  001676  EC63  F00F         	call	_LCDPutChar
  2221  00167A                     l2109:
  2222                           
  2223                           ;statesModify.c: 165:             blink = (blink + 1) % 2;
  2224  00167A  0E01               	movlw	1
  2225  00167C  240B               	addwf	_blink^0,w,c
  2226  00167E  6E32               	movwf	??_displayModSecond^0,c
  2227  001680  0E00               	movlw	0
  2228  001682  200C               	addwfc	(_blink+1)^0,w,c
  2229  001684  6E33               	movwf	(??_displayModSecond+1)^0,c
  2230  001686  0E01               	movlw	1
  2231  001688  1432               	andwf	??_displayModSecond^0,w,c
  2232  00168A  6E0B               	movwf	_blink^0,c
  2233  00168C  6A0C               	clrf	(_blink+1)^0,c
  2234  00168E                     l410:
  2235  00168E  0012               	return		;funcret
  2236  001690                     __end_of_displayModSecond:
  2237                           	opt callstack 0
  2238                           
  2239 ;; *************** function _displayModMinute *****************
  2240 ;; Defined at:
  2241 ;;		line 123 in file "statesModify.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;		None
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:        2 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    7
  2262 ;; This function calls:
  2263 ;;		_LCDPutChar
  2264 ;;		_LCDPutInst
  2265 ;;		_LCDPutStr
  2266 ;;		___awdiv
  2267 ;;		___awmod
  2268 ;; This function is called by:
  2269 ;;		_main
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text11
  2274  001690                     __ptext11:
  2275                           	opt callstack 0
  2276  001690                     _displayModMinute:
  2277                           	opt callstack 23
  2278  001690                     
  2279                           ;statesModify.c: 124:     LCDPutInst(0x80);
  2280  001690  0E80               	movlw	128
  2281  001692  EC96  F00F         	call	_LCDPutInst
  2282  001696                     
  2283                           ;statesModify.c: 125:     LCDPutStr("MODIFIES MINUTE");
  2284  001696  0E33               	movlw	low STR_3
  2285  001698  6E30               	movwf	LCDPutStr@ptr^0,c
  2286  00169A  0E10               	movlw	high STR_3
  2287  00169C  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2288  00169E  EC41  F010         	call	_LCDPutStr	;wreg free
  2289  0016A2                     
  2290                           ;statesModify.c: 126:     LCDPutInst(0xC0);
  2291  0016A2  0EC0               	movlw	192
  2292  0016A4  EC96  F00F         	call	_LCDPutInst
  2293  0016A8                     
  2294                           ;statesModify.c: 127:     LCDPutChar(hr/10+'0');
  2295  0016A8  C00D  F029         	movff	_hr,___awdiv@dividend
  2296  0016AC  C00E  F02A         	movff	_hr+1,___awdiv@dividend+1
  2297  0016B0  0E00               	movlw	0
  2298  0016B2  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2299  0016B4  0E0A               	movlw	10
  2300  0016B6  6E2B               	movwf	___awdiv@divisor^0,c
  2301  0016B8  ECC1  F00D         	call	___awdiv	;wreg free
  2302  0016BC  5029               	movf	?___awdiv^0,w,c
  2303  0016BE  0F30               	addlw	48
  2304  0016C0  EC63  F00F         	call	_LCDPutChar
  2305  0016C4                     
  2306                           ;statesModify.c: 128:     LCDPutChar(hr%10+'0');
  2307  0016C4  C00D  F029         	movff	_hr,___awmod@dividend
  2308  0016C8  C00E  F02A         	movff	_hr+1,___awmod@dividend+1
  2309  0016CC  0E00               	movlw	0
  2310  0016CE  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2311  0016D0  0E0A               	movlw	10
  2312  0016D2  6E2B               	movwf	___awmod@divisor^0,c
  2313  0016D4  EC84  F00E         	call	___awmod	;wreg free
  2314  0016D8  5029               	movf	?___awmod^0,w,c
  2315  0016DA  0F30               	addlw	48
  2316  0016DC  EC63  F00F         	call	_LCDPutChar
  2317  0016E0                     
  2318                           ;statesModify.c: 129:     LCDPutChar(':');
  2319  0016E0  0E3A               	movlw	58
  2320  0016E2  EC63  F00F         	call	_LCDPutChar
  2321  0016E6                     
  2322                           ;statesModify.c: 130:     if (count10ms >= (20/4)) {
  2323  0016E6  BE16               	btfsc	(_count10ms+1)^0,7,c
  2324  0016E8  EF7F  F00B         	goto	u951
  2325  0016EC  5016               	movf	(_count10ms+1)^0,w,c
  2326  0016EE  E109               	bnz	u950
  2327  0016F0  0E05               	movlw	5
  2328  0016F2  5C15               	subwf	_count10ms^0,w,c
  2329  0016F4  A0D8               	btfss	status,0,c
  2330  0016F6  EF7F  F00B         	goto	u951
  2331  0016FA  EF81  F00B         	goto	u950
  2332  0016FE                     u951:
  2333  0016FE  EFBC  F00B         	goto	l2075
  2334  001702                     u950:
  2335  001702                     
  2336                           ;statesModify.c: 131:         count10ms = 0;
  2337  001702  0E00               	movlw	0
  2338  001704  6E16               	movwf	(_count10ms+1)^0,c
  2339  001706  0E00               	movlw	0
  2340  001708  6E15               	movwf	_count10ms^0,c
  2341  00170A                     
  2342                           ;statesModify.c: 132:             if (blink == 0) {
  2343  00170A  500B               	movf	_blink^0,w,c
  2344  00170C  100C               	iorwf	(_blink+1)^0,w,c
  2345  00170E  A4D8               	btfss	status,2,c
  2346  001710  EF8C  F00B         	goto	u961
  2347  001714  EF8E  F00B         	goto	u960
  2348  001718                     u961:
  2349  001718  EF96  F00B         	goto	l2071
  2350  00171C                     u960:
  2351  00171C                     
  2352                           ;statesModify.c: 133:                 LCDPutChar(' ');
  2353  00171C  0E20               	movlw	32
  2354  00171E  EC63  F00F         	call	_LCDPutChar
  2355                           
  2356                           ;statesModify.c: 134:                 LCDPutChar(' ');
  2357  001722  0E20               	movlw	32
  2358  001724  EC63  F00F         	call	_LCDPutChar
  2359                           
  2360                           ;statesModify.c: 135:             } else {
  2361  001728  EFB2  F00B         	goto	l2073
  2362  00172C                     l2071:
  2363                           
  2364                           ;statesModify.c: 136:                 LCDPutChar(min/10+'0');
  2365  00172C  C00F  F029         	movff	_min,___awdiv@dividend
  2366  001730  C010  F02A         	movff	_min+1,___awdiv@dividend+1
  2367  001734  0E00               	movlw	0
  2368  001736  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2369  001738  0E0A               	movlw	10
  2370  00173A  6E2B               	movwf	___awdiv@divisor^0,c
  2371  00173C  ECC1  F00D         	call	___awdiv	;wreg free
  2372  001740  5029               	movf	?___awdiv^0,w,c
  2373  001742  0F30               	addlw	48
  2374  001744  EC63  F00F         	call	_LCDPutChar
  2375                           
  2376                           ;statesModify.c: 137:                 LCDPutChar(min%10+'0');
  2377  001748  C00F  F029         	movff	_min,___awmod@dividend
  2378  00174C  C010  F02A         	movff	_min+1,___awmod@dividend+1
  2379  001750  0E00               	movlw	0
  2380  001752  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2381  001754  0E0A               	movlw	10
  2382  001756  6E2B               	movwf	___awmod@divisor^0,c
  2383  001758  EC84  F00E         	call	___awmod	;wreg free
  2384  00175C  5029               	movf	?___awmod^0,w,c
  2385  00175E  0F30               	addlw	48
  2386  001760  EC63  F00F         	call	_LCDPutChar
  2387  001764                     l2073:
  2388                           
  2389                           ;statesModify.c: 139:             blink = (blink + 1) % 2;
  2390  001764  0E01               	movlw	1
  2391  001766  240B               	addwf	_blink^0,w,c
  2392  001768  6E32               	movwf	??_displayModMinute^0,c
  2393  00176A  0E00               	movlw	0
  2394  00176C  200C               	addwfc	(_blink+1)^0,w,c
  2395  00176E  6E33               	movwf	(??_displayModMinute+1)^0,c
  2396  001770  0E01               	movlw	1
  2397  001772  1432               	andwf	??_displayModMinute^0,w,c
  2398  001774  6E0B               	movwf	_blink^0,c
  2399  001776  6A0C               	clrf	(_blink+1)^0,c
  2400  001778                     l2075:
  2401                           
  2402                           ;statesModify.c: 141:     LCDPutChar(':');
  2403  001778  0E3A               	movlw	58
  2404  00177A  EC63  F00F         	call	_LCDPutChar
  2405  00177E                     
  2406                           ;statesModify.c: 142:     LCDPutChar(sec/10+'0');
  2407  00177E  C011  F029         	movff	_sec,___awdiv@dividend
  2408  001782  C012  F02A         	movff	_sec+1,___awdiv@dividend+1
  2409  001786  0E00               	movlw	0
  2410  001788  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2411  00178A  0E0A               	movlw	10
  2412  00178C  6E2B               	movwf	___awdiv@divisor^0,c
  2413  00178E  ECC1  F00D         	call	___awdiv	;wreg free
  2414  001792  5029               	movf	?___awdiv^0,w,c
  2415  001794  0F30               	addlw	48
  2416  001796  EC63  F00F         	call	_LCDPutChar
  2417  00179A                     
  2418                           ;statesModify.c: 143:     LCDPutChar(sec%10+'0');
  2419  00179A  C011  F029         	movff	_sec,___awmod@dividend
  2420  00179E  C012  F02A         	movff	_sec+1,___awmod@dividend+1
  2421  0017A2  0E00               	movlw	0
  2422  0017A4  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2423  0017A6  0E0A               	movlw	10
  2424  0017A8  6E2B               	movwf	___awmod@divisor^0,c
  2425  0017AA  EC84  F00E         	call	___awmod	;wreg free
  2426  0017AE  5029               	movf	?___awmod^0,w,c
  2427  0017B0  0F30               	addlw	48
  2428  0017B2  EC63  F00F         	call	_LCDPutChar
  2429  0017B6  0012               	return		;funcret
  2430  0017B8                     __end_of_displayModMinute:
  2431                           	opt callstack 0
  2432                           
  2433 ;; *************** function _displayModHour *****************
  2434 ;; Defined at:
  2435 ;;		line 100 in file "statesModify.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      void 
  2442 ;; Registers used:
  2443 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;Total ram usage:        2 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; Hardware stack levels required when called:    7
  2456 ;; This function calls:
  2457 ;;		_LCDPutChar
  2458 ;;		_LCDPutInst
  2459 ;;		_LCDPutStr
  2460 ;;		___awdiv
  2461 ;;		___awmod
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text12
  2468  0017B8                     __ptext12:
  2469                           	opt callstack 0
  2470  0017B8                     _displayModHour:
  2471                           	opt callstack 23
  2472  0017B8                     
  2473                           ;statesModify.c: 101:     LCDPutInst(0x80);
  2474  0017B8  0E80               	movlw	128
  2475  0017BA  EC96  F00F         	call	_LCDPutInst
  2476  0017BE                     
  2477                           ;statesModify.c: 102:     LCDPutStr(" MODIFIES HOUR ");
  2478  0017BE  0E23               	movlw	low STR_2
  2479  0017C0  6E30               	movwf	LCDPutStr@ptr^0,c
  2480  0017C2  0E10               	movlw	high STR_2
  2481  0017C4  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2482  0017C6  EC41  F010         	call	_LCDPutStr	;wreg free
  2483  0017CA                     
  2484                           ;statesModify.c: 103:     LCDPutInst(0xC0);
  2485  0017CA  0EC0               	movlw	192
  2486  0017CC  EC96  F00F         	call	_LCDPutInst
  2487  0017D0                     
  2488                           ;statesModify.c: 104:     if (count10ms >= (20/4)) {
  2489  0017D0  BE16               	btfsc	(_count10ms+1)^0,7,c
  2490  0017D2  EFF4  F00B         	goto	u931
  2491  0017D6  5016               	movf	(_count10ms+1)^0,w,c
  2492  0017D8  E109               	bnz	u930
  2493  0017DA  0E05               	movlw	5
  2494  0017DC  5C15               	subwf	_count10ms^0,w,c
  2495  0017DE  A0D8               	btfss	status,0,c
  2496  0017E0  EFF4  F00B         	goto	u931
  2497  0017E4  EFF6  F00B         	goto	u930
  2498  0017E8                     u931:
  2499  0017E8  EF31  F00C         	goto	l2039
  2500  0017EC                     u930:
  2501  0017EC                     
  2502                           ;statesModify.c: 105:         count10ms = 0;
  2503  0017EC  0E00               	movlw	0
  2504  0017EE  6E16               	movwf	(_count10ms+1)^0,c
  2505  0017F0  0E00               	movlw	0
  2506  0017F2  6E15               	movwf	_count10ms^0,c
  2507  0017F4                     
  2508                           ;statesModify.c: 106:             if (blink == 0) {
  2509  0017F4  500B               	movf	_blink^0,w,c
  2510  0017F6  100C               	iorwf	(_blink+1)^0,w,c
  2511  0017F8  A4D8               	btfss	status,2,c
  2512  0017FA  EF01  F00C         	goto	u941
  2513  0017FE  EF03  F00C         	goto	u940
  2514  001802                     u941:
  2515  001802  EF0B  F00C         	goto	l2035
  2516  001806                     u940:
  2517  001806                     
  2518                           ;statesModify.c: 107:                 LCDPutChar(' ');
  2519  001806  0E20               	movlw	32
  2520  001808  EC63  F00F         	call	_LCDPutChar
  2521                           
  2522                           ;statesModify.c: 108:                 LCDPutChar(' ');
  2523  00180C  0E20               	movlw	32
  2524  00180E  EC63  F00F         	call	_LCDPutChar
  2525                           
  2526                           ;statesModify.c: 109:             } else {
  2527  001812  EF27  F00C         	goto	l2037
  2528  001816                     l2035:
  2529                           
  2530                           ;statesModify.c: 110:                 LCDPutChar(hr/10+'0');
  2531  001816  C00D  F029         	movff	_hr,___awdiv@dividend
  2532  00181A  C00E  F02A         	movff	_hr+1,___awdiv@dividend+1
  2533  00181E  0E00               	movlw	0
  2534  001820  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2535  001822  0E0A               	movlw	10
  2536  001824  6E2B               	movwf	___awdiv@divisor^0,c
  2537  001826  ECC1  F00D         	call	___awdiv	;wreg free
  2538  00182A  5029               	movf	?___awdiv^0,w,c
  2539  00182C  0F30               	addlw	48
  2540  00182E  EC63  F00F         	call	_LCDPutChar
  2541                           
  2542                           ;statesModify.c: 111:                 LCDPutChar(hr%10+'0');
  2543  001832  C00D  F029         	movff	_hr,___awmod@dividend
  2544  001836  C00E  F02A         	movff	_hr+1,___awmod@dividend+1
  2545  00183A  0E00               	movlw	0
  2546  00183C  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2547  00183E  0E0A               	movlw	10
  2548  001840  6E2B               	movwf	___awmod@divisor^0,c
  2549  001842  EC84  F00E         	call	___awmod	;wreg free
  2550  001846  5029               	movf	?___awmod^0,w,c
  2551  001848  0F30               	addlw	48
  2552  00184A  EC63  F00F         	call	_LCDPutChar
  2553  00184E                     l2037:
  2554                           
  2555                           ;statesModify.c: 113:             blink = (blink + 1) % 2;
  2556  00184E  0E01               	movlw	1
  2557  001850  240B               	addwf	_blink^0,w,c
  2558  001852  6E32               	movwf	??_displayModHour^0,c
  2559  001854  0E00               	movlw	0
  2560  001856  200C               	addwfc	(_blink+1)^0,w,c
  2561  001858  6E33               	movwf	(??_displayModHour+1)^0,c
  2562  00185A  0E01               	movlw	1
  2563  00185C  1432               	andwf	??_displayModHour^0,w,c
  2564  00185E  6E0B               	movwf	_blink^0,c
  2565  001860  6A0C               	clrf	(_blink+1)^0,c
  2566  001862                     l2039:
  2567                           
  2568                           ;statesModify.c: 115:     LCDPutChar(':');
  2569  001862  0E3A               	movlw	58
  2570  001864  EC63  F00F         	call	_LCDPutChar
  2571  001868                     
  2572                           ;statesModify.c: 116:     LCDPutChar(min/10+'0');
  2573  001868  C00F  F029         	movff	_min,___awdiv@dividend
  2574  00186C  C010  F02A         	movff	_min+1,___awdiv@dividend+1
  2575  001870  0E00               	movlw	0
  2576  001872  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2577  001874  0E0A               	movlw	10
  2578  001876  6E2B               	movwf	___awdiv@divisor^0,c
  2579  001878  ECC1  F00D         	call	___awdiv	;wreg free
  2580  00187C  5029               	movf	?___awdiv^0,w,c
  2581  00187E  0F30               	addlw	48
  2582  001880  EC63  F00F         	call	_LCDPutChar
  2583  001884                     
  2584                           ;statesModify.c: 117:     LCDPutChar(min%10+'0');
  2585  001884  C00F  F029         	movff	_min,___awmod@dividend
  2586  001888  C010  F02A         	movff	_min+1,___awmod@dividend+1
  2587  00188C  0E00               	movlw	0
  2588  00188E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2589  001890  0E0A               	movlw	10
  2590  001892  6E2B               	movwf	___awmod@divisor^0,c
  2591  001894  EC84  F00E         	call	___awmod	;wreg free
  2592  001898  5029               	movf	?___awmod^0,w,c
  2593  00189A  0F30               	addlw	48
  2594  00189C  EC63  F00F         	call	_LCDPutChar
  2595  0018A0                     
  2596                           ;statesModify.c: 118:     LCDPutChar(':');
  2597  0018A0  0E3A               	movlw	58
  2598  0018A2  EC63  F00F         	call	_LCDPutChar
  2599  0018A6                     
  2600                           ;statesModify.c: 119:     LCDPutChar(sec/10+'0');
  2601  0018A6  C011  F029         	movff	_sec,___awdiv@dividend
  2602  0018AA  C012  F02A         	movff	_sec+1,___awdiv@dividend+1
  2603  0018AE  0E00               	movlw	0
  2604  0018B0  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2605  0018B2  0E0A               	movlw	10
  2606  0018B4  6E2B               	movwf	___awdiv@divisor^0,c
  2607  0018B6  ECC1  F00D         	call	___awdiv	;wreg free
  2608  0018BA  5029               	movf	?___awdiv^0,w,c
  2609  0018BC  0F30               	addlw	48
  2610  0018BE  EC63  F00F         	call	_LCDPutChar
  2611  0018C2                     
  2612                           ;statesModify.c: 120:     LCDPutChar(sec%10+'0');
  2613  0018C2  C011  F029         	movff	_sec,___awmod@dividend
  2614  0018C6  C012  F02A         	movff	_sec+1,___awmod@dividend+1
  2615  0018CA  0E00               	movlw	0
  2616  0018CC  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2617  0018CE  0E0A               	movlw	10
  2618  0018D0  6E2B               	movwf	___awmod@divisor^0,c
  2619  0018D2  EC84  F00E         	call	___awmod	;wreg free
  2620  0018D6  5029               	movf	?___awmod^0,w,c
  2621  0018D8  0F30               	addlw	48
  2622  0018DA  EC63  F00F         	call	_LCDPutChar
  2623  0018DE  0012               	return		;funcret
  2624  0018E0                     __end_of_displayModHour:
  2625                           	opt callstack 0
  2626                           
  2627 ;; *************** function _displayClock *****************
  2628 ;; Defined at:
  2629 ;;		line 23 in file "stateClock.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    7
  2650 ;; This function calls:
  2651 ;;		_LCDPutChar
  2652 ;;		_LCDPutInst
  2653 ;;		_LCDPutStr
  2654 ;;		___awdiv
  2655 ;;		___awmod
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text13
  2662  001AB4                     __ptext13:
  2663                           	opt callstack 0
  2664  001AB4                     _displayClock:
  2665                           	opt callstack 23
  2666  001AB4                     
  2667                           ;stateClock.c: 25:         LCDPutInst(0x80);
  2668  001AB4  0E80               	movlw	128
  2669  001AB6  EC96  F00F         	call	_LCDPutInst
  2670  001ABA                     
  2671                           ;stateClock.c: 26:         LCDPutStr("  NORMAL CLOCK  ");
  2672  001ABA  0E12               	movlw	low STR_1
  2673  001ABC  6E30               	movwf	LCDPutStr@ptr^0,c
  2674  001ABE  0E10               	movlw	high STR_1
  2675  001AC0  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2676  001AC2  EC41  F010         	call	_LCDPutStr	;wreg free
  2677  001AC6                     
  2678                           ;stateClock.c: 27:         LCDPutInst(0xC0);
  2679  001AC6  0EC0               	movlw	192
  2680  001AC8  EC96  F00F         	call	_LCDPutInst
  2681  001ACC                     
  2682                           ;stateClock.c: 28:         LCDPutChar(hr/10+'0');
  2683  001ACC  C00D  F029         	movff	_hr,___awdiv@dividend
  2684  001AD0  C00E  F02A         	movff	_hr+1,___awdiv@dividend+1
  2685  001AD4  0E00               	movlw	0
  2686  001AD6  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2687  001AD8  0E0A               	movlw	10
  2688  001ADA  6E2B               	movwf	___awdiv@divisor^0,c
  2689  001ADC  ECC1  F00D         	call	___awdiv	;wreg free
  2690  001AE0  5029               	movf	?___awdiv^0,w,c
  2691  001AE2  0F30               	addlw	48
  2692  001AE4  EC63  F00F         	call	_LCDPutChar
  2693  001AE8                     
  2694                           ;stateClock.c: 29:         LCDPutChar(hr%10+'0');
  2695  001AE8  C00D  F029         	movff	_hr,___awmod@dividend
  2696  001AEC  C00E  F02A         	movff	_hr+1,___awmod@dividend+1
  2697  001AF0  0E00               	movlw	0
  2698  001AF2  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2699  001AF4  0E0A               	movlw	10
  2700  001AF6  6E2B               	movwf	___awmod@divisor^0,c
  2701  001AF8  EC84  F00E         	call	___awmod	;wreg free
  2702  001AFC  5029               	movf	?___awmod^0,w,c
  2703  001AFE  0F30               	addlw	48
  2704  001B00  EC63  F00F         	call	_LCDPutChar
  2705  001B04                     
  2706                           ;stateClock.c: 30:         LCDPutChar(':');
  2707  001B04  0E3A               	movlw	58
  2708  001B06  EC63  F00F         	call	_LCDPutChar
  2709  001B0A                     
  2710                           ;stateClock.c: 31:         LCDPutChar(min/10+'0');
  2711  001B0A  C00F  F029         	movff	_min,___awdiv@dividend
  2712  001B0E  C010  F02A         	movff	_min+1,___awdiv@dividend+1
  2713  001B12  0E00               	movlw	0
  2714  001B14  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2715  001B16  0E0A               	movlw	10
  2716  001B18  6E2B               	movwf	___awdiv@divisor^0,c
  2717  001B1A  ECC1  F00D         	call	___awdiv	;wreg free
  2718  001B1E  5029               	movf	?___awdiv^0,w,c
  2719  001B20  0F30               	addlw	48
  2720  001B22  EC63  F00F         	call	_LCDPutChar
  2721  001B26                     
  2722                           ;stateClock.c: 32:         LCDPutChar(min%10+'0');
  2723  001B26  C00F  F029         	movff	_min,___awmod@dividend
  2724  001B2A  C010  F02A         	movff	_min+1,___awmod@dividend+1
  2725  001B2E  0E00               	movlw	0
  2726  001B30  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2727  001B32  0E0A               	movlw	10
  2728  001B34  6E2B               	movwf	___awmod@divisor^0,c
  2729  001B36  EC84  F00E         	call	___awmod	;wreg free
  2730  001B3A  5029               	movf	?___awmod^0,w,c
  2731  001B3C  0F30               	addlw	48
  2732  001B3E  EC63  F00F         	call	_LCDPutChar
  2733  001B42                     
  2734                           ;stateClock.c: 33:         LCDPutChar(':');
  2735  001B42  0E3A               	movlw	58
  2736  001B44  EC63  F00F         	call	_LCDPutChar
  2737  001B48                     
  2738                           ;stateClock.c: 34:         LCDPutChar(sec/10+'0');
  2739  001B48  C011  F029         	movff	_sec,___awdiv@dividend
  2740  001B4C  C012  F02A         	movff	_sec+1,___awdiv@dividend+1
  2741  001B50  0E00               	movlw	0
  2742  001B52  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2743  001B54  0E0A               	movlw	10
  2744  001B56  6E2B               	movwf	___awdiv@divisor^0,c
  2745  001B58  ECC1  F00D         	call	___awdiv	;wreg free
  2746  001B5C  5029               	movf	?___awdiv^0,w,c
  2747  001B5E  0F30               	addlw	48
  2748  001B60  EC63  F00F         	call	_LCDPutChar
  2749  001B64                     
  2750                           ;stateClock.c: 35:         LCDPutChar(sec%10+'0');
  2751  001B64  C011  F029         	movff	_sec,___awmod@dividend
  2752  001B68  C012  F02A         	movff	_sec+1,___awmod@dividend+1
  2753  001B6C  0E00               	movlw	0
  2754  001B6E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2755  001B70  0E0A               	movlw	10
  2756  001B72  6E2B               	movwf	___awmod@divisor^0,c
  2757  001B74  EC84  F00E         	call	___awmod	;wreg free
  2758  001B78  5029               	movf	?___awmod^0,w,c
  2759  001B7A  0F30               	addlw	48
  2760  001B7C  EC63  F00F         	call	_LCDPutChar
  2761  001B80  0012               	return		;funcret
  2762  001B82                     __end_of_displayClock:
  2763                           	opt callstack 0
  2764                           
  2765 ;; *************** function ___awmod *****************
  2766 ;; Defined at:
  2767 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  dividend        2    8[COMRAM] int 
  2770 ;;  divisor         2   10[COMRAM] int 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  sign            1   13[COMRAM] unsigned char 
  2773 ;;  counter         1   12[COMRAM] unsigned char 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  2    8[COMRAM] int 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;Total ram usage:        6 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    3
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_displayClock
  2794 ;;		_displayModHour
  2795 ;;		_displayModMinute
  2796 ;;		_displayModSecond
  2797 ;;		_displayStpWatch
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text14
  2802  001D08                     __ptext14:
  2803                           	opt callstack 0
  2804  001D08                     ___awmod:
  2805                           	opt callstack 26
  2806  001D08  0E00               	movlw	0
  2807  001D0A  6E2E               	movwf	___awmod@sign^0,c
  2808  001D0C  BE2A               	btfsc	(___awmod@dividend+1)^0,7,c
  2809  001D0E  EF8D  F00E         	goto	u870
  2810  001D12  EF8B  F00E         	goto	u871
  2811  001D16                     u871:
  2812  001D16  EF93  F00E         	goto	l1943
  2813  001D1A                     u870:
  2814  001D1A  6C29               	negf	___awmod@dividend^0,c
  2815  001D1C  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  2816  001D1E  B0D8               	btfsc	status,0,c
  2817  001D20  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  2818  001D22  0E01               	movlw	1
  2819  001D24  6E2E               	movwf	___awmod@sign^0,c
  2820  001D26                     l1943:
  2821  001D26  BE2C               	btfsc	(___awmod@divisor+1)^0,7,c
  2822  001D28  EF9A  F00E         	goto	u880
  2823  001D2C  EF98  F00E         	goto	u881
  2824  001D30                     u881:
  2825  001D30  EF9E  F00E         	goto	l1947
  2826  001D34                     u880:
  2827  001D34  6C2B               	negf	___awmod@divisor^0,c
  2828  001D36  1E2C               	comf	(___awmod@divisor+1)^0,f,c
  2829  001D38  B0D8               	btfsc	status,0,c
  2830  001D3A  2A2C               	incf	(___awmod@divisor+1)^0,f,c
  2831  001D3C                     l1947:
  2832  001D3C  502B               	movf	___awmod@divisor^0,w,c
  2833  001D3E  102C               	iorwf	(___awmod@divisor+1)^0,w,c
  2834  001D40  B4D8               	btfsc	status,2,c
  2835  001D42  EFA5  F00E         	goto	u891
  2836  001D46  EFA7  F00E         	goto	u890
  2837  001D4A                     u891:
  2838  001D4A  EFCB  F00E         	goto	l1963
  2839  001D4E                     u890:
  2840  001D4E  0E01               	movlw	1
  2841  001D50  6E2D               	movwf	___awmod@counter^0,c
  2842  001D52  EFAF  F00E         	goto	l1953
  2843  001D56                     l1951:
  2844  001D56  90D8               	bcf	status,0,c
  2845  001D58  362B               	rlcf	___awmod@divisor^0,f,c
  2846  001D5A  362C               	rlcf	(___awmod@divisor+1)^0,f,c
  2847  001D5C  2A2D               	incf	___awmod@counter^0,f,c
  2848  001D5E                     l1953:
  2849  001D5E  AE2C               	btfss	(___awmod@divisor+1)^0,7,c
  2850  001D60  EFB4  F00E         	goto	u901
  2851  001D64  EFB6  F00E         	goto	u900
  2852  001D68                     u901:
  2853  001D68  EFAB  F00E         	goto	l1951
  2854  001D6C                     u900:
  2855  001D6C                     l1955:
  2856  001D6C  502B               	movf	___awmod@divisor^0,w,c
  2857  001D6E  5C29               	subwf	___awmod@dividend^0,w,c
  2858  001D70  502C               	movf	(___awmod@divisor+1)^0,w,c
  2859  001D72  582A               	subwfb	(___awmod@dividend+1)^0,w,c
  2860  001D74  A0D8               	btfss	status,0,c
  2861  001D76  EFBF  F00E         	goto	u911
  2862  001D7A  EFC1  F00E         	goto	u910
  2863  001D7E                     u911:
  2864  001D7E  EFC5  F00E         	goto	l1959
  2865  001D82                     u910:
  2866  001D82  502B               	movf	___awmod@divisor^0,w,c
  2867  001D84  5E29               	subwf	___awmod@dividend^0,f,c
  2868  001D86  502C               	movf	(___awmod@divisor+1)^0,w,c
  2869  001D88  5A2A               	subwfb	(___awmod@dividend+1)^0,f,c
  2870  001D8A                     l1959:
  2871  001D8A  90D8               	bcf	status,0,c
  2872  001D8C  322C               	rrcf	(___awmod@divisor+1)^0,f,c
  2873  001D8E  322B               	rrcf	___awmod@divisor^0,f,c
  2874  001D90  2E2D               	decfsz	___awmod@counter^0,f,c
  2875  001D92  EFB6  F00E         	goto	l1955
  2876  001D96                     l1963:
  2877  001D96  502E               	movf	___awmod@sign^0,w,c
  2878  001D98  B4D8               	btfsc	status,2,c
  2879  001D9A  EFD1  F00E         	goto	u921
  2880  001D9E  EFD3  F00E         	goto	u920
  2881  001DA2                     u921:
  2882  001DA2  EFD7  F00E         	goto	l1967
  2883  001DA6                     u920:
  2884  001DA6  6C29               	negf	___awmod@dividend^0,c
  2885  001DA8  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  2886  001DAA  B0D8               	btfsc	status,0,c
  2887  001DAC  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  2888  001DAE                     l1967:
  2889  001DAE  C029  F029         	movff	___awmod@dividend,?___awmod
  2890  001DB2  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  2891  001DB6  0012               	return		;funcret
  2892  001DB8                     __end_of___awmod:
  2893                           	opt callstack 0
  2894                           
  2895 ;; *************** function ___awdiv *****************
  2896 ;; Defined at:
  2897 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  dividend        2    8[COMRAM] int 
  2900 ;;  divisor         2   10[COMRAM] int 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  quotient        2   14[COMRAM] int 
  2903 ;;  sign            1   13[COMRAM] unsigned char 
  2904 ;;  counter         1   12[COMRAM] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  2    8[COMRAM] int 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2914 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;Total ram usage:        8 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    3
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_displayClock
  2925 ;;		_displayModHour
  2926 ;;		_displayModMinute
  2927 ;;		_displayModSecond
  2928 ;;		_displayStpWatch
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           	psect	text15
  2933  001B82                     __ptext15:
  2934                           	opt callstack 0
  2935  001B82                     ___awdiv:
  2936                           	opt callstack 26
  2937  001B82  0E00               	movlw	0
  2938  001B84  6E2E               	movwf	___awdiv@sign^0,c
  2939  001B86  BE2C               	btfsc	(___awdiv@divisor+1)^0,7,c
  2940  001B88  EFCA  F00D         	goto	u810
  2941  001B8C  EFC8  F00D         	goto	u811
  2942  001B90                     u811:
  2943  001B90  EFD0  F00D         	goto	l1899
  2944  001B94                     u810:
  2945  001B94  6C2B               	negf	___awdiv@divisor^0,c
  2946  001B96  1E2C               	comf	(___awdiv@divisor+1)^0,f,c
  2947  001B98  B0D8               	btfsc	status,0,c
  2948  001B9A  2A2C               	incf	(___awdiv@divisor+1)^0,f,c
  2949  001B9C  0E01               	movlw	1
  2950  001B9E  6E2E               	movwf	___awdiv@sign^0,c
  2951  001BA0                     l1899:
  2952  001BA0  BE2A               	btfsc	(___awdiv@dividend+1)^0,7,c
  2953  001BA2  EFD7  F00D         	goto	u820
  2954  001BA6  EFD5  F00D         	goto	u821
  2955  001BAA                     u821:
  2956  001BAA  EFDD  F00D         	goto	l1905
  2957  001BAE                     u820:
  2958  001BAE  6C29               	negf	___awdiv@dividend^0,c
  2959  001BB0  1E2A               	comf	(___awdiv@dividend+1)^0,f,c
  2960  001BB2  B0D8               	btfsc	status,0,c
  2961  001BB4  2A2A               	incf	(___awdiv@dividend+1)^0,f,c
  2962  001BB6  0E01               	movlw	1
  2963  001BB8  1A2E               	xorwf	___awdiv@sign^0,f,c
  2964  001BBA                     l1905:
  2965  001BBA  0E00               	movlw	0
  2966  001BBC  6E30               	movwf	(___awdiv@quotient+1)^0,c
  2967  001BBE  0E00               	movlw	0
  2968  001BC0  6E2F               	movwf	___awdiv@quotient^0,c
  2969  001BC2  502B               	movf	___awdiv@divisor^0,w,c
  2970  001BC4  102C               	iorwf	(___awdiv@divisor+1)^0,w,c
  2971  001BC6  B4D8               	btfsc	status,2,c
  2972  001BC8  EFE8  F00D         	goto	u831
  2973  001BCC  EFEA  F00D         	goto	u830
  2974  001BD0                     u831:
  2975  001BD0  EF12  F00E         	goto	l1927
  2976  001BD4                     u830:
  2977  001BD4  0E01               	movlw	1
  2978  001BD6  6E2D               	movwf	___awdiv@counter^0,c
  2979  001BD8  EFF2  F00D         	goto	l1913
  2980  001BDC                     l1911:
  2981  001BDC  90D8               	bcf	status,0,c
  2982  001BDE  362B               	rlcf	___awdiv@divisor^0,f,c
  2983  001BE0  362C               	rlcf	(___awdiv@divisor+1)^0,f,c
  2984  001BE2  2A2D               	incf	___awdiv@counter^0,f,c
  2985  001BE4                     l1913:
  2986  001BE4  AE2C               	btfss	(___awdiv@divisor+1)^0,7,c
  2987  001BE6  EFF7  F00D         	goto	u841
  2988  001BEA  EFF9  F00D         	goto	u840
  2989  001BEE                     u841:
  2990  001BEE  EFEE  F00D         	goto	l1911
  2991  001BF2                     u840:
  2992  001BF2                     l1915:
  2993  001BF2  90D8               	bcf	status,0,c
  2994  001BF4  362F               	rlcf	___awdiv@quotient^0,f,c
  2995  001BF6  3630               	rlcf	(___awdiv@quotient+1)^0,f,c
  2996  001BF8  502B               	movf	___awdiv@divisor^0,w,c
  2997  001BFA  5C29               	subwf	___awdiv@dividend^0,w,c
  2998  001BFC  502C               	movf	(___awdiv@divisor+1)^0,w,c
  2999  001BFE  582A               	subwfb	(___awdiv@dividend+1)^0,w,c
  3000  001C00  A0D8               	btfss	status,0,c
  3001  001C02  EF05  F00E         	goto	u851
  3002  001C06  EF07  F00E         	goto	u850
  3003  001C0A                     u851:
  3004  001C0A  EF0C  F00E         	goto	l1923
  3005  001C0E                     u850:
  3006  001C0E  502B               	movf	___awdiv@divisor^0,w,c
  3007  001C10  5E29               	subwf	___awdiv@dividend^0,f,c
  3008  001C12  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3009  001C14  5A2A               	subwfb	(___awdiv@dividend+1)^0,f,c
  3010  001C16  802F               	bsf	___awdiv@quotient^0,0,c
  3011  001C18                     l1923:
  3012  001C18  90D8               	bcf	status,0,c
  3013  001C1A  322C               	rrcf	(___awdiv@divisor+1)^0,f,c
  3014  001C1C  322B               	rrcf	___awdiv@divisor^0,f,c
  3015  001C1E  2E2D               	decfsz	___awdiv@counter^0,f,c
  3016  001C20  EFF9  F00D         	goto	l1915
  3017  001C24                     l1927:
  3018  001C24  502E               	movf	___awdiv@sign^0,w,c
  3019  001C26  B4D8               	btfsc	status,2,c
  3020  001C28  EF18  F00E         	goto	u861
  3021  001C2C  EF1A  F00E         	goto	u860
  3022  001C30                     u861:
  3023  001C30  EF1E  F00E         	goto	l1931
  3024  001C34                     u860:
  3025  001C34  6C2F               	negf	___awdiv@quotient^0,c
  3026  001C36  1E30               	comf	(___awdiv@quotient+1)^0,f,c
  3027  001C38  B0D8               	btfsc	status,0,c
  3028  001C3A  2A30               	incf	(___awdiv@quotient+1)^0,f,c
  3029  001C3C                     l1931:
  3030  001C3C  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  3031  001C40  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  3032  001C44  0012               	return		;funcret
  3033  001C46                     __end_of___awdiv:
  3034                           	opt callstack 0
  3035                           
  3036 ;; *************** function _LCDPutStr *****************
  3037 ;; Defined at:
  3038 ;;		line 198 in file "BBSPI_LCD.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  3041 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  3042 ;;		 -> STR_1(17), 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;Total ram usage:        2 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    6
  3061 ;; This function calls:
  3062 ;;		_LCDPutChar
  3063 ;; This function is called by:
  3064 ;;		_displayClock
  3065 ;;		_displayModHour
  3066 ;;		_displayModMinute
  3067 ;;		_displayModSecond
  3068 ;;		_displayStpWatch
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text16
  3073  002082                     __ptext16:
  3074                           	opt callstack 0
  3075  002082                     _LCDPutStr:
  3076                           	opt callstack 23
  3077  002082                     
  3078                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  3079  002082  EF4F  F010         	goto	l1889
  3080  002086                     l1885:
  3081  002086  C030  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3082  00208A  C031  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3083  00208E                     	if	0	;tblptru may be non-zero
  3084  00208E                     	endif
  3085  00208E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3086  00208E  0E00               	movlw	low (__mediumconst shr (0+16))
  3087  002090  6EF8               	movwf	tblptru,c
  3088  002092                     	endif
  3089  002092  0008               	tblrd		*
  3090  002094  50F5               	movf	tablat,w,c
  3091  002096  EC63  F00F         	call	_LCDPutChar
  3092  00209A  4A30               	infsnz	LCDPutStr@ptr^0,f,c
  3093  00209C  2A31               	incf	(LCDPutStr@ptr+1)^0,f,c
  3094  00209E                     l1889:
  3095  00209E  C030  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3096  0020A2  C031  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3097  0020A6                     	if	0	;tblptru may be non-zero
  3098  0020A6                     	endif
  3099  0020A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3100  0020A6  0E00               	movlw	low (__mediumconst shr (0+16))
  3101  0020A8  6EF8               	movwf	tblptru,c
  3102  0020AA                     	endif
  3103  0020AA  0008               	tblrd		*
  3104  0020AC  50F5               	movf	tablat,w,c
  3105  0020AE  0900               	iorlw	0
  3106  0020B0  A4D8               	btfss	status,2,c
  3107  0020B2  EF5D  F010         	goto	u801
  3108  0020B6  EF5F  F010         	goto	u800
  3109  0020BA                     u801:
  3110  0020BA  EF43  F010         	goto	l1885
  3111  0020BE                     u800:
  3112  0020BE  0012               	return		;funcret
  3113  0020C0                     __end_of_LCDPutStr:
  3114                           	opt callstack 0
  3115                           
  3116 ;; *************** function _LCDPutChar *****************
  3117 ;; Defined at:
  3118 ;;		line 160 in file "BBSPI_LCD.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  ch              1    wreg     unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  ch              1   14[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;Total ram usage:        2 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    5
  3139 ;; This function calls:
  3140 ;;		_WritePort_BBSPI
  3141 ;; This function is called by:
  3142 ;;		_LCDPutStr
  3143 ;;		_displayClock
  3144 ;;		_displayModHour
  3145 ;;		_displayModMinute
  3146 ;;		_displayModSecond
  3147 ;;		_displayStpWatch
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text17
  3152  001EC6                     __ptext17:
  3153                           	opt callstack 0
  3154  001EC6                     _LCDPutChar:
  3155                           	opt callstack 23
  3156                           
  3157                           ;incstack = 0
  3158                           ;LCDPutChar@ch stored from wreg
  3159  001EC6  6E2F               	movwf	LCDPutChar@ch^0,c
  3160  001EC8                     
  3161                           ;BBSPI_LCD.c: 160: void LCDPutChar (unsigned char ch);BBSPI_LCD.c: 161: {;BBSPI_LCD.c: 1
      +                          62:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3162  001EC8  0E11               	movlw	17
  3163  001ECA  6E2E               	movwf	??_LCDPutChar^0,c
  3164  001ECC  0E3A               	movlw	58
  3165  001ECE                     u1107:
  3166  001ECE  2EE8               	decfsz	wreg,f,c
  3167  001ED0  D7FE               	bra	u1107
  3168  001ED2  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3169  001ED4  D7FC               	bra	u1107
  3170  001ED6  D000               	nop2	
  3171  001ED8                     
  3172                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3173  001ED8  0E80               	movlw	128
  3174  001EDA  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3175  001EDC  0E12               	movlw	18
  3176  001EDE  ECA4  F010         	call	_WritePort_BBSPI
  3177  001EE2                     
  3178                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3179  001EE2  0E04               	movlw	4
  3180  001EE4  6E2E               	movwf	??_LCDPutChar^0,c
  3181  001EE6  0E3E               	movlw	62
  3182  001EE8                     u1117:
  3183  001EE8  2EE8               	decfsz	wreg,f,c
  3184  001EEA  D7FE               	bra	u1117
  3185  001EEC  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3186  001EEE  D7FC               	bra	u1117
  3187  001EF0                     
  3188                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3189  001EF0  C02F  F02C         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3190  001EF4  0E13               	movlw	19
  3191  001EF6  ECA4  F010         	call	_WritePort_BBSPI
  3192  001EFA                     
  3193                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3194  001EFA  0E04               	movlw	4
  3195  001EFC  6E2E               	movwf	??_LCDPutChar^0,c
  3196  001EFE  0E3E               	movlw	62
  3197  001F00                     u1127:
  3198  001F00  2EE8               	decfsz	wreg,f,c
  3199  001F02  D7FE               	bra	u1127
  3200  001F04  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3201  001F06  D7FC               	bra	u1127
  3202  001F08                     
  3203                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3204  001F08  0EC0               	movlw	192
  3205  001F0A  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3206  001F0C  0E12               	movlw	18
  3207  001F0E  ECA4  F010         	call	_WritePort_BBSPI
  3208  001F12                     
  3209                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3210  001F12  0E04               	movlw	4
  3211  001F14  6E2E               	movwf	??_LCDPutChar^0,c
  3212  001F16  0E3E               	movlw	62
  3213  001F18                     u1137:
  3214  001F18  2EE8               	decfsz	wreg,f,c
  3215  001F1A  D7FE               	bra	u1137
  3216  001F1C  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3217  001F1E  D7FC               	bra	u1137
  3218  001F20                     
  3219                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3220  001F20  0E00               	movlw	0
  3221  001F22  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3222  001F24  0E12               	movlw	18
  3223  001F26  ECA4  F010         	call	_WritePort_BBSPI
  3224  001F2A  0012               	return		;funcret
  3225  001F2C                     __end_of_LCDPutChar:
  3226                           	opt callstack 0
  3227                           
  3228 ;; *************** function _buttonInitialize *****************
  3229 ;; Defined at:
  3230 ;;		line 22 in file "system.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;		None
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, status,2
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;Total ram usage:        0 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    3
  3251 ;; This function calls:
  3252 ;;		Nothing
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text18
  3259  002198                     __ptext18:
  3260                           	opt callstack 0
  3261  002198                     _buttonInitialize:
  3262                           	opt callstack 27
  3263  002198                     
  3264                           ;system.c: 23:     TRISAbits.TRISA5 = 1;
  3265  002198  8A92               	bsf	146,5,c	;volatile
  3266                           
  3267                           ;system.c: 24:     TRISBbits.TRISB0 = 1;
  3268  00219A  8093               	bsf	147,0,c	;volatile
  3269  00219C                     
  3270                           ;system.c: 25:     ADCON1 = 0b00001111;
  3271  00219C  0E0F               	movlw	15
  3272  00219E  6EC1               	movwf	193,c	;volatile
  3273  0021A0  0012               	return		;funcret
  3274  0021A2                     __end_of_buttonInitialize:
  3275                           	opt callstack 0
  3276                           
  3277 ;; *************** function _LCDInit *****************
  3278 ;; Defined at:
  3279 ;;		line 45 in file "BBSPI_LCD.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;		None
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;Total ram usage:        1 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    6
  3300 ;; This function calls:
  3301 ;;		_InitBBSPI
  3302 ;;		_LCDPutInst
  3303 ;;		_Port_BBSPIInit
  3304 ;;		_WritePort_BBSPI
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text19
  3311  001F92                     __ptext19:
  3312                           	opt callstack 0
  3313  001F92                     _LCDInit:
  3314                           	opt callstack 24
  3315  001F92                     
  3316                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3317  001F92  ECB1  F010         	call	_InitBBSPI	;wreg free
  3318  001F96                     
  3319                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3320  001F96  9C97               	bcf	151,6,c	;volatile
  3321  001F98                     
  3322                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3323  001F98  9C8E               	bcf	142,6,c	;volatile
  3324  001F9A                     
  3325                           ;BBSPI_LCD.c: 50:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3326  001F9A  0E11               	movlw	17
  3327  001F9C  6E30               	movwf	??_LCDInit^0,c
  3328  001F9E  0E3A               	movlw	58
  3329  001FA0                     u1147:
  3330  001FA0  2EE8               	decfsz	wreg,f,c
  3331  001FA2  D7FE               	bra	u1147
  3332  001FA4  2E30               	decfsz	??_LCDInit^0,f,c
  3333  001FA6  D7FC               	bra	u1147
  3334  001FA8  D000               	nop2	
  3335  001FAA                     
  3336                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3337  001FAA  8C8E               	bsf	142,6,c	;volatile
  3338  001FAC                     
  3339                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3340  001FAC  0E00               	movlw	0
  3341  001FAE  EC97  F010         	call	_Port_BBSPIInit
  3342  001FB2                     
  3343                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3344  001FB2  0E01               	movlw	1
  3345  001FB4  EC97  F010         	call	_Port_BBSPIInit
  3346  001FB8                     
  3347                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3348  001FB8  0E00               	movlw	0
  3349  001FBA  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3350  001FBC  0E12               	movlw	18
  3351  001FBE  ECA4  F010         	call	_WritePort_BBSPI
  3352  001FC2                     
  3353                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3354  001FC2  0E31               	movlw	49
  3355  001FC4  6E30               	movwf	??_LCDInit^0,c
  3356  001FC6  0EB2               	movlw	178
  3357  001FC8                     u1157:
  3358  001FC8  2EE8               	decfsz	wreg,f,c
  3359  001FCA  D7FE               	bra	u1157
  3360  001FCC  2E30               	decfsz	??_LCDInit^0,f,c
  3361  001FCE  D7FC               	bra	u1157
  3362  001FD0  D000               	nop2	
  3363  001FD2                     
  3364                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3365  001FD2  0E32               	movlw	50
  3366  001FD4  EC96  F00F         	call	_LCDPutInst
  3367  001FD8                     
  3368                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3369  001FD8  0E3C               	movlw	60
  3370  001FDA  EC96  F00F         	call	_LCDPutInst
  3371  001FDE                     
  3372                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3373  001FDE  0E0C               	movlw	12
  3374  001FE0  EC96  F00F         	call	_LCDPutInst
  3375  001FE4                     
  3376                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3377  001FE4  0E01               	movlw	1
  3378  001FE6  EC96  F00F         	call	_LCDPutInst
  3379  001FEA                     
  3380                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3381  001FEA  0E06               	movlw	6
  3382  001FEC  EC96  F00F         	call	_LCDPutInst
  3383  001FF0  0012               	return		;funcret
  3384  001FF2                     __end_of_LCDInit:
  3385                           	opt callstack 0
  3386                           
  3387 ;; *************** function _Port_BBSPIInit *****************
  3388 ;; Defined at:
  3389 ;;		line 123 in file "BBSPI_LCD.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  port_dir        1    wreg     unsigned char 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  port_dir        1   11[COMRAM] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        1 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    4
  3410 ;; This function calls:
  3411 ;;		_SendByteBBSPI
  3412 ;; This function is called by:
  3413 ;;		_LCDInit
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text20
  3418  00212E                     __ptext20:
  3419                           	opt callstack 0
  3420  00212E                     _Port_BBSPIInit:
  3421                           	opt callstack 25
  3422                           
  3423                           ;incstack = 0
  3424                           ;Port_BBSPIInit@port_dir stored from wreg
  3425  00212E  6E2C               	movwf	Port_BBSPIInit@port_dir^0,c
  3426  002130                     
  3427                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3428  002130  9489               	bcf	137,2,c	;volatile
  3429  002132                     
  3430                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3431  002132  0E40               	movlw	64
  3432  002134  EC2B  F00F         	call	_SendByteBBSPI
  3433                           
  3434                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3435  002138  502C               	movf	Port_BBSPIInit@port_dir^0,w,c
  3436  00213A  EC2B  F00F         	call	_SendByteBBSPI
  3437                           
  3438                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3439  00213E  0E00               	movlw	0
  3440  002140  EC2B  F00F         	call	_SendByteBBSPI
  3441  002144                     
  3442                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3443  002144  8489               	bsf	137,2,c	;volatile
  3444  002146  0012               	return		;funcret
  3445  002148                     __end_of_Port_BBSPIInit:
  3446                           	opt callstack 0
  3447                           
  3448 ;; *************** function _LCDPutInst *****************
  3449 ;; Defined at:
  3450 ;;		line 179 in file "BBSPI_LCD.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  ch              1    wreg     unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  ch              1   14[COMRAM] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;Total ram usage:        2 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    5
  3471 ;; This function calls:
  3472 ;;		_WritePort_BBSPI
  3473 ;; This function is called by:
  3474 ;;		_LCDInit
  3475 ;;		_displayClock
  3476 ;;		_displayModHour
  3477 ;;		_displayModMinute
  3478 ;;		_displayModSecond
  3479 ;;		_displayStpWatch
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text21
  3484  001F2C                     __ptext21:
  3485                           	opt callstack 0
  3486  001F2C                     _LCDPutInst:
  3487                           	opt callstack 24
  3488                           
  3489                           ;incstack = 0
  3490                           ;LCDPutInst@ch stored from wreg
  3491  001F2C  6E2F               	movwf	LCDPutInst@ch^0,c
  3492  001F2E                     
  3493                           ;BBSPI_LCD.c: 179: void LCDPutInst (unsigned char ch);BBSPI_LCD.c: 180: {;BBSPI_LCD.c: 1
      +                          81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3494  001F2E  0E11               	movlw	17
  3495  001F30  6E2E               	movwf	??_LCDPutInst^0,c
  3496  001F32  0E3A               	movlw	58
  3497  001F34                     u1167:
  3498  001F34  2EE8               	decfsz	wreg,f,c
  3499  001F36  D7FE               	bra	u1167
  3500  001F38  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3501  001F3A  D7FC               	bra	u1167
  3502  001F3C  D000               	nop2	
  3503  001F3E                     
  3504                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3505  001F3E  0E00               	movlw	0
  3506  001F40  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3507  001F42  0E12               	movlw	18
  3508  001F44  ECA4  F010         	call	_WritePort_BBSPI
  3509  001F48                     
  3510                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3511  001F48  0E04               	movlw	4
  3512  001F4A  6E2E               	movwf	??_LCDPutInst^0,c
  3513  001F4C  0E3E               	movlw	62
  3514  001F4E                     u1177:
  3515  001F4E  2EE8               	decfsz	wreg,f,c
  3516  001F50  D7FE               	bra	u1177
  3517  001F52  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3518  001F54  D7FC               	bra	u1177
  3519  001F56                     
  3520                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3521  001F56  C02F  F02C         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3522  001F5A  0E13               	movlw	19
  3523  001F5C  ECA4  F010         	call	_WritePort_BBSPI
  3524  001F60                     
  3525                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3526  001F60  0E04               	movlw	4
  3527  001F62  6E2E               	movwf	??_LCDPutInst^0,c
  3528  001F64  0E3E               	movlw	62
  3529  001F66                     u1187:
  3530  001F66  2EE8               	decfsz	wreg,f,c
  3531  001F68  D7FE               	bra	u1187
  3532  001F6A  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3533  001F6C  D7FC               	bra	u1187
  3534  001F6E                     
  3535                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3536  001F6E  0E40               	movlw	64
  3537  001F70  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3538  001F72  0E12               	movlw	18
  3539  001F74  ECA4  F010         	call	_WritePort_BBSPI
  3540  001F78                     
  3541                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3542  001F78  0E04               	movlw	4
  3543  001F7A  6E2E               	movwf	??_LCDPutInst^0,c
  3544  001F7C  0E3E               	movlw	62
  3545  001F7E                     u1197:
  3546  001F7E  2EE8               	decfsz	wreg,f,c
  3547  001F80  D7FE               	bra	u1197
  3548  001F82  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3549  001F84  D7FC               	bra	u1197
  3550  001F86                     
  3551                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3552  001F86  0E00               	movlw	0
  3553  001F88  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3554  001F8A  0E12               	movlw	18
  3555  001F8C  ECA4  F010         	call	_WritePort_BBSPI
  3556  001F90  0012               	return		;funcret
  3557  001F92                     __end_of_LCDPutInst:
  3558                           	opt callstack 0
  3559                           
  3560 ;; *************** function _WritePort_BBSPI *****************
  3561 ;; Defined at:
  3562 ;;		line 144 in file "BBSPI_LCD.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  port_add        1    wreg     unsigned char 
  3565 ;;  a               1   11[COMRAM] unsigned char 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  port_add        1   12[COMRAM] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2, status,0, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3577 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;Total ram usage:        2 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    4
  3584 ;; This function calls:
  3585 ;;		_SendByteBBSPI
  3586 ;; This function is called by:
  3587 ;;		_LCDInit
  3588 ;;		_LCDPutChar
  3589 ;;		_LCDPutInst
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text22
  3594  002148                     __ptext22:
  3595                           	opt callstack 0
  3596  002148                     _WritePort_BBSPI:
  3597                           	opt callstack 23
  3598                           
  3599                           ;incstack = 0
  3600                           ;WritePort_BBSPI@port_add stored from wreg
  3601  002148  6E2D               	movwf	WritePort_BBSPI@port_add^0,c
  3602  00214A                     
  3603                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3604  00214A  9489               	bcf	137,2,c	;volatile
  3605  00214C                     
  3606                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3607  00214C  0E40               	movlw	64
  3608  00214E  EC2B  F00F         	call	_SendByteBBSPI
  3609                           
  3610                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3611  002152  502D               	movf	WritePort_BBSPI@port_add^0,w,c
  3612  002154  EC2B  F00F         	call	_SendByteBBSPI
  3613                           
  3614                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3615  002158  502C               	movf	WritePort_BBSPI@a^0,w,c
  3616  00215A  EC2B  F00F         	call	_SendByteBBSPI
  3617  00215E                     
  3618                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3619  00215E  8489               	bsf	137,2,c	;volatile
  3620  002160  0012               	return		;funcret
  3621  002162                     __end_of_WritePort_BBSPI:
  3622                           	opt callstack 0
  3623                           
  3624 ;; *************** function _SendByteBBSPI *****************
  3625 ;; Defined at:
  3626 ;;		line 91 in file "BBSPI_LCD.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  output          1    wreg     unsigned char 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  output          1    8[COMRAM] unsigned char 
  3631 ;;  input           1   10[COMRAM] unsigned char 
  3632 ;;  bitcount        1    9[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;Total ram usage:        3 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    3
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_Port_BBSPIInit
  3653 ;;		_WritePort_BBSPI
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text23
  3658  001E56                     __ptext23:
  3659                           	opt callstack 0
  3660  001E56                     _SendByteBBSPI:
  3661                           	opt callstack 23
  3662                           
  3663                           ;incstack = 0
  3664                           ;SendByteBBSPI@output stored from wreg
  3665  001E56  6E29               	movwf	SendByteBBSPI@output^0,c
  3666  001E58                     
  3667                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3668  001E58  C029  F02B         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3669  001E5C                     
  3670                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3671  001E5C  0E00               	movlw	0
  3672  001E5E  6E2A               	movwf	SendByteBBSPI@bitcount^0,c
  3673  001E60                     l196:
  3674                           
  3675                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3676  001E60  AE29               	btfss	SendByteBBSPI@output^0,7,c
  3677  001E62  EF35  F00F         	goto	u11
  3678  001E66  EF37  F00F         	goto	u10
  3679  001E6A                     u11:
  3680  001E6A  EF3A  F00F         	goto	l198
  3681  001E6E                     u10:
  3682  001E6E                     
  3683                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3684  001E6E  8A8B               	bsf	139,5,c	;volatile
  3685  001E70  EF3B  F00F         	goto	l199
  3686  001E74                     l198:
  3687                           
  3688                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3689  001E74  9A8B               	bcf	139,5,c	;volatile
  3690  001E76                     l199:
  3691                           
  3692                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3693  001E76  A88B               	btfss	139,4,c	;volatile
  3694  001E78  EF40  F00F         	goto	u21
  3695  001E7C  EF42  F00F         	goto	u20
  3696  001E80                     u21:
  3697  001E80  EF46  F00F         	goto	l1147
  3698  001E84                     u20:
  3699  001E84                     
  3700                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3701  001E84  80D8               	bsf	status,0,c
  3702  001E86  362B               	rlcf	SendByteBBSPI@input^0,f,c
  3703  001E88  EF49  F00F         	goto	l1149
  3704  001E8C                     l1147:
  3705                           
  3706                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3707  001E8C  502B               	movf	SendByteBBSPI@input^0,w,c
  3708  001E8E  242B               	addwf	SendByteBBSPI@input^0,w,c
  3709  001E90  6E2B               	movwf	SendByteBBSPI@input^0,c
  3710  001E92                     l1149:
  3711                           
  3712                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3713  001E92  868B               	bsf	139,3,c	;volatile
  3714  001E94                     
  3715                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3716  001E94  F000               	nop	
  3717  001E96  F000               	nop	
  3718  001E98  F000               	nop	
  3719  001E9A  F000               	nop	
  3720  001E9C  F000               	nop	
  3721  001E9E  F000               	nop	
  3722  001EA0                     
  3723                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3724  001EA0  F000               	nop	
  3725  001EA2  F000               	nop	
  3726  001EA4  F000               	nop	
  3727  001EA6  F000               	nop	
  3728  001EA8  F000               	nop	
  3729  001EAA  F000               	nop	
  3730  001EAC                     
  3731                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3732  001EAC  968B               	bcf	139,3,c	;volatile
  3733                           
  3734                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3735  001EAE  90D8               	bcf	status,0,c
  3736  001EB0  3629               	rlcf	SendByteBBSPI@output^0,f,c
  3737  001EB2                     
  3738                           ;BBSPI_LCD.c: 113:     }
  3739  001EB2  2A2A               	incf	SendByteBBSPI@bitcount^0,f,c
  3740  001EB4  0E07               	movlw	7
  3741  001EB6  642A               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3742  001EB8  EF60  F00F         	goto	u31
  3743  001EBC  EF62  F00F         	goto	u30
  3744  001EC0                     u31:
  3745  001EC0  EF30  F00F         	goto	l196
  3746  001EC4                     u30:
  3747  001EC4  0012               	return		;funcret
  3748  001EC6                     __end_of_SendByteBBSPI:
  3749                           	opt callstack 0
  3750                           
  3751 ;; *************** function _InitBBSPI *****************
  3752 ;; Defined at:
  3753 ;;		line 70 in file "BBSPI_LCD.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;		None
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		None
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;Total ram usage:        0 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    3
  3774 ;; This function calls:
  3775 ;;		Nothing
  3776 ;; This function is called by:
  3777 ;;		_LCDInit
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text24
  3782  002162                     __ptext24:
  3783                           	opt callstack 0
  3784  002162                     _InitBBSPI:
  3785                           	opt callstack 26
  3786  002162                     
  3787                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3788  002162  9492               	bcf	146,2,c	;volatile
  3789                           
  3790                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  3791  002164  8894               	bsf	148,4,c	;volatile
  3792                           
  3793                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  3794  002166  9A94               	bcf	148,5,c	;volatile
  3795                           
  3796                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  3797  002168  9694               	bcf	148,3,c	;volatile
  3798                           
  3799                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  3800  00216A  8489               	bsf	137,2,c	;volatile
  3801                           
  3802                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  3803  00216C  888B               	bsf	139,4,c	;volatile
  3804                           
  3805                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  3806  00216E  9A8B               	bcf	139,5,c	;volatile
  3807                           
  3808                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  3809  002170  968B               	bcf	139,3,c	;volatile
  3810  002172  0012               	return		;funcret
  3811  002174                     __end_of_InitBBSPI:
  3812                           	opt callstack 0
  3813                           
  3814 ;; *************** function _deviceInterrupt *****************
  3815 ;; Defined at:
  3816 ;;		line 3 in file "interrupt.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		wreg, status,2, status,0, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    2
  3837 ;; This function calls:
  3838 ;;		_button
  3839 ;; This function is called by:
  3840 ;;		Interrupt level 2
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	intcode
  3845  000008                     __pintcode:
  3846                           	opt callstack 0
  3847  000008                     _deviceInterrupt:
  3848                           	opt callstack 23
  3849                           
  3850                           ;incstack = 0
  3851  000008  823A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3852  00000A  ED60  F010         	call	int_func,f	;refresh shadow registers
  3853                           
  3854                           	psect	intcode_body
  3855  0020C0                     __pintcode_body:
  3856                           	opt callstack 23
  3857  0020C0                     int_func:
  3858                           	opt callstack 23
  3859  0020C0  0006               	pop		; remove dummy address from shadow register refresh
  3860  0020C2                     
  3861                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  3862  0020C2  A4F2               	btfss	242,2,c	;volatile
  3863  0020C4  EF66  F010         	goto	i2u108_41
  3864  0020C8  EF68  F010         	goto	i2u108_40
  3865  0020CC                     i2u108_41:
  3866  0020CC  EF7A  F010         	goto	i2l254
  3867  0020D0                     i2u108_40:
  3868  0020D0  AAF2               	btfss	242,5,c	;volatile
  3869  0020D2  EF6D  F010         	goto	i2u109_41
  3870  0020D6  EF6F  F010         	goto	i2u109_40
  3871  0020DA                     i2u109_41:
  3872  0020DA  EF7A  F010         	goto	i2l254
  3873  0020DE                     i2u109_40:
  3874  0020DE                     
  3875                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  3876  0020DE  94F2               	bcf	242,2,c	;volatile
  3877  0020E0                     
  3878                           ;interrupt.c: 8:         TMR0L = 100;
  3879  0020E0  0E64               	movlw	100
  3880  0020E2  6ED6               	movwf	214,c	;volatile
  3881  0020E4                     
  3882                           ;interrupt.c: 9:         count10ms++;
  3883  0020E4  4A15               	infsnz	_count10ms^0,f,c
  3884  0020E6  2A16               	incf	(_count10ms+1)^0,f,c
  3885  0020E8                     
  3886                           ;interrupt.c: 11:         timerFlag = 1;
  3887  0020E8  0E00               	movlw	0
  3888  0020EA  6E14               	movwf	(_timerFlag+1)^0,c
  3889  0020EC  0E01               	movlw	1
  3890  0020EE  6E13               	movwf	_timerFlag^0,c
  3891  0020F0                     
  3892                           ;interrupt.c: 12:         button();
  3893  0020F0  EC23  F00E         	call	_button	;wreg free
  3894  0020F4                     i2l254:
  3895  0020F4  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3896  0020F6  0011               	retfie		f
  3897  0020F8                     __end_of_deviceInterrupt:
  3898                           	opt callstack 0
  3899                           
  3900 ;; *************** function _button *****************
  3901 ;; Defined at:
  3902 ;;		line 27 in file "button.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  checkRB0        2    6[COMRAM] int 
  3907 ;;  checkRA5        2    4[COMRAM] int 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, status,2, status,0, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;Total ram usage:        4 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    1
  3924 ;; This function calls:
  3925 ;;		_readRA5Button
  3926 ;;		_readRB0Button
  3927 ;; This function is called by:
  3928 ;;		_deviceInterrupt
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text26
  3933  001C46                     __ptext26:
  3934                           	opt callstack 0
  3935  001C46                     _button:
  3936                           	opt callstack 23
  3937  001C46                     
  3938                           ;button.c: 28:     int checkRA5 = readRA5Button();
  3939  001C46  EC1D  F010         	call	_readRA5Button	;wreg free
  3940  001C4A  C021  F025         	movff	?_readRA5Button,button@checkRA5
  3941  001C4E  C022  F026         	movff	?_readRA5Button+1,button@checkRA5+1
  3942                           
  3943                           ;button.c: 29:     int checkRB0 = readRB0Button();
  3944  001C52  ECF9  F00F         	call	_readRB0Button	;wreg free
  3945  001C56  C021  F027         	movff	?_readRB0Button,button@checkRB0
  3946  001C5A  C022  F028         	movff	?_readRB0Button+1,button@checkRB0+1
  3947  001C5E                     
  3948                           ;button.c: 30:     if (checkRA5 == 1) {
  3949  001C5E  0425               	decf	button@checkRA5^0,w,c
  3950  001C60  1026               	iorwf	(button@checkRA5+1)^0,w,c
  3951  001C62  A4D8               	btfss	status,2,c
  3952  001C64  EF36  F00E         	goto	i2u99_41
  3953  001C68  EF38  F00E         	goto	i2u99_40
  3954  001C6C                     i2u99_41:
  3955  001C6C  EF3E  F00E         	goto	i2l2139
  3956  001C70                     i2u99_40:
  3957  001C70                     
  3958                           ;button.c: 31:         changeModePressed = 1;
  3959  001C70  0E00               	movlw	0
  3960  001C72  6E1A               	movwf	(_changeModePressed+1)^0,c
  3961  001C74  0E01               	movlw	1
  3962  001C76  6E19               	movwf	_changeModePressed^0,c
  3963                           
  3964                           ;button.c: 32:     }
  3965  001C78  EF83  F00E         	goto	i2l163
  3966  001C7C                     i2l2139:
  3967  001C7C  0427               	decf	button@checkRB0^0,w,c
  3968  001C7E  1028               	iorwf	(button@checkRB0+1)^0,w,c
  3969  001C80  A4D8               	btfss	status,2,c
  3970  001C82  EF45  F00E         	goto	i2u100_41
  3971  001C86  EF47  F00E         	goto	i2u100_40
  3972  001C8A                     i2u100_41:
  3973  001C8A  EF71  F00E         	goto	i2l2151
  3974  001C8E                     i2u100_40:
  3975  001C8E                     
  3976                           ;button.c: 34:         countPressed++;
  3977  001C8E  4A1D               	infsnz	_countPressed^0,f,c
  3978  001C90  2A1E               	incf	(_countPressed+1)^0,f,c
  3979  001C92                     
  3980                           ;button.c: 35:         if (countPressed >= 100) {
  3981  001C92  BE1E               	btfsc	(_countPressed+1)^0,7,c
  3982  001C94  EF55  F00E         	goto	i2u101_41
  3983  001C98  501E               	movf	(_countPressed+1)^0,w,c
  3984  001C9A  E109               	bnz	i2u101_40
  3985  001C9C  0E64               	movlw	100
  3986  001C9E  5C1D               	subwf	_countPressed^0,w,c
  3987  001CA0  A0D8               	btfss	status,0,c
  3988  001CA2  EF55  F00E         	goto	i2u101_41
  3989  001CA6  EF57  F00E         	goto	i2u101_40
  3990  001CAA                     i2u101_41:
  3991  001CAA  EF83  F00E         	goto	i2l163
  3992  001CAE                     i2u101_40:
  3993  001CAE                     
  3994                           ;button.c: 36:             countAuto++;
  3995  001CAE  4A1B               	infsnz	_countAuto^0,f,c
  3996  001CB0  2A1C               	incf	(_countAuto+1)^0,f,c
  3997  001CB2                     
  3998                           ;button.c: 37:             if (countAuto > 20) {
  3999  001CB2  BE1C               	btfsc	(_countAuto+1)^0,7,c
  4000  001CB4  EF65  F00E         	goto	i2u102_41
  4001  001CB8  501C               	movf	(_countAuto+1)^0,w,c
  4002  001CBA  E109               	bnz	i2u102_40
  4003  001CBC  0E15               	movlw	21
  4004  001CBE  5C1B               	subwf	_countAuto^0,w,c
  4005  001CC0  A0D8               	btfss	status,0,c
  4006  001CC2  EF65  F00E         	goto	i2u102_41
  4007  001CC6  EF67  F00E         	goto	i2u102_40
  4008  001CCA                     i2u102_41:
  4009  001CCA  EF83  F00E         	goto	i2l162
  4010  001CCE                     i2u102_40:
  4011  001CCE                     
  4012                           ;button.c: 38:                 increaseTime = 1;
  4013  001CCE  0E00               	movlw	0
  4014  001CD0  6E18               	movwf	(_increaseTime+1)^0,c
  4015  001CD2  0E01               	movlw	1
  4016  001CD4  6E17               	movwf	_increaseTime^0,c
  4017                           
  4018                           ;button.c: 39:                 countAuto = 0;
  4019  001CD6  0E00               	movlw	0
  4020  001CD8  6E1C               	movwf	(_countAuto+1)^0,c
  4021  001CDA  0E00               	movlw	0
  4022  001CDC  6E1B               	movwf	_countAuto^0,c
  4023  001CDE  EF83  F00E         	goto	i2l163
  4024  001CE2                     i2l2151:
  4025                           
  4026                           ;button.c: 44:         countPressed = 0;
  4027  001CE2  0E00               	movlw	0
  4028  001CE4  6E1E               	movwf	(_countPressed+1)^0,c
  4029  001CE6  0E00               	movlw	0
  4030  001CE8  6E1D               	movwf	_countPressed^0,c
  4031                           
  4032                           ;button.c: 45:         countAuto = 0;
  4033  001CEA  0E00               	movlw	0
  4034  001CEC  6E1C               	movwf	(_countAuto+1)^0,c
  4035  001CEE  0E00               	movlw	0
  4036  001CF0  6E1B               	movwf	_countAuto^0,c
  4037                           
  4038                           ;button.c: 46:         changeModePressed = 0;
  4039  001CF2  0E00               	movlw	0
  4040  001CF4  6E1A               	movwf	(_changeModePressed+1)^0,c
  4041  001CF6  0E00               	movlw	0
  4042  001CF8  6E19               	movwf	_changeModePressed^0,c
  4043                           
  4044                           ;button.c: 47:         increaseTime = 0;
  4045  001CFA  0E00               	movlw	0
  4046  001CFC  6E18               	movwf	(_increaseTime+1)^0,c
  4047  001CFE  0E00               	movlw	0
  4048  001D00  6E17               	movwf	_increaseTime^0,c
  4049  001D02  EF83  F00E         	goto	i2l163
  4050  001D06                     i2l162:
  4051  001D06                     i2l163:
  4052  001D06  0012               	return		;funcret
  4053  001D08                     __end_of_button:
  4054                           	opt callstack 0
  4055                           
  4056 ;; *************** function _readRB0Button *****************
  4057 ;; Defined at:
  4058 ;;		line 15 in file "button.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  check           2    2[COMRAM] int 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  2    0[COMRAM] int 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4072 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;Total ram usage:        4 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; This function calls:
  4079 ;;		Nothing
  4080 ;; This function is called by:
  4081 ;;		_button
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text27
  4086  001FF2                     __ptext27:
  4087                           	opt callstack 0
  4088  001FF2                     _readRB0Button:
  4089                           	opt callstack 23
  4090  001FF2                     
  4091                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  4092  001FF2  C036  F037         	movff	_secondReadRB0,_firstReadRB0
  4093  001FF6                     
  4094                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  4095  001FF6  0E00               	movlw	0
  4096  001FF8  B081               	btfsc	129,0,c	;volatile
  4097  001FFA  0E01               	movlw	1
  4098  001FFC  6E36               	movwf	_secondReadRB0^0,c
  4099  001FFE                     
  4100                           ;button.c: 18:     int check = 0;
  4101  001FFE  0E00               	movlw	0
  4102  002000  6E24               	movwf	(readRB0Button@check+1)^0,c
  4103  002002  0E00               	movlw	0
  4104  002004  6E23               	movwf	readRB0Button@check^0,c
  4105  002006                     
  4106                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  4107  002006  5036               	movf	_secondReadRB0^0,w,c
  4108  002008  1837               	xorwf	_firstReadRB0^0,w,c
  4109  00200A  A4D8               	btfss	status,2,c
  4110  00200C  EF0A  F010         	goto	i2u78_41
  4111  002010  EF0C  F010         	goto	i2u78_40
  4112  002014                     i2u78_41:
  4113  002014  EF18  F010         	goto	i2l1863
  4114  002018                     i2u78_40:
  4115  002018                     
  4116                           ;button.c: 20:         if (firstReadRB0 == 0) {
  4117  002018  5037               	movf	_firstReadRB0^0,w,c
  4118  00201A  A4D8               	btfss	status,2,c
  4119  00201C  EF12  F010         	goto	i2u79_41
  4120  002020  EF14  F010         	goto	i2u79_40
  4121  002024                     i2u79_41:
  4122  002024  EF18  F010         	goto	i2l1863
  4123  002028                     i2u79_40:
  4124  002028                     
  4125                           ;button.c: 21:             check = 1;
  4126  002028  0E00               	movlw	0
  4127  00202A  6E24               	movwf	(readRB0Button@check+1)^0,c
  4128  00202C  0E01               	movlw	1
  4129  00202E  6E23               	movwf	readRB0Button@check^0,c
  4130  002030                     i2l1863:
  4131                           
  4132                           ;button.c: 24:     return check;
  4133  002030  C023  F021         	movff	readRB0Button@check,?_readRB0Button
  4134  002034  C024  F022         	movff	readRB0Button@check+1,?_readRB0Button+1
  4135  002038  0012               	return		;funcret
  4136  00203A                     __end_of_readRB0Button:
  4137                           	opt callstack 0
  4138                           
  4139 ;; *************** function _readRA5Button *****************
  4140 ;; Defined at:
  4141 ;;		line 3 in file "button.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  check           2    2[COMRAM] int 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  2    0[COMRAM] int 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;Total ram usage:        4 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_button
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text28
  4169  00203A                     __ptext28:
  4170                           	opt callstack 0
  4171  00203A                     _readRA5Button:
  4172                           	opt callstack 23
  4173  00203A                     
  4174                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4175  00203A  C038  F039         	movff	_secondReadRA5,_firstReadRA5
  4176  00203E                     
  4177                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4178  00203E  0E00               	movlw	0
  4179  002040  BA80               	btfsc	128,5,c	;volatile
  4180  002042  0E01               	movlw	1
  4181  002044  6E38               	movwf	_secondReadRA5^0,c
  4182  002046                     
  4183                           ;button.c: 6:     int check = 0;
  4184  002046  0E00               	movlw	0
  4185  002048  6E24               	movwf	(readRA5Button@check+1)^0,c
  4186  00204A  0E00               	movlw	0
  4187  00204C  6E23               	movwf	readRA5Button@check^0,c
  4188  00204E                     
  4189                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4190  00204E  5038               	movf	_secondReadRA5^0,w,c
  4191  002050  1839               	xorwf	_firstReadRA5^0,w,c
  4192  002052  A4D8               	btfss	status,2,c
  4193  002054  EF2E  F010         	goto	i2u76_41
  4194  002058  EF30  F010         	goto	i2u76_40
  4195  00205C                     i2u76_41:
  4196  00205C  EF3C  F010         	goto	i2l1847
  4197  002060                     i2u76_40:
  4198  002060                     
  4199                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4200  002060  5039               	movf	_firstReadRA5^0,w,c
  4201  002062  A4D8               	btfss	status,2,c
  4202  002064  EF36  F010         	goto	i2u77_41
  4203  002068  EF38  F010         	goto	i2u77_40
  4204  00206C                     i2u77_41:
  4205  00206C  EF3C  F010         	goto	i2l1847
  4206  002070                     i2u77_40:
  4207  002070                     
  4208                           ;button.c: 9:             check = 1;
  4209  002070  0E00               	movlw	0
  4210  002072  6E24               	movwf	(readRA5Button@check+1)^0,c
  4211  002074  0E01               	movlw	1
  4212  002076  6E23               	movwf	readRA5Button@check^0,c
  4213  002078                     i2l1847:
  4214                           
  4215                           ;button.c: 12:    return check;
  4216  002078  C023  F021         	movff	readRA5Button@check,?_readRA5Button
  4217  00207C  C024  F022         	movff	readRA5Button@check+1,?_readRA5Button+1
  4218  002080  0012               	return		;funcret
  4219  002082                     __end_of_readRA5Button:
  4220                           	opt callstack 0
  4221                           
  4222                           	psect	rparam
  4223  0000                     
  4224                           	psect	temp
  4225  00003A                     btemp:
  4226                           	opt callstack 0
  4227  00003A                     	ds	1
  4228  0000                     int$flags	set	btemp
  4229  0000                     wtemp8	set	btemp+1
  4230  0000                     ttemp5	set	btemp+1
  4231  0000                     ttemp6	set	btemp+4
  4232  0000                     ttemp7	set	btemp+8
  4233                           tosu	equ	0xFFF
  4234                           tosh	equ	0xFFE
  4235                           tosl	equ	0xFFD
  4236                           stkptr	equ	0xFFC
  4237                           pclatu	equ	0xFFB
  4238                           pclath	equ	0xFFA
  4239                           pcl	equ	0xFF9
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           indf0	equ	0xFEF
  4247                           postinc0	equ	0xFEE
  4248                           postdec0	equ	0xFED
  4249                           preinc0	equ	0xFEC
  4250                           plusw0	equ	0xFEB
  4251                           fsr0h	equ	0xFEA
  4252                           fsr0l	equ	0xFE9
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           postinc1	equ	0xFE6
  4256                           postdec1	equ	0xFE5
  4257                           preinc1	equ	0xFE4
  4258                           plusw1	equ	0xFE3
  4259                           fsr1h	equ	0xFE2
  4260                           fsr1l	equ	0xFE1
  4261                           bsr	equ	0xFE0
  4262                           indf2	equ	0xFDF
  4263                           postinc2	equ	0xFDE
  4264                           postdec2	equ	0xFDD
  4265                           preinc2	equ	0xFDC
  4266                           plusw2	equ	0xFDB
  4267                           fsr2h	equ	0xFDA
  4268                           fsr2l	equ	0xFD9
  4269                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    0
    Data        4
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModHour
    _main->_displayModMinute
    _main->_displayModSecond
    _displayStpWatch->_LCDPutStr
    _displayModSecond->_LCDPutStr
    _displayModMinute->_LCDPutStr
    _displayModHour->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   42268
                                             19 COMRAM     2     2      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                     _displayModHour
                   _displayModMinute
                   _displayModSecond
                    _displayStpWatch
                      _ledInitialize
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ledInitialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    8101
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModSecond                                     2     2      0    8101
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModMinute                                     2     2      0    8101
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModHour                                       2     2      0    8101
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    8101
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2576
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2580
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModHour
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModMinute
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModSecond
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _ledInitialize
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      39       1       60.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      32        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Sep 23 00:08:02 2019

      __end_of_displayModMinute 17B8        __end_of_displayModSecond 1690                     ?_LCDPutChar 0021  
                            l78 1192                              u10 1E6E                              u11 1E6A  
                            u20 1E84                              u21 1E80                              u30 1EC4  
                            u31 1EC0                    ___awdiv@sign 002E                     ?_LCDPutInst 0021  
                            _hr 000D                   ?_displayClock 0021                 ??_ledInitialize 0029  
         SendByteBBSPI@bitcount 002A                             l121 21A0                             l202 1EC4  
                           l211 1F2A                             l115 218C                             l220 20BE  
                           l124 2196                             l205 2146                             l214 1F90  
                           l118 2182                             l208 2160                             l410 168E  
                           l404 17B6                             l190 1FF0                             l193 2172  
                           l196 1E60                             l356 1566                             l198 1E74  
                           l374 1436                             l199 1E76                             l295 1E54  
                           l455 19DC                             l392 1306                             l456 19E4  
                           l449 1940                             l706 1DB6                             l298 1B80  
                           l459 1AB2                             l398 18DE                             l693 1C44  
                           u210 1DD4                             u211 1DD0                             u300 14D8  
                           u220 1DFC                             u301 14D4                             u221 1DF8  
                           u310 14EA                             u230 1E24                             u311 14E6  
                           u231 1E20                             u320 1500                             u400 1386  
                           u240 1E4C                             u321 14FC                             u401 1382  
                           u241 1E48                             u330 155E                             u250 144E  
                           u410 13A8                             u331 155A                             u251 144A  
                           u411 13A4                             u260 1468                             u420 13BA  
                           u500 1238                             u261 1464                             u421 13B6  
                           u501 1234                             u270 1486                             u430 13D0  
                           u510 1256                             u271 1482                             u431 13CC  
                           u511 1252                             u280 1498                             u440 142E  
                           u360 131E                             u520 1278                             u600 1952  
                           u281 1494                             u441 142A                             u361 131A  
                           u521 1274                             u601 194E                             u290 14B6  
                           u370 1338                             u530 128A                             u610 1964  
                           u291 14B2                             u371 1334                             u531 1286  
                           u611 1960                             u380 1356                             u540 12A0  
                           u620 1984                             u381 1352                             u541 129C  
                           u621 1980                             u390 1368                             u550 12FE  
                           u470 11EE                             u630 19AC                             u391 1364  
                           u551 12FA                             u471 11EA                             u631 19A8  
                           u800 20BE                             u480 1208                             u640 19D4  
                           u801 20BA                             u481 1204                             u641 19D0  
                           u810 1B94                             u490 1226                             u811 1B90  
                           u491 1222                             u820 1BAE                             u900 1D6C  
                           u580 18FA                             u821 1BAA                             u901 1D68  
                           u581 18F6                             u830 1BD4                             u910 1D82  
                           u590 190C                             u831 1BD0                             u911 1D7E  
                           u591 1908                             u840 1BF2                             u920 1DA6  
                           u841 1BEE                             u921 1DA2                             u850 1C0E  
                           u930 17EC                             u851 1C0A                             u931 17E8  
                           u860 1C34                             u940 1806                             u861 1C30  
                           u941 1802                             u870 1D1A                             u950 1702  
                           u871 1D16                             u951 16FE                             u880 1D34  
                           u960 171C                             u881 1D30                             u961 1718  
                           u890 1D4E                             u970 1618                             u891 1D4A  
                           u971 1614                             u980 1632                             u981 162E  
        __size_of_readRB0Button 0048                             _min 000F                             _sec 0011  
                           _run 0007         __end_of_displayStpWatch 1AB4                    ___awmod@sign 002E  
        __size_of_readRA5Button 0048                             wreg 000FE8                 __end_of_LCDInit 1FF2  
                  __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000                            l2001 1ABA  
                          l2011 1B0A                            l2003 1AC6                            l2013 1B26  
                          l2005 1ACC                            l2021 17B8                            l2101 1618  
                          l1151 1E94                            l1143 1E6E                            l1135 1E58  
                          l2015 1B42                            l2007 1AE8                            l2031 17F4  
                          l2023 17BE                            l2103 1620                            l2111 19E6  
                          l1161 1E9E                            l1153 1E96                            l1145 1E84  
                          l1137 1E5C                            l1241 2144                            l2017 1B48  
                          l2009 1B04                            l2041 1868                            l2033 1806  
                          l2025 17CA                            l2105 1632                            l2121 1A36  
                          l2113 19EC                            l1401 1E24                            l2201 1182  
                          l1235 2162                            l1171 1EA8                            l1163 1EA0  
                          l1155 1E98                            l1147 1E8C                            l2019 1B64  
                          l2043 1884                            l2035 1816                            l2027 17D0  
                          l2051 1690                            l2107 1642                            l2131 1A96  
                          l2123 1A3C                            l2115 19F8                            l1403 1E2C  
                          l1173 1EAA                            l1165 1EA2                            l1157 1E9A  
                          l1149 1E92                            l1237 2130                            l2045 18A0  
                          l2037 184E                            l2029 17EC                            l2061 16E0  
                          l2053 1696                            l2109 167A                            l2125 1A58  
                          l2117 19FE                            l1405 1E30                            l2205 1192  
                          l1175 1EAC                            l1167 1EA4                            l1159 1E9C  
                          l1239 2132                            l2047 18A6                            l2039 1862  
                          l2071 172C                            l2063 16E6                            l2055 16A2  
                          l2127 1A74                            l2119 1A1A                            l1431 1438  
                          l1511 1338                            l1407 1E4C                            l1351 217A  
                          l1177 1EB2                            l1169 1EA6                            l1353 2198  
                          l2049 18C2                            l2073 1764                            l2065 1702  
                          l2057 16A8                            l2081 1568                            l2129 1A7A  
                          l1441 1474                            l1433 143C                            l1521 136C  
                          l1513 133C                            l1505 1308                            l1601 1278  
                          l2241 11A6                            l2161 1064                            l2153 1044  
                          l1179 1EB4                            l1355 219C                            l2067 170A  
                          l2075 1778                            l2059 16C4                            l2091 15B8  
                          l2083 156E                            l1451 14C6                            l1443 1486  
                          l1435 144E                            l1531 13BE                            l1523 1386  
                          l1515 1344                            l1507 130C                            l2243 12C4  
                          l1603 128A                            l1347 2184                            l2171 10B6  
                          l2163 107C                            l2155 1054                            l2077 177E  
                          l2069 171C                            l2093 15BE                            l2085 157A  
                          l1357 218E                            l1461 1508                            l1453 14D8  
                          l1445 1498                            l1437 1468                            l2245 13F4  
                          l1533 13D0                            l1525 1396                            l1517 1356  
                          l1509 131E                            l1541 1412                            l1605 128E  
                          l1613 12B0                            l1349 2174                            l2181 10F4  
                          l2173 10BA                            l2165 1080                            l2157 1058  
                          l2079 179A                            l2095 15DA                            l2087 1580  
                          l2247 1524                            l1455 14EA                            l1447 149C  
                          l1439 146C                            l1543 142E                            l1535 13D8  
                          l1527 13A8                            l1519 1368                            l1607 12A0  
                          l1615 12E2                            l1391 1DDC                            l2191 1132  
                          l2183 10F8                            l2175 10BE                            l2167 1084  
                          l2159 105C                            l2097 15F6                            l2089 159C  
                          l1457 14EE                            l1449 14B6                            l1465 1510  
                          l1529 13BA                            l1617 12FE                            l1609 12A8  
                          l1393 1DE0                            l2193 1144                            l2185 110A  
                          l2177 10D0                            l2169 1096                            l2099 15FC  
                          l1459 1500                            l1467 1542                            l1539 13E0  
                          l1395 1DFC                            l1387 1DB8                            l2195 1164  
                          l2187 112A                            l2179 10F0                            l1813 214A  
                          l1821 1ED8                            l1901 1BAE                            l1469 155E  
                          l1581 11DC                            l1397 1E04                            l1389 1DD4  
                          l1661 1938                            l1653 18E0                            l2197 116C  
                          l2189 112E                            l1815 214C                            l1831 1F12  
                          l1823 1EE2                            l1911 1BDC                            l1903 1BB6  
                          l1591 1226                            l1583 11EE                            l1399 1E08  
                          l1671 198C                            l1663 1952                            l1655 18FA  
                          l2199 1170                            l1817 215E                            l1833 1F20  
                          l1825 1EF0                            l1921 1C16                            l1913 1BE4  
                          l1905 1BBA                            l1593 1238                            l1585 1208  
                          l1681 19D4                            l1673 1990                            l1665 1964  
                          l1657 190C                            l1827 1EFA                            l1819 1EC8  
                          l1931 1C3C                            l1923 1C18                            l1915 1BF2  
                          l1907 1BC2                            l1595 123C                            l1587 120C  
                          l1579 11D8                            l1675 19AC                            l1667 1968  
                          l1659 1924                            l1829 1F08                            l1925 1C1E  
                          l1917 1BF8                            l1909 1BD4                            l1941 1D22  
                          l1597 1256                            l1589 1214                            l1677 19B4  
                          l1669 1984                            l1871 1F48                            l1919 1C0E  
                          l1927 1C24                            l1951 1D56                            l1943 1D26  
                          l1935 1D08                            l1599 1266                            l1679 19B8  
                          l1881 1F86                            l1873 1F56                            l1929 1C34  
                          l1961 1D90                            l1953 1D5E                            l1945 1D34  
                          l1937 1D0C                            l1875 1F60                            l1867 1F2E  
                          l1971 1F92                            l1883 2082                            l1891 1B82  
                          l1955 1D6C                            l1963 1D96                            l1947 1D3C  
                          l1939 1D1A                            l1877 1F6E                            l1869 1F3E  
                          l1981 1FAC                            l1973 1F96                            l1885 2086  
                          l1893 1B86                            l1965 1DA6                            l1957 1D82  
                          l1949 1D4E                            l1879 1F78                            l1991 1FD8  
                          l1983 1FB2                            l1975 1F98                            l1887 209A  
                          l1895 1B94                            l1967 1DAE                            l1959 1D8A  
                          l1993 1FDE                            l1985 1FB8                            l1977 1F9A  
                          l1889 209E                            l1897 1B9C                            l1995 1FE4  
                          l1987 1FC2                            l1979 1FAA                            l1899 1BA0  
                          l1997 1FEA                            l1989 1FD2                            l1999 1AB4  
                          STR_1 1012                            STR_2 1023                            STR_3 1033  
                          STR_4 1033                            STR_5 1001                            u1030 1096  
                          u1031 1092                            u1040 10D0                            u1041 10CC  
                          u1050 110A                            u1107 1ECE                            u1051 1106  
                          u1060 1144                            u1117 1EE8                            u1061 1140  
                          u1070 1182                            u1127 1F00                            u1071 117E  
                          u1137 1F18                            u1147 1FA0                            u1157 1FC8  
                          u1167 1F34                            _LATD 000F8C                            u1177 1F4E  
                          u1187 1F66                            u1197 1F7E                            _main 1044  
                          fsr1l 000FE1                            btemp 003A                ?_WritePort_BBSPI 002C  
                          start 000E              __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                 ?_displayModHour 0021                    ___param_bank 000000  
             _changeModePressed 0019                 _deviceInterrupt 0008                  ??_displayClock 0032  
                         ?_main 0021                 __end_of___awdiv 1C46                 __end_of___awmod 1DB8  
                         _T0CON 000FD5                 ___awdiv@divisor 002B                           i2l154 2038  
                         i2l162 1D06                           i2l163 1D06                           i2l149 2080  
                         i2l254 20F4                 ___awdiv@counter 002D                           _TMR0L 000FD6  
                         _TRISD 000F95                   __CFG_PWRT$OFF 000000                  __CFG_FCMEN$OFF 000000  
       __size_of_Port_BBSPIInit 001A                           _blink 000B                           _count 0009  
                         _state 0020  __size_of_oscillationInitialize 000A   __end_of_oscillationInitialize 218E  
                __CFG_BOREN$OFF 000000                           tablat 000FF5             __size_of_LCDPutChar 0066  
           __size_of_LCDPutInst 0066                           ttemp5 003B                           ttemp6 003E  
                         ttemp7 0042                           status 000FD8               ??_timerInitialize 0029  
                         wtemp8 003B                   _readRB0Button 1FF2                   _readRA5Button 203A  
               __initialization 20F8                    __end_of_main 11D8                  __CFG_OSC$HSPLL 000000  
                        ??_main 0034                   __activetblptr 000003                       ??_LCDInit 0030  
                  LCDPutChar@ch 002F               __end_of_LCDPutStr 20C0                ?_displayStpWatch 0021  
                        _ADCON1 000FC1              __size_of_InitBBSPI 0012                ___awdiv@dividend 0029  
                  LCDPutInst@ch 002F                          i2l2211 20C2                          i2l2141 1C8E  
                        i2l2133 1C46                          i2l2221 20E8                          i2l2213 20D0  
                        i2l2143 1C92                          i2l2151 1CE2                          i2l2135 1C5E  
                        i2l2223 20F0                          i2l2215 20DE                          i2l2145 1CAE  
                        i2l2137 1C70                          i2l2217 20E0                          i2l2147 1CB2  
                        i2l2139 1C7C                          i2l2219 20E4                          i2l2149 1CCE  
                        i2l1841 204E                          i2l1843 2060                          i2l1835 203A  
                        i2l1851 1FF2                          i2l1845 2070                          i2l1837 203E  
                        i2l1861 2028                          i2l1853 1FF6                          i2l1847 2078  
                        i2l1839 2046                          i2l1863 2030                          i2l1855 1FFE  
                        i2l1857 2006                          i2l1859 2018                          _OSCCON 000FD3  
                  LCDPutStr@ptr 0030                  ?_readRB0Button 0021                  ?_readRA5Button 0021  
       __end_of_deviceInterrupt 20F8                  __CFG_XINST$OFF 000000                       ??___awdiv 002D  
                     ??___awmod 002D                          _minSTW 0005                          _secSTW 0003  
                        _button 1C46                          clear_0 211E       __size_of_buttonInitialize 000A  
              ___awdiv@quotient 002F                 ___awmod@divisor 002B                 ___awmod@counter 002D  
              __end_of_norClock 1E56                    __pdataCOMRAM 0036          Port_BBSPIInit@port_dir 002C  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __end_of_displayClock 1B82                      __accesstop 0060  
       __end_of__initialization 2124                   ___rparam_used 000001          __size_of_SendByteBBSPI 0070  
                 ?_modifyMinute 0021                   ?_modifySecond 0021                  __pcstackCOMRAM 0021  
             ?_displayModMinute 0021               ?_displayModSecond 0021               __end_of_InitBBSPI 2174  
                  ??_LCDPutChar 002E                    ??_LCDPutInst 002E              ??_displayModMinute 0032  
            ??_displayModSecond 0032                  _Port_BBSPIInit 212E                 ??_readRB0Button 0023  
               ??_readRA5Button 0023              __end_of_LCDPutChar 1F2C                ??_displayModHour 0032  
            __end_of_LCDPutInst 1F92                ?_deviceInterrupt 0021                  ??_modifyMinute 0029  
                ??_modifySecond 0029                         ?_button 0021           __end_of_ledInitialize 2198  
        __end_of_Port_BBSPIInit 2148                         _LCDInit 1F92                   _SendByteBBSPI 1E56  
               _timerInitialize 2174                         _OSCTUNE 000F9B                         i2u76_40 2060  
                       i2u76_41 205C                         i2u77_40 2070                         i2u77_41 206C  
                       i2u78_40 2018                         i2u78_41 2014                         i2u79_40 2028  
                       i2u79_41 2024                         i2u99_40 1C70                         i2u99_41 1C6C  
            __size_of_stopWatch 0106                WritePort_BBSPI@a 002C                       ?_norClock 0021  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1B82  
                       ___awmod 1D08                      _miliSecSTW 0001        __size_of_WritePort_BBSPI 001A  
                  __psmallconst 1000                _buttonInitialize 2198                         __pcinit 20F8  
               __size_of_button 00C2                         __ramtop 1000                         __ptext0 1044  
                       __ptext1 2174                         __ptext2 18E0                         __ptext3 2184  
                       __ptext4 1DB8                         __ptext5 11D8                         __ptext6 1308  
                       __ptext7 1438                         __ptext8 218E                         __ptext9 19E6  
                ?_SendByteBBSPI 0021                 ?_Port_BBSPIInit 0021                ___awmod@dividend 0029  
                    _modifyHour 1438           __size_of_displayClock 00CE                       _LCDPutStr 2082  
                __pintcode_body 20C0            end_of_initialization 2124                         int_func 20C0  
         _oscillationInitialize 2184                      ??_norClock 0029                         postdec1 000FE5  
                       postinc0 000FEE         __end_of_timerInitialize 2184               __end_of_stopWatch 19E6  
                  _displayClock 1AB4                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _TRISAbits 000F92            __end_of_modifyMinute 1438            __end_of_modifySecond 1308  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISFbits 000F97  
                    ?_LCDPutStr 0030             SendByteBBSPI@output 0029        __size_of_displayStpWatch 00CE  
                 __pidataCOMRAM 21A2                    _firstReadRB0 0037                    _firstReadRA5 0039  
               ??_SendByteBBSPI 0029                   _secondReadRB0 0036                   _secondReadRA5 0038  
                __end_of_button 1D08                       _InitBBSPI 2162               ??_WritePort_BBSPI 002D  
           start_initialization 20F8                    _countPressed 001D                     ?_modifyHour 0021  
     __size_of_displayModMinute 0128       __size_of_displayModSecond 0128          ?_oscillationInitialize 0021  
                  _increaseTime 0017                        ??_button 0025                ?_timerInitialize 0021  
                    ?_InitBBSPI 0021                        ?_LCDInit 0021                     __pbssCOMRAM 0001  
            readRB0Button@check 0023                     ??_LCDPutStr 0032        __end_of_buttonInitialize 21A2  
         __end_of_readRB0Button 203A           __end_of_readRA5Button 2082               ??_displayStpWatch 0032  
             __size_of_norClock 009E                       __pintcode 0008             __size_of_modifyHour 0130  
                button@checkRB0 0027                  button@checkRA5 0025                        ?___awdiv 0029  
                      ?___awmod 0029                ??_Port_BBSPIInit 002C        __size_of_deviceInterrupt 20F0  
         __size_of_modifyMinute 0130           __size_of_modifySecond 0130                       _count10ms 0015  
                   __smallconst 1000                       _countAuto 001B                        _LATAbits 000F89  
                      _LATCbits 000F8B                        _LATFbits 000F8E          __size_of_ledInitialize 000A  
                      i2u100_40 1C8E                        i2u100_41 1C8A                        i2u101_40 1CAE  
                      i2u101_41 1CAA                        i2u102_40 1CCE                        i2u102_41 1CCA  
                      i2u108_40 20D0                        i2u108_41 20CC                        i2u109_40 20DE  
                      i2u109_41 20DA                    _modifyMinute 1308                    _modifySecond 11D8  
                     _timerFlag 0013         __size_of_displayModHour 0128                     ??_InitBBSPI 0029  
            SendByteBBSPI@input 002B                       _stopWatch 18E0                __size_of_LCDInit 0060  
              _displayModMinute 1690                _displayModSecond 1568                       copy_data0 210C  
                      __Hrparam 0000                        __Lrparam 0000                 _WritePort_BBSPI 2148  
              __size_of___awdiv 00C4                __size_of___awmod 00B0                   _ledInitialize 218E  
                    ?_stopWatch 0021               ??_deviceInterrupt 0029                    ??_modifyHour 0029  
            readRA5Button@check 0023                        __ptext10 1568                        __ptext11 1690  
                      __ptext20 212E                        __ptext12 17B8                        __ptext21 1F2C  
                      __ptext13 1AB4                        __ptext22 2148                        __ptext14 1D08  
                      __ptext23 1E56                        __ptext15 1B82         ??_oscillationInitialize 0029  
                      __ptext24 2162                        __ptext16 2082                        __ptext17 1EC6  
                      __ptext26 1C46                        __ptext18 2198                        __ptext27 1FF2  
                      __ptext19 1F92                        __ptext28 203A                   __size_of_main 0194  
                      _norClock 1DB8                        _stModify 001F                        int$flags 003A  
            __end_of_modifyHour 1568                      _LCDPutChar 1EC6                      _LCDPutInst 1F2C  
         __end_of_SendByteBBSPI 1EC6                  ?_ledInitialize 0021                      _INTCONbits 000FF2  
               _displayStpWatch 19E6                        intlevel2 0000               ?_buttonInitialize 0021  
       __end_of_WritePort_BBSPI 2162              ??_buttonInitialize 0029                  _displayModHour 17B8  
       WritePort_BBSPI@port_add 002D                     ??_stopWatch 0029        __size_of_timerInitialize 0010  
        __end_of_displayModHour 18E0  
