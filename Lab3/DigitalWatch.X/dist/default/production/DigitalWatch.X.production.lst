

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Sep 23 10:28:17 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F8722 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0022B4                     __pidataCOMRAM:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _secondReadRB0
    84  0022B4  01                 	db	1
    85                           
    86                           ;initializer for _firstReadRB0
    87  0022B5  01                 	db	1
    88                           
    89                           ;initializer for _secondReadRA5
    90  0022B6  01                 	db	1
    91                           
    92                           ;initializer for _firstReadRA5
    93  0022B7  01                 	db	1
    94  0000                     _LATCbits	set	3979
    95  0000                     _LATAbits	set	3977
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATFbits	set	3982
    98  0000                     _TRISFbits	set	3991
    99  0000                     _PORTBbits	set	3969
   100  0000                     _PORTAbits	set	3968
   101  0000                     _LATD	set	3980
   102  0000                     _TRISD	set	3989
   103  0000                     _ADCON1	set	4033
   104  0000                     _TRISBbits	set	3987
   105  0000                     _TRISAbits	set	3986
   106  0000                     _TMR0L	set	4054
   107  0000                     _TMR0H	set	4055
   108  0000                     _T0CON	set	4053
   109  0000                     _INTCONbits	set	4082
   110  0000                     _OSCTUNE	set	3995
   111  0000                     _OSCCON	set	4051
   112                           
   113                           	psect	smallconst
   114  001000                     __psmallconst:
   115                           	opt callstack 0
   116  001000  00                 	db	0
   117  001001                     STR_5:
   118  001001  20                 	db	32
   119  001002  20                 	db	32
   120  001003  20                 	db	32
   121  001004  53                 	db	83	;'S'
   122  001005  54                 	db	84	;'T'
   123  001006  4F                 	db	79	;'O'
   124  001007  50                 	db	80	;'P'
   125  001008  20                 	db	32
   126  001009  57                 	db	87	;'W'
   127  00100A  41                 	db	65	;'A'
   128  00100B  54                 	db	84	;'T'
   129  00100C  43                 	db	67	;'C'
   130  00100D  48                 	db	72	;'H'
   131  00100E  20                 	db	32
   132  00100F  20                 	db	32
   133  001010  20                 	db	32
   134  001011  00                 	db	0
   135  001012                     STR_1:
   136  001012  20                 	db	32
   137  001013  20                 	db	32
   138  001014  4E                 	db	78	;'N'
   139  001015  4F                 	db	79	;'O'
   140  001016  52                 	db	82	;'R'
   141  001017  4D                 	db	77	;'M'
   142  001018  41                 	db	65	;'A'
   143  001019  4C                 	db	76	;'L'
   144  00101A  20                 	db	32
   145  00101B  43                 	db	67	;'C'
   146  00101C  4C                 	db	76	;'L'
   147  00101D  4F                 	db	79	;'O'
   148  00101E  43                 	db	67	;'C'
   149  00101F  4B                 	db	75	;'K'
   150  001020  20                 	db	32
   151  001021  20                 	db	32
   152  001022  00                 	db	0
   153  001023                     STR_2:
   154  001023  20                 	db	32
   155  001024  4D                 	db	77	;'M'
   156  001025  4F                 	db	79	;'O'
   157  001026  44                 	db	68	;'D'
   158  001027  49                 	db	73	;'I'
   159  001028  46                 	db	70	;'F'
   160  001029  49                 	db	73	;'I'
   161  00102A  45                 	db	69	;'E'
   162  00102B  53                 	db	83	;'S'
   163  00102C  20                 	db	32
   164  00102D  48                 	db	72	;'H'
   165  00102E  4F                 	db	79	;'O'
   166  00102F  55                 	db	85	;'U'
   167  001030  52                 	db	82	;'R'
   168  001031  20                 	db	32
   169  001032  00                 	db	0
   170  001033                     STR_4:
   171  001033  4D                 	db	77	;'M'
   172  001034  4F                 	db	79	;'O'
   173  001035  44                 	db	68	;'D'
   174  001036  49                 	db	73	;'I'
   175  001037  46                 	db	70	;'F'
   176  001038  49                 	db	73	;'I'
   177  001039  45                 	db	69	;'E'
   178  00103A  53                 	db	83	;'S'
   179  00103B  20                 	db	32
   180  00103C  53                 	db	83	;'S'
   181  00103D  45                 	db	69	;'E'
   182  00103E  43                 	db	67	;'C'
   183  00103F  4F                 	db	79	;'O'
   184  001040  4E                 	db	78	;'N'
   185  001041  44                 	db	68	;'D'
   186  001042  00                 	db	0
   187  001043                     STR_3:
   188  001043  4D                 	db	77	;'M'
   189  001044  4F                 	db	79	;'O'
   190  001045  44                 	db	68	;'D'
   191  001046  49                 	db	73	;'I'
   192  001047  46                 	db	70	;'F'
   193  001048  49                 	db	73	;'I'
   194  001049  45                 	db	69	;'E'
   195  00104A  53                 	db	83	;'S'
   196  00104B  20                 	db	32
   197  00104C  4D                 	db	77	;'M'
   198  00104D  49                 	db	73	;'I'
   199  00104E  4E                 	db	78	;'N'
   200  00104F  55                 	db	85	;'U'
   201  001050  54                 	db	84	;'T'
   202  001051  45                 	db	69	;'E'
   203  001052  00                 	db	0
   204                           
   205                           ; #config settings
   206  001053  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	cinit
   209  002210                     __pcinit:
   210                           	opt callstack 0
   211  002210                     start_initialization:
   212                           	opt callstack 0
   213  002210                     __initialization:
   214                           	opt callstack 0
   215                           
   216                           ; Initialize objects allocated to COMRAM (4 bytes)
   217                           ; load TBLPTR registers with __pidataCOMRAM
   218  002210  0EB4               	movlw	low __pidataCOMRAM
   219  002212  6EF6               	movwf	tblptrl,c
   220  002214  0E22               	movlw	high __pidataCOMRAM
   221  002216  6EF7               	movwf	tblptrh,c
   222  002218  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   223  00221A  6EF8               	movwf	tblptru,c
   224  00221C  EE00  F036         	lfsr	0,__pdataCOMRAM
   225  002220  EE10 F004          	lfsr	1,4
   226  002224                     copy_data0:
   227  002224  0009               	tblrd		*+
   228  002226  CFF5 FFEE          	movff	tablat,postinc0
   229  00222A  50E5               	movf	postdec1,w,c
   230  00222C  50E1               	movf	fsr1l,w,c
   231  00222E  E1FA               	bnz	copy_data0
   232                           
   233                           ; Clear objects allocated to COMRAM (32 bytes)
   234  002230  EE00  F001         	lfsr	0,__pbssCOMRAM
   235  002234  0E20               	movlw	32
   236  002236                     clear_0:
   237  002236  6AEE               	clrf	postinc0,c
   238  002238  06E8               	decf	wreg,f,c
   239  00223A  E1FD               	bnz	clear_0
   240  00223C                     end_of_initialization:
   241                           	opt callstack 0
   242  00223C                     __end_of__initialization:
   243                           	opt callstack 0
   244  00223C  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   245  00223E  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   246  002240  0100               	movlb	0
   247  002242  EF2A  F008         	goto	_main	;jump to C main() function
   248                           
   249                           	psect	bssCOMRAM
   250  000001                     __pbssCOMRAM:
   251                           	opt callstack 0
   252  000001                     _count:
   253                           	opt callstack 0
   254  000001                     	ds	2
   255  000003                     _blink:
   256                           	opt callstack 0
   257  000003                     	ds	2
   258  000005                     _hr:
   259                           	opt callstack 0
   260  000005                     	ds	2
   261  000007                     _min:
   262                           	opt callstack 0
   263  000007                     	ds	2
   264  000009                     _sec:
   265                           	opt callstack 0
   266  000009                     	ds	2
   267  00000B                     _miliSecSTW:
   268                           	opt callstack 0
   269  00000B                     	ds	2
   270  00000D                     _secSTW:
   271                           	opt callstack 0
   272  00000D                     	ds	2
   273  00000F                     _minSTW:
   274                           	opt callstack 0
   275  00000F                     	ds	2
   276  000011                     _runSTW:
   277                           	opt callstack 0
   278  000011                     	ds	2
   279  000013                     _timerFlag:
   280                           	opt callstack 0
   281  000013                     	ds	2
   282  000015                     _count10ms:
   283                           	opt callstack 0
   284  000015                     	ds	2
   285  000017                     _increaseTime:
   286                           	opt callstack 0
   287  000017                     	ds	2
   288  000019                     _changeModePressed:
   289                           	opt callstack 0
   290  000019                     	ds	2
   291  00001B                     _countAuto:
   292                           	opt callstack 0
   293  00001B                     	ds	2
   294  00001D                     _countPressed:
   295                           	opt callstack 0
   296  00001D                     	ds	2
   297  00001F                     _stModify:
   298                           	opt callstack 0
   299  00001F                     	ds	1
   300  000020                     _state:
   301                           	opt callstack 0
   302  000020                     	ds	1
   303                           
   304                           	psect	dataCOMRAM
   305  000036                     __pdataCOMRAM:
   306                           	opt callstack 0
   307  000036                     _secondReadRB0:
   308                           	opt callstack 0
   309  000036                     	ds	1
   310  000037                     _firstReadRB0:
   311                           	opt callstack 0
   312  000037                     	ds	1
   313  000038                     _secondReadRA5:
   314                           	opt callstack 0
   315  000038                     	ds	1
   316  000039                     _firstReadRA5:
   317                           	opt callstack 0
   318  000039                     	ds	1
   319                           
   320                           	psect	cstackCOMRAM
   321  000021                     __pcstackCOMRAM:
   322                           	opt callstack 0
   323  000021                     ?_readRA5Button:
   324                           	opt callstack 0
   325  000021                     ?_readRB0Button:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0x0
   329  000021                     	ds	2
   330  000023                     readRA5Button@check:
   331                           	opt callstack 0
   332  000023                     readRB0Button@check:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x2
   336  000023                     	ds	2
   337  000025                     button@checkRA5:
   338                           	opt callstack 0
   339                           
   340                           ; 2 bytes @ 0x4
   341  000025                     	ds	2
   342  000027                     button@checkRB0:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x6
   346  000027                     	ds	2
   347  000029                     ??_modifyHour:
   348  000029                     ??_modifyMinute:
   349  000029                     ??_modifySecond:
   350  000029                     ??_stopWatch:
   351  000029                     ?___awdiv:
   352                           	opt callstack 0
   353  000029                     ?___awmod:
   354                           	opt callstack 0
   355  000029                     SendByteBBSPI@output:
   356                           	opt callstack 0
   357  000029                     ___awdiv@dividend:
   358                           	opt callstack 0
   359  000029                     ___awmod@dividend:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x8
   363  000029                     	ds	1
   364  00002A                     SendByteBBSPI@bitcount:
   365                           	opt callstack 0
   366                           
   367                           ; 1 bytes @ 0x9
   368  00002A                     	ds	1
   369  00002B                     SendByteBBSPI@input:
   370                           	opt callstack 0
   371  00002B                     ___awdiv@divisor:
   372                           	opt callstack 0
   373  00002B                     ___awmod@divisor:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0xA
   377  00002B                     	ds	1
   378  00002C                     Port_BBSPIInit@port_dir:
   379                           	opt callstack 0
   380  00002C                     WritePort_BBSPI@a:
   381                           	opt callstack 0
   382                           
   383                           ; 1 bytes @ 0xB
   384  00002C                     	ds	1
   385  00002D                     WritePort_BBSPI@port_add:
   386                           	opt callstack 0
   387  00002D                     ___awdiv@counter:
   388                           	opt callstack 0
   389  00002D                     ___awmod@counter:
   390                           	opt callstack 0
   391                           
   392                           ; 1 bytes @ 0xC
   393  00002D                     	ds	1
   394  00002E                     ??_LCDPutInst:
   395  00002E                     ??_LCDPutChar:
   396  00002E                     ___awdiv@sign:
   397                           	opt callstack 0
   398  00002E                     ___awmod@sign:
   399                           	opt callstack 0
   400                           
   401                           ; 1 bytes @ 0xD
   402  00002E                     	ds	1
   403  00002F                     LCDPutChar@ch:
   404                           	opt callstack 0
   405  00002F                     LCDPutInst@ch:
   406                           	opt callstack 0
   407  00002F                     ___awdiv@quotient:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0xE
   411  00002F                     	ds	1
   412  000030                     ??_LCDInit:
   413  000030                     LCDPutStr@ptr:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0xF
   417  000030                     	ds	2
   418  000032                     ??_displayModHour:
   419  000032                     ??_displayModMinute:
   420  000032                     ??_displayModSecond:
   421  000032                     
   422                           ; 1 bytes @ 0x11
   423  000032                     	ds	2
   424  000034                     ??_main:
   425                           
   426                           ; 1 bytes @ 0x13
   427  000034                     	ds	2
   428                           
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 15 in file "main.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : 0/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   451 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   452 ;;Total ram usage:        2 bytes
   453 ;; Hardware stack levels required when called:    8
   454 ;; This function calls:
   455 ;;		_LCDInit
   456 ;;		_buttonInitialize
   457 ;;		_displayClock
   458 ;;		_displayModHour
   459 ;;		_displayModMinute
   460 ;;		_displayModSecond
   461 ;;		_displayStpWatch
   462 ;;		_modifyHour
   463 ;;		_modifyMinute
   464 ;;		_modifySecond
   465 ;;		_norClock
   466 ;;		_oscillationInitialize
   467 ;;		_stopWatch
   468 ;;		_timerInitialize
   469 ;; This function is called by:
   470 ;;		Startup code after reset
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text0
   475  001054                     __ptext0:
   476                           	opt callstack 0
   477  001054                     _main:
   478                           	opt callstack 23
   479  001054                     
   480                           ;main.c: 16:     oscillationInitialize();
   481  001054  EC50  F011         	call	_oscillationInitialize	;wreg free
   482                           
   483                           ;main.c: 17:     timerInitialize();
   484  001058  EC3D  F011         	call	_timerInitialize	;wreg free
   485                           
   486                           ;main.c: 18:     buttonInitialize();
   487  00105C  EC55  F011         	call	_buttonInitialize	;wreg free
   488  001060                     
   489                           ;main.c: 19:     LCDInit();
   490  001060  EC79  F010         	call	_LCDInit	;wreg free
   491  001064                     
   492                           ;main.c: 20:     state = norClk;
   493  001064  0E00               	movlw	0
   494  001066  6E20               	movwf	_state^0,c
   495  001068                     
   496                           ;main.c: 21:     stModify = init;
   497  001068  0E00               	movlw	0
   498  00106A  6E1F               	movwf	_stModify^0,c
   499  00106C  EFD3  F008         	goto	l2237
   500  001070                     l2193:
   501                           
   502                           ;main.c: 26:                 miliSecSTW = 0;
   503  001070  0E00               	movlw	0
   504  001072  6E0C               	movwf	(_miliSecSTW+1)^0,c
   505  001074  0E00               	movlw	0
   506  001076  6E0B               	movwf	_miliSecSTW^0,c
   507                           
   508                           ;main.c: 27:                 secSTW = 0;
   509  001078  0E00               	movlw	0
   510  00107A  6E0E               	movwf	(_secSTW+1)^0,c
   511  00107C  0E00               	movlw	0
   512  00107E  6E0D               	movwf	_secSTW^0,c
   513                           
   514                           ;main.c: 28:                 minSTW = 0;
   515  001080  0E00               	movlw	0
   516  001082  6E10               	movwf	(_minSTW+1)^0,c
   517  001084  0E00               	movlw	0
   518  001086  6E0F               	movwf	_minSTW^0,c
   519  001088                     
   520                           ;main.c: 29:                 norClock();
   521  001088  EC73  F00F         	call	_norClock	;wreg free
   522  00108C                     
   523                           ;main.c: 30:                 displayClock();
   524  00108C  ECF1  F00D         	call	_displayClock	;wreg free
   525  001090                     
   526                           ;main.c: 31:                 if (changeModePressed == 1) {
   527  001090  0419               	decf	_changeModePressed^0,w,c
   528  001092  101A               	iorwf	(_changeModePressed+1)^0,w,c
   529  001094  A4D8               	btfss	status,2,c
   530  001096  EF4F  F008         	goto	u1091
   531  00109A  EF51  F008         	goto	u1090
   532  00109E                     u1091:
   533  00109E  EFD3  F008         	goto	l76
   534  0010A2                     u1090:
   535  0010A2                     
   536                           ;main.c: 32:                     changeModePressed = 0;
   537  0010A2  0E00               	movlw	0
   538  0010A4  6E1A               	movwf	(_changeModePressed+1)^0,c
   539  0010A6  0E00               	movlw	0
   540  0010A8  6E19               	movwf	_changeModePressed^0,c
   541                           
   542                           ;main.c: 33:                     state = modHr;
   543  0010AA  0E01               	movlw	1
   544  0010AC  6E20               	movwf	_state^0,c
   545                           
   546                           ;main.c: 34:                     blink = 0;
   547  0010AE  0E00               	movlw	0
   548  0010B0  6E04               	movwf	(_blink+1)^0,c
   549  0010B2  0E00               	movlw	0
   550  0010B4  6E03               	movwf	_blink^0,c
   551                           
   552                           ;main.c: 35:                     count10ms = 0;
   553  0010B6  0E00               	movlw	0
   554  0010B8  6E16               	movwf	(_count10ms+1)^0,c
   555  0010BA  0E00               	movlw	0
   556  0010BC  6E15               	movwf	_count10ms^0,c
   557  0010BE  EFD3  F008         	goto	l2237
   558  0010C2                     l2203:
   559                           
   560                           ;main.c: 39:                 modifyHour();
   561  0010C2  EC72  F00C         	call	_modifyHour	;wreg free
   562  0010C6                     
   563                           ;main.c: 41:                 displayModHour();
   564  0010C6  EC80  F00A         	call	_displayModHour	;wreg free
   565  0010CA                     
   566                           ;main.c: 42:                 if (changeModePressed == 1) {
   567  0010CA  0419               	decf	_changeModePressed^0,w,c
   568  0010CC  101A               	iorwf	(_changeModePressed+1)^0,w,c
   569  0010CE  A4D8               	btfss	status,2,c
   570  0010D0  EF6C  F008         	goto	u1101
   571  0010D4  EF6E  F008         	goto	u1100
   572  0010D8                     u1101:
   573  0010D8  EFD3  F008         	goto	l76
   574  0010DC                     u1100:
   575  0010DC                     
   576                           ;main.c: 43:                     changeModePressed = 0;
   577  0010DC  0E00               	movlw	0
   578  0010DE  6E1A               	movwf	(_changeModePressed+1)^0,c
   579  0010E0  0E00               	movlw	0
   580  0010E2  6E19               	movwf	_changeModePressed^0,c
   581                           
   582                           ;main.c: 44:                     state = modMin;
   583  0010E4  0E02               	movlw	2
   584  0010E6  6E20               	movwf	_state^0,c
   585                           
   586                           ;main.c: 45:                     blink = 0;
   587  0010E8  0E00               	movlw	0
   588  0010EA  6E04               	movwf	(_blink+1)^0,c
   589  0010EC  0E00               	movlw	0
   590  0010EE  6E03               	movwf	_blink^0,c
   591                           
   592                           ;main.c: 46:                     count10ms = 0;
   593  0010F0  0E00               	movlw	0
   594  0010F2  6E16               	movwf	(_count10ms+1)^0,c
   595  0010F4  0E00               	movlw	0
   596  0010F6  6E15               	movwf	_count10ms^0,c
   597  0010F8  EFD3  F008         	goto	l2237
   598  0010FC                     l2211:
   599                           
   600                           ;main.c: 50:                 modifyMinute();
   601  0010FC  ECDA  F00B         	call	_modifyMinute	;wreg free
   602  001100                     
   603                           ;main.c: 52:                 displayModMinute();
   604  001100  ECBB  F009         	call	_displayModMinute	;wreg free
   605  001104                     
   606                           ;main.c: 53:                 if (changeModePressed == 1) {
   607  001104  0419               	decf	_changeModePressed^0,w,c
   608  001106  101A               	iorwf	(_changeModePressed+1)^0,w,c
   609  001108  A4D8               	btfss	status,2,c
   610  00110A  EF89  F008         	goto	u1111
   611  00110E  EF8B  F008         	goto	u1110
   612  001112                     u1111:
   613  001112  EFD3  F008         	goto	l76
   614  001116                     u1110:
   615  001116                     
   616                           ;main.c: 54:                     changeModePressed = 0;
   617  001116  0E00               	movlw	0
   618  001118  6E1A               	movwf	(_changeModePressed+1)^0,c
   619  00111A  0E00               	movlw	0
   620  00111C  6E19               	movwf	_changeModePressed^0,c
   621                           
   622                           ;main.c: 55:                     state = modSec;
   623  00111E  0E03               	movlw	3
   624  001120  6E20               	movwf	_state^0,c
   625                           
   626                           ;main.c: 56:                     blink = 0;
   627  001122  0E00               	movlw	0
   628  001124  6E04               	movwf	(_blink+1)^0,c
   629  001126  0E00               	movlw	0
   630  001128  6E03               	movwf	_blink^0,c
   631                           
   632                           ;main.c: 57:                     count10ms = 0;
   633  00112A  0E00               	movlw	0
   634  00112C  6E16               	movwf	(_count10ms+1)^0,c
   635  00112E  0E00               	movlw	0
   636  001130  6E15               	movwf	_count10ms^0,c
   637  001132  EFD3  F008         	goto	l2237
   638  001136                     l2219:
   639                           
   640                           ;main.c: 61:                 modifySecond();
   641  001136  EC42  F00B         	call	_modifySecond	;wreg free
   642  00113A                     
   643                           ;main.c: 63:                 displayModSecond();
   644  00113A  ECF6  F008         	call	_displayModSecond	;wreg free
   645  00113E                     
   646                           ;main.c: 64:                 if (changeModePressed == 1) {
   647  00113E  0419               	decf	_changeModePressed^0,w,c
   648  001140  101A               	iorwf	(_changeModePressed+1)^0,w,c
   649  001142  A4D8               	btfss	status,2,c
   650  001144  EFA6  F008         	goto	u1121
   651  001148  EFA8  F008         	goto	u1120
   652  00114C                     u1121:
   653  00114C  EFD3  F008         	goto	l76
   654  001150                     u1120:
   655  001150                     
   656                           ;main.c: 65:                     changeModePressed = 0;
   657  001150  0E00               	movlw	0
   658  001152  6E1A               	movwf	(_changeModePressed+1)^0,c
   659  001154  0E00               	movlw	0
   660  001156  6E19               	movwf	_changeModePressed^0,c
   661                           
   662                           ;main.c: 66:                     state = stpWatch;
   663  001158  0E04               	movlw	4
   664  00115A  6E20               	movwf	_state^0,c
   665                           
   666                           ;main.c: 67:                     runSTW = 0;
   667  00115C  0E00               	movlw	0
   668  00115E  6E12               	movwf	(_runSTW+1)^0,c
   669  001160  0E00               	movlw	0
   670  001162  6E11               	movwf	_runSTW^0,c
   671                           
   672                           ;main.c: 68:                     count10ms = 0;
   673  001164  0E00               	movlw	0
   674  001166  6E16               	movwf	(_count10ms+1)^0,c
   675  001168  0E00               	movlw	0
   676  00116A  6E15               	movwf	_count10ms^0,c
   677  00116C  EFD3  F008         	goto	l2237
   678  001170                     l2227:
   679                           
   680                           ;main.c: 72:                 norClock();
   681  001170  EC73  F00F         	call	_norClock	;wreg free
   682                           
   683                           ;main.c: 73:                 stopWatch();
   684  001174  EC0A  F00D         	call	_stopWatch	;wreg free
   685  001178                     
   686                           ;main.c: 74:                 displayStpWatch();
   687  001178  EC7E  F00D         	call	_displayStpWatch	;wreg free
   688  00117C                     
   689                           ;main.c: 75:                 if (changeModePressed == 1) {
   690  00117C  0419               	decf	_changeModePressed^0,w,c
   691  00117E  101A               	iorwf	(_changeModePressed+1)^0,w,c
   692  001180  A4D8               	btfss	status,2,c
   693  001182  EFC5  F008         	goto	u1131
   694  001186  EFC7  F008         	goto	u1130
   695  00118A                     u1131:
   696  00118A  EFD3  F008         	goto	l76
   697  00118E                     u1130:
   698  00118E                     
   699                           ;main.c: 76:                     changeModePressed = 0;
   700  00118E  0E00               	movlw	0
   701  001190  6E1A               	movwf	(_changeModePressed+1)^0,c
   702  001192  0E00               	movlw	0
   703  001194  6E19               	movwf	_changeModePressed^0,c
   704                           
   705                           ;main.c: 77:                     state = norClk;
   706  001196  0E00               	movlw	0
   707  001198  6E20               	movwf	_state^0,c
   708                           
   709                           ;main.c: 78:                     runSTW = 0;
   710  00119A  0E00               	movlw	0
   711  00119C  6E12               	movwf	(_runSTW+1)^0,c
   712  00119E  0E00               	movlw	0
   713  0011A0  6E11               	movwf	_runSTW^0,c
   714  0011A2  EFD3  F008         	goto	l2237
   715  0011A6                     l76:
   716  0011A6                     l2237:
   717  0011A6  5020               	movf	_state^0,w,c
   718  0011A8  6E34               	movwf	??_main^0,c
   719  0011AA  6A35               	clrf	(??_main+1)^0,c
   720                           
   721                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   722                           ; Switch size 1, requested type "simple"
   723                           ; Number of cases is 1, Range of values is 0 to 0
   724                           ; switch strategies available:
   725                           ; Name         Instructions Cycles
   726                           ; simple_byte            4     3 (average)
   727                           ;	Chosen strategy is simple_byte
   728  0011AC  5035               	movf	(??_main+1)^0,w,c
   729  0011AE  0A00               	xorlw	0	; case 0
   730  0011B0  B4D8               	btfsc	status,2,c
   731  0011B2  EFDD  F008         	goto	l2277
   732  0011B6  EFD3  F008         	goto	l2237
   733  0011BA                     l2277:
   734                           
   735                           ; Switch size 1, requested type "simple"
   736                           ; Number of cases is 5, Range of values is 0 to 4
   737                           ; switch strategies available:
   738                           ; Name         Instructions Cycles
   739                           ; simple_byte           16     9 (average)
   740                           ;	Chosen strategy is simple_byte
   741  0011BA  5034               	movf	??_main^0,w,c
   742  0011BC  0A00               	xorlw	0	; case 0
   743  0011BE  B4D8               	btfsc	status,2,c
   744  0011C0  EF38  F008         	goto	l2193
   745  0011C4  0A01               	xorlw	1	; case 1
   746  0011C6  B4D8               	btfsc	status,2,c
   747  0011C8  EF61  F008         	goto	l2203
   748  0011CC  0A03               	xorlw	3	; case 2
   749  0011CE  B4D8               	btfsc	status,2,c
   750  0011D0  EF7E  F008         	goto	l2211
   751  0011D4  0A01               	xorlw	1	; case 3
   752  0011D6  B4D8               	btfsc	status,2,c
   753  0011D8  EF9B  F008         	goto	l2219
   754  0011DC  0A07               	xorlw	7	; case 4
   755  0011DE  B4D8               	btfsc	status,2,c
   756  0011E0  EFB8  F008         	goto	l2227
   757  0011E4  EFD3  F008         	goto	l2237
   758  0011E8  EF07  F000         	goto	start
   759  0011EC                     __end_of_main:
   760                           	opt callstack 0
   761                           
   762 ;; *************** function _timerInitialize *****************
   763 ;; Defined at:
   764 ;;		line 9 in file "system.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, status,2
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    3
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text1
   793  00227A                     __ptext1:
   794                           	opt callstack 0
   795  00227A                     _timerInitialize:
   796                           	opt callstack 27
   797  00227A                     
   798                           ;system.c: 10:     INTCONbits.GIE = 1;
   799  00227A  8EF2               	bsf	242,7,c	;volatile
   800                           
   801                           ;system.c: 12:     INTCONbits.TMR0IE = 1;
   802  00227C  8AF2               	bsf	242,5,c	;volatile
   803                           
   804                           ;system.c: 13:     INTCONbits.TMR0IF = 0;
   805  00227E  94F2               	bcf	242,2,c	;volatile
   806  002280                     
   807                           ;system.c: 14:     T0CON = 0b10000100;
   808  002280  0E84               	movlw	132
   809  002282  6ED5               	movwf	213,c	;volatile
   810                           
   811                           ;system.c: 17:     TMR0H = 0xfd;
   812  002284  0EFD               	movlw	253
   813  002286  6ED7               	movwf	215,c	;volatile
   814                           
   815                           ;system.c: 18:     TMR0L = 0x8f;
   816  002288  0E8F               	movlw	143
   817  00228A  6ED6               	movwf	214,c	;volatile
   818  00228C  0012               	return		;funcret
   819  00228E                     __end_of_timerInitialize:
   820                           	opt callstack 0
   821                           
   822 ;; *************** function _stopWatch *****************
   823 ;; Defined at:
   824 ;;		line 3 in file "stateStpWatch.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;		None
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      void 
   831 ;; Registers used:
   832 ;;		wreg, status,2, status,0
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;Total ram usage:        2 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    3
   845 ;; This function calls:
   846 ;;		Nothing
   847 ;; This function is called by:
   848 ;;		_main
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text2
   853  001A14                     __ptext2:
   854                           	opt callstack 0
   855  001A14                     _stopWatch:
   856                           	opt callstack 27
   857  001A14                     
   858                           ;stateStpWatch.c: 4:     if (countPressed > 0) {
   859  001A14  BE1E               	btfsc	(_countPressed+1)^0,7,c
   860  001A16  EF15  F00D         	goto	u611
   861  001A1A  501E               	movf	(_countPressed+1)^0,w,c
   862  001A1C  E108               	bnz	u610
   863  001A1E  041D               	decf	_countPressed^0,w,c
   864  001A20  A0D8               	btfss	status,0,c
   865  001A22  EF15  F00D         	goto	u611
   866  001A26  EF17  F00D         	goto	u610
   867  001A2A                     u611:
   868  001A2A  EF3A  F00D         	goto	l482
   869  001A2E                     u610:
   870  001A2E                     
   871                           ;stateStpWatch.c: 5:         if (runSTW == 0) {
   872  001A2E  5011               	movf	_runSTW^0,w,c
   873  001A30  1012               	iorwf	(_runSTW+1)^0,w,c
   874  001A32  A4D8               	btfss	status,2,c
   875  001A34  EF1E  F00D         	goto	u621
   876  001A38  EF20  F00D         	goto	u620
   877  001A3C                     u621:
   878  001A3C  EF2C  F00D         	goto	l1681
   879  001A40                     u620:
   880  001A40                     
   881                           ;stateStpWatch.c: 6:             miliSecSTW = 0;
   882  001A40  0E00               	movlw	0
   883  001A42  6E0C               	movwf	(_miliSecSTW+1)^0,c
   884  001A44  0E00               	movlw	0
   885  001A46  6E0B               	movwf	_miliSecSTW^0,c
   886                           
   887                           ;stateStpWatch.c: 7:             secSTW = 0;
   888  001A48  0E00               	movlw	0
   889  001A4A  6E0E               	movwf	(_secSTW+1)^0,c
   890  001A4C  0E00               	movlw	0
   891  001A4E  6E0D               	movwf	_secSTW^0,c
   892                           
   893                           ;stateStpWatch.c: 8:             minSTW = 0;
   894  001A50  0E00               	movlw	0
   895  001A52  6E10               	movwf	(_minSTW+1)^0,c
   896  001A54  0E00               	movlw	0
   897  001A56  6E0F               	movwf	_minSTW^0,c
   898  001A58                     l1681:
   899                           
   900                           ;stateStpWatch.c: 10:         runSTW = (runSTW + 1) % 2;
   901  001A58  0E01               	movlw	1
   902  001A5A  2411               	addwf	_runSTW^0,w,c
   903  001A5C  6E29               	movwf	??_stopWatch^0,c
   904  001A5E  0E00               	movlw	0
   905  001A60  2012               	addwfc	(_runSTW+1)^0,w,c
   906  001A62  6E2A               	movwf	(??_stopWatch+1)^0,c
   907  001A64  0E01               	movlw	1
   908  001A66  1429               	andwf	??_stopWatch^0,w,c
   909  001A68  6E11               	movwf	_runSTW^0,c
   910  001A6A  6A12               	clrf	(_runSTW+1)^0,c
   911  001A6C                     
   912                           ;stateStpWatch.c: 11:         timerFlag = 0;
   913  001A6C  0E00               	movlw	0
   914  001A6E  6E14               	movwf	(_timerFlag+1)^0,c
   915  001A70  0E00               	movlw	0
   916  001A72  6E13               	movwf	_timerFlag^0,c
   917  001A74                     l482:
   918                           
   919                           ;stateStpWatch.c: 13:     if (runSTW == 1) {
   920  001A74  0411               	decf	_runSTW^0,w,c
   921  001A76  1012               	iorwf	(_runSTW+1)^0,w,c
   922  001A78  A4D8               	btfss	status,2,c
   923  001A7A  EF41  F00D         	goto	u631
   924  001A7E  EF43  F00D         	goto	u630
   925  001A82                     u631:
   926  001A82  EF7D  F00D         	goto	l488
   927  001A86                     u630:
   928  001A86                     
   929                           ;stateStpWatch.c: 16:             if (miliSecSTW >= 100) {
   930  001A86  BE0C               	btfsc	(_miliSecSTW+1)^0,7,c
   931  001A88  EF4F  F00D         	goto	u641
   932  001A8C  500C               	movf	(_miliSecSTW+1)^0,w,c
   933  001A8E  E109               	bnz	u640
   934  001A90  0E64               	movlw	100
   935  001A92  5C0B               	subwf	_miliSecSTW^0,w,c
   936  001A94  A0D8               	btfss	status,0,c
   937  001A96  EF4F  F00D         	goto	u641
   938  001A9A  EF51  F00D         	goto	u640
   939  001A9E                     u641:
   940  001A9E  EF57  F00D         	goto	l1691
   941  001AA2                     u640:
   942  001AA2                     
   943                           ;stateStpWatch.c: 17:                 miliSecSTW = 0;
   944  001AA2  0E00               	movlw	0
   945  001AA4  6E0C               	movwf	(_miliSecSTW+1)^0,c
   946  001AA6  0E00               	movlw	0
   947  001AA8  6E0B               	movwf	_miliSecSTW^0,c
   948  001AAA                     
   949                           ;stateStpWatch.c: 18:                 secSTW++;
   950  001AAA  4A0D               	infsnz	_secSTW^0,f,c
   951  001AAC  2A0E               	incf	(_secSTW+1)^0,f,c
   952  001AAE                     l1691:
   953                           
   954                           ;stateStpWatch.c: 20:             if (secSTW >= 60) {
   955  001AAE  BE0E               	btfsc	(_secSTW+1)^0,7,c
   956  001AB0  EF63  F00D         	goto	u651
   957  001AB4  500E               	movf	(_secSTW+1)^0,w,c
   958  001AB6  E109               	bnz	u650
   959  001AB8  0E3C               	movlw	60
   960  001ABA  5C0D               	subwf	_secSTW^0,w,c
   961  001ABC  A0D8               	btfss	status,0,c
   962  001ABE  EF63  F00D         	goto	u651
   963  001AC2  EF65  F00D         	goto	u650
   964  001AC6                     u651:
   965  001AC6  EF6B  F00D         	goto	l1697
   966  001ACA                     u650:
   967  001ACA                     
   968                           ;stateStpWatch.c: 21:                 secSTW = 0;
   969  001ACA  0E00               	movlw	0
   970  001ACC  6E0E               	movwf	(_secSTW+1)^0,c
   971  001ACE  0E00               	movlw	0
   972  001AD0  6E0D               	movwf	_secSTW^0,c
   973  001AD2                     
   974                           ;stateStpWatch.c: 22:                 minSTW++;
   975  001AD2  4A0F               	infsnz	_minSTW^0,f,c
   976  001AD4  2A10               	incf	(_minSTW+1)^0,f,c
   977  001AD6                     l1697:
   978                           
   979                           ;stateStpWatch.c: 24:             if (minSTW >= 60) {
   980  001AD6  BE10               	btfsc	(_minSTW+1)^0,7,c
   981  001AD8  EF77  F00D         	goto	u661
   982  001ADC  5010               	movf	(_minSTW+1)^0,w,c
   983  001ADE  E109               	bnz	u660
   984  001AE0  0E3C               	movlw	60
   985  001AE2  5C0F               	subwf	_minSTW^0,w,c
   986  001AE4  A0D8               	btfss	status,0,c
   987  001AE6  EF77  F00D         	goto	u661
   988  001AEA  EF79  F00D         	goto	u660
   989  001AEE                     u661:
   990  001AEE  EF7D  F00D         	goto	l488
   991  001AF2                     u660:
   992  001AF2                     
   993                           ;stateStpWatch.c: 25:                 minSTW = 0;
   994  001AF2  0E00               	movlw	0
   995  001AF4  6E10               	movwf	(_minSTW+1)^0,c
   996  001AF6  0E00               	movlw	0
   997  001AF8  6E0F               	movwf	_minSTW^0,c
   998  001AFA                     l488:
   999  001AFA  0012               	return		;funcret
  1000  001AFC                     __end_of_stopWatch:
  1001                           	opt callstack 0
  1002                           
  1003 ;; *************** function _oscillationInitialize *****************
  1004 ;; Defined at:
  1005 ;;		line 3 in file "system.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, status,2
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;Total ram usage:        0 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    3
  1026 ;; This function calls:
  1027 ;;		Nothing
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text3
  1034  0022A0                     __ptext3:
  1035                           	opt callstack 0
  1036  0022A0                     _oscillationInitialize:
  1037                           	opt callstack 27
  1038  0022A0                     
  1039                           ;system.c: 5:     OSCCON = 0b01110111;
  1040  0022A0  0E77               	movlw	119
  1041  0022A2  6ED3               	movwf	211,c	;volatile
  1042                           
  1043                           ;system.c: 6:     OSCTUNE = 0b00001111;
  1044  0022A4  0E0F               	movlw	15
  1045  0022A6  6E9B               	movwf	155,c	;volatile
  1046  0022A8  0012               	return		;funcret
  1047  0022AA                     __end_of_oscillationInitialize:
  1048                           	opt callstack 0
  1049                           
  1050 ;; *************** function _norClock *****************
  1051 ;; Defined at:
  1052 ;;		line 3 in file "stateClock.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    3
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text4
  1081  001EE6                     __ptext4:
  1082                           	opt callstack 0
  1083  001EE6                     _norClock:
  1084                           	opt callstack 27
  1085  001EE6                     
  1086                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1087  001EE6  BE16               	btfsc	(_count10ms+1)^0,7,c
  1088  001EE8  EF7F  F00F         	goto	u211
  1089  001EEC  5016               	movf	(_count10ms+1)^0,w,c
  1090  001EEE  E109               	bnz	u210
  1091  001EF0  0E64               	movlw	100
  1092  001EF2  5C15               	subwf	_count10ms^0,w,c
  1093  001EF4  A0D8               	btfss	status,0,c
  1094  001EF6  EF7F  F00F         	goto	u211
  1095  001EFA  EF81  F00F         	goto	u210
  1096  001EFE                     u211:
  1097  001EFE  EFC1  F00F         	goto	l314
  1098  001F02                     u210:
  1099  001F02                     
  1100                           ;stateClock.c: 5:         count10ms = 0;
  1101  001F02  0E00               	movlw	0
  1102  001F04  6E16               	movwf	(_count10ms+1)^0,c
  1103  001F06  0E00               	movlw	0
  1104  001F08  6E15               	movwf	_count10ms^0,c
  1105  001F0A                     
  1106                           ;stateClock.c: 6:         sec++;
  1107  001F0A  4A09               	infsnz	_sec^0,f,c
  1108  001F0C  2A0A               	incf	(_sec+1)^0,f,c
  1109  001F0E                     
  1110                           ;stateClock.c: 7:         if (sec >= 60) {
  1111  001F0E  BE0A               	btfsc	(_sec+1)^0,7,c
  1112  001F10  EF93  F00F         	goto	u221
  1113  001F14  500A               	movf	(_sec+1)^0,w,c
  1114  001F16  E109               	bnz	u220
  1115  001F18  0E3C               	movlw	60
  1116  001F1A  5C09               	subwf	_sec^0,w,c
  1117  001F1C  A0D8               	btfss	status,0,c
  1118  001F1E  EF93  F00F         	goto	u221
  1119  001F22  EF95  F00F         	goto	u220
  1120  001F26                     u221:
  1121  001F26  EF9B  F00F         	goto	l1421
  1122  001F2A                     u220:
  1123  001F2A                     
  1124                           ;stateClock.c: 8:             sec = 0;
  1125  001F2A  0E00               	movlw	0
  1126  001F2C  6E0A               	movwf	(_sec+1)^0,c
  1127  001F2E  0E00               	movlw	0
  1128  001F30  6E09               	movwf	_sec^0,c
  1129  001F32                     
  1130                           ;stateClock.c: 9:             min++;
  1131  001F32  4A07               	infsnz	_min^0,f,c
  1132  001F34  2A08               	incf	(_min+1)^0,f,c
  1133  001F36                     l1421:
  1134                           
  1135                           ;stateClock.c: 11:         if (min >= 60) {
  1136  001F36  BE08               	btfsc	(_min+1)^0,7,c
  1137  001F38  EFA7  F00F         	goto	u231
  1138  001F3C  5008               	movf	(_min+1)^0,w,c
  1139  001F3E  E109               	bnz	u230
  1140  001F40  0E3C               	movlw	60
  1141  001F42  5C07               	subwf	_min^0,w,c
  1142  001F44  A0D8               	btfss	status,0,c
  1143  001F46  EFA7  F00F         	goto	u231
  1144  001F4A  EFA9  F00F         	goto	u230
  1145  001F4E                     u231:
  1146  001F4E  EFAF  F00F         	goto	l1427
  1147  001F52                     u230:
  1148  001F52                     
  1149                           ;stateClock.c: 12:             min = 0;
  1150  001F52  0E00               	movlw	0
  1151  001F54  6E08               	movwf	(_min+1)^0,c
  1152  001F56  0E00               	movlw	0
  1153  001F58  6E07               	movwf	_min^0,c
  1154  001F5A                     
  1155                           ;stateClock.c: 13:             hr++;
  1156  001F5A  4A05               	infsnz	_hr^0,f,c
  1157  001F5C  2A06               	incf	(_hr+1)^0,f,c
  1158  001F5E                     l1427:
  1159                           
  1160                           ;stateClock.c: 15:         if (hr >= 24) {
  1161  001F5E  BE06               	btfsc	(_hr+1)^0,7,c
  1162  001F60  EFBB  F00F         	goto	u241
  1163  001F64  5006               	movf	(_hr+1)^0,w,c
  1164  001F66  E109               	bnz	u240
  1165  001F68  0E18               	movlw	24
  1166  001F6A  5C05               	subwf	_hr^0,w,c
  1167  001F6C  A0D8               	btfss	status,0,c
  1168  001F6E  EFBB  F00F         	goto	u241
  1169  001F72  EFBD  F00F         	goto	u240
  1170  001F76                     u241:
  1171  001F76  EFC1  F00F         	goto	l314
  1172  001F7A                     u240:
  1173  001F7A                     
  1174                           ;stateClock.c: 16:             hr = 0;
  1175  001F7A  0E00               	movlw	0
  1176  001F7C  6E06               	movwf	(_hr+1)^0,c
  1177  001F7E  0E00               	movlw	0
  1178  001F80  6E05               	movwf	_hr^0,c
  1179  001F82                     l314:
  1180  001F82  0012               	return		;funcret
  1181  001F84                     __end_of_norClock:
  1182                           	opt callstack 0
  1183                           
  1184 ;; *************** function _modifySecond *****************
  1185 ;; Defined at:
  1186 ;;		line 68 in file "statesModify.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;		None
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;		None
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;Total ram usage:        2 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    3
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text5
  1215  001684                     __ptext5:
  1216                           	opt callstack 0
  1217  001684                     _modifySecond:
  1218                           	opt callstack 27
  1219  001684                     
  1220                           ;statesModify.c: 69:     switch (stModify) {
  1221  001684  EFAE  F00B         	goto	l1627
  1222  001688                     l1595:
  1223                           
  1224                           ;statesModify.c: 71:             if (changeModePressed == 0 && countPressed > 0) {
  1225  001688  5019               	movf	_changeModePressed^0,w,c
  1226  00168A  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1227  00168C  A4D8               	btfss	status,2,c
  1228  00168E  EF4B  F00B         	goto	u491
  1229  001692  EF4D  F00B         	goto	u490
  1230  001696                     u491:
  1231  001696  EFC7  F00B         	goto	l1629
  1232  00169A                     u490:
  1233  00169A  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1234  00169C  EF58  F00B         	goto	u501
  1235  0016A0  501E               	movf	(_countPressed+1)^0,w,c
  1236  0016A2  E108               	bnz	u500
  1237  0016A4  041D               	decf	_countPressed^0,w,c
  1238  0016A6  A0D8               	btfss	status,0,c
  1239  0016A8  EF58  F00B         	goto	u501
  1240  0016AC  EF5A  F00B         	goto	u500
  1241  0016B0                     u501:
  1242  0016B0  EFC7  F00B         	goto	l1629
  1243  0016B4                     u500:
  1244  0016B4                     
  1245                           ;statesModify.c: 72:                 sec++;
  1246  0016B4  4A09               	infsnz	_sec^0,f,c
  1247  0016B6  2A0A               	incf	(_sec+1)^0,f,c
  1248  0016B8                     
  1249                           ;statesModify.c: 73:                 stModify = iNor;
  1250  0016B8  0E01               	movlw	1
  1251  0016BA  6E1F               	movwf	_stModify^0,c
  1252  0016BC  EFC7  F00B         	goto	l1629
  1253  0016C0                     l1603:
  1254                           
  1255                           ;statesModify.c: 77:             if (countPressed == 0 || changeModePressed == 1) {
  1256  0016C0  501D               	movf	_countPressed^0,w,c
  1257  0016C2  101E               	iorwf	(_countPressed+1)^0,w,c
  1258  0016C4  B4D8               	btfsc	status,2,c
  1259  0016C6  EF67  F00B         	goto	u511
  1260  0016CA  EF69  F00B         	goto	u510
  1261  0016CE                     u511:
  1262  0016CE  EF72  F00B         	goto	l1607
  1263  0016D2                     u510:
  1264  0016D2  0419               	decf	_changeModePressed^0,w,c
  1265  0016D4  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1266  0016D6  A4D8               	btfss	status,2,c
  1267  0016D8  EF70  F00B         	goto	u521
  1268  0016DC  EF72  F00B         	goto	u520
  1269  0016E0                     u521:
  1270  0016E0  EF74  F00B         	goto	l1609
  1271  0016E4                     u520:
  1272  0016E4                     l1607:
  1273                           
  1274                           ;statesModify.c: 78:                 stModify = init;
  1275  0016E4  0E00               	movlw	0
  1276  0016E6  6E1F               	movwf	_stModify^0,c
  1277  0016E8                     l1609:
  1278                           
  1279                           ;statesModify.c: 80:             if (countAuto > 0) {
  1280  0016E8  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1281  0016EA  EF7F  F00B         	goto	u531
  1282  0016EE  501C               	movf	(_countAuto+1)^0,w,c
  1283  0016F0  E108               	bnz	u530
  1284  0016F2  041B               	decf	_countAuto^0,w,c
  1285  0016F4  A0D8               	btfss	status,0,c
  1286  0016F6  EF7F  F00B         	goto	u531
  1287  0016FA  EF81  F00B         	goto	u530
  1288  0016FE                     u531:
  1289  0016FE  EFC7  F00B         	goto	l1629
  1290  001702                     u530:
  1291  001702                     
  1292                           ;statesModify.c: 81:                 increaseTime = 1;
  1293  001702  0E00               	movlw	0
  1294  001704  6E18               	movwf	(_increaseTime+1)^0,c
  1295  001706  0E01               	movlw	1
  1296  001708  6E17               	movwf	_increaseTime^0,c
  1297                           
  1298                           ;statesModify.c: 82:                 stModify = iAuto;
  1299  00170A  0E02               	movlw	2
  1300  00170C  6E1F               	movwf	_stModify^0,c
  1301  00170E  EFC7  F00B         	goto	l1629
  1302  001712                     l1613:
  1303                           
  1304                           ;statesModify.c: 86:             if (countPressed == 0 || changeModePressed == 1) {
  1305  001712  501D               	movf	_countPressed^0,w,c
  1306  001714  101E               	iorwf	(_countPressed+1)^0,w,c
  1307  001716  B4D8               	btfsc	status,2,c
  1308  001718  EF90  F00B         	goto	u541
  1309  00171C  EF92  F00B         	goto	u540
  1310  001720                     u541:
  1311  001720  EF9B  F00B         	goto	l1617
  1312  001724                     u540:
  1313  001724  0419               	decf	_changeModePressed^0,w,c
  1314  001726  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1315  001728  A4D8               	btfss	status,2,c
  1316  00172A  EF99  F00B         	goto	u551
  1317  00172E  EF9B  F00B         	goto	u550
  1318  001732                     u551:
  1319  001732  EF9D  F00B         	goto	l1619
  1320  001736                     u550:
  1321  001736                     l1617:
  1322                           
  1323                           ;statesModify.c: 87:                 stModify = init;
  1324  001736  0E00               	movlw	0
  1325  001738  6E1F               	movwf	_stModify^0,c
  1326  00173A                     l1619:
  1327                           
  1328                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1329  00173A  0417               	decf	_increaseTime^0,w,c
  1330  00173C  1018               	iorwf	(_increaseTime+1)^0,w,c
  1331  00173E  A4D8               	btfss	status,2,c
  1332  001740  EFA4  F00B         	goto	u561
  1333  001744  EFA6  F00B         	goto	u560
  1334  001748                     u561:
  1335  001748  EFC7  F00B         	goto	l1629
  1336  00174C                     u560:
  1337  00174C                     
  1338                           ;statesModify.c: 90:                 increaseTime = 0;
  1339  00174C  0E00               	movlw	0
  1340  00174E  6E18               	movwf	(_increaseTime+1)^0,c
  1341  001750  0E00               	movlw	0
  1342  001752  6E17               	movwf	_increaseTime^0,c
  1343  001754                     
  1344                           ;statesModify.c: 91:                 sec++;
  1345  001754  4A09               	infsnz	_sec^0,f,c
  1346  001756  2A0A               	incf	(_sec+1)^0,f,c
  1347  001758  EFC7  F00B         	goto	l1629
  1348  00175C                     l1627:
  1349  00175C  501F               	movf	_stModify^0,w,c
  1350  00175E  6E29               	movwf	??_modifySecond^0,c
  1351  001760  6A2A               	clrf	(??_modifySecond+1)^0,c
  1352                           
  1353                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1354                           ; Switch size 1, requested type "simple"
  1355                           ; Number of cases is 1, Range of values is 0 to 0
  1356                           ; switch strategies available:
  1357                           ; Name         Instructions Cycles
  1358                           ; simple_byte            4     3 (average)
  1359                           ;	Chosen strategy is simple_byte
  1360  001762  502A               	movf	(??_modifySecond+1)^0,w,c
  1361  001764  0A00               	xorlw	0	; case 0
  1362  001766  B4D8               	btfsc	status,2,c
  1363  001768  EFB8  F00B         	goto	l2279
  1364  00176C  EFC7  F00B         	goto	l1629
  1365  001770                     l2279:
  1366                           
  1367                           ; Switch size 1, requested type "simple"
  1368                           ; Number of cases is 3, Range of values is 0 to 2
  1369                           ; switch strategies available:
  1370                           ; Name         Instructions Cycles
  1371                           ; simple_byte           10     6 (average)
  1372                           ;	Chosen strategy is simple_byte
  1373  001770  5029               	movf	??_modifySecond^0,w,c
  1374  001772  0A00               	xorlw	0	; case 0
  1375  001774  B4D8               	btfsc	status,2,c
  1376  001776  EF44  F00B         	goto	l1595
  1377  00177A  0A01               	xorlw	1	; case 1
  1378  00177C  B4D8               	btfsc	status,2,c
  1379  00177E  EF60  F00B         	goto	l1603
  1380  001782  0A03               	xorlw	3	; case 2
  1381  001784  B4D8               	btfsc	status,2,c
  1382  001786  EF89  F00B         	goto	l1613
  1383  00178A  EFC7  F00B         	goto	l1629
  1384  00178E                     l1629:
  1385                           
  1386                           ;statesModify.c: 95:     if (sec >= 60) {
  1387  00178E  BE0A               	btfsc	(_sec+1)^0,7,c
  1388  001790  EFD3  F00B         	goto	u571
  1389  001794  500A               	movf	(_sec+1)^0,w,c
  1390  001796  E109               	bnz	u570
  1391  001798  0E3C               	movlw	60
  1392  00179A  5C09               	subwf	_sec^0,w,c
  1393  00179C  A0D8               	btfss	status,0,c
  1394  00179E  EFD3  F00B         	goto	u571
  1395  0017A2  EFD5  F00B         	goto	u570
  1396  0017A6                     u571:
  1397  0017A6  EFD9  F00B         	goto	l419
  1398  0017AA                     u570:
  1399  0017AA                     
  1400                           ;statesModify.c: 96:         sec = 0;
  1401  0017AA  0E00               	movlw	0
  1402  0017AC  6E0A               	movwf	(_sec+1)^0,c
  1403  0017AE  0E00               	movlw	0
  1404  0017B0  6E09               	movwf	_sec^0,c
  1405  0017B2                     l419:
  1406  0017B2  0012               	return		;funcret
  1407  0017B4                     __end_of_modifySecond:
  1408                           	opt callstack 0
  1409                           
  1410 ;; *************** function _modifyMinute *****************
  1411 ;; Defined at:
  1412 ;;		line 36 in file "statesModify.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;Total ram usage:        2 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    3
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text6
  1441  0017B4                     __ptext6:
  1442                           	opt callstack 0
  1443  0017B4                     _modifyMinute:
  1444                           	opt callstack 27
  1445  0017B4                     
  1446                           ;statesModify.c: 37:     switch (stModify) {
  1447  0017B4  EF46  F00C         	goto	l1553
  1448  0017B8                     l1521:
  1449                           
  1450                           ;statesModify.c: 39:             if (changeModePressed == 0 && countPressed > 0) {
  1451  0017B8  5019               	movf	_changeModePressed^0,w,c
  1452  0017BA  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1453  0017BC  A4D8               	btfss	status,2,c
  1454  0017BE  EFE3  F00B         	goto	u371
  1455  0017C2  EFE5  F00B         	goto	u370
  1456  0017C6                     u371:
  1457  0017C6  EF5F  F00C         	goto	l1555
  1458  0017CA                     u370:
  1459  0017CA  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1460  0017CC  EFF0  F00B         	goto	u381
  1461  0017D0  501E               	movf	(_countPressed+1)^0,w,c
  1462  0017D2  E108               	bnz	u380
  1463  0017D4  041D               	decf	_countPressed^0,w,c
  1464  0017D6  A0D8               	btfss	status,0,c
  1465  0017D8  EFF0  F00B         	goto	u381
  1466  0017DC  EFF2  F00B         	goto	u380
  1467  0017E0                     u381:
  1468  0017E0  EF5F  F00C         	goto	l1555
  1469  0017E4                     u380:
  1470  0017E4                     
  1471                           ;statesModify.c: 40:                 min++;
  1472  0017E4  4A07               	infsnz	_min^0,f,c
  1473  0017E6  2A08               	incf	(_min+1)^0,f,c
  1474  0017E8                     
  1475                           ;statesModify.c: 41:                 stModify = iNor;
  1476  0017E8  0E01               	movlw	1
  1477  0017EA  6E1F               	movwf	_stModify^0,c
  1478  0017EC  EF5F  F00C         	goto	l1555
  1479  0017F0                     l1529:
  1480                           
  1481                           ;statesModify.c: 45:             if (countPressed == 0 || changeModePressed == 1) {
  1482  0017F0  501D               	movf	_countPressed^0,w,c
  1483  0017F2  101E               	iorwf	(_countPressed+1)^0,w,c
  1484  0017F4  B4D8               	btfsc	status,2,c
  1485  0017F6  EFFF  F00B         	goto	u391
  1486  0017FA  EF01  F00C         	goto	u390
  1487  0017FE                     u391:
  1488  0017FE  EF0A  F00C         	goto	l1533
  1489  001802                     u390:
  1490  001802  0419               	decf	_changeModePressed^0,w,c
  1491  001804  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1492  001806  A4D8               	btfss	status,2,c
  1493  001808  EF08  F00C         	goto	u401
  1494  00180C  EF0A  F00C         	goto	u400
  1495  001810                     u401:
  1496  001810  EF0C  F00C         	goto	l1535
  1497  001814                     u400:
  1498  001814                     l1533:
  1499                           
  1500                           ;statesModify.c: 46:                 stModify = init;
  1501  001814  0E00               	movlw	0
  1502  001816  6E1F               	movwf	_stModify^0,c
  1503  001818                     l1535:
  1504                           
  1505                           ;statesModify.c: 48:             if (countAuto > 0) {
  1506  001818  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1507  00181A  EF17  F00C         	goto	u411
  1508  00181E  501C               	movf	(_countAuto+1)^0,w,c
  1509  001820  E108               	bnz	u410
  1510  001822  041B               	decf	_countAuto^0,w,c
  1511  001824  A0D8               	btfss	status,0,c
  1512  001826  EF17  F00C         	goto	u411
  1513  00182A  EF19  F00C         	goto	u410
  1514  00182E                     u411:
  1515  00182E  EF5F  F00C         	goto	l1555
  1516  001832                     u410:
  1517  001832                     
  1518                           ;statesModify.c: 49:                 increaseTime = 1;
  1519  001832  0E00               	movlw	0
  1520  001834  6E18               	movwf	(_increaseTime+1)^0,c
  1521  001836  0E01               	movlw	1
  1522  001838  6E17               	movwf	_increaseTime^0,c
  1523                           
  1524                           ;statesModify.c: 50:                 stModify = iAuto;
  1525  00183A  0E02               	movlw	2
  1526  00183C  6E1F               	movwf	_stModify^0,c
  1527  00183E  EF5F  F00C         	goto	l1555
  1528  001842                     l1539:
  1529                           
  1530                           ;statesModify.c: 54:             if (countPressed == 0 || changeModePressed == 1) {
  1531  001842  501D               	movf	_countPressed^0,w,c
  1532  001844  101E               	iorwf	(_countPressed+1)^0,w,c
  1533  001846  B4D8               	btfsc	status,2,c
  1534  001848  EF28  F00C         	goto	u421
  1535  00184C  EF2A  F00C         	goto	u420
  1536  001850                     u421:
  1537  001850  EF33  F00C         	goto	l1543
  1538  001854                     u420:
  1539  001854  0419               	decf	_changeModePressed^0,w,c
  1540  001856  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1541  001858  A4D8               	btfss	status,2,c
  1542  00185A  EF31  F00C         	goto	u431
  1543  00185E  EF33  F00C         	goto	u430
  1544  001862                     u431:
  1545  001862  EF35  F00C         	goto	l1545
  1546  001866                     u430:
  1547  001866                     l1543:
  1548                           
  1549                           ;statesModify.c: 55:                 stModify = init;
  1550  001866  0E00               	movlw	0
  1551  001868  6E1F               	movwf	_stModify^0,c
  1552  00186A                     l1545:
  1553                           
  1554                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1555  00186A  0417               	decf	_increaseTime^0,w,c
  1556  00186C  1018               	iorwf	(_increaseTime+1)^0,w,c
  1557  00186E  A4D8               	btfss	status,2,c
  1558  001870  EF3C  F00C         	goto	u441
  1559  001874  EF3E  F00C         	goto	u440
  1560  001878                     u441:
  1561  001878  EF5F  F00C         	goto	l1555
  1562  00187C                     u440:
  1563  00187C                     
  1564                           ;statesModify.c: 58:                 increaseTime = 0;
  1565  00187C  0E00               	movlw	0
  1566  00187E  6E18               	movwf	(_increaseTime+1)^0,c
  1567  001880  0E00               	movlw	0
  1568  001882  6E17               	movwf	_increaseTime^0,c
  1569  001884                     
  1570                           ;statesModify.c: 59:                 min++;
  1571  001884  4A07               	infsnz	_min^0,f,c
  1572  001886  2A08               	incf	(_min+1)^0,f,c
  1573  001888  EF5F  F00C         	goto	l1555
  1574  00188C                     l1553:
  1575  00188C  501F               	movf	_stModify^0,w,c
  1576  00188E  6E29               	movwf	??_modifyMinute^0,c
  1577  001890  6A2A               	clrf	(??_modifyMinute+1)^0,c
  1578                           
  1579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1580                           ; Switch size 1, requested type "simple"
  1581                           ; Number of cases is 1, Range of values is 0 to 0
  1582                           ; switch strategies available:
  1583                           ; Name         Instructions Cycles
  1584                           ; simple_byte            4     3 (average)
  1585                           ;	Chosen strategy is simple_byte
  1586  001892  502A               	movf	(??_modifyMinute+1)^0,w,c
  1587  001894  0A00               	xorlw	0	; case 0
  1588  001896  B4D8               	btfsc	status,2,c
  1589  001898  EF50  F00C         	goto	l2281
  1590  00189C  EF5F  F00C         	goto	l1555
  1591  0018A0                     l2281:
  1592                           
  1593                           ; Switch size 1, requested type "simple"
  1594                           ; Number of cases is 3, Range of values is 0 to 2
  1595                           ; switch strategies available:
  1596                           ; Name         Instructions Cycles
  1597                           ; simple_byte           10     6 (average)
  1598                           ;	Chosen strategy is simple_byte
  1599  0018A0  5029               	movf	??_modifyMinute^0,w,c
  1600  0018A2  0A00               	xorlw	0	; case 0
  1601  0018A4  B4D8               	btfsc	status,2,c
  1602  0018A6  EFDC  F00B         	goto	l1521
  1603  0018AA  0A01               	xorlw	1	; case 1
  1604  0018AC  B4D8               	btfsc	status,2,c
  1605  0018AE  EFF8  F00B         	goto	l1529
  1606  0018B2  0A03               	xorlw	3	; case 2
  1607  0018B4  B4D8               	btfsc	status,2,c
  1608  0018B6  EF21  F00C         	goto	l1539
  1609  0018BA  EF5F  F00C         	goto	l1555
  1610  0018BE                     l1555:
  1611                           
  1612                           ;statesModify.c: 63:     if (min >= 60) {
  1613  0018BE  BE08               	btfsc	(_min+1)^0,7,c
  1614  0018C0  EF6B  F00C         	goto	u451
  1615  0018C4  5008               	movf	(_min+1)^0,w,c
  1616  0018C6  E109               	bnz	u450
  1617  0018C8  0E3C               	movlw	60
  1618  0018CA  5C07               	subwf	_min^0,w,c
  1619  0018CC  A0D8               	btfss	status,0,c
  1620  0018CE  EF6B  F00C         	goto	u451
  1621  0018D2  EF6D  F00C         	goto	u450
  1622  0018D6                     u451:
  1623  0018D6  EF71  F00C         	goto	l401
  1624  0018DA                     u450:
  1625  0018DA                     
  1626                           ;statesModify.c: 64:         min = 0;
  1627  0018DA  0E00               	movlw	0
  1628  0018DC  6E08               	movwf	(_min+1)^0,c
  1629  0018DE  0E00               	movlw	0
  1630  0018E0  6E07               	movwf	_min^0,c
  1631  0018E2                     l401:
  1632  0018E2  0012               	return		;funcret
  1633  0018E4                     __end_of_modifyMinute:
  1634                           	opt callstack 0
  1635                           
  1636 ;; *************** function _modifyHour *****************
  1637 ;; Defined at:
  1638 ;;		line 4 in file "statesModify.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;Total ram usage:        2 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    3
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text7
  1667  0018E4                     __ptext7:
  1668                           	opt callstack 0
  1669  0018E4                     _modifyHour:
  1670                           	opt callstack 27
  1671  0018E4                     
  1672                           ;statesModify.c: 5:     switch (stModify) {
  1673  0018E4  EFDE  F00C         	goto	l1487
  1674  0018E8                     l1455:
  1675                           
  1676                           ;statesModify.c: 7:             if (changeModePressed == 0 && countPressed > 0) {
  1677  0018E8  5019               	movf	_changeModePressed^0,w,c
  1678  0018EA  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1679  0018EC  A4D8               	btfss	status,2,c
  1680  0018EE  EF7B  F00C         	goto	u251
  1681  0018F2  EF7D  F00C         	goto	u250
  1682  0018F6                     u251:
  1683  0018F6  EFF7  F00C         	goto	l1489
  1684  0018FA                     u250:
  1685  0018FA  BE1E               	btfsc	(_countPressed+1)^0,7,c
  1686  0018FC  EF88  F00C         	goto	u261
  1687  001900  501E               	movf	(_countPressed+1)^0,w,c
  1688  001902  E108               	bnz	u260
  1689  001904  041D               	decf	_countPressed^0,w,c
  1690  001906  A0D8               	btfss	status,0,c
  1691  001908  EF88  F00C         	goto	u261
  1692  00190C  EF8A  F00C         	goto	u260
  1693  001910                     u261:
  1694  001910  EFF7  F00C         	goto	l1489
  1695  001914                     u260:
  1696  001914                     
  1697                           ;statesModify.c: 8:                 hr++;
  1698  001914  4A05               	infsnz	_hr^0,f,c
  1699  001916  2A06               	incf	(_hr+1)^0,f,c
  1700  001918                     
  1701                           ;statesModify.c: 9:                 stModify = iNor;
  1702  001918  0E01               	movlw	1
  1703  00191A  6E1F               	movwf	_stModify^0,c
  1704  00191C  EFF7  F00C         	goto	l1489
  1705  001920                     l1463:
  1706                           
  1707                           ;statesModify.c: 13:             if (countPressed == 0 || changeModePressed == 1) {
  1708  001920  501D               	movf	_countPressed^0,w,c
  1709  001922  101E               	iorwf	(_countPressed+1)^0,w,c
  1710  001924  B4D8               	btfsc	status,2,c
  1711  001926  EF97  F00C         	goto	u271
  1712  00192A  EF99  F00C         	goto	u270
  1713  00192E                     u271:
  1714  00192E  EFA2  F00C         	goto	l1467
  1715  001932                     u270:
  1716  001932  0419               	decf	_changeModePressed^0,w,c
  1717  001934  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1718  001936  A4D8               	btfss	status,2,c
  1719  001938  EFA0  F00C         	goto	u281
  1720  00193C  EFA2  F00C         	goto	u280
  1721  001940                     u281:
  1722  001940  EFA4  F00C         	goto	l1469
  1723  001944                     u280:
  1724  001944                     l1467:
  1725                           
  1726                           ;statesModify.c: 14:                 stModify = init;
  1727  001944  0E00               	movlw	0
  1728  001946  6E1F               	movwf	_stModify^0,c
  1729  001948                     l1469:
  1730                           
  1731                           ;statesModify.c: 16:             if (countAuto > 0) {
  1732  001948  BE1C               	btfsc	(_countAuto+1)^0,7,c
  1733  00194A  EFAF  F00C         	goto	u291
  1734  00194E  501C               	movf	(_countAuto+1)^0,w,c
  1735  001950  E108               	bnz	u290
  1736  001952  041B               	decf	_countAuto^0,w,c
  1737  001954  A0D8               	btfss	status,0,c
  1738  001956  EFAF  F00C         	goto	u291
  1739  00195A  EFB1  F00C         	goto	u290
  1740  00195E                     u291:
  1741  00195E  EFF7  F00C         	goto	l1489
  1742  001962                     u290:
  1743  001962                     
  1744                           ;statesModify.c: 17:                 increaseTime = 1;
  1745  001962  0E00               	movlw	0
  1746  001964  6E18               	movwf	(_increaseTime+1)^0,c
  1747  001966  0E01               	movlw	1
  1748  001968  6E17               	movwf	_increaseTime^0,c
  1749                           
  1750                           ;statesModify.c: 18:                 stModify = iAuto;
  1751  00196A  0E02               	movlw	2
  1752  00196C  6E1F               	movwf	_stModify^0,c
  1753  00196E  EFF7  F00C         	goto	l1489
  1754  001972                     l1473:
  1755                           
  1756                           ;statesModify.c: 22:             if (countPressed == 0 || changeModePressed == 1) {
  1757  001972  501D               	movf	_countPressed^0,w,c
  1758  001974  101E               	iorwf	(_countPressed+1)^0,w,c
  1759  001976  B4D8               	btfsc	status,2,c
  1760  001978  EFC0  F00C         	goto	u301
  1761  00197C  EFC2  F00C         	goto	u300
  1762  001980                     u301:
  1763  001980  EFCB  F00C         	goto	l1477
  1764  001984                     u300:
  1765  001984  0419               	decf	_changeModePressed^0,w,c
  1766  001986  101A               	iorwf	(_changeModePressed+1)^0,w,c
  1767  001988  A4D8               	btfss	status,2,c
  1768  00198A  EFC9  F00C         	goto	u311
  1769  00198E  EFCB  F00C         	goto	u310
  1770  001992                     u311:
  1771  001992  EFCD  F00C         	goto	l1479
  1772  001996                     u310:
  1773  001996                     l1477:
  1774                           
  1775                           ;statesModify.c: 23:                 stModify = init;
  1776  001996  0E00               	movlw	0
  1777  001998  6E1F               	movwf	_stModify^0,c
  1778  00199A                     l1479:
  1779                           
  1780                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1781  00199A  0417               	decf	_increaseTime^0,w,c
  1782  00199C  1018               	iorwf	(_increaseTime+1)^0,w,c
  1783  00199E  A4D8               	btfss	status,2,c
  1784  0019A0  EFD4  F00C         	goto	u321
  1785  0019A4  EFD6  F00C         	goto	u320
  1786  0019A8                     u321:
  1787  0019A8  EFF7  F00C         	goto	l1489
  1788  0019AC                     u320:
  1789  0019AC                     
  1790                           ;statesModify.c: 26:                 increaseTime = 0;
  1791  0019AC  0E00               	movlw	0
  1792  0019AE  6E18               	movwf	(_increaseTime+1)^0,c
  1793  0019B0  0E00               	movlw	0
  1794  0019B2  6E17               	movwf	_increaseTime^0,c
  1795  0019B4                     
  1796                           ;statesModify.c: 27:                 hr++;
  1797  0019B4  4A05               	infsnz	_hr^0,f,c
  1798  0019B6  2A06               	incf	(_hr+1)^0,f,c
  1799  0019B8  EFF7  F00C         	goto	l1489
  1800  0019BC                     l1487:
  1801  0019BC  501F               	movf	_stModify^0,w,c
  1802  0019BE  6E29               	movwf	??_modifyHour^0,c
  1803  0019C0  6A2A               	clrf	(??_modifyHour+1)^0,c
  1804                           
  1805                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1806                           ; Switch size 1, requested type "simple"
  1807                           ; Number of cases is 1, Range of values is 0 to 0
  1808                           ; switch strategies available:
  1809                           ; Name         Instructions Cycles
  1810                           ; simple_byte            4     3 (average)
  1811                           ;	Chosen strategy is simple_byte
  1812  0019C2  502A               	movf	(??_modifyHour+1)^0,w,c
  1813  0019C4  0A00               	xorlw	0	; case 0
  1814  0019C6  B4D8               	btfsc	status,2,c
  1815  0019C8  EFE8  F00C         	goto	l2283
  1816  0019CC  EFF7  F00C         	goto	l1489
  1817  0019D0                     l2283:
  1818                           
  1819                           ; Switch size 1, requested type "simple"
  1820                           ; Number of cases is 3, Range of values is 0 to 2
  1821                           ; switch strategies available:
  1822                           ; Name         Instructions Cycles
  1823                           ; simple_byte           10     6 (average)
  1824                           ;	Chosen strategy is simple_byte
  1825  0019D0  5029               	movf	??_modifyHour^0,w,c
  1826  0019D2  0A00               	xorlw	0	; case 0
  1827  0019D4  B4D8               	btfsc	status,2,c
  1828  0019D6  EF74  F00C         	goto	l1455
  1829  0019DA  0A01               	xorlw	1	; case 1
  1830  0019DC  B4D8               	btfsc	status,2,c
  1831  0019DE  EF90  F00C         	goto	l1463
  1832  0019E2  0A03               	xorlw	3	; case 2
  1833  0019E4  B4D8               	btfsc	status,2,c
  1834  0019E6  EFB9  F00C         	goto	l1473
  1835  0019EA  EFF7  F00C         	goto	l1489
  1836  0019EE                     l1489:
  1837                           
  1838                           ;statesModify.c: 31:     if (hr >= 24) {
  1839  0019EE  BE06               	btfsc	(_hr+1)^0,7,c
  1840  0019F0  EF03  F00D         	goto	u331
  1841  0019F4  5006               	movf	(_hr+1)^0,w,c
  1842  0019F6  E109               	bnz	u330
  1843  0019F8  0E18               	movlw	24
  1844  0019FA  5C05               	subwf	_hr^0,w,c
  1845  0019FC  A0D8               	btfss	status,0,c
  1846  0019FE  EF03  F00D         	goto	u331
  1847  001A02  EF05  F00D         	goto	u330
  1848  001A06                     u331:
  1849  001A06  EF09  F00D         	goto	l383
  1850  001A0A                     u330:
  1851  001A0A                     
  1852                           ;statesModify.c: 32:         hr = 0;
  1853  001A0A  0E00               	movlw	0
  1854  001A0C  6E06               	movwf	(_hr+1)^0,c
  1855  001A0E  0E00               	movlw	0
  1856  001A10  6E05               	movwf	_hr^0,c
  1857  001A12                     l383:
  1858  001A12  0012               	return		;funcret
  1859  001A14                     __end_of_modifyHour:
  1860                           	opt callstack 0
  1861                           
  1862 ;; *************** function _displayStpWatch *****************
  1863 ;; Defined at:
  1864 ;;		line 32 in file "stateStpWatch.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  1    wreg      void 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;Total ram usage:        0 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    7
  1885 ;; This function calls:
  1886 ;;		_LCDPutChar
  1887 ;;		_LCDPutInst
  1888 ;;		_LCDPutStr
  1889 ;;		___awdiv
  1890 ;;		___awmod
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text8
  1897  001AFC                     __ptext8:
  1898                           	opt callstack 0
  1899  001AFC                     _displayStpWatch:
  1900                           	opt callstack 23
  1901  001AFC                     
  1902                           ;stateStpWatch.c: 33:     LCDPutInst(0x80);
  1903  001AFC  0E80               	movlw	128
  1904  001AFE  EC25  F010         	call	_LCDPutInst
  1905  001B02                     
  1906                           ;stateStpWatch.c: 34:     LCDPutStr("   STOP WATCH   ");
  1907  001B02  0E01               	movlw	low STR_5
  1908  001B04  6E30               	movwf	LCDPutStr@ptr^0,c
  1909  001B06  0E10               	movlw	high STR_5
  1910  001B08  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  1911  001B0A  ECE9  F010         	call	_LCDPutStr	;wreg free
  1912  001B0E                     
  1913                           ;stateStpWatch.c: 35:     LCDPutInst(0xC0);
  1914  001B0E  0EC0               	movlw	192
  1915  001B10  EC25  F010         	call	_LCDPutInst
  1916  001B14                     
  1917                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW/10+'0');
  1918  001B14  C00F  F029         	movff	_minSTW,___awdiv@dividend
  1919  001B18  C010  F02A         	movff	_minSTW+1,___awdiv@dividend+1
  1920  001B1C  0E00               	movlw	0
  1921  001B1E  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1922  001B20  0E0A               	movlw	10
  1923  001B22  6E2B               	movwf	___awdiv@divisor^0,c
  1924  001B24  EC58  F00E         	call	___awdiv	;wreg free
  1925  001B28  5029               	movf	?___awdiv^0,w,c
  1926  001B2A  0F30               	addlw	48
  1927  001B2C  ECFA  F00F         	call	_LCDPutChar
  1928  001B30                     
  1929                           ;stateStpWatch.c: 37:     LCDPutChar(minSTW%10+'0');
  1930  001B30  C00F  F029         	movff	_minSTW,___awmod@dividend
  1931  001B34  C010  F02A         	movff	_minSTW+1,___awmod@dividend+1
  1932  001B38  0E00               	movlw	0
  1933  001B3A  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1934  001B3C  0E0A               	movlw	10
  1935  001B3E  6E2B               	movwf	___awmod@divisor^0,c
  1936  001B40  EC1B  F00F         	call	___awmod	;wreg free
  1937  001B44  5029               	movf	?___awmod^0,w,c
  1938  001B46  0F30               	addlw	48
  1939  001B48  ECFA  F00F         	call	_LCDPutChar
  1940  001B4C                     
  1941                           ;stateStpWatch.c: 38:     LCDPutInst(0xC2);
  1942  001B4C  0EC2               	movlw	194
  1943  001B4E  EC25  F010         	call	_LCDPutInst
  1944  001B52                     
  1945                           ;stateStpWatch.c: 39:     LCDPutChar(':');
  1946  001B52  0E3A               	movlw	58
  1947  001B54  ECFA  F00F         	call	_LCDPutChar
  1948  001B58                     
  1949                           ;stateStpWatch.c: 40:     LCDPutInst(0xC3);
  1950  001B58  0EC3               	movlw	195
  1951  001B5A  EC25  F010         	call	_LCDPutInst
  1952  001B5E                     
  1953                           ;stateStpWatch.c: 41:     LCDPutChar(secSTW/10+'0');
  1954  001B5E  C00D  F029         	movff	_secSTW,___awdiv@dividend
  1955  001B62  C00E  F02A         	movff	_secSTW+1,___awdiv@dividend+1
  1956  001B66  0E00               	movlw	0
  1957  001B68  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1958  001B6A  0E0A               	movlw	10
  1959  001B6C  6E2B               	movwf	___awdiv@divisor^0,c
  1960  001B6E  EC58  F00E         	call	___awdiv	;wreg free
  1961  001B72  5029               	movf	?___awdiv^0,w,c
  1962  001B74  0F30               	addlw	48
  1963  001B76  ECFA  F00F         	call	_LCDPutChar
  1964  001B7A                     
  1965                           ;stateStpWatch.c: 42:     LCDPutChar(secSTW%10+'0');
  1966  001B7A  C00D  F029         	movff	_secSTW,___awmod@dividend
  1967  001B7E  C00E  F02A         	movff	_secSTW+1,___awmod@dividend+1
  1968  001B82  0E00               	movlw	0
  1969  001B84  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1970  001B86  0E0A               	movlw	10
  1971  001B88  6E2B               	movwf	___awmod@divisor^0,c
  1972  001B8A  EC1B  F00F         	call	___awmod	;wreg free
  1973  001B8E  5029               	movf	?___awmod^0,w,c
  1974  001B90  0F30               	addlw	48
  1975  001B92  ECFA  F00F         	call	_LCDPutChar
  1976  001B96                     
  1977                           ;stateStpWatch.c: 43:     LCDPutInst(0xC5);
  1978  001B96  0EC5               	movlw	197
  1979  001B98  EC25  F010         	call	_LCDPutInst
  1980  001B9C                     
  1981                           ;stateStpWatch.c: 44:     LCDPutChar(':');
  1982  001B9C  0E3A               	movlw	58
  1983  001B9E  ECFA  F00F         	call	_LCDPutChar
  1984  001BA2                     
  1985                           ;stateStpWatch.c: 45:     LCDPutInst(0xC6);
  1986  001BA2  0EC6               	movlw	198
  1987  001BA4  EC25  F010         	call	_LCDPutInst
  1988  001BA8                     
  1989                           ;stateStpWatch.c: 46:     LCDPutChar(miliSecSTW/10+'0');
  1990  001BA8  C00B  F029         	movff	_miliSecSTW,___awdiv@dividend
  1991  001BAC  C00C  F02A         	movff	_miliSecSTW+1,___awdiv@dividend+1
  1992  001BB0  0E00               	movlw	0
  1993  001BB2  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  1994  001BB4  0E0A               	movlw	10
  1995  001BB6  6E2B               	movwf	___awdiv@divisor^0,c
  1996  001BB8  EC58  F00E         	call	___awdiv	;wreg free
  1997  001BBC  5029               	movf	?___awdiv^0,w,c
  1998  001BBE  0F30               	addlw	48
  1999  001BC0  ECFA  F00F         	call	_LCDPutChar
  2000  001BC4                     
  2001                           ;stateStpWatch.c: 47:     LCDPutChar(miliSecSTW%10+'0');
  2002  001BC4  C00B  F029         	movff	_miliSecSTW,___awmod@dividend
  2003  001BC8  C00C  F02A         	movff	_miliSecSTW+1,___awmod@dividend+1
  2004  001BCC  0E00               	movlw	0
  2005  001BCE  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2006  001BD0  0E0A               	movlw	10
  2007  001BD2  6E2B               	movwf	___awmod@divisor^0,c
  2008  001BD4  EC1B  F00F         	call	___awmod	;wreg free
  2009  001BD8  5029               	movf	?___awmod^0,w,c
  2010  001BDA  0F30               	addlw	48
  2011  001BDC  ECFA  F00F         	call	_LCDPutChar
  2012  001BE0  0012               	return		;funcret
  2013  001BE2                     __end_of_displayStpWatch:
  2014                           	opt callstack 0
  2015                           
  2016 ;; *************** function _displayModSecond *****************
  2017 ;; Defined at:
  2018 ;;		line 164 in file "statesModify.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;Total ram usage:        2 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    7
  2039 ;; This function calls:
  2040 ;;		_LCDPutChar
  2041 ;;		_LCDPutInst
  2042 ;;		_LCDPutStr
  2043 ;;		___awdiv
  2044 ;;		___awmod
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text9
  2051  0011EC                     __ptext9:
  2052                           	opt callstack 0
  2053  0011EC                     _displayModSecond:
  2054                           	opt callstack 23
  2055  0011EC                     
  2056                           ;statesModify.c: 165:     LCDPutInst(0x80);
  2057  0011EC  0E80               	movlw	128
  2058  0011EE  EC25  F010         	call	_LCDPutInst
  2059  0011F2                     
  2060                           ;statesModify.c: 166:     LCDPutStr("MODIFIES SECOND");
  2061  0011F2  0E33               	movlw	low STR_4
  2062  0011F4  6E30               	movwf	LCDPutStr@ptr^0,c
  2063  0011F6  0E10               	movlw	high STR_4
  2064  0011F8  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2065  0011FA  ECE9  F010         	call	_LCDPutStr	;wreg free
  2066  0011FE                     
  2067                           ;statesModify.c: 167:     LCDPutInst(0xC0);
  2068  0011FE  0EC0               	movlw	192
  2069  001200  EC25  F010         	call	_LCDPutInst
  2070  001204                     
  2071                           ;statesModify.c: 168:     LCDPutChar(hr/10+'0');
  2072  001204  C005  F029         	movff	_hr,___awdiv@dividend
  2073  001208  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2074  00120C  0E00               	movlw	0
  2075  00120E  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2076  001210  0E0A               	movlw	10
  2077  001212  6E2B               	movwf	___awdiv@divisor^0,c
  2078  001214  EC58  F00E         	call	___awdiv	;wreg free
  2079  001218  5029               	movf	?___awdiv^0,w,c
  2080  00121A  0F30               	addlw	48
  2081  00121C  ECFA  F00F         	call	_LCDPutChar
  2082  001220                     
  2083                           ;statesModify.c: 169:     LCDPutChar(hr%10+'0');
  2084  001220  C005  F029         	movff	_hr,___awmod@dividend
  2085  001224  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2086  001228  0E00               	movlw	0
  2087  00122A  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2088  00122C  0E0A               	movlw	10
  2089  00122E  6E2B               	movwf	___awmod@divisor^0,c
  2090  001230  EC1B  F00F         	call	___awmod	;wreg free
  2091  001234  5029               	movf	?___awmod^0,w,c
  2092  001236  0F30               	addlw	48
  2093  001238  ECFA  F00F         	call	_LCDPutChar
  2094  00123C                     
  2095                           ;statesModify.c: 171:     LCDPutChar(':');
  2096  00123C  0E3A               	movlw	58
  2097  00123E  ECFA  F00F         	call	_LCDPutChar
  2098  001242                     
  2099                           ;statesModify.c: 172:     LCDPutInst(0xC3);
  2100  001242  0EC3               	movlw	195
  2101  001244  EC25  F010         	call	_LCDPutInst
  2102  001248                     
  2103                           ;statesModify.c: 173:     LCDPutChar(min/10+'0');
  2104  001248  C007  F029         	movff	_min,___awdiv@dividend
  2105  00124C  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2106  001250  0E00               	movlw	0
  2107  001252  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2108  001254  0E0A               	movlw	10
  2109  001256  6E2B               	movwf	___awdiv@divisor^0,c
  2110  001258  EC58  F00E         	call	___awdiv	;wreg free
  2111  00125C  5029               	movf	?___awdiv^0,w,c
  2112  00125E  0F30               	addlw	48
  2113  001260  ECFA  F00F         	call	_LCDPutChar
  2114  001264                     
  2115                           ;statesModify.c: 174:     LCDPutChar(min%10+'0');
  2116  001264  C007  F029         	movff	_min,___awmod@dividend
  2117  001268  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2118  00126C  0E00               	movlw	0
  2119  00126E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2120  001270  0E0A               	movlw	10
  2121  001272  6E2B               	movwf	___awmod@divisor^0,c
  2122  001274  EC1B  F00F         	call	___awmod	;wreg free
  2123  001278  5029               	movf	?___awmod^0,w,c
  2124  00127A  0F30               	addlw	48
  2125  00127C  ECFA  F00F         	call	_LCDPutChar
  2126  001280                     
  2127                           ;statesModify.c: 176:     LCDPutChar(':');
  2128  001280  0E3A               	movlw	58
  2129  001282  ECFA  F00F         	call	_LCDPutChar
  2130  001286                     
  2131                           ;statesModify.c: 177:     LCDPutInst(0xC6);
  2132  001286  0EC6               	movlw	198
  2133  001288  EC25  F010         	call	_LCDPutInst
  2134  00128C                     
  2135                           ;statesModify.c: 178:     if (count10ms >= (20*2)) {
  2136  00128C  BE16               	btfsc	(_count10ms+1)^0,7,c
  2137  00128E  EF52  F009         	goto	u1021
  2138  001292  5016               	movf	(_count10ms+1)^0,w,c
  2139  001294  E109               	bnz	u1020
  2140  001296  0E28               	movlw	40
  2141  001298  5C15               	subwf	_count10ms^0,w,c
  2142  00129A  A0D8               	btfss	status,0,c
  2143  00129C  EF52  F009         	goto	u1021
  2144  0012A0  EF54  F009         	goto	u1020
  2145  0012A4                     u1021:
  2146  0012A4  EFBA  F009         	goto	l443
  2147  0012A8                     u1020:
  2148  0012A8                     
  2149                           ;statesModify.c: 179:         count10ms = 0;
  2150  0012A8  0E00               	movlw	0
  2151  0012AA  6E16               	movwf	(_count10ms+1)^0,c
  2152  0012AC  0E00               	movlw	0
  2153  0012AE  6E15               	movwf	_count10ms^0,c
  2154  0012B0                     
  2155                           ;statesModify.c: 180:         if (countAuto <= 0) {
  2156  0012B0  BE1C               	btfsc	(_countAuto+1)^0,7,c
  2157  0012B2  EF65  F009         	goto	u1030
  2158  0012B6  501C               	movf	(_countAuto+1)^0,w,c
  2159  0012B8  E106               	bnz	u1031
  2160  0012BA  041B               	decf	_countAuto^0,w,c
  2161  0012BC  B0D8               	btfsc	status,0,c
  2162  0012BE  EF63  F009         	goto	u1031
  2163  0012C2  EF65  F009         	goto	u1030
  2164  0012C6                     u1031:
  2165  0012C6  EF9E  F009         	goto	l2133
  2166  0012CA                     u1030:
  2167  0012CA                     
  2168                           ;statesModify.c: 181:             if (blink == 0) {
  2169  0012CA  5003               	movf	_blink^0,w,c
  2170  0012CC  1004               	iorwf	(_blink+1)^0,w,c
  2171  0012CE  A4D8               	btfss	status,2,c
  2172  0012D0  EF6C  F009         	goto	u1041
  2173  0012D4  EF6E  F009         	goto	u1040
  2174  0012D8                     u1041:
  2175  0012D8  EF76  F009         	goto	l2129
  2176  0012DC                     u1040:
  2177  0012DC                     
  2178                           ;statesModify.c: 182:                 LCDPutChar(' ');
  2179  0012DC  0E20               	movlw	32
  2180  0012DE  ECFA  F00F         	call	_LCDPutChar
  2181                           
  2182                           ;statesModify.c: 183:                 LCDPutChar(' ');
  2183  0012E2  0E20               	movlw	32
  2184  0012E4  ECFA  F00F         	call	_LCDPutChar
  2185                           
  2186                           ;statesModify.c: 184:             } else {
  2187  0012E8  EF92  F009         	goto	l2131
  2188  0012EC                     l2129:
  2189                           
  2190                           ;statesModify.c: 185:                 LCDPutChar(sec/10+'0');
  2191  0012EC  C009  F029         	movff	_sec,___awdiv@dividend
  2192  0012F0  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2193  0012F4  0E00               	movlw	0
  2194  0012F6  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2195  0012F8  0E0A               	movlw	10
  2196  0012FA  6E2B               	movwf	___awdiv@divisor^0,c
  2197  0012FC  EC58  F00E         	call	___awdiv	;wreg free
  2198  001300  5029               	movf	?___awdiv^0,w,c
  2199  001302  0F30               	addlw	48
  2200  001304  ECFA  F00F         	call	_LCDPutChar
  2201                           
  2202                           ;statesModify.c: 186:                 LCDPutChar(sec%10+'0');
  2203  001308  C009  F029         	movff	_sec,___awmod@dividend
  2204  00130C  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2205  001310  0E00               	movlw	0
  2206  001312  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2207  001314  0E0A               	movlw	10
  2208  001316  6E2B               	movwf	___awmod@divisor^0,c
  2209  001318  EC1B  F00F         	call	___awmod	;wreg free
  2210  00131C  5029               	movf	?___awmod^0,w,c
  2211  00131E  0F30               	addlw	48
  2212  001320  ECFA  F00F         	call	_LCDPutChar
  2213  001324                     l2131:
  2214                           
  2215                           ;statesModify.c: 188:             blink = (blink + 1) % 2;
  2216  001324  0E01               	movlw	1
  2217  001326  2403               	addwf	_blink^0,w,c
  2218  001328  6E32               	movwf	??_displayModSecond^0,c
  2219  00132A  0E00               	movlw	0
  2220  00132C  2004               	addwfc	(_blink+1)^0,w,c
  2221  00132E  6E33               	movwf	(??_displayModSecond+1)^0,c
  2222  001330  0E01               	movlw	1
  2223  001332  1432               	andwf	??_displayModSecond^0,w,c
  2224  001334  6E03               	movwf	_blink^0,c
  2225  001336  6A04               	clrf	(_blink+1)^0,c
  2226                           
  2227                           ;statesModify.c: 189:         } else {
  2228  001338  EFBA  F009         	goto	l443
  2229  00133C                     l2133:
  2230                           
  2231                           ;statesModify.c: 190:             LCDPutChar(sec/10+'0');
  2232  00133C  C009  F029         	movff	_sec,___awdiv@dividend
  2233  001340  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2234  001344  0E00               	movlw	0
  2235  001346  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2236  001348  0E0A               	movlw	10
  2237  00134A  6E2B               	movwf	___awdiv@divisor^0,c
  2238  00134C  EC58  F00E         	call	___awdiv	;wreg free
  2239  001350  5029               	movf	?___awdiv^0,w,c
  2240  001352  0F30               	addlw	48
  2241  001354  ECFA  F00F         	call	_LCDPutChar
  2242                           
  2243                           ;statesModify.c: 191:             LCDPutChar(sec%10+'0');
  2244  001358  C009  F029         	movff	_sec,___awmod@dividend
  2245  00135C  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2246  001360  0E00               	movlw	0
  2247  001362  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2248  001364  0E0A               	movlw	10
  2249  001366  6E2B               	movwf	___awmod@divisor^0,c
  2250  001368  EC1B  F00F         	call	___awmod	;wreg free
  2251  00136C  5029               	movf	?___awmod^0,w,c
  2252  00136E  0F30               	addlw	48
  2253  001370  ECFA  F00F         	call	_LCDPutChar
  2254  001374                     l443:
  2255  001374  0012               	return		;funcret
  2256  001376                     __end_of_displayModSecond:
  2257                           	opt callstack 0
  2258                           
  2259 ;; *************** function _displayModMinute *****************
  2260 ;; Defined at:
  2261 ;;		line 132 in file "statesModify.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;Total ram usage:        2 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    7
  2282 ;; This function calls:
  2283 ;;		_LCDPutChar
  2284 ;;		_LCDPutInst
  2285 ;;		_LCDPutStr
  2286 ;;		___awdiv
  2287 ;;		___awmod
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text10
  2294  001376                     __ptext10:
  2295                           	opt callstack 0
  2296  001376                     _displayModMinute:
  2297                           	opt callstack 23
  2298  001376                     
  2299                           ;statesModify.c: 133:     LCDPutInst(0x80);
  2300  001376  0E80               	movlw	128
  2301  001378  EC25  F010         	call	_LCDPutInst
  2302  00137C                     
  2303                           ;statesModify.c: 134:     LCDPutStr("MODIFIES MINUTE");
  2304  00137C  0E43               	movlw	low STR_3
  2305  00137E  6E30               	movwf	LCDPutStr@ptr^0,c
  2306  001380  0E10               	movlw	high STR_3
  2307  001382  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2308  001384  ECE9  F010         	call	_LCDPutStr	;wreg free
  2309  001388                     
  2310                           ;statesModify.c: 135:     LCDPutInst(0xC0);
  2311  001388  0EC0               	movlw	192
  2312  00138A  EC25  F010         	call	_LCDPutInst
  2313  00138E                     
  2314                           ;statesModify.c: 136:     LCDPutChar(hr/10+'0');
  2315  00138E  C005  F029         	movff	_hr,___awdiv@dividend
  2316  001392  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2317  001396  0E00               	movlw	0
  2318  001398  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2319  00139A  0E0A               	movlw	10
  2320  00139C  6E2B               	movwf	___awdiv@divisor^0,c
  2321  00139E  EC58  F00E         	call	___awdiv	;wreg free
  2322  0013A2  5029               	movf	?___awdiv^0,w,c
  2323  0013A4  0F30               	addlw	48
  2324  0013A6  ECFA  F00F         	call	_LCDPutChar
  2325  0013AA                     
  2326                           ;statesModify.c: 137:     LCDPutChar(hr%10+'0');
  2327  0013AA  C005  F029         	movff	_hr,___awmod@dividend
  2328  0013AE  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2329  0013B2  0E00               	movlw	0
  2330  0013B4  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2331  0013B6  0E0A               	movlw	10
  2332  0013B8  6E2B               	movwf	___awmod@divisor^0,c
  2333  0013BA  EC1B  F00F         	call	___awmod	;wreg free
  2334  0013BE  5029               	movf	?___awmod^0,w,c
  2335  0013C0  0F30               	addlw	48
  2336  0013C2  ECFA  F00F         	call	_LCDPutChar
  2337  0013C6                     
  2338                           ;statesModify.c: 139:     LCDPutChar(':');
  2339  0013C6  0E3A               	movlw	58
  2340  0013C8  ECFA  F00F         	call	_LCDPutChar
  2341  0013CC                     
  2342                           ;statesModify.c: 140:     LCDPutInst(0xC3);
  2343  0013CC  0EC3               	movlw	195
  2344  0013CE  EC25  F010         	call	_LCDPutInst
  2345  0013D2                     
  2346                           ;statesModify.c: 141:     if (count10ms >= (20*2)) {
  2347  0013D2  BE16               	btfsc	(_count10ms+1)^0,7,c
  2348  0013D4  EFF5  F009         	goto	u991
  2349  0013D8  5016               	movf	(_count10ms+1)^0,w,c
  2350  0013DA  E109               	bnz	u990
  2351  0013DC  0E28               	movlw	40
  2352  0013DE  5C15               	subwf	_count10ms^0,w,c
  2353  0013E0  A0D8               	btfss	status,0,c
  2354  0013E2  EFF5  F009         	goto	u991
  2355  0013E6  EFF7  F009         	goto	u990
  2356  0013EA                     u991:
  2357  0013EA  EF5D  F00A         	goto	l430
  2358  0013EE                     u990:
  2359  0013EE                     
  2360                           ;statesModify.c: 142:         count10ms = 0;
  2361  0013EE  0E00               	movlw	0
  2362  0013F0  6E16               	movwf	(_count10ms+1)^0,c
  2363  0013F2  0E00               	movlw	0
  2364  0013F4  6E15               	movwf	_count10ms^0,c
  2365  0013F6                     
  2366                           ;statesModify.c: 143:         if (countAuto <= 0) {
  2367  0013F6  BE1C               	btfsc	(_countAuto+1)^0,7,c
  2368  0013F8  EF08  F00A         	goto	u1000
  2369  0013FC  501C               	movf	(_countAuto+1)^0,w,c
  2370  0013FE  E106               	bnz	u1001
  2371  001400  041B               	decf	_countAuto^0,w,c
  2372  001402  B0D8               	btfsc	status,0,c
  2373  001404  EF06  F00A         	goto	u1001
  2374  001408  EF08  F00A         	goto	u1000
  2375  00140C                     u1001:
  2376  00140C  EF41  F00A         	goto	l2095
  2377  001410                     u1000:
  2378  001410                     
  2379                           ;statesModify.c: 144:             if (blink == 0) {
  2380  001410  5003               	movf	_blink^0,w,c
  2381  001412  1004               	iorwf	(_blink+1)^0,w,c
  2382  001414  A4D8               	btfss	status,2,c
  2383  001416  EF0F  F00A         	goto	u1011
  2384  00141A  EF11  F00A         	goto	u1010
  2385  00141E                     u1011:
  2386  00141E  EF19  F00A         	goto	l2091
  2387  001422                     u1010:
  2388  001422                     
  2389                           ;statesModify.c: 145:                 LCDPutChar(' ');
  2390  001422  0E20               	movlw	32
  2391  001424  ECFA  F00F         	call	_LCDPutChar
  2392                           
  2393                           ;statesModify.c: 146:                 LCDPutChar(' ');
  2394  001428  0E20               	movlw	32
  2395  00142A  ECFA  F00F         	call	_LCDPutChar
  2396                           
  2397                           ;statesModify.c: 147:             } else {
  2398  00142E  EF35  F00A         	goto	l2093
  2399  001432                     l2091:
  2400                           
  2401                           ;statesModify.c: 148:                 LCDPutChar(min/10+'0');
  2402  001432  C007  F029         	movff	_min,___awdiv@dividend
  2403  001436  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2404  00143A  0E00               	movlw	0
  2405  00143C  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2406  00143E  0E0A               	movlw	10
  2407  001440  6E2B               	movwf	___awdiv@divisor^0,c
  2408  001442  EC58  F00E         	call	___awdiv	;wreg free
  2409  001446  5029               	movf	?___awdiv^0,w,c
  2410  001448  0F30               	addlw	48
  2411  00144A  ECFA  F00F         	call	_LCDPutChar
  2412                           
  2413                           ;statesModify.c: 149:                 LCDPutChar(min%10+'0');
  2414  00144E  C007  F029         	movff	_min,___awmod@dividend
  2415  001452  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2416  001456  0E00               	movlw	0
  2417  001458  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2418  00145A  0E0A               	movlw	10
  2419  00145C  6E2B               	movwf	___awmod@divisor^0,c
  2420  00145E  EC1B  F00F         	call	___awmod	;wreg free
  2421  001462  5029               	movf	?___awmod^0,w,c
  2422  001464  0F30               	addlw	48
  2423  001466  ECFA  F00F         	call	_LCDPutChar
  2424  00146A                     l2093:
  2425                           
  2426                           ;statesModify.c: 151:             blink = (blink + 1) % 2;
  2427  00146A  0E01               	movlw	1
  2428  00146C  2403               	addwf	_blink^0,w,c
  2429  00146E  6E32               	movwf	??_displayModMinute^0,c
  2430  001470  0E00               	movlw	0
  2431  001472  2004               	addwfc	(_blink+1)^0,w,c
  2432  001474  6E33               	movwf	(??_displayModMinute+1)^0,c
  2433  001476  0E01               	movlw	1
  2434  001478  1432               	andwf	??_displayModMinute^0,w,c
  2435  00147A  6E03               	movwf	_blink^0,c
  2436  00147C  6A04               	clrf	(_blink+1)^0,c
  2437                           
  2438                           ;statesModify.c: 152:         } else {
  2439  00147E  EF5D  F00A         	goto	l430
  2440  001482                     l2095:
  2441                           
  2442                           ;statesModify.c: 153:             LCDPutChar(min/10+'0');
  2443  001482  C007  F029         	movff	_min,___awdiv@dividend
  2444  001486  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2445  00148A  0E00               	movlw	0
  2446  00148C  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2447  00148E  0E0A               	movlw	10
  2448  001490  6E2B               	movwf	___awdiv@divisor^0,c
  2449  001492  EC58  F00E         	call	___awdiv	;wreg free
  2450  001496  5029               	movf	?___awdiv^0,w,c
  2451  001498  0F30               	addlw	48
  2452  00149A  ECFA  F00F         	call	_LCDPutChar
  2453                           
  2454                           ;statesModify.c: 154:             LCDPutChar(min%10+'0');
  2455  00149E  C007  F029         	movff	_min,___awmod@dividend
  2456  0014A2  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2457  0014A6  0E00               	movlw	0
  2458  0014A8  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2459  0014AA  0E0A               	movlw	10
  2460  0014AC  6E2B               	movwf	___awmod@divisor^0,c
  2461  0014AE  EC1B  F00F         	call	___awmod	;wreg free
  2462  0014B2  5029               	movf	?___awmod^0,w,c
  2463  0014B4  0F30               	addlw	48
  2464  0014B6  ECFA  F00F         	call	_LCDPutChar
  2465  0014BA                     l430:
  2466                           
  2467                           ;statesModify.c: 157:     LCDPutInst(0xC5);
  2468  0014BA  0EC5               	movlw	197
  2469  0014BC  EC25  F010         	call	_LCDPutInst
  2470                           
  2471                           ;statesModify.c: 158:     LCDPutChar(':');
  2472  0014C0  0E3A               	movlw	58
  2473  0014C2  ECFA  F00F         	call	_LCDPutChar
  2474                           
  2475                           ;statesModify.c: 160:     LCDPutChar(sec/10+'0');
  2476  0014C6  C009  F029         	movff	_sec,___awdiv@dividend
  2477  0014CA  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2478  0014CE  0E00               	movlw	0
  2479  0014D0  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2480  0014D2  0E0A               	movlw	10
  2481  0014D4  6E2B               	movwf	___awdiv@divisor^0,c
  2482  0014D6  EC58  F00E         	call	___awdiv	;wreg free
  2483  0014DA  5029               	movf	?___awdiv^0,w,c
  2484  0014DC  0F30               	addlw	48
  2485  0014DE  ECFA  F00F         	call	_LCDPutChar
  2486                           
  2487                           ;statesModify.c: 161:     LCDPutChar(sec%10+'0');
  2488  0014E2  C009  F029         	movff	_sec,___awmod@dividend
  2489  0014E6  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2490  0014EA  0E00               	movlw	0
  2491  0014EC  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2492  0014EE  0E0A               	movlw	10
  2493  0014F0  6E2B               	movwf	___awmod@divisor^0,c
  2494  0014F2  EC1B  F00F         	call	___awmod	;wreg free
  2495  0014F6  5029               	movf	?___awmod^0,w,c
  2496  0014F8  0F30               	addlw	48
  2497  0014FA  ECFA  F00F         	call	_LCDPutChar
  2498  0014FE  0012               	return		;funcret
  2499  001500                     __end_of_displayModMinute:
  2500                           	opt callstack 0
  2501                           
  2502 ;; *************** function _displayModHour *****************
  2503 ;; Defined at:
  2504 ;;		line 100 in file "statesModify.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;Total ram usage:        2 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    7
  2525 ;; This function calls:
  2526 ;;		_LCDPutChar
  2527 ;;		_LCDPutInst
  2528 ;;		_LCDPutStr
  2529 ;;		___awdiv
  2530 ;;		___awmod
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text11
  2537  001500                     __ptext11:
  2538                           	opt callstack 0
  2539  001500                     _displayModHour:
  2540                           	opt callstack 23
  2541  001500                     
  2542                           ;statesModify.c: 101:     LCDPutInst(0x80);
  2543  001500  0E80               	movlw	128
  2544  001502  EC25  F010         	call	_LCDPutInst
  2545  001506                     
  2546                           ;statesModify.c: 102:     LCDPutStr(" MODIFIES HOUR ");
  2547  001506  0E23               	movlw	low STR_2
  2548  001508  6E30               	movwf	LCDPutStr@ptr^0,c
  2549  00150A  0E10               	movlw	high STR_2
  2550  00150C  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2551  00150E  ECE9  F010         	call	_LCDPutStr	;wreg free
  2552  001512                     
  2553                           ;statesModify.c: 103:     LCDPutInst(0xC0);
  2554  001512  0EC0               	movlw	192
  2555  001514  EC25  F010         	call	_LCDPutInst
  2556  001518                     
  2557                           ;statesModify.c: 104:     if (count10ms >= (20*2)) {
  2558  001518  BE16               	btfsc	(_count10ms+1)^0,7,c
  2559  00151A  EF98  F00A         	goto	u961
  2560  00151E  5016               	movf	(_count10ms+1)^0,w,c
  2561  001520  E109               	bnz	u960
  2562  001522  0E28               	movlw	40
  2563  001524  5C15               	subwf	_count10ms^0,w,c
  2564  001526  A0D8               	btfss	status,0,c
  2565  001528  EF98  F00A         	goto	u961
  2566  00152C  EF9A  F00A         	goto	u960
  2567  001530                     u961:
  2568  001530  EF00  F00B         	goto	l422
  2569  001534                     u960:
  2570  001534                     
  2571                           ;statesModify.c: 105:         count10ms = 0;
  2572  001534  0E00               	movlw	0
  2573  001536  6E16               	movwf	(_count10ms+1)^0,c
  2574  001538  0E00               	movlw	0
  2575  00153A  6E15               	movwf	_count10ms^0,c
  2576  00153C                     
  2577                           ;statesModify.c: 106:         if (countAuto <= 0) {
  2578  00153C  BE1C               	btfsc	(_countAuto+1)^0,7,c
  2579  00153E  EFAB  F00A         	goto	u970
  2580  001542  501C               	movf	(_countAuto+1)^0,w,c
  2581  001544  E106               	bnz	u971
  2582  001546  041B               	decf	_countAuto^0,w,c
  2583  001548  B0D8               	btfsc	status,0,c
  2584  00154A  EFA9  F00A         	goto	u971
  2585  00154E  EFAB  F00A         	goto	u970
  2586  001552                     u971:
  2587  001552  EFE4  F00A         	goto	l2065
  2588  001556                     u970:
  2589  001556                     
  2590                           ;statesModify.c: 107:             if (blink == 0) {
  2591  001556  5003               	movf	_blink^0,w,c
  2592  001558  1004               	iorwf	(_blink+1)^0,w,c
  2593  00155A  A4D8               	btfss	status,2,c
  2594  00155C  EFB2  F00A         	goto	u981
  2595  001560  EFB4  F00A         	goto	u980
  2596  001564                     u981:
  2597  001564  EFBC  F00A         	goto	l2061
  2598  001568                     u980:
  2599  001568                     
  2600                           ;statesModify.c: 108:                 LCDPutChar(' ');
  2601  001568  0E20               	movlw	32
  2602  00156A  ECFA  F00F         	call	_LCDPutChar
  2603                           
  2604                           ;statesModify.c: 109:                 LCDPutChar(' ');
  2605  00156E  0E20               	movlw	32
  2606  001570  ECFA  F00F         	call	_LCDPutChar
  2607                           
  2608                           ;statesModify.c: 110:             } else {
  2609  001574  EFD8  F00A         	goto	l2063
  2610  001578                     l2061:
  2611                           
  2612                           ;statesModify.c: 111:                 LCDPutChar(hr/10+'0');
  2613  001578  C005  F029         	movff	_hr,___awdiv@dividend
  2614  00157C  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2615  001580  0E00               	movlw	0
  2616  001582  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2617  001584  0E0A               	movlw	10
  2618  001586  6E2B               	movwf	___awdiv@divisor^0,c
  2619  001588  EC58  F00E         	call	___awdiv	;wreg free
  2620  00158C  5029               	movf	?___awdiv^0,w,c
  2621  00158E  0F30               	addlw	48
  2622  001590  ECFA  F00F         	call	_LCDPutChar
  2623                           
  2624                           ;statesModify.c: 112:                 LCDPutChar(hr%10+'0');
  2625  001594  C005  F029         	movff	_hr,___awmod@dividend
  2626  001598  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2627  00159C  0E00               	movlw	0
  2628  00159E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2629  0015A0  0E0A               	movlw	10
  2630  0015A2  6E2B               	movwf	___awmod@divisor^0,c
  2631  0015A4  EC1B  F00F         	call	___awmod	;wreg free
  2632  0015A8  5029               	movf	?___awmod^0,w,c
  2633  0015AA  0F30               	addlw	48
  2634  0015AC  ECFA  F00F         	call	_LCDPutChar
  2635  0015B0                     l2063:
  2636                           
  2637                           ;statesModify.c: 114:             blink = (blink + 1) % 2;
  2638  0015B0  0E01               	movlw	1
  2639  0015B2  2403               	addwf	_blink^0,w,c
  2640  0015B4  6E32               	movwf	??_displayModHour^0,c
  2641  0015B6  0E00               	movlw	0
  2642  0015B8  2004               	addwfc	(_blink+1)^0,w,c
  2643  0015BA  6E33               	movwf	(??_displayModHour+1)^0,c
  2644  0015BC  0E01               	movlw	1
  2645  0015BE  1432               	andwf	??_displayModHour^0,w,c
  2646  0015C0  6E03               	movwf	_blink^0,c
  2647  0015C2  6A04               	clrf	(_blink+1)^0,c
  2648                           
  2649                           ;statesModify.c: 115:         } else {
  2650  0015C4  EF00  F00B         	goto	l422
  2651  0015C8                     l2065:
  2652                           
  2653                           ;statesModify.c: 116:             LCDPutChar(hr/10+'0');
  2654  0015C8  C005  F029         	movff	_hr,___awdiv@dividend
  2655  0015CC  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2656  0015D0  0E00               	movlw	0
  2657  0015D2  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2658  0015D4  0E0A               	movlw	10
  2659  0015D6  6E2B               	movwf	___awdiv@divisor^0,c
  2660  0015D8  EC58  F00E         	call	___awdiv	;wreg free
  2661  0015DC  5029               	movf	?___awdiv^0,w,c
  2662  0015DE  0F30               	addlw	48
  2663  0015E0  ECFA  F00F         	call	_LCDPutChar
  2664                           
  2665                           ;statesModify.c: 117:             LCDPutChar(hr%10+'0');
  2666  0015E4  C005  F029         	movff	_hr,___awmod@dividend
  2667  0015E8  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2668  0015EC  0E00               	movlw	0
  2669  0015EE  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2670  0015F0  0E0A               	movlw	10
  2671  0015F2  6E2B               	movwf	___awmod@divisor^0,c
  2672  0015F4  EC1B  F00F         	call	___awmod	;wreg free
  2673  0015F8  5029               	movf	?___awmod^0,w,c
  2674  0015FA  0F30               	addlw	48
  2675  0015FC  ECFA  F00F         	call	_LCDPutChar
  2676  001600                     l422:
  2677                           
  2678                           ;statesModify.c: 120:     LCDPutInst(0xC2);
  2679  001600  0EC2               	movlw	194
  2680  001602  EC25  F010         	call	_LCDPutInst
  2681                           
  2682                           ;statesModify.c: 121:     LCDPutChar(':');
  2683  001606  0E3A               	movlw	58
  2684  001608  ECFA  F00F         	call	_LCDPutChar
  2685                           
  2686                           ;statesModify.c: 123:     LCDPutChar(min/10+'0');
  2687  00160C  C007  F029         	movff	_min,___awdiv@dividend
  2688  001610  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2689  001614  0E00               	movlw	0
  2690  001616  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2691  001618  0E0A               	movlw	10
  2692  00161A  6E2B               	movwf	___awdiv@divisor^0,c
  2693  00161C  EC58  F00E         	call	___awdiv	;wreg free
  2694  001620  5029               	movf	?___awdiv^0,w,c
  2695  001622  0F30               	addlw	48
  2696  001624  ECFA  F00F         	call	_LCDPutChar
  2697                           
  2698                           ;statesModify.c: 124:     LCDPutChar(min%10+'0');
  2699  001628  C007  F029         	movff	_min,___awmod@dividend
  2700  00162C  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2701  001630  0E00               	movlw	0
  2702  001632  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2703  001634  0E0A               	movlw	10
  2704  001636  6E2B               	movwf	___awmod@divisor^0,c
  2705  001638  EC1B  F00F         	call	___awmod	;wreg free
  2706  00163C  5029               	movf	?___awmod^0,w,c
  2707  00163E  0F30               	addlw	48
  2708  001640  ECFA  F00F         	call	_LCDPutChar
  2709                           
  2710                           ;statesModify.c: 126:     LCDPutChar(':');
  2711  001644  0E3A               	movlw	58
  2712  001646  ECFA  F00F         	call	_LCDPutChar
  2713                           
  2714                           ;statesModify.c: 128:     LCDPutChar(sec/10+'0');
  2715  00164A  C009  F029         	movff	_sec,___awdiv@dividend
  2716  00164E  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2717  001652  0E00               	movlw	0
  2718  001654  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2719  001656  0E0A               	movlw	10
  2720  001658  6E2B               	movwf	___awdiv@divisor^0,c
  2721  00165A  EC58  F00E         	call	___awdiv	;wreg free
  2722  00165E  5029               	movf	?___awdiv^0,w,c
  2723  001660  0F30               	addlw	48
  2724  001662  ECFA  F00F         	call	_LCDPutChar
  2725                           
  2726                           ;statesModify.c: 129:     LCDPutChar(sec%10+'0');
  2727  001666  C009  F029         	movff	_sec,___awmod@dividend
  2728  00166A  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2729  00166E  0E00               	movlw	0
  2730  001670  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2731  001672  0E0A               	movlw	10
  2732  001674  6E2B               	movwf	___awmod@divisor^0,c
  2733  001676  EC1B  F00F         	call	___awmod	;wreg free
  2734  00167A  5029               	movf	?___awmod^0,w,c
  2735  00167C  0F30               	addlw	48
  2736  00167E  ECFA  F00F         	call	_LCDPutChar
  2737  001682  0012               	return		;funcret
  2738  001684                     __end_of_displayModHour:
  2739                           	opt callstack 0
  2740                           
  2741 ;; *************** function _displayClock *****************
  2742 ;; Defined at:
  2743 ;;		line 21 in file "stateClock.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    7
  2764 ;; This function calls:
  2765 ;;		_LCDPutChar
  2766 ;;		_LCDPutInst
  2767 ;;		_LCDPutStr
  2768 ;;		___awdiv
  2769 ;;		___awmod
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text12
  2776  001BE2                     __ptext12:
  2777                           	opt callstack 0
  2778  001BE2                     _displayClock:
  2779                           	opt callstack 23
  2780  001BE2                     
  2781                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2782  001BE2  0E80               	movlw	128
  2783  001BE4  EC25  F010         	call	_LCDPutInst
  2784  001BE8                     
  2785                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2786  001BE8  0E12               	movlw	low STR_1
  2787  001BEA  6E30               	movwf	LCDPutStr@ptr^0,c
  2788  001BEC  0E10               	movlw	high STR_1
  2789  001BEE  6E31               	movwf	(LCDPutStr@ptr+1)^0,c
  2790  001BF0  ECE9  F010         	call	_LCDPutStr	;wreg free
  2791  001BF4                     
  2792                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2793  001BF4  0EC0               	movlw	192
  2794  001BF6  EC25  F010         	call	_LCDPutInst
  2795  001BFA                     
  2796                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2797  001BFA  C005  F029         	movff	_hr,___awdiv@dividend
  2798  001BFE  C006  F02A         	movff	_hr+1,___awdiv@dividend+1
  2799  001C02  0E00               	movlw	0
  2800  001C04  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2801  001C06  0E0A               	movlw	10
  2802  001C08  6E2B               	movwf	___awdiv@divisor^0,c
  2803  001C0A  EC58  F00E         	call	___awdiv	;wreg free
  2804  001C0E  5029               	movf	?___awdiv^0,w,c
  2805  001C10  0F30               	addlw	48
  2806  001C12  ECFA  F00F         	call	_LCDPutChar
  2807  001C16                     
  2808                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2809  001C16  C005  F029         	movff	_hr,___awmod@dividend
  2810  001C1A  C006  F02A         	movff	_hr+1,___awmod@dividend+1
  2811  001C1E  0E00               	movlw	0
  2812  001C20  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2813  001C22  0E0A               	movlw	10
  2814  001C24  6E2B               	movwf	___awmod@divisor^0,c
  2815  001C26  EC1B  F00F         	call	___awmod	;wreg free
  2816  001C2A  5029               	movf	?___awmod^0,w,c
  2817  001C2C  0F30               	addlw	48
  2818  001C2E  ECFA  F00F         	call	_LCDPutChar
  2819  001C32                     
  2820                           ;stateClock.c: 27:     LCDPutChar(':');
  2821  001C32  0E3A               	movlw	58
  2822  001C34  ECFA  F00F         	call	_LCDPutChar
  2823  001C38                     
  2824                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2825  001C38  C007  F029         	movff	_min,___awdiv@dividend
  2826  001C3C  C008  F02A         	movff	_min+1,___awdiv@dividend+1
  2827  001C40  0E00               	movlw	0
  2828  001C42  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2829  001C44  0E0A               	movlw	10
  2830  001C46  6E2B               	movwf	___awdiv@divisor^0,c
  2831  001C48  EC58  F00E         	call	___awdiv	;wreg free
  2832  001C4C  5029               	movf	?___awdiv^0,w,c
  2833  001C4E  0F30               	addlw	48
  2834  001C50  ECFA  F00F         	call	_LCDPutChar
  2835  001C54                     
  2836                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2837  001C54  C007  F029         	movff	_min,___awmod@dividend
  2838  001C58  C008  F02A         	movff	_min+1,___awmod@dividend+1
  2839  001C5C  0E00               	movlw	0
  2840  001C5E  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2841  001C60  0E0A               	movlw	10
  2842  001C62  6E2B               	movwf	___awmod@divisor^0,c
  2843  001C64  EC1B  F00F         	call	___awmod	;wreg free
  2844  001C68  5029               	movf	?___awmod^0,w,c
  2845  001C6A  0F30               	addlw	48
  2846  001C6C  ECFA  F00F         	call	_LCDPutChar
  2847  001C70                     
  2848                           ;stateClock.c: 30:     LCDPutChar(':');
  2849  001C70  0E3A               	movlw	58
  2850  001C72  ECFA  F00F         	call	_LCDPutChar
  2851  001C76                     
  2852                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2853  001C76  C009  F029         	movff	_sec,___awdiv@dividend
  2854  001C7A  C00A  F02A         	movff	_sec+1,___awdiv@dividend+1
  2855  001C7E  0E00               	movlw	0
  2856  001C80  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2857  001C82  0E0A               	movlw	10
  2858  001C84  6E2B               	movwf	___awdiv@divisor^0,c
  2859  001C86  EC58  F00E         	call	___awdiv	;wreg free
  2860  001C8A  5029               	movf	?___awdiv^0,w,c
  2861  001C8C  0F30               	addlw	48
  2862  001C8E  ECFA  F00F         	call	_LCDPutChar
  2863  001C92                     
  2864                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2865  001C92  C009  F029         	movff	_sec,___awmod@dividend
  2866  001C96  C00A  F02A         	movff	_sec+1,___awmod@dividend+1
  2867  001C9A  0E00               	movlw	0
  2868  001C9C  6E2C               	movwf	(___awmod@divisor+1)^0,c
  2869  001C9E  0E0A               	movlw	10
  2870  001CA0  6E2B               	movwf	___awmod@divisor^0,c
  2871  001CA2  EC1B  F00F         	call	___awmod	;wreg free
  2872  001CA6  5029               	movf	?___awmod^0,w,c
  2873  001CA8  0F30               	addlw	48
  2874  001CAA  ECFA  F00F         	call	_LCDPutChar
  2875  001CAE  0012               	return		;funcret
  2876  001CB0                     __end_of_displayClock:
  2877                           	opt callstack 0
  2878                           
  2879 ;; *************** function ___awmod *****************
  2880 ;; Defined at:
  2881 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  dividend        2    8[COMRAM] int 
  2884 ;;  divisor         2   10[COMRAM] int 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  sign            1   13[COMRAM] unsigned char 
  2887 ;;  counter         1   12[COMRAM] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  2    8[COMRAM] int 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2897 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;Total ram usage:        6 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    3
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_displayClock
  2908 ;;		_displayModHour
  2909 ;;		_displayModMinute
  2910 ;;		_displayModSecond
  2911 ;;		_displayStpWatch
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text13
  2916  001E36                     __ptext13:
  2917                           	opt callstack 0
  2918  001E36                     ___awmod:
  2919                           	opt callstack 26
  2920  001E36  0E00               	movlw	0
  2921  001E38  6E2E               	movwf	___awmod@sign^0,c
  2922  001E3A  BE2A               	btfsc	(___awmod@dividend+1)^0,7,c
  2923  001E3C  EF24  F00F         	goto	u900
  2924  001E40  EF22  F00F         	goto	u901
  2925  001E44                     u901:
  2926  001E44  EF2A  F00F         	goto	l1967
  2927  001E48                     u900:
  2928  001E48  6C29               	negf	___awmod@dividend^0,c
  2929  001E4A  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  2930  001E4C  B0D8               	btfsc	status,0,c
  2931  001E4E  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  2932  001E50  0E01               	movlw	1
  2933  001E52  6E2E               	movwf	___awmod@sign^0,c
  2934  001E54                     l1967:
  2935  001E54  BE2C               	btfsc	(___awmod@divisor+1)^0,7,c
  2936  001E56  EF31  F00F         	goto	u910
  2937  001E5A  EF2F  F00F         	goto	u911
  2938  001E5E                     u911:
  2939  001E5E  EF35  F00F         	goto	l1971
  2940  001E62                     u910:
  2941  001E62  6C2B               	negf	___awmod@divisor^0,c
  2942  001E64  1E2C               	comf	(___awmod@divisor+1)^0,f,c
  2943  001E66  B0D8               	btfsc	status,0,c
  2944  001E68  2A2C               	incf	(___awmod@divisor+1)^0,f,c
  2945  001E6A                     l1971:
  2946  001E6A  502B               	movf	___awmod@divisor^0,w,c
  2947  001E6C  102C               	iorwf	(___awmod@divisor+1)^0,w,c
  2948  001E6E  B4D8               	btfsc	status,2,c
  2949  001E70  EF3C  F00F         	goto	u921
  2950  001E74  EF3E  F00F         	goto	u920
  2951  001E78                     u921:
  2952  001E78  EF62  F00F         	goto	l1987
  2953  001E7C                     u920:
  2954  001E7C  0E01               	movlw	1
  2955  001E7E  6E2D               	movwf	___awmod@counter^0,c
  2956  001E80  EF46  F00F         	goto	l1977
  2957  001E84                     l1975:
  2958  001E84  90D8               	bcf	status,0,c
  2959  001E86  362B               	rlcf	___awmod@divisor^0,f,c
  2960  001E88  362C               	rlcf	(___awmod@divisor+1)^0,f,c
  2961  001E8A  2A2D               	incf	___awmod@counter^0,f,c
  2962  001E8C                     l1977:
  2963  001E8C  AE2C               	btfss	(___awmod@divisor+1)^0,7,c
  2964  001E8E  EF4B  F00F         	goto	u931
  2965  001E92  EF4D  F00F         	goto	u930
  2966  001E96                     u931:
  2967  001E96  EF42  F00F         	goto	l1975
  2968  001E9A                     u930:
  2969  001E9A                     l1979:
  2970  001E9A  502B               	movf	___awmod@divisor^0,w,c
  2971  001E9C  5C29               	subwf	___awmod@dividend^0,w,c
  2972  001E9E  502C               	movf	(___awmod@divisor+1)^0,w,c
  2973  001EA0  582A               	subwfb	(___awmod@dividend+1)^0,w,c
  2974  001EA2  A0D8               	btfss	status,0,c
  2975  001EA4  EF56  F00F         	goto	u941
  2976  001EA8  EF58  F00F         	goto	u940
  2977  001EAC                     u941:
  2978  001EAC  EF5C  F00F         	goto	l1983
  2979  001EB0                     u940:
  2980  001EB0  502B               	movf	___awmod@divisor^0,w,c
  2981  001EB2  5E29               	subwf	___awmod@dividend^0,f,c
  2982  001EB4  502C               	movf	(___awmod@divisor+1)^0,w,c
  2983  001EB6  5A2A               	subwfb	(___awmod@dividend+1)^0,f,c
  2984  001EB8                     l1983:
  2985  001EB8  90D8               	bcf	status,0,c
  2986  001EBA  322C               	rrcf	(___awmod@divisor+1)^0,f,c
  2987  001EBC  322B               	rrcf	___awmod@divisor^0,f,c
  2988  001EBE  2E2D               	decfsz	___awmod@counter^0,f,c
  2989  001EC0  EF4D  F00F         	goto	l1979
  2990  001EC4                     l1987:
  2991  001EC4  502E               	movf	___awmod@sign^0,w,c
  2992  001EC6  B4D8               	btfsc	status,2,c
  2993  001EC8  EF68  F00F         	goto	u951
  2994  001ECC  EF6A  F00F         	goto	u950
  2995  001ED0                     u951:
  2996  001ED0  EF6E  F00F         	goto	l1991
  2997  001ED4                     u950:
  2998  001ED4  6C29               	negf	___awmod@dividend^0,c
  2999  001ED6  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  3000  001ED8  B0D8               	btfsc	status,0,c
  3001  001EDA  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  3002  001EDC                     l1991:
  3003  001EDC  C029  F029         	movff	___awmod@dividend,?___awmod
  3004  001EE0  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  3005  001EE4  0012               	return		;funcret
  3006  001EE6                     __end_of___awmod:
  3007                           	opt callstack 0
  3008                           
  3009 ;; *************** function ___awdiv *****************
  3010 ;; Defined at:
  3011 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  dividend        2    8[COMRAM] int 
  3014 ;;  divisor         2   10[COMRAM] int 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  quotient        2   14[COMRAM] int 
  3017 ;;  sign            1   13[COMRAM] unsigned char 
  3018 ;;  counter         1   12[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  2    8[COMRAM] int 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;Total ram usage:        8 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		Nothing
  3037 ;; This function is called by:
  3038 ;;		_displayClock
  3039 ;;		_displayModHour
  3040 ;;		_displayModMinute
  3041 ;;		_displayModSecond
  3042 ;;		_displayStpWatch
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text14
  3047  001CB0                     __ptext14:
  3048                           	opt callstack 0
  3049  001CB0                     ___awdiv:
  3050                           	opt callstack 26
  3051  001CB0  0E00               	movlw	0
  3052  001CB2  6E2E               	movwf	___awdiv@sign^0,c
  3053  001CB4  BE2C               	btfsc	(___awdiv@divisor+1)^0,7,c
  3054  001CB6  EF61  F00E         	goto	u840
  3055  001CBA  EF5F  F00E         	goto	u841
  3056  001CBE                     u841:
  3057  001CBE  EF67  F00E         	goto	l1923
  3058  001CC2                     u840:
  3059  001CC2  6C2B               	negf	___awdiv@divisor^0,c
  3060  001CC4  1E2C               	comf	(___awdiv@divisor+1)^0,f,c
  3061  001CC6  B0D8               	btfsc	status,0,c
  3062  001CC8  2A2C               	incf	(___awdiv@divisor+1)^0,f,c
  3063  001CCA  0E01               	movlw	1
  3064  001CCC  6E2E               	movwf	___awdiv@sign^0,c
  3065  001CCE                     l1923:
  3066  001CCE  BE2A               	btfsc	(___awdiv@dividend+1)^0,7,c
  3067  001CD0  EF6E  F00E         	goto	u850
  3068  001CD4  EF6C  F00E         	goto	u851
  3069  001CD8                     u851:
  3070  001CD8  EF74  F00E         	goto	l1929
  3071  001CDC                     u850:
  3072  001CDC  6C29               	negf	___awdiv@dividend^0,c
  3073  001CDE  1E2A               	comf	(___awdiv@dividend+1)^0,f,c
  3074  001CE0  B0D8               	btfsc	status,0,c
  3075  001CE2  2A2A               	incf	(___awdiv@dividend+1)^0,f,c
  3076  001CE4  0E01               	movlw	1
  3077  001CE6  1A2E               	xorwf	___awdiv@sign^0,f,c
  3078  001CE8                     l1929:
  3079  001CE8  0E00               	movlw	0
  3080  001CEA  6E30               	movwf	(___awdiv@quotient+1)^0,c
  3081  001CEC  0E00               	movlw	0
  3082  001CEE  6E2F               	movwf	___awdiv@quotient^0,c
  3083  001CF0  502B               	movf	___awdiv@divisor^0,w,c
  3084  001CF2  102C               	iorwf	(___awdiv@divisor+1)^0,w,c
  3085  001CF4  B4D8               	btfsc	status,2,c
  3086  001CF6  EF7F  F00E         	goto	u861
  3087  001CFA  EF81  F00E         	goto	u860
  3088  001CFE                     u861:
  3089  001CFE  EFA9  F00E         	goto	l1951
  3090  001D02                     u860:
  3091  001D02  0E01               	movlw	1
  3092  001D04  6E2D               	movwf	___awdiv@counter^0,c
  3093  001D06  EF89  F00E         	goto	l1937
  3094  001D0A                     l1935:
  3095  001D0A  90D8               	bcf	status,0,c
  3096  001D0C  362B               	rlcf	___awdiv@divisor^0,f,c
  3097  001D0E  362C               	rlcf	(___awdiv@divisor+1)^0,f,c
  3098  001D10  2A2D               	incf	___awdiv@counter^0,f,c
  3099  001D12                     l1937:
  3100  001D12  AE2C               	btfss	(___awdiv@divisor+1)^0,7,c
  3101  001D14  EF8E  F00E         	goto	u871
  3102  001D18  EF90  F00E         	goto	u870
  3103  001D1C                     u871:
  3104  001D1C  EF85  F00E         	goto	l1935
  3105  001D20                     u870:
  3106  001D20                     l1939:
  3107  001D20  90D8               	bcf	status,0,c
  3108  001D22  362F               	rlcf	___awdiv@quotient^0,f,c
  3109  001D24  3630               	rlcf	(___awdiv@quotient+1)^0,f,c
  3110  001D26  502B               	movf	___awdiv@divisor^0,w,c
  3111  001D28  5C29               	subwf	___awdiv@dividend^0,w,c
  3112  001D2A  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3113  001D2C  582A               	subwfb	(___awdiv@dividend+1)^0,w,c
  3114  001D2E  A0D8               	btfss	status,0,c
  3115  001D30  EF9C  F00E         	goto	u881
  3116  001D34  EF9E  F00E         	goto	u880
  3117  001D38                     u881:
  3118  001D38  EFA3  F00E         	goto	l1947
  3119  001D3C                     u880:
  3120  001D3C  502B               	movf	___awdiv@divisor^0,w,c
  3121  001D3E  5E29               	subwf	___awdiv@dividend^0,f,c
  3122  001D40  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3123  001D42  5A2A               	subwfb	(___awdiv@dividend+1)^0,f,c
  3124  001D44  802F               	bsf	___awdiv@quotient^0,0,c
  3125  001D46                     l1947:
  3126  001D46  90D8               	bcf	status,0,c
  3127  001D48  322C               	rrcf	(___awdiv@divisor+1)^0,f,c
  3128  001D4A  322B               	rrcf	___awdiv@divisor^0,f,c
  3129  001D4C  2E2D               	decfsz	___awdiv@counter^0,f,c
  3130  001D4E  EF90  F00E         	goto	l1939
  3131  001D52                     l1951:
  3132  001D52  502E               	movf	___awdiv@sign^0,w,c
  3133  001D54  B4D8               	btfsc	status,2,c
  3134  001D56  EFAF  F00E         	goto	u891
  3135  001D5A  EFB1  F00E         	goto	u890
  3136  001D5E                     u891:
  3137  001D5E  EFB5  F00E         	goto	l1955
  3138  001D62                     u890:
  3139  001D62  6C2F               	negf	___awdiv@quotient^0,c
  3140  001D64  1E30               	comf	(___awdiv@quotient+1)^0,f,c
  3141  001D66  B0D8               	btfsc	status,0,c
  3142  001D68  2A30               	incf	(___awdiv@quotient+1)^0,f,c
  3143  001D6A                     l1955:
  3144  001D6A  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  3145  001D6E  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  3146  001D72  0012               	return		;funcret
  3147  001D74                     __end_of___awdiv:
  3148                           	opt callstack 0
  3149                           
  3150 ;; *************** function _LCDPutStr *****************
  3151 ;; Defined at:
  3152 ;;		line 198 in file "BBSPI_LCD.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  3155 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  3156 ;;		 -> STR_1(17), 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;Total ram usage:        2 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    6
  3175 ;; This function calls:
  3176 ;;		_LCDPutChar
  3177 ;; This function is called by:
  3178 ;;		_displayClock
  3179 ;;		_displayModHour
  3180 ;;		_displayModMinute
  3181 ;;		_displayModSecond
  3182 ;;		_displayStpWatch
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text15
  3187  0021D2                     __ptext15:
  3188                           	opt callstack 0
  3189  0021D2                     _LCDPutStr:
  3190                           	opt callstack 23
  3191  0021D2                     
  3192                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  3193  0021D2  EFF7  F010         	goto	l1913
  3194  0021D6                     l1909:
  3195  0021D6  C030  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3196  0021DA  C031  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3197  0021DE                     	if	0	;tblptru may be non-zero
  3198  0021DE                     	endif
  3199  0021DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3200  0021DE  0E00               	movlw	low (__mediumconst shr (0+16))
  3201  0021E0  6EF8               	movwf	tblptru,c
  3202  0021E2                     	endif
  3203  0021E2  0008               	tblrd		*
  3204  0021E4  50F5               	movf	tablat,w,c
  3205  0021E6  ECFA  F00F         	call	_LCDPutChar
  3206  0021EA  4A30               	infsnz	LCDPutStr@ptr^0,f,c
  3207  0021EC  2A31               	incf	(LCDPutStr@ptr+1)^0,f,c
  3208  0021EE                     l1913:
  3209  0021EE  C030  FFF6         	movff	LCDPutStr@ptr,tblptrl
  3210  0021F2  C031  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  3211  0021F6                     	if	0	;tblptru may be non-zero
  3212  0021F6                     	endif
  3213  0021F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3214  0021F6  0E00               	movlw	low (__mediumconst shr (0+16))
  3215  0021F8  6EF8               	movwf	tblptru,c
  3216  0021FA                     	endif
  3217  0021FA  0008               	tblrd		*
  3218  0021FC  50F5               	movf	tablat,w,c
  3219  0021FE  0900               	iorlw	0
  3220  002200  A4D8               	btfss	status,2,c
  3221  002202  EF05  F011         	goto	u831
  3222  002206  EF07  F011         	goto	u830
  3223  00220A                     u831:
  3224  00220A  EFEB  F010         	goto	l1909
  3225  00220E                     u830:
  3226  00220E  0012               	return		;funcret
  3227  002210                     __end_of_LCDPutStr:
  3228                           	opt callstack 0
  3229                           
  3230 ;; *************** function _LCDPutChar *****************
  3231 ;; Defined at:
  3232 ;;		line 160 in file "BBSPI_LCD.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  ch              1    wreg     unsigned char 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  ch              1   14[COMRAM] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      void 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0, cstack
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;Total ram usage:        2 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    5
  3253 ;; This function calls:
  3254 ;;		_WritePort_BBSPI
  3255 ;; This function is called by:
  3256 ;;		_LCDPutStr
  3257 ;;		_displayClock
  3258 ;;		_displayModHour
  3259 ;;		_displayModMinute
  3260 ;;		_displayModSecond
  3261 ;;		_displayStpWatch
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text16
  3266  001FF4                     __ptext16:
  3267                           	opt callstack 0
  3268  001FF4                     _LCDPutChar:
  3269                           	opt callstack 23
  3270                           
  3271                           ;incstack = 0
  3272                           ;LCDPutChar@ch stored from wreg
  3273  001FF4  6E2F               	movwf	LCDPutChar@ch^0,c
  3274  001FF6                     
  3275                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3276  001FF6  0E80               	movlw	128
  3277  001FF8  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3278  001FFA  0E12               	movlw	18
  3279  001FFC  EC30  F011         	call	_WritePort_BBSPI
  3280  002000                     
  3281                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3282  002000  0E04               	movlw	4
  3283  002002  6E2E               	movwf	??_LCDPutChar^0,c
  3284  002004  0E3E               	movlw	62
  3285  002006                     u1177:
  3286  002006  2EE8               	decfsz	wreg,f,c
  3287  002008  D7FE               	bra	u1177
  3288  00200A  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3289  00200C  D7FC               	bra	u1177
  3290  00200E                     
  3291                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3292  00200E  C02F  F02C         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3293  002012  0E13               	movlw	19
  3294  002014  EC30  F011         	call	_WritePort_BBSPI
  3295                           
  3296                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3297  002018  0E04               	movlw	4
  3298  00201A  6E2E               	movwf	??_LCDPutChar^0,c
  3299  00201C  0E3E               	movlw	62
  3300  00201E                     u1187:
  3301  00201E  2EE8               	decfsz	wreg,f,c
  3302  002020  D7FE               	bra	u1187
  3303  002022  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3304  002024  D7FC               	bra	u1187
  3305  002026                     
  3306                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3307  002026  0EC0               	movlw	192
  3308  002028  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3309  00202A  0E12               	movlw	18
  3310  00202C  EC30  F011         	call	_WritePort_BBSPI
  3311  002030                     
  3312                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3313  002030  0E04               	movlw	4
  3314  002032  6E2E               	movwf	??_LCDPutChar^0,c
  3315  002034  0E3E               	movlw	62
  3316  002036                     u1197:
  3317  002036  2EE8               	decfsz	wreg,f,c
  3318  002038  D7FE               	bra	u1197
  3319  00203A  2E2E               	decfsz	??_LCDPutChar^0,f,c
  3320  00203C  D7FC               	bra	u1197
  3321                           
  3322                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3323  00203E  0E00               	movlw	0
  3324  002040  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3325  002042  0E12               	movlw	18
  3326  002044  EC30  F011         	call	_WritePort_BBSPI
  3327  002048  0012               	return		;funcret
  3328  00204A                     __end_of_LCDPutChar:
  3329                           	opt callstack 0
  3330                           
  3331 ;; *************** function _buttonInitialize *****************
  3332 ;; Defined at:
  3333 ;;		line 23 in file "system.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    3
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text17
  3362  0022AA                     __ptext17:
  3363                           	opt callstack 0
  3364  0022AA                     _buttonInitialize:
  3365                           	opt callstack 27
  3366  0022AA                     
  3367                           ;system.c: 24:     TRISAbits.TRISA5 = 1;
  3368  0022AA  8A92               	bsf	146,5,c	;volatile
  3369                           
  3370                           ;system.c: 25:     TRISBbits.TRISB0 = 1;
  3371  0022AC  8093               	bsf	147,0,c	;volatile
  3372  0022AE                     
  3373                           ;system.c: 26:     ADCON1 = 0b00001111;
  3374  0022AE  0E0F               	movlw	15
  3375  0022B0  6EC1               	movwf	193,c	;volatile
  3376  0022B2  0012               	return		;funcret
  3377  0022B4                     __end_of_buttonInitialize:
  3378                           	opt callstack 0
  3379                           
  3380 ;; *************** function _LCDInit *****************
  3381 ;; Defined at:
  3382 ;;		line 45 in file "BBSPI_LCD.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;		None
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      void 
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0, cstack
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;Total ram usage:        1 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    6
  3403 ;; This function calls:
  3404 ;;		_InitBBSPI
  3405 ;;		_LCDPutInst
  3406 ;;		_Port_BBSPIInit
  3407 ;;		_WritePort_BBSPI
  3408 ;; This function is called by:
  3409 ;;		_main
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           	psect	text18
  3414  0020F2                     __ptext18:
  3415                           	opt callstack 0
  3416  0020F2                     _LCDInit:
  3417                           	opt callstack 24
  3418  0020F2                     
  3419                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3420  0020F2  EC47  F011         	call	_InitBBSPI	;wreg free
  3421  0020F6                     
  3422                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3423  0020F6  9C97               	bcf	151,6,c	;volatile
  3424  0020F8                     
  3425                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3426  0020F8  9C8E               	bcf	142,6,c	;volatile
  3427  0020FA                     
  3428                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3429  0020FA  8C8E               	bsf	142,6,c	;volatile
  3430  0020FC                     
  3431                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3432  0020FC  0E00               	movlw	0
  3433  0020FE  EC23  F011         	call	_Port_BBSPIInit
  3434  002102                     
  3435                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3436  002102  0E01               	movlw	1
  3437  002104  EC23  F011         	call	_Port_BBSPIInit
  3438  002108                     
  3439                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3440  002108  0E00               	movlw	0
  3441  00210A  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3442  00210C  0E12               	movlw	18
  3443  00210E  EC30  F011         	call	_WritePort_BBSPI
  3444  002112                     
  3445                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3446  002112  0E31               	movlw	49
  3447  002114  6E30               	movwf	??_LCDInit^0,c
  3448  002116  0EB2               	movlw	178
  3449  002118                     u1207:
  3450  002118  2EE8               	decfsz	wreg,f,c
  3451  00211A  D7FE               	bra	u1207
  3452  00211C  2E30               	decfsz	??_LCDInit^0,f,c
  3453  00211E  D7FC               	bra	u1207
  3454  002120  D000               	nop2	
  3455  002122                     
  3456                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3457  002122  0E32               	movlw	50
  3458  002124  EC25  F010         	call	_LCDPutInst
  3459  002128                     
  3460                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3461  002128  0E3C               	movlw	60
  3462  00212A  EC25  F010         	call	_LCDPutInst
  3463  00212E                     
  3464                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3465  00212E  0E0C               	movlw	12
  3466  002130  EC25  F010         	call	_LCDPutInst
  3467  002134                     
  3468                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3469  002134  0E01               	movlw	1
  3470  002136  EC25  F010         	call	_LCDPutInst
  3471  00213A                     
  3472                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3473  00213A  0E06               	movlw	6
  3474  00213C  EC25  F010         	call	_LCDPutInst
  3475  002140  0012               	return		;funcret
  3476  002142                     __end_of_LCDInit:
  3477                           	opt callstack 0
  3478                           
  3479 ;; *************** function _Port_BBSPIInit *****************
  3480 ;; Defined at:
  3481 ;;		line 123 in file "BBSPI_LCD.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  port_dir        1    wreg     unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  port_dir        1   11[COMRAM] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        1 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    4
  3502 ;; This function calls:
  3503 ;;		_SendByteBBSPI
  3504 ;; This function is called by:
  3505 ;;		_LCDInit
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text19
  3510  002246                     __ptext19:
  3511                           	opt callstack 0
  3512  002246                     _Port_BBSPIInit:
  3513                           	opt callstack 25
  3514                           
  3515                           ;incstack = 0
  3516                           ;Port_BBSPIInit@port_dir stored from wreg
  3517  002246  6E2C               	movwf	Port_BBSPIInit@port_dir^0,c
  3518  002248                     
  3519                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3520  002248  9489               	bcf	137,2,c	;volatile
  3521  00224A                     
  3522                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3523  00224A  0E40               	movlw	64
  3524  00224C  ECC2  F00F         	call	_SendByteBBSPI
  3525                           
  3526                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3527  002250  502C               	movf	Port_BBSPIInit@port_dir^0,w,c
  3528  002252  ECC2  F00F         	call	_SendByteBBSPI
  3529                           
  3530                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3531  002256  0E00               	movlw	0
  3532  002258  ECC2  F00F         	call	_SendByteBBSPI
  3533  00225C                     
  3534                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3535  00225C  8489               	bsf	137,2,c	;volatile
  3536  00225E  0012               	return		;funcret
  3537  002260                     __end_of_Port_BBSPIInit:
  3538                           	opt callstack 0
  3539                           
  3540 ;; *************** function _LCDPutInst *****************
  3541 ;; Defined at:
  3542 ;;		line 179 in file "BBSPI_LCD.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  ch              1    wreg     unsigned char 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  ch              1   14[COMRAM] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      void 
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;Total ram usage:        2 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    5
  3563 ;; This function calls:
  3564 ;;		_WritePort_BBSPI
  3565 ;; This function is called by:
  3566 ;;		_LCDInit
  3567 ;;		_displayClock
  3568 ;;		_displayModHour
  3569 ;;		_displayModMinute
  3570 ;;		_displayModSecond
  3571 ;;		_displayStpWatch
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text20
  3576  00204A                     __ptext20:
  3577                           	opt callstack 0
  3578  00204A                     _LCDPutInst:
  3579                           	opt callstack 24
  3580                           
  3581                           ;incstack = 0
  3582                           ;LCDPutInst@ch stored from wreg
  3583  00204A  6E2F               	movwf	LCDPutInst@ch^0,c
  3584  00204C                     
  3585                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3586  00204C  0E00               	movlw	0
  3587  00204E  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3588  002050  0E12               	movlw	18
  3589  002052  EC30  F011         	call	_WritePort_BBSPI
  3590  002056                     
  3591                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3592  002056  0E04               	movlw	4
  3593  002058  6E2E               	movwf	??_LCDPutInst^0,c
  3594  00205A  0E3E               	movlw	62
  3595  00205C                     u1217:
  3596  00205C  2EE8               	decfsz	wreg,f,c
  3597  00205E  D7FE               	bra	u1217
  3598  002060  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3599  002062  D7FC               	bra	u1217
  3600  002064                     
  3601                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3602  002064  C02F  F02C         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3603  002068  0E13               	movlw	19
  3604  00206A  EC30  F011         	call	_WritePort_BBSPI
  3605                           
  3606                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3607  00206E  0E04               	movlw	4
  3608  002070  6E2E               	movwf	??_LCDPutInst^0,c
  3609  002072  0E3E               	movlw	62
  3610  002074                     u1227:
  3611  002074  2EE8               	decfsz	wreg,f,c
  3612  002076  D7FE               	bra	u1227
  3613  002078  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3614  00207A  D7FC               	bra	u1227
  3615  00207C                     
  3616                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3617  00207C  0E40               	movlw	64
  3618  00207E  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3619  002080  0E12               	movlw	18
  3620  002082  EC30  F011         	call	_WritePort_BBSPI
  3621  002086                     
  3622                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3623  002086  0E04               	movlw	4
  3624  002088  6E2E               	movwf	??_LCDPutInst^0,c
  3625  00208A  0E3E               	movlw	62
  3626  00208C                     u1237:
  3627  00208C  2EE8               	decfsz	wreg,f,c
  3628  00208E  D7FE               	bra	u1237
  3629  002090  2E2E               	decfsz	??_LCDPutInst^0,f,c
  3630  002092  D7FC               	bra	u1237
  3631                           
  3632                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3633  002094  0E00               	movlw	0
  3634  002096  6E2C               	movwf	WritePort_BBSPI@a^0,c
  3635  002098  0E12               	movlw	18
  3636  00209A  EC30  F011         	call	_WritePort_BBSPI
  3637  00209E  0012               	return		;funcret
  3638  0020A0                     __end_of_LCDPutInst:
  3639                           	opt callstack 0
  3640                           
  3641 ;; *************** function _WritePort_BBSPI *****************
  3642 ;; Defined at:
  3643 ;;		line 144 in file "BBSPI_LCD.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  port_add        1    wreg     unsigned char 
  3646 ;;  a               1   11[COMRAM] unsigned char 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  port_add        1   12[COMRAM] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        2 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    4
  3665 ;; This function calls:
  3666 ;;		_SendByteBBSPI
  3667 ;; This function is called by:
  3668 ;;		_LCDInit
  3669 ;;		_LCDPutChar
  3670 ;;		_LCDPutInst
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text21
  3675  002260                     __ptext21:
  3676                           	opt callstack 0
  3677  002260                     _WritePort_BBSPI:
  3678                           	opt callstack 23
  3679                           
  3680                           ;incstack = 0
  3681                           ;WritePort_BBSPI@port_add stored from wreg
  3682  002260  6E2D               	movwf	WritePort_BBSPI@port_add^0,c
  3683  002262                     
  3684                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3685  002262  9489               	bcf	137,2,c	;volatile
  3686  002264                     
  3687                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3688  002264  0E40               	movlw	64
  3689  002266  ECC2  F00F         	call	_SendByteBBSPI
  3690                           
  3691                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3692  00226A  502D               	movf	WritePort_BBSPI@port_add^0,w,c
  3693  00226C  ECC2  F00F         	call	_SendByteBBSPI
  3694                           
  3695                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3696  002270  502C               	movf	WritePort_BBSPI@a^0,w,c
  3697  002272  ECC2  F00F         	call	_SendByteBBSPI
  3698  002276                     
  3699                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3700  002276  8489               	bsf	137,2,c	;volatile
  3701  002278  0012               	return		;funcret
  3702  00227A                     __end_of_WritePort_BBSPI:
  3703                           	opt callstack 0
  3704                           
  3705 ;; *************** function _SendByteBBSPI *****************
  3706 ;; Defined at:
  3707 ;;		line 91 in file "BBSPI_LCD.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;  output          1    wreg     unsigned char 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  output          1    8[COMRAM] unsigned char 
  3712 ;;  input           1   10[COMRAM] unsigned char 
  3713 ;;  bitcount        1    9[COMRAM] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;Total ram usage:        3 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    3
  3730 ;; This function calls:
  3731 ;;		Nothing
  3732 ;; This function is called by:
  3733 ;;		_Port_BBSPIInit
  3734 ;;		_WritePort_BBSPI
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text22
  3739  001F84                     __ptext22:
  3740                           	opt callstack 0
  3741  001F84                     _SendByteBBSPI:
  3742                           	opt callstack 23
  3743                           
  3744                           ;incstack = 0
  3745                           ;SendByteBBSPI@output stored from wreg
  3746  001F84  6E29               	movwf	SendByteBBSPI@output^0,c
  3747  001F86                     
  3748                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3749  001F86  C029  F02B         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3750  001F8A                     
  3751                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3752  001F8A  0E00               	movlw	0
  3753  001F8C  6E2A               	movwf	SendByteBBSPI@bitcount^0,c
  3754  001F8E                     l196:
  3755                           
  3756                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3757  001F8E  AE29               	btfss	SendByteBBSPI@output^0,7,c
  3758  001F90  EFCC  F00F         	goto	u11
  3759  001F94  EFCE  F00F         	goto	u10
  3760  001F98                     u11:
  3761  001F98  EFD1  F00F         	goto	l198
  3762  001F9C                     u10:
  3763  001F9C                     
  3764                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3765  001F9C  8A8B               	bsf	139,5,c	;volatile
  3766  001F9E  EFD2  F00F         	goto	l199
  3767  001FA2                     l198:
  3768                           
  3769                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3770  001FA2  9A8B               	bcf	139,5,c	;volatile
  3771  001FA4                     l199:
  3772                           
  3773                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3774  001FA4  A88B               	btfss	139,4,c	;volatile
  3775  001FA6  EFD7  F00F         	goto	u21
  3776  001FAA  EFD9  F00F         	goto	u20
  3777  001FAE                     u21:
  3778  001FAE  EFDD  F00F         	goto	l1179
  3779  001FB2                     u20:
  3780  001FB2                     
  3781                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3782  001FB2  80D8               	bsf	status,0,c
  3783  001FB4  362B               	rlcf	SendByteBBSPI@input^0,f,c
  3784  001FB6  EFE0  F00F         	goto	l1181
  3785  001FBA                     l1179:
  3786                           
  3787                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3788  001FBA  502B               	movf	SendByteBBSPI@input^0,w,c
  3789  001FBC  242B               	addwf	SendByteBBSPI@input^0,w,c
  3790  001FBE  6E2B               	movwf	SendByteBBSPI@input^0,c
  3791  001FC0                     l1181:
  3792                           
  3793                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3794  001FC0  868B               	bsf	139,3,c	;volatile
  3795  001FC2                     
  3796                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3797  001FC2  F000               	nop	
  3798  001FC4  F000               	nop	
  3799  001FC6  F000               	nop	
  3800  001FC8  F000               	nop	
  3801  001FCA  F000               	nop	
  3802  001FCC  F000               	nop	
  3803  001FCE                     
  3804                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3805  001FCE  F000               	nop	
  3806  001FD0  F000               	nop	
  3807  001FD2  F000               	nop	
  3808  001FD4  F000               	nop	
  3809  001FD6  F000               	nop	
  3810  001FD8  F000               	nop	
  3811  001FDA                     
  3812                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3813  001FDA  968B               	bcf	139,3,c	;volatile
  3814                           
  3815                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3816  001FDC  90D8               	bcf	status,0,c
  3817  001FDE  3629               	rlcf	SendByteBBSPI@output^0,f,c
  3818  001FE0                     
  3819                           ;BBSPI_LCD.c: 113:     }
  3820  001FE0  2A2A               	incf	SendByteBBSPI@bitcount^0,f,c
  3821  001FE2  0E07               	movlw	7
  3822  001FE4  642A               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3823  001FE6  EFF7  F00F         	goto	u31
  3824  001FEA  EFF9  F00F         	goto	u30
  3825  001FEE                     u31:
  3826  001FEE  EFC7  F00F         	goto	l196
  3827  001FF2                     u30:
  3828  001FF2  0012               	return		;funcret
  3829  001FF4                     __end_of_SendByteBBSPI:
  3830                           	opt callstack 0
  3831                           
  3832 ;; *************** function _InitBBSPI *****************
  3833 ;; Defined at:
  3834 ;;		line 70 in file "BBSPI_LCD.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      void 
  3841 ;; Registers used:
  3842 ;;		None
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:        0 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    3
  3855 ;; This function calls:
  3856 ;;		Nothing
  3857 ;; This function is called by:
  3858 ;;		_LCDInit
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text23
  3863  00228E                     __ptext23:
  3864                           	opt callstack 0
  3865  00228E                     _InitBBSPI:
  3866                           	opt callstack 26
  3867  00228E                     
  3868                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3869  00228E  9492               	bcf	146,2,c	;volatile
  3870                           
  3871                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  3872  002290  8894               	bsf	148,4,c	;volatile
  3873                           
  3874                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  3875  002292  9A94               	bcf	148,5,c	;volatile
  3876                           
  3877                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  3878  002294  9694               	bcf	148,3,c	;volatile
  3879                           
  3880                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  3881  002296  8489               	bsf	137,2,c	;volatile
  3882                           
  3883                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  3884  002298  888B               	bsf	139,4,c	;volatile
  3885                           
  3886                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  3887  00229A  9A8B               	bcf	139,5,c	;volatile
  3888                           
  3889                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  3890  00229C  968B               	bcf	139,3,c	;volatile
  3891  00229E  0012               	return		;funcret
  3892  0022A0                     __end_of_InitBBSPI:
  3893                           	opt callstack 0
  3894                           
  3895 ;; *************** function _deviceInterrupt *****************
  3896 ;; Defined at:
  3897 ;;		line 3 in file "interrupt.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;Total ram usage:        0 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		_button
  3920 ;; This function is called by:
  3921 ;;		Interrupt level 2
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	intcode
  3926  000008                     __pintcode:
  3927                           	opt callstack 0
  3928  000008                     _deviceInterrupt:
  3929                           	opt callstack 23
  3930                           
  3931                           ;incstack = 0
  3932  000008  823A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3933  00000A  ED50  F010         	call	int_func,f	;refresh shadow registers
  3934                           
  3935                           	psect	intcode_body
  3936  0020A0                     __pintcode_body:
  3937                           	opt callstack 23
  3938  0020A0                     int_func:
  3939                           	opt callstack 23
  3940  0020A0  0006               	pop		; remove dummy address from shadow register refresh
  3941  0020A2                     
  3942                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  3943  0020A2  A4F2               	btfss	242,2,c	;volatile
  3944  0020A4  EF56  F010         	goto	i2u114_41
  3945  0020A8  EF58  F010         	goto	i2u114_40
  3946  0020AC                     i2u114_41:
  3947  0020AC  EF77  F010         	goto	i2l265
  3948  0020B0                     i2u114_40:
  3949  0020B0  AAF2               	btfss	242,5,c	;volatile
  3950  0020B2  EF5D  F010         	goto	i2u115_41
  3951  0020B6  EF5F  F010         	goto	i2u115_40
  3952  0020BA                     i2u115_41:
  3953  0020BA  EF77  F010         	goto	i2l265
  3954  0020BE                     i2u115_40:
  3955  0020BE                     
  3956                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  3957  0020BE  94F2               	bcf	242,2,c	;volatile
  3958  0020C0                     
  3959                           ;interrupt.c: 7:         TMR0H = 0xfd;
  3960  0020C0  0EFD               	movlw	253
  3961  0020C2  6ED7               	movwf	215,c	;volatile
  3962                           
  3963                           ;interrupt.c: 8:         TMR0L = 0xaf;
  3964  0020C4  0EAF               	movlw	175
  3965  0020C6  6ED6               	movwf	214,c	;volatile
  3966  0020C8                     
  3967                           ;interrupt.c: 10:         count10ms++;
  3968  0020C8  4A15               	infsnz	_count10ms^0,f,c
  3969  0020CA  2A16               	incf	(_count10ms+1)^0,f,c
  3970  0020CC                     
  3971                           ;interrupt.c: 12:         timerFlag = 1;
  3972  0020CC  0E00               	movlw	0
  3973  0020CE  6E14               	movwf	(_timerFlag+1)^0,c
  3974  0020D0  0E01               	movlw	1
  3975  0020D2  6E13               	movwf	_timerFlag^0,c
  3976  0020D4                     
  3977                           ;interrupt.c: 13:         if (runSTW == 1) {
  3978  0020D4  0411               	decf	_runSTW^0,w,c
  3979  0020D6  1012               	iorwf	(_runSTW+1)^0,w,c
  3980  0020D8  A4D8               	btfss	status,2,c
  3981  0020DA  EF71  F010         	goto	i2u116_41
  3982  0020DE  EF73  F010         	goto	i2u116_40
  3983  0020E2                     i2u116_41:
  3984  0020E2  EF75  F010         	goto	i2l2259
  3985  0020E6                     i2u116_40:
  3986  0020E6                     
  3987                           ;interrupt.c: 14:             miliSecSTW++;
  3988  0020E6  4A0B               	infsnz	_miliSecSTW^0,f,c
  3989  0020E8  2A0C               	incf	(_miliSecSTW+1)^0,f,c
  3990  0020EA                     i2l2259:
  3991                           
  3992                           ;interrupt.c: 16:         button();
  3993  0020EA  ECBA  F00E         	call	_button	;wreg free
  3994  0020EE                     i2l265:
  3995  0020EE  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3996  0020F0  0011               	retfie		f
  3997  0020F2                     __end_of_deviceInterrupt:
  3998                           	opt callstack 0
  3999                           
  4000 ;; *************** function _button *****************
  4001 ;; Defined at:
  4002 ;;		line 27 in file "button.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;		None
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;  checkRB0        2    6[COMRAM] int 
  4007 ;;  checkRA5        2    4[COMRAM] int 
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  1    wreg      void 
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;Total ram usage:        4 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    1
  4024 ;; This function calls:
  4025 ;;		_readRA5Button
  4026 ;;		_readRB0Button
  4027 ;; This function is called by:
  4028 ;;		_deviceInterrupt
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text25
  4033  001D74                     __ptext25:
  4034                           	opt callstack 0
  4035  001D74                     _button:
  4036                           	opt callstack 23
  4037  001D74                     
  4038                           ;button.c: 28:     int checkRA5 = readRA5Button();
  4039  001D74  ECC5  F010         	call	_readRA5Button	;wreg free
  4040  001D78  C021  F025         	movff	?_readRA5Button,button@checkRA5
  4041  001D7C  C022  F026         	movff	?_readRA5Button+1,button@checkRA5+1
  4042                           
  4043                           ;button.c: 29:     int checkRB0 = readRB0Button();
  4044  001D80  ECA1  F010         	call	_readRB0Button	;wreg free
  4045  001D84  C021  F027         	movff	?_readRB0Button,button@checkRB0
  4046  001D88  C022  F028         	movff	?_readRB0Button+1,button@checkRB0+1
  4047  001D8C                     
  4048                           ;button.c: 30:     if (checkRA5 == 1) {
  4049  001D8C  0425               	decf	button@checkRA5^0,w,c
  4050  001D8E  1026               	iorwf	(button@checkRA5+1)^0,w,c
  4051  001D90  A4D8               	btfss	status,2,c
  4052  001D92  EFCD  F00E         	goto	i2u105_41
  4053  001D96  EFCF  F00E         	goto	i2u105_40
  4054  001D9A                     i2u105_41:
  4055  001D9A  EFD5  F00E         	goto	i2l2171
  4056  001D9E                     i2u105_40:
  4057  001D9E                     
  4058                           ;button.c: 31:         changeModePressed = 1;
  4059  001D9E  0E00               	movlw	0
  4060  001DA0  6E1A               	movwf	(_changeModePressed+1)^0,c
  4061  001DA2  0E01               	movlw	1
  4062  001DA4  6E19               	movwf	_changeModePressed^0,c
  4063                           
  4064                           ;button.c: 32:     }
  4065  001DA6  EF1A  F00F         	goto	i2l163
  4066  001DAA                     i2l2171:
  4067  001DAA  0427               	decf	button@checkRB0^0,w,c
  4068  001DAC  1028               	iorwf	(button@checkRB0+1)^0,w,c
  4069  001DAE  A4D8               	btfss	status,2,c
  4070  001DB0  EFDC  F00E         	goto	i2u106_41
  4071  001DB4  EFDE  F00E         	goto	i2u106_40
  4072  001DB8                     i2u106_41:
  4073  001DB8  EF08  F00F         	goto	i2l2183
  4074  001DBC                     i2u106_40:
  4075  001DBC                     
  4076                           ;button.c: 34:         countPressed++;
  4077  001DBC  4A1D               	infsnz	_countPressed^0,f,c
  4078  001DBE  2A1E               	incf	(_countPressed+1)^0,f,c
  4079  001DC0                     
  4080                           ;button.c: 35:         if (countPressed >= 100) {
  4081  001DC0  BE1E               	btfsc	(_countPressed+1)^0,7,c
  4082  001DC2  EFEC  F00E         	goto	i2u107_41
  4083  001DC6  501E               	movf	(_countPressed+1)^0,w,c
  4084  001DC8  E109               	bnz	i2u107_40
  4085  001DCA  0E64               	movlw	100
  4086  001DCC  5C1D               	subwf	_countPressed^0,w,c
  4087  001DCE  A0D8               	btfss	status,0,c
  4088  001DD0  EFEC  F00E         	goto	i2u107_41
  4089  001DD4  EFEE  F00E         	goto	i2u107_40
  4090  001DD8                     i2u107_41:
  4091  001DD8  EF1A  F00F         	goto	i2l163
  4092  001DDC                     i2u107_40:
  4093  001DDC                     
  4094                           ;button.c: 36:             countAuto++;
  4095  001DDC  4A1B               	infsnz	_countAuto^0,f,c
  4096  001DDE  2A1C               	incf	(_countAuto+1)^0,f,c
  4097  001DE0                     
  4098                           ;button.c: 37:             if (countAuto > 20) {
  4099  001DE0  BE1C               	btfsc	(_countAuto+1)^0,7,c
  4100  001DE2  EFFC  F00E         	goto	i2u108_41
  4101  001DE6  501C               	movf	(_countAuto+1)^0,w,c
  4102  001DE8  E109               	bnz	i2u108_40
  4103  001DEA  0E15               	movlw	21
  4104  001DEC  5C1B               	subwf	_countAuto^0,w,c
  4105  001DEE  A0D8               	btfss	status,0,c
  4106  001DF0  EFFC  F00E         	goto	i2u108_41
  4107  001DF4  EFFE  F00E         	goto	i2u108_40
  4108  001DF8                     i2u108_41:
  4109  001DF8  EF1A  F00F         	goto	i2l162
  4110  001DFC                     i2u108_40:
  4111  001DFC                     
  4112                           ;button.c: 38:                 increaseTime = 1;
  4113  001DFC  0E00               	movlw	0
  4114  001DFE  6E18               	movwf	(_increaseTime+1)^0,c
  4115  001E00  0E01               	movlw	1
  4116  001E02  6E17               	movwf	_increaseTime^0,c
  4117                           
  4118                           ;button.c: 39:                 countAuto = 0;
  4119  001E04  0E00               	movlw	0
  4120  001E06  6E1C               	movwf	(_countAuto+1)^0,c
  4121  001E08  0E00               	movlw	0
  4122  001E0A  6E1B               	movwf	_countAuto^0,c
  4123  001E0C  EF1A  F00F         	goto	i2l163
  4124  001E10                     i2l2183:
  4125                           
  4126                           ;button.c: 44:         countPressed = 0;
  4127  001E10  0E00               	movlw	0
  4128  001E12  6E1E               	movwf	(_countPressed+1)^0,c
  4129  001E14  0E00               	movlw	0
  4130  001E16  6E1D               	movwf	_countPressed^0,c
  4131                           
  4132                           ;button.c: 45:         countAuto = 0;
  4133  001E18  0E00               	movlw	0
  4134  001E1A  6E1C               	movwf	(_countAuto+1)^0,c
  4135  001E1C  0E00               	movlw	0
  4136  001E1E  6E1B               	movwf	_countAuto^0,c
  4137                           
  4138                           ;button.c: 46:         changeModePressed = 0;
  4139  001E20  0E00               	movlw	0
  4140  001E22  6E1A               	movwf	(_changeModePressed+1)^0,c
  4141  001E24  0E00               	movlw	0
  4142  001E26  6E19               	movwf	_changeModePressed^0,c
  4143                           
  4144                           ;button.c: 47:         increaseTime = 0;
  4145  001E28  0E00               	movlw	0
  4146  001E2A  6E18               	movwf	(_increaseTime+1)^0,c
  4147  001E2C  0E00               	movlw	0
  4148  001E2E  6E17               	movwf	_increaseTime^0,c
  4149  001E30  EF1A  F00F         	goto	i2l163
  4150  001E34                     i2l162:
  4151  001E34                     i2l163:
  4152  001E34  0012               	return		;funcret
  4153  001E36                     __end_of_button:
  4154                           	opt callstack 0
  4155                           
  4156 ;; *************** function _readRB0Button *****************
  4157 ;; Defined at:
  4158 ;;		line 15 in file "button.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  check           2    2[COMRAM] int 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  2    0[COMRAM] int 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        4 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_button
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text26
  4186  002142                     __ptext26:
  4187                           	opt callstack 0
  4188  002142                     _readRB0Button:
  4189                           	opt callstack 23
  4190  002142                     
  4191                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  4192  002142  C036  F037         	movff	_secondReadRB0,_firstReadRB0
  4193  002146                     
  4194                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  4195  002146  0E00               	movlw	0
  4196  002148  B081               	btfsc	129,0,c	;volatile
  4197  00214A  0E01               	movlw	1
  4198  00214C  6E36               	movwf	_secondReadRB0^0,c
  4199  00214E                     
  4200                           ;button.c: 18:     int check = 0;
  4201  00214E  0E00               	movlw	0
  4202  002150  6E24               	movwf	(readRB0Button@check+1)^0,c
  4203  002152  0E00               	movlw	0
  4204  002154  6E23               	movwf	readRB0Button@check^0,c
  4205  002156                     
  4206                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  4207  002156  5036               	movf	_secondReadRB0^0,w,c
  4208  002158  1837               	xorwf	_firstReadRB0^0,w,c
  4209  00215A  A4D8               	btfss	status,2,c
  4210  00215C  EFB2  F010         	goto	i2u81_41
  4211  002160  EFB4  F010         	goto	i2u81_40
  4212  002164                     i2u81_41:
  4213  002164  EFC0  F010         	goto	i2l1891
  4214  002168                     i2u81_40:
  4215  002168                     
  4216                           ;button.c: 20:         if (firstReadRB0 == 0) {
  4217  002168  5037               	movf	_firstReadRB0^0,w,c
  4218  00216A  A4D8               	btfss	status,2,c
  4219  00216C  EFBA  F010         	goto	i2u82_41
  4220  002170  EFBC  F010         	goto	i2u82_40
  4221  002174                     i2u82_41:
  4222  002174  EFC0  F010         	goto	i2l1891
  4223  002178                     i2u82_40:
  4224  002178                     
  4225                           ;button.c: 21:             check = 1;
  4226  002178  0E00               	movlw	0
  4227  00217A  6E24               	movwf	(readRB0Button@check+1)^0,c
  4228  00217C  0E01               	movlw	1
  4229  00217E  6E23               	movwf	readRB0Button@check^0,c
  4230  002180                     i2l1891:
  4231                           
  4232                           ;button.c: 24:     return check;
  4233  002180  C023  F021         	movff	readRB0Button@check,?_readRB0Button
  4234  002184  C024  F022         	movff	readRB0Button@check+1,?_readRB0Button+1
  4235  002188  0012               	return		;funcret
  4236  00218A                     __end_of_readRB0Button:
  4237                           	opt callstack 0
  4238                           
  4239 ;; *************** function _readRA5Button *****************
  4240 ;; Defined at:
  4241 ;;		line 3 in file "button.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  check           2    2[COMRAM] int 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  2    0[COMRAM] int 
  4248 ;; Registers used:
  4249 ;;		wreg, status,2, status,0
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;Total ram usage:        4 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; This function calls:
  4262 ;;		Nothing
  4263 ;; This function is called by:
  4264 ;;		_button
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text27
  4269  00218A                     __ptext27:
  4270                           	opt callstack 0
  4271  00218A                     _readRA5Button:
  4272                           	opt callstack 23
  4273  00218A                     
  4274                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4275  00218A  C038  F039         	movff	_secondReadRA5,_firstReadRA5
  4276  00218E                     
  4277                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4278  00218E  0E00               	movlw	0
  4279  002190  BA80               	btfsc	128,5,c	;volatile
  4280  002192  0E01               	movlw	1
  4281  002194  6E38               	movwf	_secondReadRA5^0,c
  4282  002196                     
  4283                           ;button.c: 6:     int check = 0;
  4284  002196  0E00               	movlw	0
  4285  002198  6E24               	movwf	(readRA5Button@check+1)^0,c
  4286  00219A  0E00               	movlw	0
  4287  00219C  6E23               	movwf	readRA5Button@check^0,c
  4288  00219E                     
  4289                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4290  00219E  5038               	movf	_secondReadRA5^0,w,c
  4291  0021A0  1839               	xorwf	_firstReadRA5^0,w,c
  4292  0021A2  A4D8               	btfss	status,2,c
  4293  0021A4  EFD6  F010         	goto	i2u79_41
  4294  0021A8  EFD8  F010         	goto	i2u79_40
  4295  0021AC                     i2u79_41:
  4296  0021AC  EFE4  F010         	goto	i2l1875
  4297  0021B0                     i2u79_40:
  4298  0021B0                     
  4299                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4300  0021B0  5039               	movf	_firstReadRA5^0,w,c
  4301  0021B2  A4D8               	btfss	status,2,c
  4302  0021B4  EFDE  F010         	goto	i2u80_41
  4303  0021B8  EFE0  F010         	goto	i2u80_40
  4304  0021BC                     i2u80_41:
  4305  0021BC  EFE4  F010         	goto	i2l1875
  4306  0021C0                     i2u80_40:
  4307  0021C0                     
  4308                           ;button.c: 9:             check = 1;
  4309  0021C0  0E00               	movlw	0
  4310  0021C2  6E24               	movwf	(readRA5Button@check+1)^0,c
  4311  0021C4  0E01               	movlw	1
  4312  0021C6  6E23               	movwf	readRA5Button@check^0,c
  4313  0021C8                     i2l1875:
  4314                           
  4315                           ;button.c: 12:    return check;
  4316  0021C8  C023  F021         	movff	readRA5Button@check,?_readRA5Button
  4317  0021CC  C024  F022         	movff	readRA5Button@check+1,?_readRA5Button+1
  4318  0021D0  0012               	return		;funcret
  4319  0021D2                     __end_of_readRA5Button:
  4320                           	opt callstack 0
  4321                           
  4322                           	psect	rparam
  4323  0000                     
  4324                           	psect	temp
  4325  00003A                     btemp:
  4326                           	opt callstack 0
  4327  00003A                     	ds	1
  4328  0000                     int$flags	set	btemp
  4329  0000                     wtemp8	set	btemp+1
  4330  0000                     ttemp5	set	btemp+1
  4331  0000                     ttemp6	set	btemp+4
  4332  0000                     ttemp7	set	btemp+8
  4333                           tosu	equ	0xFFF
  4334                           tosh	equ	0xFFE
  4335                           tosl	equ	0xFFD
  4336                           stkptr	equ	0xFFC
  4337                           pclatu	equ	0xFFB
  4338                           pclath	equ	0xFFA
  4339                           pcl	equ	0xFF9
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           indf0	equ	0xFEF
  4347                           postinc0	equ	0xFEE
  4348                           postdec0	equ	0xFED
  4349                           preinc0	equ	0xFEC
  4350                           plusw0	equ	0xFEB
  4351                           fsr0h	equ	0xFEA
  4352                           fsr0l	equ	0xFE9
  4353                           wreg	equ	0xFE8
  4354                           indf1	equ	0xFE7
  4355                           postinc1	equ	0xFE6
  4356                           postdec1	equ	0xFE5
  4357                           preinc1	equ	0xFE4
  4358                           plusw1	equ	0xFE3
  4359                           fsr1h	equ	0xFE2
  4360                           fsr1l	equ	0xFE1
  4361                           bsr	equ	0xFE0
  4362                           indf2	equ	0xFDF
  4363                           postinc2	equ	0xFDE
  4364                           postdec2	equ	0xFDD
  4365                           preinc2	equ	0xFDC
  4366                           plusw2	equ	0xFDB
  4367                           fsr2h	equ	0xFDA
  4368                           fsr2l	equ	0xFD9
  4369                           status	equ	0xFD8


Data Sizes:
    Strings     82
    Constant    0
    Data        4
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModHour
    _main->_displayModMinute
    _main->_displayModSecond
    _displayStpWatch->_LCDPutStr
    _displayModSecond->_LCDPutStr
    _displayModMinute->_LCDPutStr
    _displayModHour->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   46828
                                             19 COMRAM     2     2      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                     _displayModHour
                   _displayModMinute
                   _displayModSecond
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModSecond                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModMinute                                     2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModHour                                       2     2      0    9013
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    9013
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3036
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModHour
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModMinute
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModSecond
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      39       1       60.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      32        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Sep 23 10:28:17 2019

      __end_of_displayModMinute 1500        __end_of_displayModSecond 1376                     ?_LCDPutChar 0021  
                            l76 11A6                              u10 1F9C                              u11 1F98  
                            u20 1FB2                              u21 1FAE                              u30 1FF2  
                            u31 1FEE                    ___awdiv@sign 002E                     ?_LCDPutInst 0021  
                            _hr 0005                   ?_displayClock 0021           SendByteBBSPI@bitcount 002A  
                           l121 22B2                             l202 1FF2                             l211 2048  
                           l115 22A8                             l220 220E                             l205 225E  
                           l214 209E                             l118 228C                             l208 2278  
                           l401 18E2                             l314 1F82                             l317 1CAE  
                           l190 2140                             l422 1600                             l430 14BA  
                           l193 229E                             l427 1682                             l435 14FE  
                           l443 1374                             l419 17B2                             l196 1F8E  
                           l198 1FA2                             l199 1FA4                             l383 1A12  
                           l482 1A74                             l491 1BE0                             l725 1D72  
                           l488 1AFA                             l738 1EE4                             u210 1F02  
                           u211 1EFE                             u300 1984                             u220 1F2A  
                           u301 1980                             u221 1F26                             u310 1996  
                           u230 1F52                             u311 1992                             u231 1F4E  
                           u320 19AC                             u400 1814                             u240 1F7A  
                           u321 19A8                             u401 1810                             u241 1F76  
                           u330 1A0A                             u250 18FA                             u410 1832  
                           u331 1A06                             u251 18F6                             u411 182E  
                           u260 1914                             u420 1854                             u500 16B4  
                           u261 1910                             u421 1850                             u501 16B0  
                           u270 1932                             u430 1866                             u510 16D2  
                           u271 192E                             u431 1862                             u511 16CE  
                           u280 1944                             u440 187C                             u520 16E4  
                           u281 1940                             u441 1878                             u521 16E0  
                           u290 1962                             u450 18DA                             u370 17CA  
                           u530 1702                             u610 1A2E                             u291 195E  
                           u451 18D6                             u371 17C6                             u531 16FE  
                           u611 1A2A                             u380 17E4                             u540 1724  
                           u620 1A40                             u381 17E0                             u541 1720  
                           u621 1A3C                             u390 1802                             u550 1736  
                           u630 1A86                             u391 17FE                             u551 1732  
                           u631 1A82                             u560 174C                             u640 1AA2  
                           u561 1748                             u641 1A9E                             u570 17AA  
                           u490 169A                             u650 1ACA                             u571 17A6  
                           u491 1696                             u651 1AC6                             u900 1E48  
                           u660 1AF2                             u901 1E44                             u661 1AEE  
                           u830 220E                             u910 1E62                             u831 220A  
                           u911 1E5E                             u840 1CC2                             u920 1E7C  
                           u841 1CBE                             u921 1E78                             u850 1CDC  
                           u930 1E9A                             u851 1CD8                             u931 1E96  
                           u860 1D02                             u940 1EB0                             u861 1CFE  
                           u941 1EAC                             u870 1D20                             u950 1ED4  
                           u871 1D1C                             u951 1ED0                             u880 1D3C  
                           u960 1534                             u881 1D38                             u961 1530  
                           u890 1D62                             u970 1556                             u891 1D5E  
                           u971 1552                             u980 1568                             u981 1564  
                           u990 13EE                             u991 13EA          __size_of_readRB0Button 0048  
                           _min 0007                             _sec 0009         __end_of_displayStpWatch 1BE2  
                  ___awmod@sign 002E          __size_of_readRA5Button 0048                             wreg 000FE8  
               __end_of_LCDInit 2142                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l1201 1FD4                            l2001 20FA                            l1211 1FE2  
                          l1203 1FD6                            l2011 2112                            l2003 20FA  
                          l1205 1FD8                            l2021 213A                            l2013 2122  
                          l2005 20FC                            l2101 11FE                            l1207 1FDA  
                          l2015 2128                            l2007 2102                            l2031 1C16  
                          l2023 1BE2                            l2111 1248                            l2103 1204  
                          l1209 1FE0                            l2017 212E                            l2009 2108  
                          l2041 1C76                            l2033 1C32                            l2025 1BE8  
                          l2121 12A8                            l2113 1264                            l2105 1220  
                          l2201 10A2                            l2019 2134                            l2043 1C92  
                          l2035 1C38                            l2027 1BF4                            l2051 1518  
                          l2131 1324                            l2123 12B0                            l2115 1280  
                          l2107 123C                            l1411 1F02                            l2211 10FC  
                          l2203 10C2                            l1181 1FC0                            l2037 1C54  
                          l2029 1BFA                            l2061 1578                            l2053 1534  
                          l2045 1500                            l2125 12CA                            l2133 133C  
                          l2117 1286                            l2109 1242                            l2141 1B14  
                          l1421 1F36                            l1413 1F0A                            l2221 113A  
                          l2213 1100                            l2205 10C6                            l1263 228E  
                          l1191 1FCA                            l1183 1FC2                            l1175 1F9C  
                          l1167 1F86                            l2039 1C70                            l2063 15B0  
                          l2055 153C                            l2047 1506                            l2071 1388  
                          l2127 12DC                            l2119 128C                            l2151 1B5E  
                          l2143 1B30                            l2135 1AFC                            l1423 1F52  
                          l1415 1F0E                            l2231 117C                            l2223 113E  
                          l2215 1104                            l2207 10CA                            l1193 1FCC  
                          l1185 1FC4                            l1177 1FB2                            l1169 1F8A  
                          l1265 2248                            l2057 1556                            l2065 15C8  
                          l2049 1512                            l2081 13D2                            l2073 138E  
                          l2129 12EC                            l2161 1BA8                            l2153 1B7A  
                          l2145 1B4C                            l2137 1B02                            l1521 17B8  
                          l1601 16B8                            l1425 1F5A                            l1417 1F2A  
                          l1409 1EE6                            l2233 118E                            l2225 1150  
                          l2217 1116                            l2209 10DC                            l1195 1FCE  
                          l1187 1FC6                            l1179 1FBA                            l1267 224A  
                          l2059 1568                            l2091 1432                            l2083 13EE  
                          l2075 13AA                            l2067 1376                            l2163 1BC4  
                          l2155 1B96                            l2147 1B52                            l2139 1B0E  
                          l1531 1802                            l1523 17CA                            l1611 1702  
                          l1603 16C0                            l1427 1F5E                            l1419 1F32  
                          l1371 22A0                            l2227 1170                            l2219 1136  
                          l1197 1FD0                            l1189 1FC8                            l1269 225C  
                          l2093 146A                            l2085 13F6                            l2077 13C6  
                          l2069 137C                            l2157 1B9C                            l2149 1B58  
                          l1461 1918                            l1453 18E4                            l1541 1854  
                          l1533 1814                            l1525 17E4                            l1621 174C  
                          l1613 1712                            l1605 16D2                            l1429 1F7A  
                          l1373 227A                            l2229 1178                            l2237 11A6  
                          l1199 1FD2                            l2087 1410                            l2095 1482  
                          l2079 13CC                            l2159 1BA2                            l1471 1962  
                          l1463 1920                            l1455 18E8                            l1543 1866  
                          l1535 1818                            l1527 17E8                            l1519 17B4  
                          l1631 17AA                            l1623 1754                            l1615 1724  
                          l1607 16E4                            l1375 2280                            l2191 1068  
                          l1377 22AA                            l2089 1422                            l2097 11EC  
                          l1481 19AC                            l1473 1972                            l1465 1932  
                          l1457 18FA                            l2281 18A0                            l1545 186A  
                          l1537 1832                            l1529 17F0                            l1553 188C  
                          l1617 1736                            l1609 16E8                            l2193 1070  
                          l2185 1054                            l1379 22AE                            l2099 11F2  
                          l1491 1A0A                            l2283 19D0                            l1483 19B4  
                          l1475 1984                            l1467 1944                            l1459 1914  
                          l1547 187C                            l1539 1842                            l1555 18BE  
                          l1619 173A                            l1627 175C                            l2195 1088  
                          l2187 1060                            l1901 2064                            l1477 1996  
                          l1469 1948                            l1557 18DA                            l1549 1884  
                          l1629 178E                            l2277 11BA                            l2197 108C  
                          l2189 1064                            l1903 207C                            l1911 21EA  
                          l1479 199A                            l1487 19BC                            l2279 1770  
                          l2199 1090                            l1905 2086                            l1913 21EE  
                          l1921 1CCA                            l1489 19EE                            l1593 1684  
                          l1681 1A58                            l1851 1FF6                            l1907 21D2  
                          l1931 1CF0                            l1923 1CCE                            l1915 1CB0  
                          l1595 1688                            l1691 1AAE                            l1683 1A6C  
                          l1675 1A14                            l1845 2262                            l1861 2030  
                          l1853 1FF6                            l1909 21D6                            l1941 1D26  
                          l1933 1D02                            l1925 1CDC                            l1917 1CB4  
                          l1597 169A                            l1693 1ACA                            l1685 1A86  
                          l1677 1A2E                            l1847 2264                            l1855 2000  
                          l1943 1D3C                            l1935 1D0A                            l1951 1D52  
                          l1927 1CE4                            l1919 1CC2                            l1599 16B4  
                          l1695 1AD2                            l1687 1AA2                            l1679 1A40  
                          l1849 2276                            l1857 200E                            l1953 1D62  
                          l1945 1D44                            l1937 1D12                            l1929 1CE8  
                          l1961 1E3A                            l1697 1AD6                            l1689 1AAA  
                          l1859 2026                            l1955 1D6A                            l1947 1D46  
                          l1939 1D20                            l1971 1E6A                            l1963 1E48  
                          l1699 1AF2                            l1949 1D4C                            l1981 1EB0  
                          l1973 1E7C                            l1965 1E50                            l1895 204C  
                          l1991 1EDC                            l1983 1EB8                            l1975 1E84  
                          l1967 1E54                            l1959 1E36                            l1897 204C  
                          l1985 1EBE                            l1977 1E8C                            l1969 1E62  
                          l1899 2056                            l1995 20F2                            l1979 1E9A  
                          l1987 1EC4                            l1997 20F6                            l1989 1ED4  
                          l1999 20F8                            STR_1 1012                            STR_2 1023  
                          STR_3 1043                            STR_4 1033                            STR_5 1001  
                          u1000 1410                            u1001 140C                            u1010 1422  
                          u1011 141E                            u1020 12A8                            u1100 10DC  
                          u1021 12A4                            u1101 10D8                            u1030 12CA  
                          u1110 1116                            u1031 12C6                            u1111 1112  
                          u1040 12DC                            u1120 1150                            u1041 12D8  
                          u1121 114C                            u1130 118E                            u1131 118A  
                          u1207 2118                            u1217 205C                            u1090 10A2  
                          u1227 2074                            u1091 109E                            u1237 208C  
                          _LATD 000F8C                            u1177 2006                            u1187 201E  
                          u1197 2036                            _main 1054                            fsr1l 000FE1  
                          btemp 003A                ?_WritePort_BBSPI 002C                            start 000E  
            __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
               ?_displayModHour 0021                    ___param_bank 000000               _changeModePressed 0019  
               _deviceInterrupt 0008                  ??_displayClock 0032                           ?_main 0021  
               __end_of___awdiv 1D74                 __end_of___awmod 1EE6                           _T0CON 000FD5  
               ___awdiv@divisor 002B                           i2l154 2188                           i2l162 1E34  
                         i2l163 1E34                           i2l149 21D0                           i2l265 20EE  
               ___awdiv@counter 002D                           _TMR0H 000FD7                           _TMR0L 000FD6  
                         _TRISD 000F95                   __CFG_PWRT$OFF 000000                  __CFG_FCMEN$OFF 000000  
       __size_of_Port_BBSPIInit 001A                           _blink 0003                           _count 0001  
                         _state 0020  __size_of_oscillationInitialize 000A   __end_of_oscillationInitialize 22AA  
                __CFG_BOREN$OFF 000000                           tablat 000FF5             __size_of_LCDPutChar 0056  
           __size_of_LCDPutInst 0056                           ttemp5 003B                           ttemp6 003E  
                         ttemp7 0042                           status 000FD8               ??_timerInitialize 0029  
                         wtemp8 003B                   _readRB0Button 2142                   _readRA5Button 218A  
               __initialization 2210                    __end_of_main 11EC                  __CFG_OSC$HSPLL 000000  
                        ??_main 0034                   __activetblptr 000003                       ??_LCDInit 0030  
                  LCDPutChar@ch 002F               __end_of_LCDPutStr 2210                ?_displayStpWatch 0021  
                        _ADCON1 000FC1              __size_of_InitBBSPI 0012                ___awdiv@dividend 0029  
                  LCDPutInst@ch 002F                          i2l2171 1DAA                          i2l2251 20C8  
                        i2l2243 20A2                          i2l2181 1DFC                          i2l2173 1DBC  
                        i2l2165 1D74                          i2l2253 20CC                          i2l2245 20B0  
                        i2l2175 1DC0                          i2l2183 1E10                          i2l2167 1D8C  
                        i2l2255 20D4                          i2l2247 20BE                          i2l2177 1DDC  
                        i2l2169 1D9E                          i2l2257 20E6                          i2l2249 20C0  
                        i2l2179 1DE0                          i2l2259 20EA                          i2l1871 21B0  
                        i2l1863 218A                          i2l1873 21C0                          i2l1865 218E  
                        i2l1881 2146                          i2l1875 21C8                          i2l1867 2196  
                        i2l1891 2180                          i2l1883 214E                          i2l1869 219E  
                        i2l1885 2156                          i2l1887 2168                          i2l1879 2142  
                        i2l1889 2178                          _OSCCON 000FD3                    LCDPutStr@ptr 0030  
                ?_readRB0Button 0021                  ?_readRA5Button 0021         __end_of_deviceInterrupt 20F2  
                __CFG_XINST$OFF 000000                       ??___awdiv 002D                       ??___awmod 002D  
                        _minSTW 000F                          _secSTW 000D                          _button 1D74  
                        clear_0 2236       __size_of_buttonInitialize 000A                ___awdiv@quotient 002F  
               ___awmod@divisor 002B                          _runSTW 0011                 ___awmod@counter 002D  
              __end_of_norClock 1F84                    __pdataCOMRAM 0036          Port_BBSPIInit@port_dir 002C  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __end_of_displayClock 1CB0                      __accesstop 0060  
       __end_of__initialization 223C                   ___rparam_used 000001          __size_of_SendByteBBSPI 0070  
                 ?_modifyMinute 0021                   ?_modifySecond 0021                  __pcstackCOMRAM 0021  
             ?_displayModMinute 0021               ?_displayModSecond 0021               __end_of_InitBBSPI 22A0  
                  ??_LCDPutChar 002E                    ??_LCDPutInst 002E              ??_displayModMinute 0032  
            ??_displayModSecond 0032                  _Port_BBSPIInit 2246                 ??_readRB0Button 0023  
               ??_readRA5Button 0023              __end_of_LCDPutChar 204A                ??_displayModHour 0032  
            __end_of_LCDPutInst 20A0                ?_deviceInterrupt 0021                  ??_modifyMinute 0029  
                ??_modifySecond 0029                         ?_button 0021          __end_of_Port_BBSPIInit 2260  
                       _LCDInit 20F2                   _SendByteBBSPI 1F84                 _timerInitialize 227A  
                       _OSCTUNE 000F9B                         i2u80_40 21C0                         i2u80_41 21BC  
                       i2u81_40 2168                         i2u81_41 2164                         i2u82_40 2178  
                       i2u82_41 2174                         i2u79_40 21B0                         i2u79_41 21AC  
            __size_of_stopWatch 00E8                WritePort_BBSPI@a 002C                       ?_norClock 0021  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1CB0  
                       ___awmod 1E36                      _miliSecSTW 000B        __size_of_WritePort_BBSPI 001A  
                  __psmallconst 1000                _buttonInitialize 22AA                         __pcinit 2210  
               __size_of_button 00C2                         __ramtop 1000                         __ptext0 1054  
                       __ptext1 227A                         __ptext2 1A14                         __ptext3 22A0  
                       __ptext4 1EE6                         __ptext5 1684                         __ptext6 17B4  
                       __ptext7 18E4                         __ptext8 1AFC                         __ptext9 11EC  
                ?_SendByteBBSPI 0021                 ?_Port_BBSPIInit 0021                ___awmod@dividend 0029  
                    _modifyHour 18E4           __size_of_displayClock 00CE                       _LCDPutStr 21D2  
                __pintcode_body 20A0            end_of_initialization 223C                         int_func 20A0  
         _oscillationInitialize 22A0                      ??_norClock 0029                         postdec1 000FE5  
                       postinc0 000FEE         __end_of_timerInitialize 228E               __end_of_stopWatch 1AFC  
                  _displayClock 1BE2                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _TRISAbits 000F92            __end_of_modifyMinute 18E4            __end_of_modifySecond 17B4  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISFbits 000F97  
                    ?_LCDPutStr 0030             SendByteBBSPI@output 0029        __size_of_displayStpWatch 00E6  
                 __pidataCOMRAM 22B4                    _firstReadRB0 0037                    _firstReadRA5 0039  
               ??_SendByteBBSPI 0029                   _secondReadRB0 0036                   _secondReadRA5 0038  
                __end_of_button 1E36                       _InitBBSPI 228E               ??_WritePort_BBSPI 002D  
           start_initialization 2210                    _countPressed 001D                     ?_modifyHour 0021  
     __size_of_displayModMinute 018A       __size_of_displayModSecond 018A          ?_oscillationInitialize 0021  
                  _increaseTime 0017                        ??_button 0025                ?_timerInitialize 0021  
                    ?_InitBBSPI 0021                        ?_LCDInit 0021                     __pbssCOMRAM 0001  
            readRB0Button@check 0023                     ??_LCDPutStr 0032        __end_of_buttonInitialize 22B4  
         __end_of_readRB0Button 218A           __end_of_readRA5Button 21D2               ??_displayStpWatch 0032  
             __size_of_norClock 009E                       __pintcode 0008             __size_of_modifyHour 0130  
                button@checkRB0 0027                  button@checkRA5 0025                        ?___awdiv 0029  
                      ?___awmod 0029                ??_Port_BBSPIInit 002C        __size_of_deviceInterrupt 20EA  
         __size_of_modifyMinute 0130           __size_of_modifySecond 0130                       _count10ms 0015  
                   __smallconst 1000                       _countAuto 001B                        _LATAbits 000F89  
                      _LATCbits 000F8B                        _LATFbits 000F8E                        i2u105_40 1D9E  
                      i2u105_41 1D9A                        i2u106_40 1DBC                        i2u114_40 20B0  
                      i2u106_41 1DB8                        i2u114_41 20AC                        i2u107_40 1DDC  
                      i2u115_40 20BE                        i2u107_41 1DD8                        i2u115_41 20BA  
                      i2u108_40 1DFC                        i2u116_40 20E6                        i2u108_41 1DF8  
                      i2u116_41 20E2                    _modifyMinute 17B4                    _modifySecond 1684  
                     _timerFlag 0013         __size_of_displayModHour 0184                     ??_InitBBSPI 0029  
            SendByteBBSPI@input 002B                       _stopWatch 1A14                __size_of_LCDInit 0050  
              _displayModMinute 1376                _displayModSecond 11EC                       copy_data0 2224  
                      __Hrparam 0000                        __Lrparam 0000                 _WritePort_BBSPI 2260  
              __size_of___awdiv 00C4                __size_of___awmod 00B0                      ?_stopWatch 0021  
             ??_deviceInterrupt 0029                    ??_modifyHour 0029              readRA5Button@check 0023  
                      __ptext10 1376                        __ptext11 1500                        __ptext20 204A  
                      __ptext12 1BE2                        __ptext21 2260                        __ptext13 1E36  
                      __ptext22 1F84                        __ptext14 1CB0                        __ptext23 228E  
                      __ptext15 21D2         ??_oscillationInitialize 0029                        __ptext16 1FF4  
                      __ptext25 1D74                        __ptext17 22AA                        __ptext26 2142  
                      __ptext18 20F2                        __ptext27 218A                        __ptext19 2246  
                 __size_of_main 0198                        _norClock 1EE6                        _stModify 001F  
                      int$flags 003A              __end_of_modifyHour 1A14                      _LCDPutChar 1FF4  
                    _LCDPutInst 204A           __end_of_SendByteBBSPI 1FF4                      _INTCONbits 000FF2  
               _displayStpWatch 1AFC                        intlevel2 0000               ?_buttonInitialize 0021  
       __end_of_WritePort_BBSPI 227A              ??_buttonInitialize 0029                  _displayModHour 1500  
       WritePort_BBSPI@port_add 002D                     ??_stopWatch 0029        __size_of_timerInitialize 0014  
        __end_of_displayModHour 1684  
