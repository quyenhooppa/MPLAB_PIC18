

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Sep 22 21:32:13 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 2.10
    44                           ; Generated 31/07/2019 GMT
    45                           ; 
    46                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F8722 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  0021AC                     __pidataCOMRAM:
    80                           	opt callstack 0
    81                           
    82                           ;initializer for _secondReadRB0
    83  0021AC  01                 	db	1
    84                           
    85                           ;initializer for _firstReadRB0
    86  0021AD  01                 	db	1
    87                           
    88                           ;initializer for _secondReadRA5
    89  0021AE  01                 	db	1
    90                           
    91                           ;initializer for _firstReadRA5
    92  0021AF  01                 	db	1
    93                           
    94                           	psect	nvCOMRAM
    95  000038                     __pnvCOMRAM:
    96                           	opt callstack 0
    97  000038                     _timer0ReloadVal:
    98                           	opt callstack 0
    99  000038                     	ds	3
   100  0000                     _TMR0	set	4054
   101  0000                     _LATCbits	set	3979
   102  0000                     _LATAbits	set	3977
   103  0000                     _TRISCbits	set	3988
   104  0000                     _LATFbits	set	3982
   105  0000                     _TRISFbits	set	3991
   106  0000                     _PORTBbits	set	3969
   107  0000                     _PORTAbits	set	3968
   108  0000                     _ADCON1	set	4033
   109  0000                     _TRISBbits	set	3987
   110  0000                     _TRISAbits	set	3986
   111  0000                     _TMR0L	set	4054
   112  0000                     _TMR0H	set	4055
   113  0000                     _T0CON	set	4053
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCTUNE	set	3995
   116  0000                     _OSCCON	set	4051
   117                           
   118                           	psect	smallconst
   119  001000                     __psmallconst:
   120                           	opt callstack 0
   121  001000  00                 	db	0
   122  001001                     STR_5:
   123  001001  20                 	db	32
   124  001002  20                 	db	32
   125  001003  20                 	db	32
   126  001004  53                 	db	83	;'S'
   127  001005  54                 	db	84	;'T'
   128  001006  4F                 	db	79	;'O'
   129  001007  50                 	db	80	;'P'
   130  001008  20                 	db	32
   131  001009  57                 	db	87	;'W'
   132  00100A  41                 	db	65	;'A'
   133  00100B  54                 	db	84	;'T'
   134  00100C  43                 	db	67	;'C'
   135  00100D  48                 	db	72	;'H'
   136  00100E  20                 	db	32
   137  00100F  20                 	db	32
   138  001010  20                 	db	32
   139  001011  00                 	db	0
   140  001012                     STR_1:
   141  001012  20                 	db	32
   142  001013  20                 	db	32
   143  001014  4E                 	db	78	;'N'
   144  001015  4F                 	db	79	;'O'
   145  001016  52                 	db	82	;'R'
   146  001017  4D                 	db	77	;'M'
   147  001018  41                 	db	65	;'A'
   148  001019  4C                 	db	76	;'L'
   149  00101A  20                 	db	32
   150  00101B  43                 	db	67	;'C'
   151  00101C  4C                 	db	76	;'L'
   152  00101D  4F                 	db	79	;'O'
   153  00101E  43                 	db	67	;'C'
   154  00101F  4B                 	db	75	;'K'
   155  001020  20                 	db	32
   156  001021  20                 	db	32
   157  001022  00                 	db	0
   158  001023                     STR_2:
   159  001023  20                 	db	32
   160  001024  4D                 	db	77	;'M'
   161  001025  4F                 	db	79	;'O'
   162  001026  44                 	db	68	;'D'
   163  001027  49                 	db	73	;'I'
   164  001028  46                 	db	70	;'F'
   165  001029  49                 	db	73	;'I'
   166  00102A  45                 	db	69	;'E'
   167  00102B  53                 	db	83	;'S'
   168  00102C  20                 	db	32
   169  00102D  48                 	db	72	;'H'
   170  00102E  4F                 	db	79	;'O'
   171  00102F  55                 	db	85	;'U'
   172  001030  52                 	db	82	;'R'
   173  001031  20                 	db	32
   174  001032  00                 	db	0
   175  001033                     STR_3:
   176  001033  4D                 	db	77	;'M'
   177  001034  4F                 	db	79	;'O'
   178  001035  44                 	db	68	;'D'
   179  001036  49                 	db	73	;'I'
   180  001037  46                 	db	70	;'F'
   181  001038  49                 	db	73	;'I'
   182  001039  45                 	db	69	;'E'
   183  00103A  53                 	db	83	;'S'
   184  00103B  20                 	db	32
   185  00103C  4D                 	db	77	;'M'
   186  00103D  49                 	db	73	;'I'
   187  00103E  4E                 	db	78	;'N'
   188  00103F  55                 	db	85	;'U'
   189  001040  54                 	db	84	;'T'
   190  001041  45                 	db	69	;'E'
   191  001042  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  001043  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  002100                     __pcinit:
   198                           	opt callstack 0
   199  002100                     start_initialization:
   200                           	opt callstack 0
   201  002100                     __initialization:
   202                           	opt callstack 0
   203                           
   204                           ; Initialize objects allocated to COMRAM (4 bytes)
   205                           ; load TBLPTR registers with __pidataCOMRAM
   206  002100  0EAC               	movlw	low __pidataCOMRAM
   207  002102  6EF6               	movwf	tblptrl,c
   208  002104  0E21               	movlw	high __pidataCOMRAM
   209  002106  6EF7               	movwf	tblptrh,c
   210  002108  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   211  00210A  6EF8               	movwf	tblptru,c
   212  00210C  EE00  F034         	lfsr	0,__pdataCOMRAM
   213  002110  EE10 F004          	lfsr	1,4
   214  002114                     copy_data0:
   215  002114  0009               	tblrd		*+
   216  002116  CFF5 FFEE          	movff	tablat,postinc0
   217  00211A  50E5               	movf	postdec1,w,c
   218  00211C  50E1               	movf	fsr1l,w,c
   219  00211E  E1FA               	bnz	copy_data0
   220                           
   221                           ; Clear objects allocated to COMRAM (30 bytes)
   222  002120  EE00  F001         	lfsr	0,__pbssCOMRAM
   223  002124  0E1E               	movlw	30
   224  002126                     clear_0:
   225  002126  6AEE               	clrf	postinc0,c
   226  002128  06E8               	decf	wreg,f,c
   227  00212A  E1FD               	bnz	clear_0
   228  00212C                     end_of_initialization:
   229                           	opt callstack 0
   230  00212C                     __end_of__initialization:
   231                           	opt callstack 0
   232  00212C  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   233  00212E  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   234  002130  0100               	movlb	0
   235  002132  EF08  F00A         	goto	_main	;jump to C main() function
   236                           
   237                           	psect	bssCOMRAM
   238  000001                     __pbssCOMRAM:
   239                           	opt callstack 0
   240  000001                     _miliSecSTW:
   241                           	opt callstack 0
   242  000001                     	ds	2
   243  000003                     _secSTW:
   244                           	opt callstack 0
   245  000003                     	ds	2
   246  000005                     _minSTW:
   247                           	opt callstack 0
   248  000005                     	ds	2
   249  000007                     _run:
   250                           	opt callstack 0
   251  000007                     	ds	2
   252  000009                     _blink:
   253                           	opt callstack 0
   254  000009                     	ds	2
   255  00000B                     _hr:
   256                           	opt callstack 0
   257  00000B                     	ds	2
   258  00000D                     _min:
   259                           	opt callstack 0
   260  00000D                     	ds	2
   261  00000F                     _sec:
   262                           	opt callstack 0
   263  00000F                     	ds	2
   264  000011                     _timerFlag:
   265                           	opt callstack 0
   266  000011                     	ds	2
   267  000013                     _count10ms:
   268                           	opt callstack 0
   269  000013                     	ds	2
   270  000015                     _increaseTime:
   271                           	opt callstack 0
   272  000015                     	ds	2
   273  000017                     _changeModePressed:
   274                           	opt callstack 0
   275  000017                     	ds	2
   276  000019                     _countAuto:
   277                           	opt callstack 0
   278  000019                     	ds	2
   279  00001B                     _countPressed:
   280                           	opt callstack 0
   281  00001B                     	ds	2
   282  00001D                     _stModify:
   283                           	opt callstack 0
   284  00001D                     	ds	1
   285  00001E                     _state:
   286                           	opt callstack 0
   287  00001E                     	ds	1
   288                           
   289                           	psect	dataCOMRAM
   290  000034                     __pdataCOMRAM:
   291                           	opt callstack 0
   292  000034                     _secondReadRB0:
   293                           	opt callstack 0
   294  000034                     	ds	1
   295  000035                     _firstReadRB0:
   296                           	opt callstack 0
   297  000035                     	ds	1
   298  000036                     _secondReadRA5:
   299                           	opt callstack 0
   300  000036                     	ds	1
   301  000037                     _firstReadRA5:
   302                           	opt callstack 0
   303  000037                     	ds	1
   304                           
   305                           	psect	cstackCOMRAM
   306  00001F                     __pcstackCOMRAM:
   307                           	opt callstack 0
   308  00001F                     ?_readRA5Button:
   309                           	opt callstack 0
   310  00001F                     ?_readRB0Button:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x0
   314  00001F                     	ds	2
   315  000021                     readRA5Button@check:
   316                           	opt callstack 0
   317  000021                     readRB0Button@check:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x2
   321  000021                     	ds	2
   322  000023                     button@checkRA5:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x4
   326  000023                     	ds	2
   327  000025                     button@checkRB0:
   328                           	opt callstack 0
   329                           
   330                           ; 2 bytes @ 0x6
   331  000025                     	ds	2
   332  000027                     ??_modifyHour:
   333  000027                     ??_modifyMinute:
   334  000027                     ??_modifySecond:
   335  000027                     ??_stopWatch:
   336  000027                     ?___awdiv:
   337                           	opt callstack 0
   338  000027                     ?___awmod:
   339                           	opt callstack 0
   340  000027                     SendByteBBSPI@output:
   341                           	opt callstack 0
   342  000027                     ___awdiv@dividend:
   343                           	opt callstack 0
   344  000027                     ___awmod@dividend:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x8
   348  000027                     	ds	1
   349  000028                     SendByteBBSPI@bitcount:
   350                           	opt callstack 0
   351                           
   352                           ; 1 bytes @ 0x9
   353  000028                     	ds	1
   354  000029                     SendByteBBSPI@input:
   355                           	opt callstack 0
   356  000029                     ___awdiv@divisor:
   357                           	opt callstack 0
   358  000029                     ___awmod@divisor:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0xA
   362  000029                     	ds	1
   363  00002A                     Port_BBSPIInit@port_dir:
   364                           	opt callstack 0
   365  00002A                     WritePort_BBSPI@a:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0xB
   369  00002A                     	ds	1
   370  00002B                     WritePort_BBSPI@port_add:
   371                           	opt callstack 0
   372  00002B                     ___awdiv@counter:
   373                           	opt callstack 0
   374  00002B                     ___awmod@counter:
   375                           	opt callstack 0
   376                           
   377                           ; 1 bytes @ 0xC
   378  00002B                     	ds	1
   379  00002C                     ??_LCDPutInst:
   380  00002C                     ??_LCDPutChar:
   381  00002C                     ___awdiv@sign:
   382                           	opt callstack 0
   383  00002C                     ___awmod@sign:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0xD
   387  00002C                     	ds	1
   388  00002D                     LCDPutChar@ch:
   389                           	opt callstack 0
   390  00002D                     LCDPutInst@ch:
   391                           	opt callstack 0
   392  00002D                     ___awdiv@quotient:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0xE
   396  00002D                     	ds	1
   397  00002E                     ??_LCDInit:
   398  00002E                     LCDPutStr@ptr:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0xF
   402  00002E                     	ds	2
   403  000030                     ??_displayModify:
   404  000030                     
   405                           ; 1 bytes @ 0x11
   406  000030                     	ds	2
   407  000032                     ??_main:
   408                           
   409                           ; 1 bytes @ 0x13
   410  000032                     	ds	2
   411                           
   412 ;;
   413 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   414 ;;
   415 ;; *************** function _main *****************
   416 ;; Defined at:
   417 ;;		line 15 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels required when called:    8
   437 ;; This function calls:
   438 ;;		_LCDInit
   439 ;;		_buttonInitialize
   440 ;;		_displayClock
   441 ;;		_displayModify
   442 ;;		_displayStpWatch
   443 ;;		_modifyHour
   444 ;;		_modifyMinute
   445 ;;		_modifySecond
   446 ;;		_norClock
   447 ;;		_oscillationInitialize
   448 ;;		_stopWatch
   449 ;;		_timerInitialize
   450 ;; This function is called by:
   451 ;;		Startup code after reset
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           	psect	text0
   456  001410                     __ptext0:
   457                           	opt callstack 0
   458  001410                     _main:
   459                           	opt callstack 23
   460  001410                     
   461                           ;main.c: 16:     oscillationInitialize();
   462  001410  ECCC  F010         	call	_oscillationInitialize	;wreg free
   463                           
   464                           ;main.c: 17:     timerInitialize();
   465  001414  EC9B  F010         	call	_timerInitialize	;wreg free
   466                           
   467                           ;main.c: 18:     buttonInitialize();
   468  001418  ECD1  F010         	call	_buttonInitialize	;wreg free
   469  00141C                     
   470                           ;main.c: 19:     LCDInit();
   471  00141C  ECCB  F00F         	call	_LCDInit	;wreg free
   472  001420                     
   473                           ;main.c: 20:     state = norClk;
   474  001420  0E00               	movlw	0
   475  001422  6E1E               	movwf	_state^0,c
   476  001424                     
   477                           ;main.c: 21:     stModify = init;
   478  001424  0E00               	movlw	0
   479  001426  6E1D               	movwf	_stModify^0,c
   480                           
   481                           ;main.c: 22:     switch (state) {
   482  001428  EF8B  F00A         	goto	l2223
   483  00142C                     l2179:
   484                           
   485                           ;main.c: 24:             norClock();
   486  00142C  ECDE  F00E         	call	_norClock	;wreg free
   487                           
   488                           ;main.c: 25:             while (state == norClk) displayClock();
   489  001430  EF1C  F00A         	goto	l2183
   490  001434                     l2181:
   491  001434  EC5C  F00D         	call	_displayClock	;wreg free
   492  001438                     l2183:
   493  001438  501E               	movf	_state^0,w,c
   494  00143A  B4D8               	btfsc	status,2,c
   495  00143C  EF22  F00A         	goto	u1041
   496  001440  EF24  F00A         	goto	u1040
   497  001444                     u1041:
   498  001444  EF1A  F00A         	goto	l2181
   499  001448                     u1040:
   500  001448                     
   501                           ;main.c: 26:             if (changeModePressed == 1) {
   502  001448  0417               	decf	_changeModePressed^0,w,c
   503  00144A  1018               	iorwf	(_changeModePressed+1)^0,w,c
   504  00144C  A4D8               	btfss	status,2,c
   505  00144E  EF2B  F00A         	goto	u1051
   506  001452  EF2D  F00A         	goto	u1050
   507  001456                     u1051:
   508  001456  EFAC  F00A         	goto	l86
   509  00145A                     u1050:
   510  00145A                     
   511                           ;main.c: 27:                 changeModePressed = 0;
   512  00145A  0E00               	movlw	0
   513  00145C  6E18               	movwf	(_changeModePressed+1)^0,c
   514  00145E  0E00               	movlw	0
   515  001460  6E17               	movwf	_changeModePressed^0,c
   516                           
   517                           ;main.c: 28:                 state = modHr;
   518  001462  0E01               	movlw	1
   519  001464  6E1E               	movwf	_state^0,c
   520  001466  EFAC  F00A         	goto	l86
   521  00146A                     l2189:
   522                           
   523                           ;main.c: 32:             modifyHour();
   524  00146A  ECDE  F00B         	call	_modifyHour	;wreg free
   525  00146E                     
   526                           ;main.c: 33:             displayModify();
   527  00146E  EC22  F008         	call	_displayModify	;wreg free
   528  001472                     
   529                           ;main.c: 34:             if (changeModePressed == 1) {
   530  001472  0417               	decf	_changeModePressed^0,w,c
   531  001474  1018               	iorwf	(_changeModePressed+1)^0,w,c
   532  001476  A4D8               	btfss	status,2,c
   533  001478  EF40  F00A         	goto	u1061
   534  00147C  EF42  F00A         	goto	u1060
   535  001480                     u1061:
   536  001480  EFAC  F00A         	goto	l86
   537  001484                     u1060:
   538  001484                     
   539                           ;main.c: 35:                 changeModePressed = 0;
   540  001484  0E00               	movlw	0
   541  001486  6E18               	movwf	(_changeModePressed+1)^0,c
   542  001488  0E00               	movlw	0
   543  00148A  6E17               	movwf	_changeModePressed^0,c
   544                           
   545                           ;main.c: 36:                 state = modMin;
   546  00148C  0E02               	movlw	2
   547  00148E  6E1E               	movwf	_state^0,c
   548  001490  EFAC  F00A         	goto	l86
   549  001494                     l2197:
   550                           
   551                           ;main.c: 40:             modifyMinute();
   552  001494  EC46  F00B         	call	_modifyMinute	;wreg free
   553  001498                     
   554                           ;main.c: 41:             displayModify();
   555  001498  EC22  F008         	call	_displayModify	;wreg free
   556  00149C                     
   557                           ;main.c: 42:             if (changeModePressed == 1) {
   558  00149C  0417               	decf	_changeModePressed^0,w,c
   559  00149E  1018               	iorwf	(_changeModePressed+1)^0,w,c
   560  0014A0  A4D8               	btfss	status,2,c
   561  0014A2  EF55  F00A         	goto	u1071
   562  0014A6  EF57  F00A         	goto	u1070
   563  0014AA                     u1071:
   564  0014AA  EFAC  F00A         	goto	l86
   565  0014AE                     u1070:
   566  0014AE                     
   567                           ;main.c: 43:                 changeModePressed = 0;
   568  0014AE  0E00               	movlw	0
   569  0014B0  6E18               	movwf	(_changeModePressed+1)^0,c
   570  0014B2  0E00               	movlw	0
   571  0014B4  6E17               	movwf	_changeModePressed^0,c
   572                           
   573                           ;main.c: 44:                 state = modSec;
   574  0014B6  0E03               	movlw	3
   575  0014B8  6E1E               	movwf	_state^0,c
   576  0014BA  EFAC  F00A         	goto	l86
   577  0014BE                     l2205:
   578                           
   579                           ;main.c: 48:             modifySecond();
   580  0014BE  ECAE  F00A         	call	_modifySecond	;wreg free
   581  0014C2                     
   582                           ;main.c: 49:             displayModify();
   583  0014C2  EC22  F008         	call	_displayModify	;wreg free
   584  0014C6                     
   585                           ;main.c: 50:             if (changeModePressed == 1) {
   586  0014C6  0417               	decf	_changeModePressed^0,w,c
   587  0014C8  1018               	iorwf	(_changeModePressed+1)^0,w,c
   588  0014CA  A4D8               	btfss	status,2,c
   589  0014CC  EF6A  F00A         	goto	u1081
   590  0014D0  EF6C  F00A         	goto	u1080
   591  0014D4                     u1081:
   592  0014D4  EFAC  F00A         	goto	l86
   593  0014D8                     u1080:
   594  0014D8                     
   595                           ;main.c: 51:                 changeModePressed = 0;
   596  0014D8  0E00               	movlw	0
   597  0014DA  6E18               	movwf	(_changeModePressed+1)^0,c
   598  0014DC  0E00               	movlw	0
   599  0014DE  6E17               	movwf	_changeModePressed^0,c
   600                           
   601                           ;main.c: 52:                 state = stpWatch;
   602  0014E0  0E04               	movlw	4
   603  0014E2  6E1E               	movwf	_state^0,c
   604  0014E4  EFAC  F00A         	goto	l86
   605  0014E8                     l2213:
   606                           
   607                           ;main.c: 56:             norClock();
   608  0014E8  ECDE  F00E         	call	_norClock	;wreg free
   609                           
   610                           ;main.c: 57:             stopWatch();
   611  0014EC  EC76  F00C         	call	_stopWatch	;wreg free
   612  0014F0                     
   613                           ;main.c: 58:             displayStpWatch();
   614  0014F0  ECF5  F00C         	call	_displayStpWatch	;wreg free
   615  0014F4                     
   616                           ;main.c: 59:             if (changeModePressed == 1) {
   617  0014F4  0417               	decf	_changeModePressed^0,w,c
   618  0014F6  1018               	iorwf	(_changeModePressed+1)^0,w,c
   619  0014F8  A4D8               	btfss	status,2,c
   620  0014FA  EF81  F00A         	goto	u1091
   621  0014FE  EF83  F00A         	goto	u1090
   622  001502                     u1091:
   623  001502  EFAC  F00A         	goto	l86
   624  001506                     u1090:
   625  001506                     
   626                           ;main.c: 60:                 changeModePressed = 0;
   627  001506  0E00               	movlw	0
   628  001508  6E18               	movwf	(_changeModePressed+1)^0,c
   629  00150A  0E00               	movlw	0
   630  00150C  6E17               	movwf	_changeModePressed^0,c
   631                           
   632                           ;main.c: 61:                 state = norClk;
   633  00150E  0E00               	movlw	0
   634  001510  6E1E               	movwf	_state^0,c
   635  001512  EFAC  F00A         	goto	l86
   636  001516                     l2223:
   637  001516  501E               	movf	_state^0,w,c
   638  001518  6E32               	movwf	??_main^0,c
   639  00151A  6A33               	clrf	(??_main+1)^0,c
   640                           
   641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   642                           ; Switch size 1, requested type "simple"
   643                           ; Number of cases is 1, Range of values is 0 to 0
   644                           ; switch strategies available:
   645                           ; Name         Instructions Cycles
   646                           ; simple_byte            4     3 (average)
   647                           ;	Chosen strategy is simple_byte
   648  00151C  5033               	movf	(??_main+1)^0,w,c
   649  00151E  0A00               	xorlw	0	; case 0
   650  001520  B4D8               	btfsc	status,2,c
   651  001522  EF95  F00A         	goto	l2265
   652  001526  EFAC  F00A         	goto	l86
   653  00152A                     l2265:
   654                           
   655                           ; Switch size 1, requested type "simple"
   656                           ; Number of cases is 5, Range of values is 0 to 4
   657                           ; switch strategies available:
   658                           ; Name         Instructions Cycles
   659                           ; simple_byte           16     9 (average)
   660                           ;	Chosen strategy is simple_byte
   661  00152A  5032               	movf	??_main^0,w,c
   662  00152C  0A00               	xorlw	0	; case 0
   663  00152E  B4D8               	btfsc	status,2,c
   664  001530  EF16  F00A         	goto	l2179
   665  001534  0A01               	xorlw	1	; case 1
   666  001536  B4D8               	btfsc	status,2,c
   667  001538  EF35  F00A         	goto	l2189
   668  00153C  0A03               	xorlw	3	; case 2
   669  00153E  B4D8               	btfsc	status,2,c
   670  001540  EF4A  F00A         	goto	l2197
   671  001544  0A01               	xorlw	1	; case 3
   672  001546  B4D8               	btfsc	status,2,c
   673  001548  EF5F  F00A         	goto	l2205
   674  00154C  0A07               	xorlw	7	; case 4
   675  00154E  B4D8               	btfsc	status,2,c
   676  001550  EF74  F00A         	goto	l2213
   677  001554  EFAC  F00A         	goto	l86
   678  001558                     l86:
   679  001558  EF07  F000         	goto	start
   680  00155C                     __end_of_main:
   681                           	opt callstack 0
   682                           
   683 ;; *************** function _timerInitialize *****************
   684 ;; Defined at:
   685 ;;		line 8 in file "system.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, status,2
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;Total ram usage:        0 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    3
   706 ;; This function calls:
   707 ;;		Nothing
   708 ;; This function is called by:
   709 ;;		_main
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           	psect	text1
   714  002136                     __ptext1:
   715                           	opt callstack 0
   716  002136                     _timerInitialize:
   717                           	opt callstack 27
   718  002136                     
   719                           ;system.c: 9:     INTCONbits.GIE = 1;
   720  002136  8EF2               	bsf	242,7,c	;volatile
   721                           
   722                           ;system.c: 11:     INTCONbits.TMR0IE = 1;
   723  002138  8AF2               	bsf	242,5,c	;volatile
   724  00213A                     
   725                           ;system.c: 12:     T0CON = 0b10000001;
   726  00213A  0E81               	movlw	129
   727  00213C  6ED5               	movwf	213,c	;volatile
   728                           
   729                           ;system.c: 14:     TMR0H = 0xFD;
   730  00213E  0EFD               	movlw	253
   731  002140  6ED7               	movwf	215,c	;volatile
   732                           
   733                           ;system.c: 15:     TMR0L = 0x8F;
   734  002142  0E8F               	movlw	143
   735  002144  6ED6               	movwf	214,c	;volatile
   736  002146                     
   737                           ;system.c: 16:     timer0ReloadVal = TMR0;
   738  002146  CFD6 F038          	movff	4054,_timer0ReloadVal	;volatile
   739  00214A  CFD7 F039          	movff	4055,_timer0ReloadVal+1	;volatile
   740  00214E  6A3A               	clrf	(_timer0ReloadVal+2)^0,c	;volatile
   741  002150  0012               	return		;funcret
   742  002152                     __end_of_timerInitialize:
   743                           	opt callstack 0
   744                           
   745 ;; *************** function _stopWatch *****************
   746 ;; Defined at:
   747 ;;		line 3 in file "stateStpWatch.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;		None
   750 ;; Auto vars:     Size  Location     Type
   751 ;;		None
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2, status,0
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;Total ram usage:        2 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; Hardware stack levels required when called:    3
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text2
   776  0018EC                     __ptext2:
   777                           	opt callstack 0
   778  0018EC                     _stopWatch:
   779                           	opt callstack 27
   780  0018EC                     
   781                           ;stateStpWatch.c: 4:     if (countPressed > 0) {
   782  0018EC  BE1C               	btfsc	(_countPressed+1)^0,7,c
   783  0018EE  EF81  F00C         	goto	u581
   784  0018F2  501C               	movf	(_countPressed+1)^0,w,c
   785  0018F4  E108               	bnz	u580
   786  0018F6  041B               	decf	_countPressed^0,w,c
   787  0018F8  A0D8               	btfss	status,0,c
   788  0018FA  EF81  F00C         	goto	u581
   789  0018FE  EF83  F00C         	goto	u580
   790  001902                     u581:
   791  001902  EFA2  F00C         	goto	l1669
   792  001906                     u580:
   793  001906                     
   794                           ;stateStpWatch.c: 5:         if (run == 0) {
   795  001906  5007               	movf	_run^0,w,c
   796  001908  1008               	iorwf	(_run+1)^0,w,c
   797  00190A  A4D8               	btfss	status,2,c
   798  00190C  EF8A  F00C         	goto	u591
   799  001910  EF8C  F00C         	goto	u590
   800  001914                     u591:
   801  001914  EF98  F00C         	goto	l1667
   802  001918                     u590:
   803  001918                     
   804                           ;stateStpWatch.c: 6:             miliSecSTW = 0;
   805  001918  0E00               	movlw	0
   806  00191A  6E02               	movwf	(_miliSecSTW+1)^0,c
   807  00191C  0E00               	movlw	0
   808  00191E  6E01               	movwf	_miliSecSTW^0,c
   809                           
   810                           ;stateStpWatch.c: 7:             secSTW = 0;
   811  001920  0E00               	movlw	0
   812  001922  6E04               	movwf	(_secSTW+1)^0,c
   813  001924  0E00               	movlw	0
   814  001926  6E03               	movwf	_secSTW^0,c
   815                           
   816                           ;stateStpWatch.c: 8:             minSTW = 0;
   817  001928  0E00               	movlw	0
   818  00192A  6E06               	movwf	(_minSTW+1)^0,c
   819  00192C  0E00               	movlw	0
   820  00192E  6E05               	movwf	_minSTW^0,c
   821  001930                     l1667:
   822                           
   823                           ;stateStpWatch.c: 10:         run = (run + 1) % 2;
   824  001930  0E01               	movlw	1
   825  001932  2407               	addwf	_run^0,w,c
   826  001934  6E27               	movwf	??_stopWatch^0,c
   827  001936  0E00               	movlw	0
   828  001938  2008               	addwfc	(_run+1)^0,w,c
   829  00193A  6E28               	movwf	(??_stopWatch+1)^0,c
   830  00193C  0E01               	movlw	1
   831  00193E  1427               	andwf	??_stopWatch^0,w,c
   832  001940  6E07               	movwf	_run^0,c
   833  001942  6A08               	clrf	(_run+1)^0,c
   834  001944                     l1669:
   835                           
   836                           ;stateStpWatch.c: 12:     if (run == 1) {
   837  001944  0407               	decf	_run^0,w,c
   838  001946  1008               	iorwf	(_run+1)^0,w,c
   839  001948  A4D8               	btfss	status,2,c
   840  00194A  EFA9  F00C         	goto	u601
   841  00194E  EFAB  F00C         	goto	u600
   842  001952                     u601:
   843  001952  EFF4  F00C         	goto	l460
   844  001956                     u600:
   845  001956                     
   846                           ;stateStpWatch.c: 13:         if (timerFlag == 1) {
   847  001956  0411               	decf	_timerFlag^0,w,c
   848  001958  1012               	iorwf	(_timerFlag+1)^0,w,c
   849  00195A  A4D8               	btfss	status,2,c
   850  00195C  EFB2  F00C         	goto	u611
   851  001960  EFB4  F00C         	goto	u610
   852  001964                     u611:
   853  001964  EFF4  F00C         	goto	l460
   854  001968                     u610:
   855  001968                     
   856                           ;stateStpWatch.c: 14:             miliSecSTW++;
   857  001968  4A01               	infsnz	_miliSecSTW^0,f,c
   858  00196A  2A02               	incf	(_miliSecSTW+1)^0,f,c
   859  00196C                     
   860                           ;stateStpWatch.c: 15:             if (miliSecSTW >= 100) {
   861  00196C  BE02               	btfsc	(_miliSecSTW+1)^0,7,c
   862  00196E  EFC2  F00C         	goto	u621
   863  001972  5002               	movf	(_miliSecSTW+1)^0,w,c
   864  001974  E109               	bnz	u620
   865  001976  0E64               	movlw	100
   866  001978  5C01               	subwf	_miliSecSTW^0,w,c
   867  00197A  A0D8               	btfss	status,0,c
   868  00197C  EFC2  F00C         	goto	u621
   869  001980  EFC4  F00C         	goto	u620
   870  001984                     u621:
   871  001984  EFCA  F00C         	goto	l1681
   872  001988                     u620:
   873  001988                     
   874                           ;stateStpWatch.c: 16:                 miliSecSTW = 0;
   875  001988  0E00               	movlw	0
   876  00198A  6E02               	movwf	(_miliSecSTW+1)^0,c
   877  00198C  0E00               	movlw	0
   878  00198E  6E01               	movwf	_miliSecSTW^0,c
   879  001990                     
   880                           ;stateStpWatch.c: 17:                 secSTW++;
   881  001990  4A03               	infsnz	_secSTW^0,f,c
   882  001992  2A04               	incf	(_secSTW+1)^0,f,c
   883  001994                     l1681:
   884                           
   885                           ;stateStpWatch.c: 19:             if (secSTW >= 60) {
   886  001994  BE04               	btfsc	(_secSTW+1)^0,7,c
   887  001996  EFD6  F00C         	goto	u631
   888  00199A  5004               	movf	(_secSTW+1)^0,w,c
   889  00199C  E109               	bnz	u630
   890  00199E  0E3C               	movlw	60
   891  0019A0  5C03               	subwf	_secSTW^0,w,c
   892  0019A2  A0D8               	btfss	status,0,c
   893  0019A4  EFD6  F00C         	goto	u631
   894  0019A8  EFD8  F00C         	goto	u630
   895  0019AC                     u631:
   896  0019AC  EFDE  F00C         	goto	l1687
   897  0019B0                     u630:
   898  0019B0                     
   899                           ;stateStpWatch.c: 20:                 secSTW = 0;
   900  0019B0  0E00               	movlw	0
   901  0019B2  6E04               	movwf	(_secSTW+1)^0,c
   902  0019B4  0E00               	movlw	0
   903  0019B6  6E03               	movwf	_secSTW^0,c
   904  0019B8                     
   905                           ;stateStpWatch.c: 21:                 minSTW++;
   906  0019B8  4A05               	infsnz	_minSTW^0,f,c
   907  0019BA  2A06               	incf	(_minSTW+1)^0,f,c
   908  0019BC                     l1687:
   909                           
   910                           ;stateStpWatch.c: 23:             if (minSTW >= 60) {
   911  0019BC  BE06               	btfsc	(_minSTW+1)^0,7,c
   912  0019BE  EFEA  F00C         	goto	u641
   913  0019C2  5006               	movf	(_minSTW+1)^0,w,c
   914  0019C4  E109               	bnz	u640
   915  0019C6  0E3C               	movlw	60
   916  0019C8  5C05               	subwf	_minSTW^0,w,c
   917  0019CA  A0D8               	btfss	status,0,c
   918  0019CC  EFEA  F00C         	goto	u641
   919  0019D0  EFEC  F00C         	goto	u640
   920  0019D4                     u641:
   921  0019D4  EFF0  F00C         	goto	l459
   922  0019D8                     u640:
   923  0019D8                     
   924                           ;stateStpWatch.c: 24:                 minSTW = 0;
   925  0019D8  0E00               	movlw	0
   926  0019DA  6E06               	movwf	(_minSTW+1)^0,c
   927  0019DC  0E00               	movlw	0
   928  0019DE  6E05               	movwf	_minSTW^0,c
   929  0019E0                     l459:
   930                           
   931                           ;stateStpWatch.c: 26:             timerFlag = 0;
   932  0019E0  0E00               	movlw	0
   933  0019E2  6E12               	movwf	(_timerFlag+1)^0,c
   934  0019E4  0E00               	movlw	0
   935  0019E6  6E11               	movwf	_timerFlag^0,c
   936  0019E8                     l460:
   937  0019E8  0012               	return		;funcret
   938  0019EA                     __end_of_stopWatch:
   939                           	opt callstack 0
   940                           
   941 ;; *************** function _oscillationInitialize *****************
   942 ;; Defined at:
   943 ;;		line 3 in file "system.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, status,2
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;Total ram usage:        0 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    3
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text3
   972  002198                     __ptext3:
   973                           	opt callstack 0
   974  002198                     _oscillationInitialize:
   975                           	opt callstack 27
   976  002198                     
   977                           ;system.c: 4:     OSCCON = 0b01000111;
   978  002198  0E47               	movlw	71
   979  00219A  6ED3               	movwf	211,c	;volatile
   980                           
   981                           ;system.c: 5:     OSCTUNE = 0b00001111;
   982  00219C  0E0F               	movlw	15
   983  00219E  6E9B               	movwf	155,c	;volatile
   984  0021A0  0012               	return		;funcret
   985  0021A2                     __end_of_oscillationInitialize:
   986                           	opt callstack 0
   987                           
   988 ;; *************** function _norClock *****************
   989 ;; Defined at:
   990 ;;		line 3 in file "stateClock.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    3
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text4
  1019  001DBC                     __ptext4:
  1020                           	opt callstack 0
  1021  001DBC                     _norClock:
  1022                           	opt callstack 27
  1023  001DBC                     
  1024                           ;stateClock.c: 4:     if (count10ms >= 100) {
  1025  001DBC  BE14               	btfsc	(_count10ms+1)^0,7,c
  1026  001DBE  EFEA  F00E         	goto	u211
  1027  001DC2  5014               	movf	(_count10ms+1)^0,w,c
  1028  001DC4  E109               	bnz	u210
  1029  001DC6  0E64               	movlw	100
  1030  001DC8  5C13               	subwf	_count10ms^0,w,c
  1031  001DCA  A0D8               	btfss	status,0,c
  1032  001DCC  EFEA  F00E         	goto	u211
  1033  001DD0  EFEC  F00E         	goto	u210
  1034  001DD4                     u211:
  1035  001DD4  EF2C  F00F         	goto	l296
  1036  001DD8                     u210:
  1037  001DD8                     
  1038                           ;stateClock.c: 5:         count10ms = 0;
  1039  001DD8  0E00               	movlw	0
  1040  001DDA  6E14               	movwf	(_count10ms+1)^0,c
  1041  001DDC  0E00               	movlw	0
  1042  001DDE  6E13               	movwf	_count10ms^0,c
  1043  001DE0                     
  1044                           ;stateClock.c: 6:         sec++;
  1045  001DE0  4A0F               	infsnz	_sec^0,f,c
  1046  001DE2  2A10               	incf	(_sec+1)^0,f,c
  1047  001DE4                     
  1048                           ;stateClock.c: 7:         if (sec >= 60) {
  1049  001DE4  BE10               	btfsc	(_sec+1)^0,7,c
  1050  001DE6  EFFE  F00E         	goto	u221
  1051  001DEA  5010               	movf	(_sec+1)^0,w,c
  1052  001DEC  E109               	bnz	u220
  1053  001DEE  0E3C               	movlw	60
  1054  001DF0  5C0F               	subwf	_sec^0,w,c
  1055  001DF2  A0D8               	btfss	status,0,c
  1056  001DF4  EFFE  F00E         	goto	u221
  1057  001DF8  EF00  F00F         	goto	u220
  1058  001DFC                     u221:
  1059  001DFC  EF06  F00F         	goto	l1403
  1060  001E00                     u220:
  1061  001E00                     
  1062                           ;stateClock.c: 8:             sec = 0;
  1063  001E00  0E00               	movlw	0
  1064  001E02  6E10               	movwf	(_sec+1)^0,c
  1065  001E04  0E00               	movlw	0
  1066  001E06  6E0F               	movwf	_sec^0,c
  1067  001E08                     
  1068                           ;stateClock.c: 9:             min++;
  1069  001E08  4A0D               	infsnz	_min^0,f,c
  1070  001E0A  2A0E               	incf	(_min+1)^0,f,c
  1071  001E0C                     l1403:
  1072                           
  1073                           ;stateClock.c: 11:         if (min >= 60) {
  1074  001E0C  BE0E               	btfsc	(_min+1)^0,7,c
  1075  001E0E  EF12  F00F         	goto	u231
  1076  001E12  500E               	movf	(_min+1)^0,w,c
  1077  001E14  E109               	bnz	u230
  1078  001E16  0E3C               	movlw	60
  1079  001E18  5C0D               	subwf	_min^0,w,c
  1080  001E1A  A0D8               	btfss	status,0,c
  1081  001E1C  EF12  F00F         	goto	u231
  1082  001E20  EF14  F00F         	goto	u230
  1083  001E24                     u231:
  1084  001E24  EF1A  F00F         	goto	l1409
  1085  001E28                     u230:
  1086  001E28                     
  1087                           ;stateClock.c: 12:             min = 0;
  1088  001E28  0E00               	movlw	0
  1089  001E2A  6E0E               	movwf	(_min+1)^0,c
  1090  001E2C  0E00               	movlw	0
  1091  001E2E  6E0D               	movwf	_min^0,c
  1092  001E30                     
  1093                           ;stateClock.c: 13:             hr++;
  1094  001E30  4A0B               	infsnz	_hr^0,f,c
  1095  001E32  2A0C               	incf	(_hr+1)^0,f,c
  1096  001E34                     l1409:
  1097                           
  1098                           ;stateClock.c: 15:         if (hr >= 24) {
  1099  001E34  BE0C               	btfsc	(_hr+1)^0,7,c
  1100  001E36  EF26  F00F         	goto	u241
  1101  001E3A  500C               	movf	(_hr+1)^0,w,c
  1102  001E3C  E109               	bnz	u240
  1103  001E3E  0E18               	movlw	24
  1104  001E40  5C0B               	subwf	_hr^0,w,c
  1105  001E42  A0D8               	btfss	status,0,c
  1106  001E44  EF26  F00F         	goto	u241
  1107  001E48  EF28  F00F         	goto	u240
  1108  001E4C                     u241:
  1109  001E4C  EF2C  F00F         	goto	l296
  1110  001E50                     u240:
  1111  001E50                     
  1112                           ;stateClock.c: 16:             hr = 0;
  1113  001E50  0E00               	movlw	0
  1114  001E52  6E0C               	movwf	(_hr+1)^0,c
  1115  001E54  0E00               	movlw	0
  1116  001E56  6E0B               	movwf	_hr^0,c
  1117  001E58                     l296:
  1118  001E58  0012               	return		;funcret
  1119  001E5A                     __end_of_norClock:
  1120                           	opt callstack 0
  1121                           
  1122 ;; *************** function _modifySecond *****************
  1123 ;; Defined at:
  1124 ;;		line 68 in file "statesModify.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, status,2, status,0
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1140 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;Total ram usage:        2 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:    3
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_main
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text5
  1153  00155C                     __ptext5:
  1154                           	opt callstack 0
  1155  00155C                     _modifySecond:
  1156                           	opt callstack 27
  1157  00155C                     
  1158                           ;statesModify.c: 69:     switch (stModify) {
  1159  00155C  EF1A  F00B         	goto	l1651
  1160  001560                     l1619:
  1161                           
  1162                           ;statesModify.c: 71:             if (changeModePressed == 1 && countPressed > 0) {
  1163  001560  0417               	decf	_changeModePressed^0,w,c
  1164  001562  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1165  001564  A4D8               	btfss	status,2,c
  1166  001566  EFB7  F00A         	goto	u491
  1167  00156A  EFB9  F00A         	goto	u490
  1168  00156E                     u491:
  1169  00156E  EF33  F00B         	goto	l1653
  1170  001572                     u490:
  1171  001572  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1172  001574  EFC4  F00A         	goto	u501
  1173  001578  501C               	movf	(_countPressed+1)^0,w,c
  1174  00157A  E108               	bnz	u500
  1175  00157C  041B               	decf	_countPressed^0,w,c
  1176  00157E  A0D8               	btfss	status,0,c
  1177  001580  EFC4  F00A         	goto	u501
  1178  001584  EFC6  F00A         	goto	u500
  1179  001588                     u501:
  1180  001588  EF33  F00B         	goto	l1653
  1181  00158C                     u500:
  1182  00158C                     
  1183                           ;statesModify.c: 72:                 sec++;
  1184  00158C  4A0F               	infsnz	_sec^0,f,c
  1185  00158E  2A10               	incf	(_sec+1)^0,f,c
  1186  001590                     
  1187                           ;statesModify.c: 73:                 stModify = iNor;
  1188  001590  0E01               	movlw	1
  1189  001592  6E1D               	movwf	_stModify^0,c
  1190  001594  EF33  F00B         	goto	l1653
  1191  001598                     l1627:
  1192                           
  1193                           ;statesModify.c: 77:             if (countPressed == 0 || changeModePressed == 1) {
  1194  001598  501B               	movf	_countPressed^0,w,c
  1195  00159A  101C               	iorwf	(_countPressed+1)^0,w,c
  1196  00159C  B4D8               	btfsc	status,2,c
  1197  00159E  EFD3  F00A         	goto	u511
  1198  0015A2  EFD5  F00A         	goto	u510
  1199  0015A6                     u511:
  1200  0015A6  EFDE  F00A         	goto	l1631
  1201  0015AA                     u510:
  1202  0015AA  0417               	decf	_changeModePressed^0,w,c
  1203  0015AC  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1204  0015AE  A4D8               	btfss	status,2,c
  1205  0015B0  EFDC  F00A         	goto	u521
  1206  0015B4  EFDE  F00A         	goto	u520
  1207  0015B8                     u521:
  1208  0015B8  EFE0  F00A         	goto	l1633
  1209  0015BC                     u520:
  1210  0015BC                     l1631:
  1211                           
  1212                           ;statesModify.c: 78:                 stModify = init;
  1213  0015BC  0E00               	movlw	0
  1214  0015BE  6E1D               	movwf	_stModify^0,c
  1215  0015C0                     l1633:
  1216                           
  1217                           ;statesModify.c: 80:             if (countAuto > 0) {
  1218  0015C0  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1219  0015C2  EFEB  F00A         	goto	u531
  1220  0015C6  501A               	movf	(_countAuto+1)^0,w,c
  1221  0015C8  E108               	bnz	u530
  1222  0015CA  0419               	decf	_countAuto^0,w,c
  1223  0015CC  A0D8               	btfss	status,0,c
  1224  0015CE  EFEB  F00A         	goto	u531
  1225  0015D2  EFED  F00A         	goto	u530
  1226  0015D6                     u531:
  1227  0015D6  EF33  F00B         	goto	l1653
  1228  0015DA                     u530:
  1229  0015DA                     
  1230                           ;statesModify.c: 81:                 increaseTime = 1;
  1231  0015DA  0E00               	movlw	0
  1232  0015DC  6E16               	movwf	(_increaseTime+1)^0,c
  1233  0015DE  0E01               	movlw	1
  1234  0015E0  6E15               	movwf	_increaseTime^0,c
  1235                           
  1236                           ;statesModify.c: 82:                 stModify = iAuto;
  1237  0015E2  0E02               	movlw	2
  1238  0015E4  6E1D               	movwf	_stModify^0,c
  1239  0015E6  EF33  F00B         	goto	l1653
  1240  0015EA                     l1637:
  1241                           
  1242                           ;statesModify.c: 86:             if (countPressed == 0 || changeModePressed == 1) {
  1243  0015EA  501B               	movf	_countPressed^0,w,c
  1244  0015EC  101C               	iorwf	(_countPressed+1)^0,w,c
  1245  0015EE  B4D8               	btfsc	status,2,c
  1246  0015F0  EFFC  F00A         	goto	u541
  1247  0015F4  EFFE  F00A         	goto	u540
  1248  0015F8                     u541:
  1249  0015F8  EF07  F00B         	goto	l1641
  1250  0015FC                     u540:
  1251  0015FC  0417               	decf	_changeModePressed^0,w,c
  1252  0015FE  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1253  001600  A4D8               	btfss	status,2,c
  1254  001602  EF05  F00B         	goto	u551
  1255  001606  EF07  F00B         	goto	u550
  1256  00160A                     u551:
  1257  00160A  EF09  F00B         	goto	l1643
  1258  00160E                     u550:
  1259  00160E                     l1641:
  1260                           
  1261                           ;statesModify.c: 87:                 stModify = init;
  1262  00160E  0E00               	movlw	0
  1263  001610  6E1D               	movwf	_stModify^0,c
  1264  001612                     l1643:
  1265                           
  1266                           ;statesModify.c: 89:             if (increaseTime == 1) {
  1267  001612  0415               	decf	_increaseTime^0,w,c
  1268  001614  1016               	iorwf	(_increaseTime+1)^0,w,c
  1269  001616  A4D8               	btfss	status,2,c
  1270  001618  EF10  F00B         	goto	u561
  1271  00161C  EF12  F00B         	goto	u560
  1272  001620                     u561:
  1273  001620  EF33  F00B         	goto	l1653
  1274  001624                     u560:
  1275  001624                     
  1276                           ;statesModify.c: 90:                 increaseTime = 0;
  1277  001624  0E00               	movlw	0
  1278  001626  6E16               	movwf	(_increaseTime+1)^0,c
  1279  001628  0E00               	movlw	0
  1280  00162A  6E15               	movwf	_increaseTime^0,c
  1281  00162C                     
  1282                           ;statesModify.c: 91:                 sec++;
  1283  00162C  4A0F               	infsnz	_sec^0,f,c
  1284  00162E  2A10               	incf	(_sec+1)^0,f,c
  1285  001630  EF33  F00B         	goto	l1653
  1286  001634                     l1651:
  1287  001634  501D               	movf	_stModify^0,w,c
  1288  001636  6E27               	movwf	??_modifySecond^0,c
  1289  001638  6A28               	clrf	(??_modifySecond+1)^0,c
  1290                           
  1291                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1292                           ; Switch size 1, requested type "simple"
  1293                           ; Number of cases is 1, Range of values is 0 to 0
  1294                           ; switch strategies available:
  1295                           ; Name         Instructions Cycles
  1296                           ; simple_byte            4     3 (average)
  1297                           ;	Chosen strategy is simple_byte
  1298  00163A  5028               	movf	(??_modifySecond+1)^0,w,c
  1299  00163C  0A00               	xorlw	0	; case 0
  1300  00163E  B4D8               	btfsc	status,2,c
  1301  001640  EF24  F00B         	goto	l2267
  1302  001644  EF33  F00B         	goto	l1653
  1303  001648                     l2267:
  1304                           
  1305                           ; Switch size 1, requested type "simple"
  1306                           ; Number of cases is 3, Range of values is 0 to 2
  1307                           ; switch strategies available:
  1308                           ; Name         Instructions Cycles
  1309                           ; simple_byte           10     6 (average)
  1310                           ;	Chosen strategy is simple_byte
  1311  001648  5027               	movf	??_modifySecond^0,w,c
  1312  00164A  0A00               	xorlw	0	; case 0
  1313  00164C  B4D8               	btfsc	status,2,c
  1314  00164E  EFB0  F00A         	goto	l1619
  1315  001652  0A01               	xorlw	1	; case 1
  1316  001654  B4D8               	btfsc	status,2,c
  1317  001656  EFCC  F00A         	goto	l1627
  1318  00165A  0A03               	xorlw	3	; case 2
  1319  00165C  B4D8               	btfsc	status,2,c
  1320  00165E  EFF5  F00A         	goto	l1637
  1321  001662  EF33  F00B         	goto	l1653
  1322  001666                     l1653:
  1323                           
  1324                           ;statesModify.c: 95:     if (sec >= 60) {
  1325  001666  BE10               	btfsc	(_sec+1)^0,7,c
  1326  001668  EF3F  F00B         	goto	u571
  1327  00166C  5010               	movf	(_sec+1)^0,w,c
  1328  00166E  E109               	bnz	u570
  1329  001670  0E3C               	movlw	60
  1330  001672  5C0F               	subwf	_sec^0,w,c
  1331  001674  A0D8               	btfss	status,0,c
  1332  001676  EF3F  F00B         	goto	u571
  1333  00167A  EF41  F00B         	goto	u570
  1334  00167E                     u571:
  1335  00167E  EF45  F00B         	goto	l393
  1336  001682                     u570:
  1337  001682                     
  1338                           ;statesModify.c: 96:         sec = 0;
  1339  001682  0E00               	movlw	0
  1340  001684  6E10               	movwf	(_sec+1)^0,c
  1341  001686  0E00               	movlw	0
  1342  001688  6E0F               	movwf	_sec^0,c
  1343  00168A                     l393:
  1344  00168A  0012               	return		;funcret
  1345  00168C                     __end_of_modifySecond:
  1346                           	opt callstack 0
  1347                           
  1348 ;; *************** function _modifyMinute *****************
  1349 ;; Defined at:
  1350 ;;		line 36 in file "statesModify.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;		None
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, status,2, status,0
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;Total ram usage:        2 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    3
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text6
  1379  00168C                     __ptext6:
  1380                           	opt callstack 0
  1381  00168C                     _modifyMinute:
  1382                           	opt callstack 27
  1383  00168C                     
  1384                           ;statesModify.c: 37:     switch (stModify) {
  1385  00168C  EFB2  F00B         	goto	l1607
  1386  001690                     l1575:
  1387                           
  1388                           ;statesModify.c: 39:             if (changeModePressed == 1 && countPressed > 0) {
  1389  001690  0417               	decf	_changeModePressed^0,w,c
  1390  001692  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1391  001694  A4D8               	btfss	status,2,c
  1392  001696  EF4F  F00B         	goto	u401
  1393  00169A  EF51  F00B         	goto	u400
  1394  00169E                     u401:
  1395  00169E  EFCB  F00B         	goto	l1609
  1396  0016A2                     u400:
  1397  0016A2  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1398  0016A4  EF5C  F00B         	goto	u411
  1399  0016A8  501C               	movf	(_countPressed+1)^0,w,c
  1400  0016AA  E108               	bnz	u410
  1401  0016AC  041B               	decf	_countPressed^0,w,c
  1402  0016AE  A0D8               	btfss	status,0,c
  1403  0016B0  EF5C  F00B         	goto	u411
  1404  0016B4  EF5E  F00B         	goto	u410
  1405  0016B8                     u411:
  1406  0016B8  EFCB  F00B         	goto	l1609
  1407  0016BC                     u410:
  1408  0016BC                     
  1409                           ;statesModify.c: 40:                 min++;
  1410  0016BC  4A0D               	infsnz	_min^0,f,c
  1411  0016BE  2A0E               	incf	(_min+1)^0,f,c
  1412  0016C0                     
  1413                           ;statesModify.c: 41:                 stModify = iNor;
  1414  0016C0  0E01               	movlw	1
  1415  0016C2  6E1D               	movwf	_stModify^0,c
  1416  0016C4  EFCB  F00B         	goto	l1609
  1417  0016C8                     l1583:
  1418                           
  1419                           ;statesModify.c: 45:             if (countPressed == 0 || changeModePressed == 1) {
  1420  0016C8  501B               	movf	_countPressed^0,w,c
  1421  0016CA  101C               	iorwf	(_countPressed+1)^0,w,c
  1422  0016CC  B4D8               	btfsc	status,2,c
  1423  0016CE  EF6B  F00B         	goto	u421
  1424  0016D2  EF6D  F00B         	goto	u420
  1425  0016D6                     u421:
  1426  0016D6  EF76  F00B         	goto	l1587
  1427  0016DA                     u420:
  1428  0016DA  0417               	decf	_changeModePressed^0,w,c
  1429  0016DC  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1430  0016DE  A4D8               	btfss	status,2,c
  1431  0016E0  EF74  F00B         	goto	u431
  1432  0016E4  EF76  F00B         	goto	u430
  1433  0016E8                     u431:
  1434  0016E8  EF78  F00B         	goto	l1589
  1435  0016EC                     u430:
  1436  0016EC                     l1587:
  1437                           
  1438                           ;statesModify.c: 46:                 stModify = init;
  1439  0016EC  0E00               	movlw	0
  1440  0016EE  6E1D               	movwf	_stModify^0,c
  1441  0016F0                     l1589:
  1442                           
  1443                           ;statesModify.c: 48:             if (countAuto > 0) {
  1444  0016F0  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1445  0016F2  EF83  F00B         	goto	u441
  1446  0016F6  501A               	movf	(_countAuto+1)^0,w,c
  1447  0016F8  E108               	bnz	u440
  1448  0016FA  0419               	decf	_countAuto^0,w,c
  1449  0016FC  A0D8               	btfss	status,0,c
  1450  0016FE  EF83  F00B         	goto	u441
  1451  001702  EF85  F00B         	goto	u440
  1452  001706                     u441:
  1453  001706  EFCB  F00B         	goto	l1609
  1454  00170A                     u440:
  1455  00170A                     
  1456                           ;statesModify.c: 49:                 increaseTime = 1;
  1457  00170A  0E00               	movlw	0
  1458  00170C  6E16               	movwf	(_increaseTime+1)^0,c
  1459  00170E  0E01               	movlw	1
  1460  001710  6E15               	movwf	_increaseTime^0,c
  1461                           
  1462                           ;statesModify.c: 50:                 stModify = iAuto;
  1463  001712  0E02               	movlw	2
  1464  001714  6E1D               	movwf	_stModify^0,c
  1465  001716  EFCB  F00B         	goto	l1609
  1466  00171A                     l1593:
  1467                           
  1468                           ;statesModify.c: 54:             if (countPressed == 0 || changeModePressed == 1) {
  1469  00171A  501B               	movf	_countPressed^0,w,c
  1470  00171C  101C               	iorwf	(_countPressed+1)^0,w,c
  1471  00171E  B4D8               	btfsc	status,2,c
  1472  001720  EF94  F00B         	goto	u451
  1473  001724  EF96  F00B         	goto	u450
  1474  001728                     u451:
  1475  001728  EF9F  F00B         	goto	l1597
  1476  00172C                     u450:
  1477  00172C  0417               	decf	_changeModePressed^0,w,c
  1478  00172E  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1479  001730  A4D8               	btfss	status,2,c
  1480  001732  EF9D  F00B         	goto	u461
  1481  001736  EF9F  F00B         	goto	u460
  1482  00173A                     u461:
  1483  00173A  EFA1  F00B         	goto	l1599
  1484  00173E                     u460:
  1485  00173E                     l1597:
  1486                           
  1487                           ;statesModify.c: 55:                 stModify = init;
  1488  00173E  0E00               	movlw	0
  1489  001740  6E1D               	movwf	_stModify^0,c
  1490  001742                     l1599:
  1491                           
  1492                           ;statesModify.c: 57:             if (increaseTime == 1) {
  1493  001742  0415               	decf	_increaseTime^0,w,c
  1494  001744  1016               	iorwf	(_increaseTime+1)^0,w,c
  1495  001746  A4D8               	btfss	status,2,c
  1496  001748  EFA8  F00B         	goto	u471
  1497  00174C  EFAA  F00B         	goto	u470
  1498  001750                     u471:
  1499  001750  EFCB  F00B         	goto	l1609
  1500  001754                     u470:
  1501  001754                     
  1502                           ;statesModify.c: 58:                 increaseTime = 0;
  1503  001754  0E00               	movlw	0
  1504  001756  6E16               	movwf	(_increaseTime+1)^0,c
  1505  001758  0E00               	movlw	0
  1506  00175A  6E15               	movwf	_increaseTime^0,c
  1507  00175C                     
  1508                           ;statesModify.c: 59:                 min++;
  1509  00175C  4A0D               	infsnz	_min^0,f,c
  1510  00175E  2A0E               	incf	(_min+1)^0,f,c
  1511  001760  EFCB  F00B         	goto	l1609
  1512  001764                     l1607:
  1513  001764  501D               	movf	_stModify^0,w,c
  1514  001766  6E27               	movwf	??_modifyMinute^0,c
  1515  001768  6A28               	clrf	(??_modifyMinute+1)^0,c
  1516                           
  1517                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1518                           ; Switch size 1, requested type "simple"
  1519                           ; Number of cases is 1, Range of values is 0 to 0
  1520                           ; switch strategies available:
  1521                           ; Name         Instructions Cycles
  1522                           ; simple_byte            4     3 (average)
  1523                           ;	Chosen strategy is simple_byte
  1524  00176A  5028               	movf	(??_modifyMinute+1)^0,w,c
  1525  00176C  0A00               	xorlw	0	; case 0
  1526  00176E  B4D8               	btfsc	status,2,c
  1527  001770  EFBC  F00B         	goto	l2269
  1528  001774  EFCB  F00B         	goto	l1609
  1529  001778                     l2269:
  1530                           
  1531                           ; Switch size 1, requested type "simple"
  1532                           ; Number of cases is 3, Range of values is 0 to 2
  1533                           ; switch strategies available:
  1534                           ; Name         Instructions Cycles
  1535                           ; simple_byte           10     6 (average)
  1536                           ;	Chosen strategy is simple_byte
  1537  001778  5027               	movf	??_modifyMinute^0,w,c
  1538  00177A  0A00               	xorlw	0	; case 0
  1539  00177C  B4D8               	btfsc	status,2,c
  1540  00177E  EF48  F00B         	goto	l1575
  1541  001782  0A01               	xorlw	1	; case 1
  1542  001784  B4D8               	btfsc	status,2,c
  1543  001786  EF64  F00B         	goto	l1583
  1544  00178A  0A03               	xorlw	3	; case 2
  1545  00178C  B4D8               	btfsc	status,2,c
  1546  00178E  EF8D  F00B         	goto	l1593
  1547  001792  EFCB  F00B         	goto	l1609
  1548  001796                     l1609:
  1549                           
  1550                           ;statesModify.c: 63:     if (min >= 60) {
  1551  001796  BE0E               	btfsc	(_min+1)^0,7,c
  1552  001798  EFD7  F00B         	goto	u481
  1553  00179C  500E               	movf	(_min+1)^0,w,c
  1554  00179E  E109               	bnz	u480
  1555  0017A0  0E3C               	movlw	60
  1556  0017A2  5C0D               	subwf	_min^0,w,c
  1557  0017A4  A0D8               	btfss	status,0,c
  1558  0017A6  EFD7  F00B         	goto	u481
  1559  0017AA  EFD9  F00B         	goto	u480
  1560  0017AE                     u481:
  1561  0017AE  EFDD  F00B         	goto	l375
  1562  0017B2                     u480:
  1563  0017B2                     
  1564                           ;statesModify.c: 64:         min = 0;
  1565  0017B2  0E00               	movlw	0
  1566  0017B4  6E0E               	movwf	(_min+1)^0,c
  1567  0017B6  0E00               	movlw	0
  1568  0017B8  6E0D               	movwf	_min^0,c
  1569  0017BA                     l375:
  1570  0017BA  0012               	return		;funcret
  1571  0017BC                     __end_of_modifyMinute:
  1572                           	opt callstack 0
  1573                           
  1574 ;; *************** function _modifyHour *****************
  1575 ;; Defined at:
  1576 ;;		line 4 in file "statesModify.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        2 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    3
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text7
  1605  0017BC                     __ptext7:
  1606                           	opt callstack 0
  1607  0017BC                     _modifyHour:
  1608                           	opt callstack 27
  1609  0017BC                     
  1610                           ;statesModify.c: 5:     switch (stModify) {
  1611  0017BC  EF4A  F00C         	goto	l1469
  1612  0017C0                     l1437:
  1613                           
  1614                           ;statesModify.c: 7:             if (changeModePressed == 1 && countPressed > 0) {
  1615  0017C0  0417               	decf	_changeModePressed^0,w,c
  1616  0017C2  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1617  0017C4  A4D8               	btfss	status,2,c
  1618  0017C6  EFE7  F00B         	goto	u251
  1619  0017CA  EFE9  F00B         	goto	u250
  1620  0017CE                     u251:
  1621  0017CE  EF63  F00C         	goto	l1471
  1622  0017D2                     u250:
  1623  0017D2  BE1C               	btfsc	(_countPressed+1)^0,7,c
  1624  0017D4  EFF4  F00B         	goto	u261
  1625  0017D8  501C               	movf	(_countPressed+1)^0,w,c
  1626  0017DA  E108               	bnz	u260
  1627  0017DC  041B               	decf	_countPressed^0,w,c
  1628  0017DE  A0D8               	btfss	status,0,c
  1629  0017E0  EFF4  F00B         	goto	u261
  1630  0017E4  EFF6  F00B         	goto	u260
  1631  0017E8                     u261:
  1632  0017E8  EF63  F00C         	goto	l1471
  1633  0017EC                     u260:
  1634  0017EC                     
  1635                           ;statesModify.c: 8:                 hr++;
  1636  0017EC  4A0B               	infsnz	_hr^0,f,c
  1637  0017EE  2A0C               	incf	(_hr+1)^0,f,c
  1638  0017F0                     
  1639                           ;statesModify.c: 9:                 stModify = iNor;
  1640  0017F0  0E01               	movlw	1
  1641  0017F2  6E1D               	movwf	_stModify^0,c
  1642  0017F4  EF63  F00C         	goto	l1471
  1643  0017F8                     l1445:
  1644                           
  1645                           ;statesModify.c: 13:             if (countPressed == 0 || changeModePressed == 1) {
  1646  0017F8  501B               	movf	_countPressed^0,w,c
  1647  0017FA  101C               	iorwf	(_countPressed+1)^0,w,c
  1648  0017FC  B4D8               	btfsc	status,2,c
  1649  0017FE  EF03  F00C         	goto	u271
  1650  001802  EF05  F00C         	goto	u270
  1651  001806                     u271:
  1652  001806  EF0E  F00C         	goto	l1449
  1653  00180A                     u270:
  1654  00180A  0417               	decf	_changeModePressed^0,w,c
  1655  00180C  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1656  00180E  A4D8               	btfss	status,2,c
  1657  001810  EF0C  F00C         	goto	u281
  1658  001814  EF0E  F00C         	goto	u280
  1659  001818                     u281:
  1660  001818  EF10  F00C         	goto	l1451
  1661  00181C                     u280:
  1662  00181C                     l1449:
  1663                           
  1664                           ;statesModify.c: 14:                 stModify = init;
  1665  00181C  0E00               	movlw	0
  1666  00181E  6E1D               	movwf	_stModify^0,c
  1667  001820                     l1451:
  1668                           
  1669                           ;statesModify.c: 16:             if (countAuto > 0) {
  1670  001820  BE1A               	btfsc	(_countAuto+1)^0,7,c
  1671  001822  EF1B  F00C         	goto	u291
  1672  001826  501A               	movf	(_countAuto+1)^0,w,c
  1673  001828  E108               	bnz	u290
  1674  00182A  0419               	decf	_countAuto^0,w,c
  1675  00182C  A0D8               	btfss	status,0,c
  1676  00182E  EF1B  F00C         	goto	u291
  1677  001832  EF1D  F00C         	goto	u290
  1678  001836                     u291:
  1679  001836  EF63  F00C         	goto	l1471
  1680  00183A                     u290:
  1681  00183A                     
  1682                           ;statesModify.c: 17:                 increaseTime = 1;
  1683  00183A  0E00               	movlw	0
  1684  00183C  6E16               	movwf	(_increaseTime+1)^0,c
  1685  00183E  0E01               	movlw	1
  1686  001840  6E15               	movwf	_increaseTime^0,c
  1687                           
  1688                           ;statesModify.c: 18:                 stModify = iAuto;
  1689  001842  0E02               	movlw	2
  1690  001844  6E1D               	movwf	_stModify^0,c
  1691  001846  EF63  F00C         	goto	l1471
  1692  00184A                     l1455:
  1693                           
  1694                           ;statesModify.c: 22:             if (countPressed == 0 || changeModePressed == 1) {
  1695  00184A  501B               	movf	_countPressed^0,w,c
  1696  00184C  101C               	iorwf	(_countPressed+1)^0,w,c
  1697  00184E  B4D8               	btfsc	status,2,c
  1698  001850  EF2C  F00C         	goto	u301
  1699  001854  EF2E  F00C         	goto	u300
  1700  001858                     u301:
  1701  001858  EF37  F00C         	goto	l1459
  1702  00185C                     u300:
  1703  00185C  0417               	decf	_changeModePressed^0,w,c
  1704  00185E  1018               	iorwf	(_changeModePressed+1)^0,w,c
  1705  001860  A4D8               	btfss	status,2,c
  1706  001862  EF35  F00C         	goto	u311
  1707  001866  EF37  F00C         	goto	u310
  1708  00186A                     u311:
  1709  00186A  EF39  F00C         	goto	l1461
  1710  00186E                     u310:
  1711  00186E                     l1459:
  1712                           
  1713                           ;statesModify.c: 23:                 stModify = init;
  1714  00186E  0E00               	movlw	0
  1715  001870  6E1D               	movwf	_stModify^0,c
  1716  001872                     l1461:
  1717                           
  1718                           ;statesModify.c: 25:             if (increaseTime == 1) {
  1719  001872  0415               	decf	_increaseTime^0,w,c
  1720  001874  1016               	iorwf	(_increaseTime+1)^0,w,c
  1721  001876  A4D8               	btfss	status,2,c
  1722  001878  EF40  F00C         	goto	u321
  1723  00187C  EF42  F00C         	goto	u320
  1724  001880                     u321:
  1725  001880  EF63  F00C         	goto	l1471
  1726  001884                     u320:
  1727  001884                     
  1728                           ;statesModify.c: 26:                 increaseTime = 0;
  1729  001884  0E00               	movlw	0
  1730  001886  6E16               	movwf	(_increaseTime+1)^0,c
  1731  001888  0E00               	movlw	0
  1732  00188A  6E15               	movwf	_increaseTime^0,c
  1733  00188C                     
  1734                           ;statesModify.c: 27:                 hr++;
  1735  00188C  4A0B               	infsnz	_hr^0,f,c
  1736  00188E  2A0C               	incf	(_hr+1)^0,f,c
  1737  001890  EF63  F00C         	goto	l1471
  1738  001894                     l1469:
  1739  001894  501D               	movf	_stModify^0,w,c
  1740  001896  6E27               	movwf	??_modifyHour^0,c
  1741  001898  6A28               	clrf	(??_modifyHour+1)^0,c
  1742                           
  1743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 1, Range of values is 0 to 0
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte            4     3 (average)
  1749                           ;	Chosen strategy is simple_byte
  1750  00189A  5028               	movf	(??_modifyHour+1)^0,w,c
  1751  00189C  0A00               	xorlw	0	; case 0
  1752  00189E  B4D8               	btfsc	status,2,c
  1753  0018A0  EF54  F00C         	goto	l2271
  1754  0018A4  EF63  F00C         	goto	l1471
  1755  0018A8                     l2271:
  1756                           
  1757                           ; Switch size 1, requested type "simple"
  1758                           ; Number of cases is 3, Range of values is 0 to 2
  1759                           ; switch strategies available:
  1760                           ; Name         Instructions Cycles
  1761                           ; simple_byte           10     6 (average)
  1762                           ;	Chosen strategy is simple_byte
  1763  0018A8  5027               	movf	??_modifyHour^0,w,c
  1764  0018AA  0A00               	xorlw	0	; case 0
  1765  0018AC  B4D8               	btfsc	status,2,c
  1766  0018AE  EFE0  F00B         	goto	l1437
  1767  0018B2  0A01               	xorlw	1	; case 1
  1768  0018B4  B4D8               	btfsc	status,2,c
  1769  0018B6  EFFC  F00B         	goto	l1445
  1770  0018BA  0A03               	xorlw	3	; case 2
  1771  0018BC  B4D8               	btfsc	status,2,c
  1772  0018BE  EF25  F00C         	goto	l1455
  1773  0018C2  EF63  F00C         	goto	l1471
  1774  0018C6                     l1471:
  1775                           
  1776                           ;statesModify.c: 31:     if (hr >= 24) {
  1777  0018C6  BE0C               	btfsc	(_hr+1)^0,7,c
  1778  0018C8  EF6F  F00C         	goto	u331
  1779  0018CC  500C               	movf	(_hr+1)^0,w,c
  1780  0018CE  E109               	bnz	u330
  1781  0018D0  0E18               	movlw	24
  1782  0018D2  5C0B               	subwf	_hr^0,w,c
  1783  0018D4  A0D8               	btfss	status,0,c
  1784  0018D6  EF6F  F00C         	goto	u331
  1785  0018DA  EF71  F00C         	goto	u330
  1786  0018DE                     u331:
  1787  0018DE  EF75  F00C         	goto	l357
  1788  0018E2                     u330:
  1789  0018E2                     
  1790                           ;statesModify.c: 32:         hr = 0;
  1791  0018E2  0E00               	movlw	0
  1792  0018E4  6E0C               	movwf	(_hr+1)^0,c
  1793  0018E6  0E00               	movlw	0
  1794  0018E8  6E0B               	movwf	_hr^0,c
  1795  0018EA                     l357:
  1796  0018EA  0012               	return		;funcret
  1797  0018EC                     __end_of_modifyHour:
  1798                           	opt callstack 0
  1799                           
  1800 ;; *************** function _displayStpWatch *****************
  1801 ;; Defined at:
  1802 ;;		line 31 in file "stateStpWatch.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;Total ram usage:        0 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    7
  1823 ;; This function calls:
  1824 ;;		_LCDPutChar
  1825 ;;		_LCDPutInst
  1826 ;;		_LCDPutStr
  1827 ;;		___awdiv
  1828 ;;		___awmod
  1829 ;; This function is called by:
  1830 ;;		_main
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text8
  1835  0019EA                     __ptext8:
  1836                           	opt callstack 0
  1837  0019EA                     _displayStpWatch:
  1838                           	opt callstack 23
  1839  0019EA                     
  1840                           ;stateStpWatch.c: 32:     LCDPutInst(0x80);
  1841  0019EA  0E80               	movlw	128
  1842  0019EC  EC98  F00F         	call	_LCDPutInst
  1843  0019F0                     
  1844                           ;stateStpWatch.c: 33:     LCDPutStr("   STOP WATCH   ");
  1845  0019F0  0E01               	movlw	low STR_5
  1846  0019F2  6E2E               	movwf	LCDPutStr@ptr^0,c
  1847  0019F4  0E10               	movlw	high STR_5
  1848  0019F6  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  1849  0019F8  EC43  F010         	call	_LCDPutStr	;wreg free
  1850  0019FC                     
  1851                           ;stateStpWatch.c: 34:     LCDPutInst(0xC0);
  1852  0019FC  0EC0               	movlw	192
  1853  0019FE  EC98  F00F         	call	_LCDPutInst
  1854  001A02                     
  1855                           ;stateStpWatch.c: 35:     LCDPutChar(minSTW/10+'0');
  1856  001A02  C005  F027         	movff	_minSTW,___awdiv@dividend
  1857  001A06  C006  F028         	movff	_minSTW+1,___awdiv@dividend+1
  1858  001A0A  0E00               	movlw	0
  1859  001A0C  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1860  001A0E  0E0A               	movlw	10
  1861  001A10  6E29               	movwf	___awdiv@divisor^0,c
  1862  001A12  ECC3  F00D         	call	___awdiv	;wreg free
  1863  001A16  5027               	movf	?___awdiv^0,w,c
  1864  001A18  0F30               	addlw	48
  1865  001A1A  EC65  F00F         	call	_LCDPutChar
  1866  001A1E                     
  1867                           ;stateStpWatch.c: 36:     LCDPutChar(minSTW%10+'0');
  1868  001A1E  C005  F027         	movff	_minSTW,___awmod@dividend
  1869  001A22  C006  F028         	movff	_minSTW+1,___awmod@dividend+1
  1870  001A26  0E00               	movlw	0
  1871  001A28  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1872  001A2A  0E0A               	movlw	10
  1873  001A2C  6E29               	movwf	___awmod@divisor^0,c
  1874  001A2E  EC86  F00E         	call	___awmod	;wreg free
  1875  001A32  5027               	movf	?___awmod^0,w,c
  1876  001A34  0F30               	addlw	48
  1877  001A36  EC65  F00F         	call	_LCDPutChar
  1878  001A3A                     
  1879                           ;stateStpWatch.c: 37:     LCDPutChar(':');
  1880  001A3A  0E3A               	movlw	58
  1881  001A3C  EC65  F00F         	call	_LCDPutChar
  1882  001A40                     
  1883                           ;stateStpWatch.c: 38:     LCDPutChar(secSTW/10+'0');
  1884  001A40  C003  F027         	movff	_secSTW,___awdiv@dividend
  1885  001A44  C004  F028         	movff	_secSTW+1,___awdiv@dividend+1
  1886  001A48  0E00               	movlw	0
  1887  001A4A  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1888  001A4C  0E0A               	movlw	10
  1889  001A4E  6E29               	movwf	___awdiv@divisor^0,c
  1890  001A50  ECC3  F00D         	call	___awdiv	;wreg free
  1891  001A54  5027               	movf	?___awdiv^0,w,c
  1892  001A56  0F30               	addlw	48
  1893  001A58  EC65  F00F         	call	_LCDPutChar
  1894  001A5C                     
  1895                           ;stateStpWatch.c: 39:     LCDPutChar(secSTW%10+'0');
  1896  001A5C  C003  F027         	movff	_secSTW,___awmod@dividend
  1897  001A60  C004  F028         	movff	_secSTW+1,___awmod@dividend+1
  1898  001A64  0E00               	movlw	0
  1899  001A66  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1900  001A68  0E0A               	movlw	10
  1901  001A6A  6E29               	movwf	___awmod@divisor^0,c
  1902  001A6C  EC86  F00E         	call	___awmod	;wreg free
  1903  001A70  5027               	movf	?___awmod^0,w,c
  1904  001A72  0F30               	addlw	48
  1905  001A74  EC65  F00F         	call	_LCDPutChar
  1906  001A78                     
  1907                           ;stateStpWatch.c: 40:     LCDPutChar(':');
  1908  001A78  0E3A               	movlw	58
  1909  001A7A  EC65  F00F         	call	_LCDPutChar
  1910  001A7E                     
  1911                           ;stateStpWatch.c: 41:     LCDPutChar(miliSecSTW/10+'0');
  1912  001A7E  C001  F027         	movff	_miliSecSTW,___awdiv@dividend
  1913  001A82  C002  F028         	movff	_miliSecSTW+1,___awdiv@dividend+1
  1914  001A86  0E00               	movlw	0
  1915  001A88  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  1916  001A8A  0E0A               	movlw	10
  1917  001A8C  6E29               	movwf	___awdiv@divisor^0,c
  1918  001A8E  ECC3  F00D         	call	___awdiv	;wreg free
  1919  001A92  5027               	movf	?___awdiv^0,w,c
  1920  001A94  0F30               	addlw	48
  1921  001A96  EC65  F00F         	call	_LCDPutChar
  1922  001A9A                     
  1923                           ;stateStpWatch.c: 42:     LCDPutChar(miliSecSTW%10+'0');
  1924  001A9A  C001  F027         	movff	_miliSecSTW,___awmod@dividend
  1925  001A9E  C002  F028         	movff	_miliSecSTW+1,___awmod@dividend+1
  1926  001AA2  0E00               	movlw	0
  1927  001AA4  6E2A               	movwf	(___awmod@divisor+1)^0,c
  1928  001AA6  0E0A               	movlw	10
  1929  001AA8  6E29               	movwf	___awmod@divisor^0,c
  1930  001AAA  EC86  F00E         	call	___awmod	;wreg free
  1931  001AAE  5027               	movf	?___awmod^0,w,c
  1932  001AB0  0F30               	addlw	48
  1933  001AB2  EC65  F00F         	call	_LCDPutChar
  1934  001AB6  0012               	return		;funcret
  1935  001AB8                     __end_of_displayStpWatch:
  1936                           	opt callstack 0
  1937                           
  1938 ;; *************** function _displayModify *****************
  1939 ;; Defined at:
  1940 ;;		line 100 in file "statesModify.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;Total ram usage:        2 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    7
  1961 ;; This function calls:
  1962 ;;		_LCDPutChar
  1963 ;;		_LCDPutInst
  1964 ;;		_LCDPutStr
  1965 ;;		___awdiv
  1966 ;;		___awmod
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text9
  1973  001044                     __ptext9:
  1974                           	opt callstack 0
  1975  001044                     _displayModify:
  1976                           	opt callstack 23
  1977  001044                     
  1978                           ;statesModify.c: 101:     switch (state) {
  1979  001044  EFE6  F009         	goto	l2123
  1980  001048                     l2037:
  1981                           
  1982                           ;statesModify.c: 105:             LCDPutInst(0x80);
  1983  001048  0E80               	movlw	128
  1984  00104A  EC98  F00F         	call	_LCDPutInst
  1985  00104E                     
  1986                           ;statesModify.c: 106:             LCDPutStr(" MODIFIES HOUR ");
  1987  00104E  0E23               	movlw	low STR_2
  1988  001050  6E2E               	movwf	LCDPutStr@ptr^0,c
  1989  001052  0E10               	movlw	high STR_2
  1990  001054  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  1991  001056  EC43  F010         	call	_LCDPutStr	;wreg free
  1992  00105A                     
  1993                           ;statesModify.c: 107:             LCDPutInst(0xC0);
  1994  00105A  0EC0               	movlw	192
  1995  00105C  EC98  F00F         	call	_LCDPutInst
  1996  001060                     
  1997                           ;statesModify.c: 108:             if ((count10ms % (20 / 2)) == 0) {
  1998  001060  C013  F027         	movff	_count10ms,___awmod@dividend
  1999  001064  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2000  001068  0E00               	movlw	0
  2001  00106A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2002  00106C  0E0A               	movlw	10
  2003  00106E  6E29               	movwf	___awmod@divisor^0,c
  2004  001070  EC86  F00E         	call	___awmod	;wreg free
  2005  001074  5027               	movf	?___awmod^0,w,c
  2006  001076  1028               	iorwf	(?___awmod+1)^0,w,c
  2007  001078  A4D8               	btfss	status,2,c
  2008  00107A  EF41  F008         	goto	u941
  2009  00107E  EF43  F008         	goto	u940
  2010  001082                     u941:
  2011  001082  EF7A  F008         	goto	l2053
  2012  001086                     u940:
  2013  001086                     
  2014                           ;statesModify.c: 109:                 if (blink == 0) {
  2015  001086  5009               	movf	_blink^0,w,c
  2016  001088  100A               	iorwf	(_blink+1)^0,w,c
  2017  00108A  A4D8               	btfss	status,2,c
  2018  00108C  EF4A  F008         	goto	u951
  2019  001090  EF4C  F008         	goto	u950
  2020  001094                     u951:
  2021  001094  EF54  F008         	goto	l2049
  2022  001098                     u950:
  2023  001098                     
  2024                           ;statesModify.c: 110:                     LCDPutChar(' ');
  2025  001098  0E20               	movlw	32
  2026  00109A  EC65  F00F         	call	_LCDPutChar
  2027                           
  2028                           ;statesModify.c: 111:                     LCDPutChar(' ');
  2029  00109E  0E20               	movlw	32
  2030  0010A0  EC65  F00F         	call	_LCDPutChar
  2031                           
  2032                           ;statesModify.c: 112:                 }
  2033  0010A4  EF70  F008         	goto	l2051
  2034  0010A8                     l2049:
  2035                           
  2036                           ;statesModify.c: 114:                     LCDPutChar(hr/10+'0');
  2037  0010A8  C00B  F027         	movff	_hr,___awdiv@dividend
  2038  0010AC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2039  0010B0  0E00               	movlw	0
  2040  0010B2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2041  0010B4  0E0A               	movlw	10
  2042  0010B6  6E29               	movwf	___awdiv@divisor^0,c
  2043  0010B8  ECC3  F00D         	call	___awdiv	;wreg free
  2044  0010BC  5027               	movf	?___awdiv^0,w,c
  2045  0010BE  0F30               	addlw	48
  2046  0010C0  EC65  F00F         	call	_LCDPutChar
  2047                           
  2048                           ;statesModify.c: 115:                     LCDPutChar(hr%10+'0');
  2049  0010C4  C00B  F027         	movff	_hr,___awmod@dividend
  2050  0010C8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2051  0010CC  0E00               	movlw	0
  2052  0010CE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2053  0010D0  0E0A               	movlw	10
  2054  0010D2  6E29               	movwf	___awmod@divisor^0,c
  2055  0010D4  EC86  F00E         	call	___awmod	;wreg free
  2056  0010D8  5027               	movf	?___awmod^0,w,c
  2057  0010DA  0F30               	addlw	48
  2058  0010DC  EC65  F00F         	call	_LCDPutChar
  2059  0010E0                     l2051:
  2060                           
  2061                           ;statesModify.c: 117:                 blink = (blink + 1) % 2;
  2062  0010E0  0E01               	movlw	1
  2063  0010E2  2409               	addwf	_blink^0,w,c
  2064  0010E4  6E30               	movwf	??_displayModify^0,c
  2065  0010E6  0E00               	movlw	0
  2066  0010E8  200A               	addwfc	(_blink+1)^0,w,c
  2067  0010EA  6E31               	movwf	(??_displayModify+1)^0,c
  2068  0010EC  0E01               	movlw	1
  2069  0010EE  1430               	andwf	??_displayModify^0,w,c
  2070  0010F0  6E09               	movwf	_blink^0,c
  2071  0010F2  6A0A               	clrf	(_blink+1)^0,c
  2072  0010F4                     l2053:
  2073                           
  2074                           ;statesModify.c: 119:             LCDPutChar(':');
  2075  0010F4  0E3A               	movlw	58
  2076  0010F6  EC65  F00F         	call	_LCDPutChar
  2077  0010FA                     
  2078                           ;statesModify.c: 120:             LCDPutChar(min/10+'0');
  2079  0010FA  C00D  F027         	movff	_min,___awdiv@dividend
  2080  0010FE  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2081  001102  0E00               	movlw	0
  2082  001104  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2083  001106  0E0A               	movlw	10
  2084  001108  6E29               	movwf	___awdiv@divisor^0,c
  2085  00110A  ECC3  F00D         	call	___awdiv	;wreg free
  2086  00110E  5027               	movf	?___awdiv^0,w,c
  2087  001110  0F30               	addlw	48
  2088  001112  EC65  F00F         	call	_LCDPutChar
  2089  001116                     
  2090                           ;statesModify.c: 121:             LCDPutChar(min%10+'0');
  2091  001116  C00D  F027         	movff	_min,___awmod@dividend
  2092  00111A  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2093  00111E  0E00               	movlw	0
  2094  001120  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2095  001122  0E0A               	movlw	10
  2096  001124  6E29               	movwf	___awmod@divisor^0,c
  2097  001126  EC86  F00E         	call	___awmod	;wreg free
  2098  00112A  5027               	movf	?___awmod^0,w,c
  2099  00112C  0F30               	addlw	48
  2100  00112E  EC65  F00F         	call	_LCDPutChar
  2101  001132                     
  2102                           ;statesModify.c: 122:             LCDPutChar(':');
  2103  001132  0E3A               	movlw	58
  2104  001134  EC65  F00F         	call	_LCDPutChar
  2105  001138                     
  2106                           ;statesModify.c: 123:             LCDPutChar(sec/10+'0');
  2107  001138  C00F  F027         	movff	_sec,___awdiv@dividend
  2108  00113C  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2109  001140  0E00               	movlw	0
  2110  001142  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2111  001144  0E0A               	movlw	10
  2112  001146  6E29               	movwf	___awdiv@divisor^0,c
  2113  001148  ECC3  F00D         	call	___awdiv	;wreg free
  2114  00114C  5027               	movf	?___awdiv^0,w,c
  2115  00114E  0F30               	addlw	48
  2116  001150  EC65  F00F         	call	_LCDPutChar
  2117  001154                     
  2118                           ;statesModify.c: 124:             LCDPutChar(sec%10+'0');
  2119  001154  C00F  F027         	movff	_sec,___awmod@dividend
  2120  001158  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2121  00115C  0E00               	movlw	0
  2122  00115E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2123  001160  0E0A               	movlw	10
  2124  001162  6E29               	movwf	___awmod@divisor^0,c
  2125  001164  EC86  F00E         	call	___awmod	;wreg free
  2126  001168  5027               	movf	?___awmod^0,w,c
  2127  00116A  0F30               	addlw	48
  2128  00116C  EC65  F00F         	call	_LCDPutChar
  2129                           
  2130                           ;statesModify.c: 125:             break;
  2131  001170  EF07  F00A         	goto	l412
  2132  001174                     l2065:
  2133                           
  2134                           ;statesModify.c: 127:             LCDPutInst(0x80);
  2135  001174  0E80               	movlw	128
  2136  001176  EC98  F00F         	call	_LCDPutInst
  2137  00117A                     
  2138                           ;statesModify.c: 128:             LCDPutStr("MODIFIES MINUTE");
  2139  00117A  0E33               	movlw	low STR_3
  2140  00117C  6E2E               	movwf	LCDPutStr@ptr^0,c
  2141  00117E  0E10               	movlw	high STR_3
  2142  001180  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2143  001182  EC43  F010         	call	_LCDPutStr	;wreg free
  2144  001186                     
  2145                           ;statesModify.c: 129:             LCDPutInst(0xC0);
  2146  001186  0EC0               	movlw	192
  2147  001188  EC98  F00F         	call	_LCDPutInst
  2148  00118C                     
  2149                           ;statesModify.c: 130:             LCDPutChar(hr/10+'0');
  2150  00118C  C00B  F027         	movff	_hr,___awdiv@dividend
  2151  001190  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2152  001194  0E00               	movlw	0
  2153  001196  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2154  001198  0E0A               	movlw	10
  2155  00119A  6E29               	movwf	___awdiv@divisor^0,c
  2156  00119C  ECC3  F00D         	call	___awdiv	;wreg free
  2157  0011A0  5027               	movf	?___awdiv^0,w,c
  2158  0011A2  0F30               	addlw	48
  2159  0011A4  EC65  F00F         	call	_LCDPutChar
  2160  0011A8                     
  2161                           ;statesModify.c: 131:             LCDPutChar(hr%10+'0');
  2162  0011A8  C00B  F027         	movff	_hr,___awmod@dividend
  2163  0011AC  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2164  0011B0  0E00               	movlw	0
  2165  0011B2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2166  0011B4  0E0A               	movlw	10
  2167  0011B6  6E29               	movwf	___awmod@divisor^0,c
  2168  0011B8  EC86  F00E         	call	___awmod	;wreg free
  2169  0011BC  5027               	movf	?___awmod^0,w,c
  2170  0011BE  0F30               	addlw	48
  2171  0011C0  EC65  F00F         	call	_LCDPutChar
  2172  0011C4                     
  2173                           ;statesModify.c: 132:             LCDPutChar(':');
  2174  0011C4  0E3A               	movlw	58
  2175  0011C6  EC65  F00F         	call	_LCDPutChar
  2176  0011CA                     
  2177                           ;statesModify.c: 133:             if ((count10ms % (20 / 2)) == 0) {
  2178  0011CA  C013  F027         	movff	_count10ms,___awmod@dividend
  2179  0011CE  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2180  0011D2  0E00               	movlw	0
  2181  0011D4  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2182  0011D6  0E0A               	movlw	10
  2183  0011D8  6E29               	movwf	___awmod@divisor^0,c
  2184  0011DA  EC86  F00E         	call	___awmod	;wreg free
  2185  0011DE  5027               	movf	?___awmod^0,w,c
  2186  0011E0  1028               	iorwf	(?___awmod+1)^0,w,c
  2187  0011E2  A4D8               	btfss	status,2,c
  2188  0011E4  EFF6  F008         	goto	u961
  2189  0011E8  EFF8  F008         	goto	u960
  2190  0011EC                     u961:
  2191  0011EC  EF2F  F009         	goto	l2087
  2192  0011F0                     u960:
  2193  0011F0                     
  2194                           ;statesModify.c: 134:                 if (blink == 0) {
  2195  0011F0  5009               	movf	_blink^0,w,c
  2196  0011F2  100A               	iorwf	(_blink+1)^0,w,c
  2197  0011F4  A4D8               	btfss	status,2,c
  2198  0011F6  EFFF  F008         	goto	u971
  2199  0011FA  EF01  F009         	goto	u970
  2200  0011FE                     u971:
  2201  0011FE  EF09  F009         	goto	l2083
  2202  001202                     u970:
  2203  001202                     
  2204                           ;statesModify.c: 135:                     LCDPutChar(' ');
  2205  001202  0E20               	movlw	32
  2206  001204  EC65  F00F         	call	_LCDPutChar
  2207                           
  2208                           ;statesModify.c: 136:                     LCDPutChar(' ');
  2209  001208  0E20               	movlw	32
  2210  00120A  EC65  F00F         	call	_LCDPutChar
  2211                           
  2212                           ;statesModify.c: 137:                 }
  2213  00120E  EF25  F009         	goto	l2085
  2214  001212                     l2083:
  2215                           
  2216                           ;statesModify.c: 139:                     LCDPutChar(min/10+'0');
  2217  001212  C00D  F027         	movff	_min,___awdiv@dividend
  2218  001216  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2219  00121A  0E00               	movlw	0
  2220  00121C  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2221  00121E  0E0A               	movlw	10
  2222  001220  6E29               	movwf	___awdiv@divisor^0,c
  2223  001222  ECC3  F00D         	call	___awdiv	;wreg free
  2224  001226  5027               	movf	?___awdiv^0,w,c
  2225  001228  0F30               	addlw	48
  2226  00122A  EC65  F00F         	call	_LCDPutChar
  2227                           
  2228                           ;statesModify.c: 140:                     LCDPutChar(min%10+'0');
  2229  00122E  C00D  F027         	movff	_min,___awmod@dividend
  2230  001232  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2231  001236  0E00               	movlw	0
  2232  001238  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2233  00123A  0E0A               	movlw	10
  2234  00123C  6E29               	movwf	___awmod@divisor^0,c
  2235  00123E  EC86  F00E         	call	___awmod	;wreg free
  2236  001242  5027               	movf	?___awmod^0,w,c
  2237  001244  0F30               	addlw	48
  2238  001246  EC65  F00F         	call	_LCDPutChar
  2239  00124A                     l2085:
  2240                           
  2241                           ;statesModify.c: 142:                 blink = (blink + 1) % 2;
  2242  00124A  0E01               	movlw	1
  2243  00124C  2409               	addwf	_blink^0,w,c
  2244  00124E  6E30               	movwf	??_displayModify^0,c
  2245  001250  0E00               	movlw	0
  2246  001252  200A               	addwfc	(_blink+1)^0,w,c
  2247  001254  6E31               	movwf	(??_displayModify+1)^0,c
  2248  001256  0E01               	movlw	1
  2249  001258  1430               	andwf	??_displayModify^0,w,c
  2250  00125A  6E09               	movwf	_blink^0,c
  2251  00125C  6A0A               	clrf	(_blink+1)^0,c
  2252  00125E                     l2087:
  2253                           
  2254                           ;statesModify.c: 144:             LCDPutChar(':');
  2255  00125E  0E3A               	movlw	58
  2256  001260  EC65  F00F         	call	_LCDPutChar
  2257  001264                     
  2258                           ;statesModify.c: 145:             LCDPutChar(sec/10+'0');
  2259  001264  C00F  F027         	movff	_sec,___awdiv@dividend
  2260  001268  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2261  00126C  0E00               	movlw	0
  2262  00126E  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2263  001270  0E0A               	movlw	10
  2264  001272  6E29               	movwf	___awdiv@divisor^0,c
  2265  001274  ECC3  F00D         	call	___awdiv	;wreg free
  2266  001278  5027               	movf	?___awdiv^0,w,c
  2267  00127A  0F30               	addlw	48
  2268  00127C  EC65  F00F         	call	_LCDPutChar
  2269  001280                     
  2270                           ;statesModify.c: 146:             LCDPutChar(sec%10+'0');
  2271  001280  C00F  F027         	movff	_sec,___awmod@dividend
  2272  001284  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2273  001288  0E00               	movlw	0
  2274  00128A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2275  00128C  0E0A               	movlw	10
  2276  00128E  6E29               	movwf	___awmod@divisor^0,c
  2277  001290  EC86  F00E         	call	___awmod	;wreg free
  2278  001294  5027               	movf	?___awmod^0,w,c
  2279  001296  0F30               	addlw	48
  2280  001298  EC65  F00F         	call	_LCDPutChar
  2281                           
  2282                           ;statesModify.c: 147:             break;
  2283  00129C  EF07  F00A         	goto	l412
  2284  0012A0                     l2093:
  2285                           
  2286                           ;statesModify.c: 149:             LCDPutInst(0x80);
  2287  0012A0  0E80               	movlw	128
  2288  0012A2  EC98  F00F         	call	_LCDPutInst
  2289  0012A6                     
  2290                           ;statesModify.c: 150:             LCDPutStr("MODIFIES MINUTE");
  2291  0012A6  0E33               	movlw	low STR_3
  2292  0012A8  6E2E               	movwf	LCDPutStr@ptr^0,c
  2293  0012AA  0E10               	movlw	high STR_3
  2294  0012AC  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2295  0012AE  EC43  F010         	call	_LCDPutStr	;wreg free
  2296  0012B2                     
  2297                           ;statesModify.c: 151:             LCDPutInst(0xC0);
  2298  0012B2  0EC0               	movlw	192
  2299  0012B4  EC98  F00F         	call	_LCDPutInst
  2300  0012B8                     
  2301                           ;statesModify.c: 152:             LCDPutChar(hr/10+'0');
  2302  0012B8  C00B  F027         	movff	_hr,___awdiv@dividend
  2303  0012BC  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2304  0012C0  0E00               	movlw	0
  2305  0012C2  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2306  0012C4  0E0A               	movlw	10
  2307  0012C6  6E29               	movwf	___awdiv@divisor^0,c
  2308  0012C8  ECC3  F00D         	call	___awdiv	;wreg free
  2309  0012CC  5027               	movf	?___awdiv^0,w,c
  2310  0012CE  0F30               	addlw	48
  2311  0012D0  EC65  F00F         	call	_LCDPutChar
  2312  0012D4                     
  2313                           ;statesModify.c: 153:             LCDPutChar(hr%10+'0');
  2314  0012D4  C00B  F027         	movff	_hr,___awmod@dividend
  2315  0012D8  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2316  0012DC  0E00               	movlw	0
  2317  0012DE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2318  0012E0  0E0A               	movlw	10
  2319  0012E2  6E29               	movwf	___awmod@divisor^0,c
  2320  0012E4  EC86  F00E         	call	___awmod	;wreg free
  2321  0012E8  5027               	movf	?___awmod^0,w,c
  2322  0012EA  0F30               	addlw	48
  2323  0012EC  EC65  F00F         	call	_LCDPutChar
  2324  0012F0                     
  2325                           ;statesModify.c: 154:             LCDPutChar(':');
  2326  0012F0  0E3A               	movlw	58
  2327  0012F2  EC65  F00F         	call	_LCDPutChar
  2328  0012F6                     
  2329                           ;statesModify.c: 155:             LCDPutChar(min/10+'0');
  2330  0012F6  C00D  F027         	movff	_min,___awdiv@dividend
  2331  0012FA  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2332  0012FE  0E00               	movlw	0
  2333  001300  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2334  001302  0E0A               	movlw	10
  2335  001304  6E29               	movwf	___awdiv@divisor^0,c
  2336  001306  ECC3  F00D         	call	___awdiv	;wreg free
  2337  00130A  5027               	movf	?___awdiv^0,w,c
  2338  00130C  0F30               	addlw	48
  2339  00130E  EC65  F00F         	call	_LCDPutChar
  2340  001312                     
  2341                           ;statesModify.c: 156:             LCDPutChar(min%10+'0');
  2342  001312  C00D  F027         	movff	_min,___awmod@dividend
  2343  001316  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2344  00131A  0E00               	movlw	0
  2345  00131C  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2346  00131E  0E0A               	movlw	10
  2347  001320  6E29               	movwf	___awmod@divisor^0,c
  2348  001322  EC86  F00E         	call	___awmod	;wreg free
  2349  001326  5027               	movf	?___awmod^0,w,c
  2350  001328  0F30               	addlw	48
  2351  00132A  EC65  F00F         	call	_LCDPutChar
  2352  00132E                     
  2353                           ;statesModify.c: 157:             LCDPutChar(':');
  2354  00132E  0E3A               	movlw	58
  2355  001330  EC65  F00F         	call	_LCDPutChar
  2356  001334                     
  2357                           ;statesModify.c: 158:             if ((count10ms % (20 / 2)) == 0) {
  2358  001334  C013  F027         	movff	_count10ms,___awmod@dividend
  2359  001338  C014  F028         	movff	_count10ms+1,___awmod@dividend+1
  2360  00133C  0E00               	movlw	0
  2361  00133E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2362  001340  0E0A               	movlw	10
  2363  001342  6E29               	movwf	___awmod@divisor^0,c
  2364  001344  EC86  F00E         	call	___awmod	;wreg free
  2365  001348  5027               	movf	?___awmod^0,w,c
  2366  00134A  1028               	iorwf	(?___awmod+1)^0,w,c
  2367  00134C  A4D8               	btfss	status,2,c
  2368  00134E  EFAB  F009         	goto	u981
  2369  001352  EFAD  F009         	goto	u980
  2370  001356                     u981:
  2371  001356  EF07  F00A         	goto	l412
  2372  00135A                     u980:
  2373  00135A                     
  2374                           ;statesModify.c: 159:                 if (blink == 0) {
  2375  00135A  5009               	movf	_blink^0,w,c
  2376  00135C  100A               	iorwf	(_blink+1)^0,w,c
  2377  00135E  A4D8               	btfss	status,2,c
  2378  001360  EFB4  F009         	goto	u991
  2379  001364  EFB6  F009         	goto	u990
  2380  001368                     u991:
  2381  001368  EFBE  F009         	goto	l2117
  2382  00136C                     u990:
  2383  00136C                     
  2384                           ;statesModify.c: 160:                     LCDPutChar(' ');
  2385  00136C  0E20               	movlw	32
  2386  00136E  EC65  F00F         	call	_LCDPutChar
  2387                           
  2388                           ;statesModify.c: 161:                     LCDPutChar(' ');
  2389  001372  0E20               	movlw	32
  2390  001374  EC65  F00F         	call	_LCDPutChar
  2391                           
  2392                           ;statesModify.c: 162:                 }
  2393  001378  EFDA  F009         	goto	l2119
  2394  00137C                     l2117:
  2395                           
  2396                           ;statesModify.c: 164:                     LCDPutChar(sec/10+'0');
  2397  00137C  C00F  F027         	movff	_sec,___awdiv@dividend
  2398  001380  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2399  001384  0E00               	movlw	0
  2400  001386  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2401  001388  0E0A               	movlw	10
  2402  00138A  6E29               	movwf	___awdiv@divisor^0,c
  2403  00138C  ECC3  F00D         	call	___awdiv	;wreg free
  2404  001390  5027               	movf	?___awdiv^0,w,c
  2405  001392  0F30               	addlw	48
  2406  001394  EC65  F00F         	call	_LCDPutChar
  2407                           
  2408                           ;statesModify.c: 165:                     LCDPutChar(sec%10+'0');
  2409  001398  C00F  F027         	movff	_sec,___awmod@dividend
  2410  00139C  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2411  0013A0  0E00               	movlw	0
  2412  0013A2  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2413  0013A4  0E0A               	movlw	10
  2414  0013A6  6E29               	movwf	___awmod@divisor^0,c
  2415  0013A8  EC86  F00E         	call	___awmod	;wreg free
  2416  0013AC  5027               	movf	?___awmod^0,w,c
  2417  0013AE  0F30               	addlw	48
  2418  0013B0  EC65  F00F         	call	_LCDPutChar
  2419  0013B4                     l2119:
  2420                           
  2421                           ;statesModify.c: 167:                 blink = (blink + 1) % 2;
  2422  0013B4  0E01               	movlw	1
  2423  0013B6  2409               	addwf	_blink^0,w,c
  2424  0013B8  6E30               	movwf	??_displayModify^0,c
  2425  0013BA  0E00               	movlw	0
  2426  0013BC  200A               	addwfc	(_blink+1)^0,w,c
  2427  0013BE  6E31               	movwf	(??_displayModify+1)^0,c
  2428  0013C0  0E01               	movlw	1
  2429  0013C2  1430               	andwf	??_displayModify^0,w,c
  2430  0013C4  6E09               	movwf	_blink^0,c
  2431  0013C6  6A0A               	clrf	(_blink+1)^0,c
  2432  0013C8  EF07  F00A         	goto	l412
  2433  0013CC                     l2123:
  2434  0013CC  501E               	movf	_state^0,w,c
  2435  0013CE  6E30               	movwf	??_displayModify^0,c
  2436  0013D0  6A31               	clrf	(??_displayModify+1)^0,c
  2437                           
  2438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2439                           ; Switch size 1, requested type "simple"
  2440                           ; Number of cases is 1, Range of values is 0 to 0
  2441                           ; switch strategies available:
  2442                           ; Name         Instructions Cycles
  2443                           ; simple_byte            4     3 (average)
  2444                           ;	Chosen strategy is simple_byte
  2445  0013D2  5031               	movf	(??_displayModify+1)^0,w,c
  2446  0013D4  0A00               	xorlw	0	; case 0
  2447  0013D6  B4D8               	btfsc	status,2,c
  2448  0013D8  EFF0  F009         	goto	l2273
  2449  0013DC  EF07  F00A         	goto	l412
  2450  0013E0                     l2273:
  2451                           
  2452                           ; Switch size 1, requested type "simple"
  2453                           ; Number of cases is 5, Range of values is 0 to 4
  2454                           ; switch strategies available:
  2455                           ; Name         Instructions Cycles
  2456                           ; simple_byte           16     9 (average)
  2457                           ;	Chosen strategy is simple_byte
  2458  0013E0  5030               	movf	??_displayModify^0,w,c
  2459  0013E2  0A00               	xorlw	0	; case 0
  2460  0013E4  B4D8               	btfsc	status,2,c
  2461  0013E6  EF07  F00A         	goto	l412
  2462  0013EA  0A01               	xorlw	1	; case 1
  2463  0013EC  B4D8               	btfsc	status,2,c
  2464  0013EE  EF24  F008         	goto	l2037
  2465  0013F2  0A03               	xorlw	3	; case 2
  2466  0013F4  B4D8               	btfsc	status,2,c
  2467  0013F6  EFBA  F008         	goto	l2065
  2468  0013FA  0A01               	xorlw	1	; case 3
  2469  0013FC  B4D8               	btfsc	status,2,c
  2470  0013FE  EF50  F009         	goto	l2093
  2471  001402  0A07               	xorlw	7	; case 4
  2472  001404  B4D8               	btfsc	status,2,c
  2473  001406  EF07  F00A         	goto	l412
  2474  00140A  EF07  F00A         	goto	l412
  2475  00140E                     l412:
  2476  00140E  0012               	return		;funcret
  2477  001410                     __end_of_displayModify:
  2478                           	opt callstack 0
  2479                           
  2480 ;; *************** function _displayClock *****************
  2481 ;; Defined at:
  2482 ;;		line 21 in file "stateClock.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;		None
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:        0 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    7
  2503 ;; This function calls:
  2504 ;;		_LCDPutChar
  2505 ;;		_LCDPutInst
  2506 ;;		_LCDPutStr
  2507 ;;		___awdiv
  2508 ;;		___awmod
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text10
  2515  001AB8                     __ptext10:
  2516                           	opt callstack 0
  2517  001AB8                     _displayClock:
  2518                           	opt callstack 23
  2519  001AB8                     
  2520                           ;stateClock.c: 22:     LCDPutInst(0x80);
  2521  001AB8  0E80               	movlw	128
  2522  001ABA  EC98  F00F         	call	_LCDPutInst
  2523  001ABE                     
  2524                           ;stateClock.c: 23:     LCDPutStr("  NORMAL CLOCK  ");
  2525  001ABE  0E12               	movlw	low STR_1
  2526  001AC0  6E2E               	movwf	LCDPutStr@ptr^0,c
  2527  001AC2  0E10               	movlw	high STR_1
  2528  001AC4  6E2F               	movwf	(LCDPutStr@ptr+1)^0,c
  2529  001AC6  EC43  F010         	call	_LCDPutStr	;wreg free
  2530  001ACA                     
  2531                           ;stateClock.c: 24:     LCDPutInst(0xC0);
  2532  001ACA  0EC0               	movlw	192
  2533  001ACC  EC98  F00F         	call	_LCDPutInst
  2534  001AD0                     
  2535                           ;stateClock.c: 25:     LCDPutChar(hr/10+'0');
  2536  001AD0  C00B  F027         	movff	_hr,___awdiv@dividend
  2537  001AD4  C00C  F028         	movff	_hr+1,___awdiv@dividend+1
  2538  001AD8  0E00               	movlw	0
  2539  001ADA  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2540  001ADC  0E0A               	movlw	10
  2541  001ADE  6E29               	movwf	___awdiv@divisor^0,c
  2542  001AE0  ECC3  F00D         	call	___awdiv	;wreg free
  2543  001AE4  5027               	movf	?___awdiv^0,w,c
  2544  001AE6  0F30               	addlw	48
  2545  001AE8  EC65  F00F         	call	_LCDPutChar
  2546  001AEC                     
  2547                           ;stateClock.c: 26:     LCDPutChar(hr%10+'0');
  2548  001AEC  C00B  F027         	movff	_hr,___awmod@dividend
  2549  001AF0  C00C  F028         	movff	_hr+1,___awmod@dividend+1
  2550  001AF4  0E00               	movlw	0
  2551  001AF6  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2552  001AF8  0E0A               	movlw	10
  2553  001AFA  6E29               	movwf	___awmod@divisor^0,c
  2554  001AFC  EC86  F00E         	call	___awmod	;wreg free
  2555  001B00  5027               	movf	?___awmod^0,w,c
  2556  001B02  0F30               	addlw	48
  2557  001B04  EC65  F00F         	call	_LCDPutChar
  2558  001B08                     
  2559                           ;stateClock.c: 27:     LCDPutChar(':');
  2560  001B08  0E3A               	movlw	58
  2561  001B0A  EC65  F00F         	call	_LCDPutChar
  2562  001B0E                     
  2563                           ;stateClock.c: 28:     LCDPutChar(min/10+'0');
  2564  001B0E  C00D  F027         	movff	_min,___awdiv@dividend
  2565  001B12  C00E  F028         	movff	_min+1,___awdiv@dividend+1
  2566  001B16  0E00               	movlw	0
  2567  001B18  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2568  001B1A  0E0A               	movlw	10
  2569  001B1C  6E29               	movwf	___awdiv@divisor^0,c
  2570  001B1E  ECC3  F00D         	call	___awdiv	;wreg free
  2571  001B22  5027               	movf	?___awdiv^0,w,c
  2572  001B24  0F30               	addlw	48
  2573  001B26  EC65  F00F         	call	_LCDPutChar
  2574  001B2A                     
  2575                           ;stateClock.c: 29:     LCDPutChar(min%10+'0');
  2576  001B2A  C00D  F027         	movff	_min,___awmod@dividend
  2577  001B2E  C00E  F028         	movff	_min+1,___awmod@dividend+1
  2578  001B32  0E00               	movlw	0
  2579  001B34  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2580  001B36  0E0A               	movlw	10
  2581  001B38  6E29               	movwf	___awmod@divisor^0,c
  2582  001B3A  EC86  F00E         	call	___awmod	;wreg free
  2583  001B3E  5027               	movf	?___awmod^0,w,c
  2584  001B40  0F30               	addlw	48
  2585  001B42  EC65  F00F         	call	_LCDPutChar
  2586  001B46                     
  2587                           ;stateClock.c: 30:     LCDPutChar(':');
  2588  001B46  0E3A               	movlw	58
  2589  001B48  EC65  F00F         	call	_LCDPutChar
  2590  001B4C                     
  2591                           ;stateClock.c: 31:     LCDPutChar(sec/10+'0');
  2592  001B4C  C00F  F027         	movff	_sec,___awdiv@dividend
  2593  001B50  C010  F028         	movff	_sec+1,___awdiv@dividend+1
  2594  001B54  0E00               	movlw	0
  2595  001B56  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  2596  001B58  0E0A               	movlw	10
  2597  001B5A  6E29               	movwf	___awdiv@divisor^0,c
  2598  001B5C  ECC3  F00D         	call	___awdiv	;wreg free
  2599  001B60  5027               	movf	?___awdiv^0,w,c
  2600  001B62  0F30               	addlw	48
  2601  001B64  EC65  F00F         	call	_LCDPutChar
  2602  001B68                     
  2603                           ;stateClock.c: 32:     LCDPutChar(sec%10+'0');
  2604  001B68  C00F  F027         	movff	_sec,___awmod@dividend
  2605  001B6C  C010  F028         	movff	_sec+1,___awmod@dividend+1
  2606  001B70  0E00               	movlw	0
  2607  001B72  6E2A               	movwf	(___awmod@divisor+1)^0,c
  2608  001B74  0E0A               	movlw	10
  2609  001B76  6E29               	movwf	___awmod@divisor^0,c
  2610  001B78  EC86  F00E         	call	___awmod	;wreg free
  2611  001B7C  5027               	movf	?___awmod^0,w,c
  2612  001B7E  0F30               	addlw	48
  2613  001B80  EC65  F00F         	call	_LCDPutChar
  2614  001B84  0012               	return		;funcret
  2615  001B86                     __end_of_displayClock:
  2616                           	opt callstack 0
  2617                           
  2618 ;; *************** function ___awmod *****************
  2619 ;; Defined at:
  2620 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  dividend        2    8[COMRAM] int 
  2623 ;;  divisor         2   10[COMRAM] int 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  sign            1   13[COMRAM] unsigned char 
  2626 ;;  counter         1   12[COMRAM] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  2    8[COMRAM] int 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2636 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;Total ram usage:        6 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    3
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_displayClock
  2647 ;;		_displayModify
  2648 ;;		_displayStpWatch
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           	psect	text11
  2653  001D0C                     __ptext11:
  2654                           	opt callstack 0
  2655  001D0C                     ___awmod:
  2656                           	opt callstack 26
  2657  001D0C  0E00               	movlw	0
  2658  001D0E  6E2C               	movwf	___awmod@sign^0,c
  2659  001D10  BE28               	btfsc	(___awmod@dividend+1)^0,7,c
  2660  001D12  EF8F  F00E         	goto	u880
  2661  001D16  EF8D  F00E         	goto	u881
  2662  001D1A                     u881:
  2663  001D1A  EF95  F00E         	goto	l1957
  2664  001D1E                     u880:
  2665  001D1E  6C27               	negf	___awmod@dividend^0,c
  2666  001D20  1E28               	comf	(___awmod@dividend+1)^0,f,c
  2667  001D22  B0D8               	btfsc	status,0,c
  2668  001D24  2A28               	incf	(___awmod@dividend+1)^0,f,c
  2669  001D26  0E01               	movlw	1
  2670  001D28  6E2C               	movwf	___awmod@sign^0,c
  2671  001D2A                     l1957:
  2672  001D2A  BE2A               	btfsc	(___awmod@divisor+1)^0,7,c
  2673  001D2C  EF9C  F00E         	goto	u890
  2674  001D30  EF9A  F00E         	goto	u891
  2675  001D34                     u891:
  2676  001D34  EFA0  F00E         	goto	l1961
  2677  001D38                     u890:
  2678  001D38  6C29               	negf	___awmod@divisor^0,c
  2679  001D3A  1E2A               	comf	(___awmod@divisor+1)^0,f,c
  2680  001D3C  B0D8               	btfsc	status,0,c
  2681  001D3E  2A2A               	incf	(___awmod@divisor+1)^0,f,c
  2682  001D40                     l1961:
  2683  001D40  5029               	movf	___awmod@divisor^0,w,c
  2684  001D42  102A               	iorwf	(___awmod@divisor+1)^0,w,c
  2685  001D44  B4D8               	btfsc	status,2,c
  2686  001D46  EFA7  F00E         	goto	u901
  2687  001D4A  EFA9  F00E         	goto	u900
  2688  001D4E                     u901:
  2689  001D4E  EFCD  F00E         	goto	l1977
  2690  001D52                     u900:
  2691  001D52  0E01               	movlw	1
  2692  001D54  6E2B               	movwf	___awmod@counter^0,c
  2693  001D56  EFB1  F00E         	goto	l1967
  2694  001D5A                     l1965:
  2695  001D5A  90D8               	bcf	status,0,c
  2696  001D5C  3629               	rlcf	___awmod@divisor^0,f,c
  2697  001D5E  362A               	rlcf	(___awmod@divisor+1)^0,f,c
  2698  001D60  2A2B               	incf	___awmod@counter^0,f,c
  2699  001D62                     l1967:
  2700  001D62  AE2A               	btfss	(___awmod@divisor+1)^0,7,c
  2701  001D64  EFB6  F00E         	goto	u911
  2702  001D68  EFB8  F00E         	goto	u910
  2703  001D6C                     u911:
  2704  001D6C  EFAD  F00E         	goto	l1965
  2705  001D70                     u910:
  2706  001D70                     l1969:
  2707  001D70  5029               	movf	___awmod@divisor^0,w,c
  2708  001D72  5C27               	subwf	___awmod@dividend^0,w,c
  2709  001D74  502A               	movf	(___awmod@divisor+1)^0,w,c
  2710  001D76  5828               	subwfb	(___awmod@dividend+1)^0,w,c
  2711  001D78  A0D8               	btfss	status,0,c
  2712  001D7A  EFC1  F00E         	goto	u921
  2713  001D7E  EFC3  F00E         	goto	u920
  2714  001D82                     u921:
  2715  001D82  EFC7  F00E         	goto	l1973
  2716  001D86                     u920:
  2717  001D86  5029               	movf	___awmod@divisor^0,w,c
  2718  001D88  5E27               	subwf	___awmod@dividend^0,f,c
  2719  001D8A  502A               	movf	(___awmod@divisor+1)^0,w,c
  2720  001D8C  5A28               	subwfb	(___awmod@dividend+1)^0,f,c
  2721  001D8E                     l1973:
  2722  001D8E  90D8               	bcf	status,0,c
  2723  001D90  322A               	rrcf	(___awmod@divisor+1)^0,f,c
  2724  001D92  3229               	rrcf	___awmod@divisor^0,f,c
  2725  001D94  2E2B               	decfsz	___awmod@counter^0,f,c
  2726  001D96  EFB8  F00E         	goto	l1969
  2727  001D9A                     l1977:
  2728  001D9A  502C               	movf	___awmod@sign^0,w,c
  2729  001D9C  B4D8               	btfsc	status,2,c
  2730  001D9E  EFD3  F00E         	goto	u931
  2731  001DA2  EFD5  F00E         	goto	u930
  2732  001DA6                     u931:
  2733  001DA6  EFD9  F00E         	goto	l1981
  2734  001DAA                     u930:
  2735  001DAA  6C27               	negf	___awmod@dividend^0,c
  2736  001DAC  1E28               	comf	(___awmod@dividend+1)^0,f,c
  2737  001DAE  B0D8               	btfsc	status,0,c
  2738  001DB0  2A28               	incf	(___awmod@dividend+1)^0,f,c
  2739  001DB2                     l1981:
  2740  001DB2  C027  F027         	movff	___awmod@dividend,?___awmod
  2741  001DB6  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  2742  001DBA  0012               	return		;funcret
  2743  001DBC                     __end_of___awmod:
  2744                           	opt callstack 0
  2745                           
  2746 ;; *************** function ___awdiv *****************
  2747 ;; Defined at:
  2748 ;;		line 7 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  dividend        2    8[COMRAM] int 
  2751 ;;  divisor         2   10[COMRAM] int 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  quotient        2   14[COMRAM] int 
  2754 ;;  sign            1   13[COMRAM] unsigned char 
  2755 ;;  counter         1   12[COMRAM] unsigned char 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  2    8[COMRAM] int 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2, status,0
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;Total ram usage:        8 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    3
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_displayClock
  2776 ;;		_displayModify
  2777 ;;		_displayStpWatch
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text12
  2782  001B86                     __ptext12:
  2783                           	opt callstack 0
  2784  001B86                     ___awdiv:
  2785                           	opt callstack 26
  2786  001B86  0E00               	movlw	0
  2787  001B88  6E2C               	movwf	___awdiv@sign^0,c
  2788  001B8A  BE2A               	btfsc	(___awdiv@divisor+1)^0,7,c
  2789  001B8C  EFCC  F00D         	goto	u820
  2790  001B90  EFCA  F00D         	goto	u821
  2791  001B94                     u821:
  2792  001B94  EFD2  F00D         	goto	l1913
  2793  001B98                     u820:
  2794  001B98  6C29               	negf	___awdiv@divisor^0,c
  2795  001B9A  1E2A               	comf	(___awdiv@divisor+1)^0,f,c
  2796  001B9C  B0D8               	btfsc	status,0,c
  2797  001B9E  2A2A               	incf	(___awdiv@divisor+1)^0,f,c
  2798  001BA0  0E01               	movlw	1
  2799  001BA2  6E2C               	movwf	___awdiv@sign^0,c
  2800  001BA4                     l1913:
  2801  001BA4  BE28               	btfsc	(___awdiv@dividend+1)^0,7,c
  2802  001BA6  EFD9  F00D         	goto	u830
  2803  001BAA  EFD7  F00D         	goto	u831
  2804  001BAE                     u831:
  2805  001BAE  EFDF  F00D         	goto	l1919
  2806  001BB2                     u830:
  2807  001BB2  6C27               	negf	___awdiv@dividend^0,c
  2808  001BB4  1E28               	comf	(___awdiv@dividend+1)^0,f,c
  2809  001BB6  B0D8               	btfsc	status,0,c
  2810  001BB8  2A28               	incf	(___awdiv@dividend+1)^0,f,c
  2811  001BBA  0E01               	movlw	1
  2812  001BBC  1A2C               	xorwf	___awdiv@sign^0,f,c
  2813  001BBE                     l1919:
  2814  001BBE  0E00               	movlw	0
  2815  001BC0  6E2E               	movwf	(___awdiv@quotient+1)^0,c
  2816  001BC2  0E00               	movlw	0
  2817  001BC4  6E2D               	movwf	___awdiv@quotient^0,c
  2818  001BC6  5029               	movf	___awdiv@divisor^0,w,c
  2819  001BC8  102A               	iorwf	(___awdiv@divisor+1)^0,w,c
  2820  001BCA  B4D8               	btfsc	status,2,c
  2821  001BCC  EFEA  F00D         	goto	u841
  2822  001BD0  EFEC  F00D         	goto	u840
  2823  001BD4                     u841:
  2824  001BD4  EF14  F00E         	goto	l1941
  2825  001BD8                     u840:
  2826  001BD8  0E01               	movlw	1
  2827  001BDA  6E2B               	movwf	___awdiv@counter^0,c
  2828  001BDC  EFF4  F00D         	goto	l1927
  2829  001BE0                     l1925:
  2830  001BE0  90D8               	bcf	status,0,c
  2831  001BE2  3629               	rlcf	___awdiv@divisor^0,f,c
  2832  001BE4  362A               	rlcf	(___awdiv@divisor+1)^0,f,c
  2833  001BE6  2A2B               	incf	___awdiv@counter^0,f,c
  2834  001BE8                     l1927:
  2835  001BE8  AE2A               	btfss	(___awdiv@divisor+1)^0,7,c
  2836  001BEA  EFF9  F00D         	goto	u851
  2837  001BEE  EFFB  F00D         	goto	u850
  2838  001BF2                     u851:
  2839  001BF2  EFF0  F00D         	goto	l1925
  2840  001BF6                     u850:
  2841  001BF6                     l1929:
  2842  001BF6  90D8               	bcf	status,0,c
  2843  001BF8  362D               	rlcf	___awdiv@quotient^0,f,c
  2844  001BFA  362E               	rlcf	(___awdiv@quotient+1)^0,f,c
  2845  001BFC  5029               	movf	___awdiv@divisor^0,w,c
  2846  001BFE  5C27               	subwf	___awdiv@dividend^0,w,c
  2847  001C00  502A               	movf	(___awdiv@divisor+1)^0,w,c
  2848  001C02  5828               	subwfb	(___awdiv@dividend+1)^0,w,c
  2849  001C04  A0D8               	btfss	status,0,c
  2850  001C06  EF07  F00E         	goto	u861
  2851  001C0A  EF09  F00E         	goto	u860
  2852  001C0E                     u861:
  2853  001C0E  EF0E  F00E         	goto	l1937
  2854  001C12                     u860:
  2855  001C12  5029               	movf	___awdiv@divisor^0,w,c
  2856  001C14  5E27               	subwf	___awdiv@dividend^0,f,c
  2857  001C16  502A               	movf	(___awdiv@divisor+1)^0,w,c
  2858  001C18  5A28               	subwfb	(___awdiv@dividend+1)^0,f,c
  2859  001C1A  802D               	bsf	___awdiv@quotient^0,0,c
  2860  001C1C                     l1937:
  2861  001C1C  90D8               	bcf	status,0,c
  2862  001C1E  322A               	rrcf	(___awdiv@divisor+1)^0,f,c
  2863  001C20  3229               	rrcf	___awdiv@divisor^0,f,c
  2864  001C22  2E2B               	decfsz	___awdiv@counter^0,f,c
  2865  001C24  EFFB  F00D         	goto	l1929
  2866  001C28                     l1941:
  2867  001C28  502C               	movf	___awdiv@sign^0,w,c
  2868  001C2A  B4D8               	btfsc	status,2,c
  2869  001C2C  EF1A  F00E         	goto	u871
  2870  001C30  EF1C  F00E         	goto	u870
  2871  001C34                     u871:
  2872  001C34  EF20  F00E         	goto	l1945
  2873  001C38                     u870:
  2874  001C38  6C2D               	negf	___awdiv@quotient^0,c
  2875  001C3A  1E2E               	comf	(___awdiv@quotient+1)^0,f,c
  2876  001C3C  B0D8               	btfsc	status,0,c
  2877  001C3E  2A2E               	incf	(___awdiv@quotient+1)^0,f,c
  2878  001C40                     l1945:
  2879  001C40  C02D  F027         	movff	___awdiv@quotient,?___awdiv
  2880  001C44  C02E  F028         	movff	___awdiv@quotient+1,?___awdiv+1
  2881  001C48  0012               	return		;funcret
  2882  001C4A                     __end_of___awdiv:
  2883                           	opt callstack 0
  2884                           
  2885 ;; *************** function _LCDPutStr *****************
  2886 ;; Defined at:
  2887 ;;		line 198 in file "BBSPI_LCD.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  2890 ;;		 -> STR_5(17), STR_4(16), STR_3(16), STR_2(16), 
  2891 ;;		 -> STR_1(17), 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;Total ram usage:        2 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    6
  2910 ;; This function calls:
  2911 ;;		_LCDPutChar
  2912 ;; This function is called by:
  2913 ;;		_displayClock
  2914 ;;		_displayModify
  2915 ;;		_displayStpWatch
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text13
  2920  002086                     __ptext13:
  2921                           	opt callstack 0
  2922  002086                     _LCDPutStr:
  2923                           	opt callstack 23
  2924  002086                     
  2925                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  2926  002086  EF51  F010         	goto	l1903
  2927  00208A                     l1899:
  2928  00208A  C02E  FFF6         	movff	LCDPutStr@ptr,tblptrl
  2929  00208E  C02F  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  2930  002092                     	if	0	;tblptru may be non-zero
  2931  002092                     	endif
  2932  002092                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2933  002092  0E00               	movlw	low (__mediumconst shr (0+16))
  2934  002094  6EF8               	movwf	tblptru,c
  2935  002096                     	endif
  2936  002096  0008               	tblrd		*
  2937  002098  50F5               	movf	tablat,w,c
  2938  00209A  EC65  F00F         	call	_LCDPutChar
  2939  00209E  4A2E               	infsnz	LCDPutStr@ptr^0,f,c
  2940  0020A0  2A2F               	incf	(LCDPutStr@ptr+1)^0,f,c
  2941  0020A2                     l1903:
  2942  0020A2  C02E  FFF6         	movff	LCDPutStr@ptr,tblptrl
  2943  0020A6  C02F  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  2944  0020AA                     	if	0	;tblptru may be non-zero
  2945  0020AA                     	endif
  2946  0020AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2947  0020AA  0E00               	movlw	low (__mediumconst shr (0+16))
  2948  0020AC  6EF8               	movwf	tblptru,c
  2949  0020AE                     	endif
  2950  0020AE  0008               	tblrd		*
  2951  0020B0  50F5               	movf	tablat,w,c
  2952  0020B2  0900               	iorlw	0
  2953  0020B4  A4D8               	btfss	status,2,c
  2954  0020B6  EF5F  F010         	goto	u811
  2955  0020BA  EF61  F010         	goto	u810
  2956  0020BE                     u811:
  2957  0020BE  EF45  F010         	goto	l1899
  2958  0020C2                     u810:
  2959  0020C2  0012               	return		;funcret
  2960  0020C4                     __end_of_LCDPutStr:
  2961                           	opt callstack 0
  2962                           
  2963 ;; *************** function _LCDPutChar *****************
  2964 ;; Defined at:
  2965 ;;		line 160 in file "BBSPI_LCD.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  ch              1    wreg     unsigned char 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  ch              1   14[COMRAM] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2, status,0, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;Total ram usage:        2 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    5
  2986 ;; This function calls:
  2987 ;;		_WritePort_BBSPI
  2988 ;; This function is called by:
  2989 ;;		_LCDPutStr
  2990 ;;		_displayClock
  2991 ;;		_displayModify
  2992 ;;		_displayStpWatch
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text14
  2997  001ECA                     __ptext14:
  2998                           	opt callstack 0
  2999  001ECA                     _LCDPutChar:
  3000                           	opt callstack 23
  3001                           
  3002                           ;incstack = 0
  3003                           ;LCDPutChar@ch stored from wreg
  3004  001ECA  6E2D               	movwf	LCDPutChar@ch^0,c
  3005  001ECC                     
  3006                           ;BBSPI_LCD.c: 160: void LCDPutChar (unsigned char ch);BBSPI_LCD.c: 161: {;BBSPI_LCD.c: 1
      +                          62:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3007  001ECC  0E11               	movlw	17
  3008  001ECE  6E2C               	movwf	??_LCDPutChar^0,c
  3009  001ED0  0E3A               	movlw	58
  3010  001ED2                     u1127:
  3011  001ED2  2EE8               	decfsz	wreg,f,c
  3012  001ED4  D7FE               	bra	u1127
  3013  001ED6  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3014  001ED8  D7FC               	bra	u1127
  3015  001EDA  D000               	nop2	
  3016  001EDC                     
  3017                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  3018  001EDC  0E80               	movlw	128
  3019  001EDE  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3020  001EE0  0E12               	movlw	18
  3021  001EE2  ECB6  F010         	call	_WritePort_BBSPI
  3022  001EE6                     
  3023                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3024  001EE6  0E04               	movlw	4
  3025  001EE8  6E2C               	movwf	??_LCDPutChar^0,c
  3026  001EEA  0E3E               	movlw	62
  3027  001EEC                     u1137:
  3028  001EEC  2EE8               	decfsz	wreg,f,c
  3029  001EEE  D7FE               	bra	u1137
  3030  001EF0  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3031  001EF2  D7FC               	bra	u1137
  3032  001EF4                     
  3033                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  3034  001EF4  C02D  F02A         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  3035  001EF8  0E13               	movlw	19
  3036  001EFA  ECB6  F010         	call	_WritePort_BBSPI
  3037  001EFE                     
  3038                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3039  001EFE  0E04               	movlw	4
  3040  001F00  6E2C               	movwf	??_LCDPutChar^0,c
  3041  001F02  0E3E               	movlw	62
  3042  001F04                     u1147:
  3043  001F04  2EE8               	decfsz	wreg,f,c
  3044  001F06  D7FE               	bra	u1147
  3045  001F08  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3046  001F0A  D7FC               	bra	u1147
  3047  001F0C                     
  3048                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  3049  001F0C  0EC0               	movlw	192
  3050  001F0E  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3051  001F10  0E12               	movlw	18
  3052  001F12  ECB6  F010         	call	_WritePort_BBSPI
  3053  001F16                     
  3054                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3055  001F16  0E04               	movlw	4
  3056  001F18  6E2C               	movwf	??_LCDPutChar^0,c
  3057  001F1A  0E3E               	movlw	62
  3058  001F1C                     u1157:
  3059  001F1C  2EE8               	decfsz	wreg,f,c
  3060  001F1E  D7FE               	bra	u1157
  3061  001F20  2E2C               	decfsz	??_LCDPutChar^0,f,c
  3062  001F22  D7FC               	bra	u1157
  3063  001F24                     
  3064                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  3065  001F24  0E00               	movlw	0
  3066  001F26  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3067  001F28  0E12               	movlw	18
  3068  001F2A  ECB6  F010         	call	_WritePort_BBSPI
  3069  001F2E  0012               	return		;funcret
  3070  001F30                     __end_of_LCDPutChar:
  3071                           	opt callstack 0
  3072                           
  3073 ;; *************** function _buttonInitialize *****************
  3074 ;; Defined at:
  3075 ;;		line 19 in file "system.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;		None
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;Total ram usage:        0 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    3
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_main
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text15
  3104  0021A2                     __ptext15:
  3105                           	opt callstack 0
  3106  0021A2                     _buttonInitialize:
  3107                           	opt callstack 27
  3108  0021A2                     
  3109                           ;system.c: 20:     TRISAbits.TRISA5 = 1;
  3110  0021A2  8A92               	bsf	146,5,c	;volatile
  3111                           
  3112                           ;system.c: 21:     TRISBbits.TRISB0 = 1;
  3113  0021A4  8093               	bsf	147,0,c	;volatile
  3114  0021A6                     
  3115                           ;system.c: 22:     ADCON1 = 0b00001111;
  3116  0021A6  0E0F               	movlw	15
  3117  0021A8  6EC1               	movwf	193,c	;volatile
  3118  0021AA  0012               	return		;funcret
  3119  0021AC                     __end_of_buttonInitialize:
  3120                           	opt callstack 0
  3121                           
  3122 ;; *************** function _LCDInit *****************
  3123 ;; Defined at:
  3124 ;;		line 45 in file "BBSPI_LCD.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, status,0, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        1 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    6
  3145 ;; This function calls:
  3146 ;;		_InitBBSPI
  3147 ;;		_LCDPutInst
  3148 ;;		_Port_BBSPIInit
  3149 ;;		_WritePort_BBSPI
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text16
  3156  001F96                     __ptext16:
  3157                           	opt callstack 0
  3158  001F96                     _LCDInit:
  3159                           	opt callstack 24
  3160  001F96                     
  3161                           ;BBSPI_LCD.c: 47:     InitBBSPI();
  3162  001F96  ECC3  F010         	call	_InitBBSPI	;wreg free
  3163  001F9A                     
  3164                           ;BBSPI_LCD.c: 48:     TRISFbits.TRISF6 = 0;
  3165  001F9A  9C97               	bcf	151,6,c	;volatile
  3166  001F9C                     
  3167                           ;BBSPI_LCD.c: 49:     LATFbits.LATF6 = 0;
  3168  001F9C  9C8E               	bcf	142,6,c	;volatile
  3169  001F9E                     
  3170                           ;BBSPI_LCD.c: 50:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3171  001F9E  0E11               	movlw	17
  3172  001FA0  6E2E               	movwf	??_LCDInit^0,c
  3173  001FA2  0E3A               	movlw	58
  3174  001FA4                     u1167:
  3175  001FA4  2EE8               	decfsz	wreg,f,c
  3176  001FA6  D7FE               	bra	u1167
  3177  001FA8  2E2E               	decfsz	??_LCDInit^0,f,c
  3178  001FAA  D7FC               	bra	u1167
  3179  001FAC  D000               	nop2	
  3180  001FAE                     
  3181                           ;BBSPI_LCD.c: 51:     LATFbits.LATF6 = 1;
  3182  001FAE  8C8E               	bsf	142,6,c	;volatile
  3183  001FB0                     
  3184                           ;BBSPI_LCD.c: 52:     Port_BBSPIInit (0x00);
  3185  001FB0  0E00               	movlw	0
  3186  001FB2  ECA9  F010         	call	_Port_BBSPIInit
  3187  001FB6                     
  3188                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x01);
  3189  001FB6  0E01               	movlw	1
  3190  001FB8  ECA9  F010         	call	_Port_BBSPIInit
  3191  001FBC                     
  3192                           ;BBSPI_LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  3193  001FBC  0E00               	movlw	0
  3194  001FBE  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3195  001FC0  0E12               	movlw	18
  3196  001FC2  ECB6  F010         	call	_WritePort_BBSPI
  3197  001FC6                     
  3198                           ;BBSPI_LCD.c: 55:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3199  001FC6  0E31               	movlw	49
  3200  001FC8  6E2E               	movwf	??_LCDInit^0,c
  3201  001FCA  0EB2               	movlw	178
  3202  001FCC                     u1177:
  3203  001FCC  2EE8               	decfsz	wreg,f,c
  3204  001FCE  D7FE               	bra	u1177
  3205  001FD0  2E2E               	decfsz	??_LCDInit^0,f,c
  3206  001FD2  D7FC               	bra	u1177
  3207  001FD4  D000               	nop2	
  3208  001FD6                     
  3209                           ;BBSPI_LCD.c: 56:     LCDPutInst(0x32);
  3210  001FD6  0E32               	movlw	50
  3211  001FD8  EC98  F00F         	call	_LCDPutInst
  3212  001FDC                     
  3213                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x3C);
  3214  001FDC  0E3C               	movlw	60
  3215  001FDE  EC98  F00F         	call	_LCDPutInst
  3216  001FE2                     
  3217                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x0C);
  3218  001FE2  0E0C               	movlw	12
  3219  001FE4  EC98  F00F         	call	_LCDPutInst
  3220  001FE8                     
  3221                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x01);
  3222  001FE8  0E01               	movlw	1
  3223  001FEA  EC98  F00F         	call	_LCDPutInst
  3224  001FEE                     
  3225                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x06);
  3226  001FEE  0E06               	movlw	6
  3227  001FF0  EC98  F00F         	call	_LCDPutInst
  3228  001FF4  0012               	return		;funcret
  3229  001FF6                     __end_of_LCDInit:
  3230                           	opt callstack 0
  3231                           
  3232 ;; *************** function _Port_BBSPIInit *****************
  3233 ;; Defined at:
  3234 ;;		line 123 in file "BBSPI_LCD.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  port_dir        1    wreg     unsigned char 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  port_dir        1   11[COMRAM] unsigned char 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:        1 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    4
  3255 ;; This function calls:
  3256 ;;		_SendByteBBSPI
  3257 ;; This function is called by:
  3258 ;;		_LCDInit
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text17
  3263  002152                     __ptext17:
  3264                           	opt callstack 0
  3265  002152                     _Port_BBSPIInit:
  3266                           	opt callstack 25
  3267                           
  3268                           ;incstack = 0
  3269                           ;Port_BBSPIInit@port_dir stored from wreg
  3270  002152  6E2A               	movwf	Port_BBSPIInit@port_dir^0,c
  3271  002154                     
  3272                           ;BBSPI_LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 124: {;BBSP
      +                          I_LCD.c: 128:     LATAbits.LATA2 = 0;
  3273  002154  9489               	bcf	137,2,c	;volatile
  3274  002156                     
  3275                           ;BBSPI_LCD.c: 129:     SendByteBBSPI(0x40);
  3276  002156  0E40               	movlw	64
  3277  002158  EC2D  F00F         	call	_SendByteBBSPI
  3278                           
  3279                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(port_dir);
  3280  00215C  502A               	movf	Port_BBSPIInit@port_dir^0,w,c
  3281  00215E  EC2D  F00F         	call	_SendByteBBSPI
  3282                           
  3283                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(0x00);
  3284  002162  0E00               	movlw	0
  3285  002164  EC2D  F00F         	call	_SendByteBBSPI
  3286  002168                     
  3287                           ;BBSPI_LCD.c: 132:     LATAbits.LATA2 = 1;
  3288  002168  8489               	bsf	137,2,c	;volatile
  3289  00216A  0012               	return		;funcret
  3290  00216C                     __end_of_Port_BBSPIInit:
  3291                           	opt callstack 0
  3292                           
  3293 ;; *************** function _LCDPutInst *****************
  3294 ;; Defined at:
  3295 ;;		line 179 in file "BBSPI_LCD.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  ch              1    wreg     unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  ch              1   14[COMRAM] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;Total ram usage:        2 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    5
  3316 ;; This function calls:
  3317 ;;		_WritePort_BBSPI
  3318 ;; This function is called by:
  3319 ;;		_LCDInit
  3320 ;;		_displayClock
  3321 ;;		_displayModify
  3322 ;;		_displayStpWatch
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text18
  3327  001F30                     __ptext18:
  3328                           	opt callstack 0
  3329  001F30                     _LCDPutInst:
  3330                           	opt callstack 24
  3331                           
  3332                           ;incstack = 0
  3333                           ;LCDPutInst@ch stored from wreg
  3334  001F30  6E2D               	movwf	LCDPutInst@ch^0,c
  3335  001F32                     
  3336                           ;BBSPI_LCD.c: 179: void LCDPutInst (unsigned char ch);BBSPI_LCD.c: 180: {;BBSPI_LCD.c: 1
      +                          81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3337  001F32  0E11               	movlw	17
  3338  001F34  6E2C               	movwf	??_LCDPutInst^0,c
  3339  001F36  0E3A               	movlw	58
  3340  001F38                     u1187:
  3341  001F38  2EE8               	decfsz	wreg,f,c
  3342  001F3A  D7FE               	bra	u1187
  3343  001F3C  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3344  001F3E  D7FC               	bra	u1187
  3345  001F40  D000               	nop2	
  3346  001F42                     
  3347                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  3348  001F42  0E00               	movlw	0
  3349  001F44  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3350  001F46  0E12               	movlw	18
  3351  001F48  ECB6  F010         	call	_WritePort_BBSPI
  3352  001F4C                     
  3353                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3354  001F4C  0E04               	movlw	4
  3355  001F4E  6E2C               	movwf	??_LCDPutInst^0,c
  3356  001F50  0E3E               	movlw	62
  3357  001F52                     u1197:
  3358  001F52  2EE8               	decfsz	wreg,f,c
  3359  001F54  D7FE               	bra	u1197
  3360  001F56  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3361  001F58  D7FC               	bra	u1197
  3362  001F5A                     
  3363                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  3364  001F5A  C02D  F02A         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  3365  001F5E  0E13               	movlw	19
  3366  001F60  ECB6  F010         	call	_WritePort_BBSPI
  3367  001F64                     
  3368                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3369  001F64  0E04               	movlw	4
  3370  001F66  6E2C               	movwf	??_LCDPutInst^0,c
  3371  001F68  0E3E               	movlw	62
  3372  001F6A                     u1207:
  3373  001F6A  2EE8               	decfsz	wreg,f,c
  3374  001F6C  D7FE               	bra	u1207
  3375  001F6E  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3376  001F70  D7FC               	bra	u1207
  3377  001F72                     
  3378                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  3379  001F72  0E40               	movlw	64
  3380  001F74  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3381  001F76  0E12               	movlw	18
  3382  001F78  ECB6  F010         	call	_WritePort_BBSPI
  3383  001F7C                     
  3384                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3385  001F7C  0E04               	movlw	4
  3386  001F7E  6E2C               	movwf	??_LCDPutInst^0,c
  3387  001F80  0E3E               	movlw	62
  3388  001F82                     u1217:
  3389  001F82  2EE8               	decfsz	wreg,f,c
  3390  001F84  D7FE               	bra	u1217
  3391  001F86  2E2C               	decfsz	??_LCDPutInst^0,f,c
  3392  001F88  D7FC               	bra	u1217
  3393  001F8A                     
  3394                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  3395  001F8A  0E00               	movlw	0
  3396  001F8C  6E2A               	movwf	WritePort_BBSPI@a^0,c
  3397  001F8E  0E12               	movlw	18
  3398  001F90  ECB6  F010         	call	_WritePort_BBSPI
  3399  001F94  0012               	return		;funcret
  3400  001F96                     __end_of_LCDPutInst:
  3401                           	opt callstack 0
  3402                           
  3403 ;; *************** function _WritePort_BBSPI *****************
  3404 ;; Defined at:
  3405 ;;		line 144 in file "BBSPI_LCD.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  port_add        1    wreg     unsigned char 
  3408 ;;  a               1   11[COMRAM] unsigned char 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  port_add        1   12[COMRAM] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3420 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;Total ram usage:        2 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    4
  3427 ;; This function calls:
  3428 ;;		_SendByteBBSPI
  3429 ;; This function is called by:
  3430 ;;		_LCDInit
  3431 ;;		_LCDPutChar
  3432 ;;		_LCDPutInst
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text19
  3437  00216C                     __ptext19:
  3438                           	opt callstack 0
  3439  00216C                     _WritePort_BBSPI:
  3440                           	opt callstack 23
  3441                           
  3442                           ;incstack = 0
  3443                           ;WritePort_BBSPI@port_add stored from wreg
  3444  00216C  6E2B               	movwf	WritePort_BBSPI@port_add^0,c
  3445  00216E                     
  3446                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  3447  00216E  9489               	bcf	137,2,c	;volatile
  3448  002170                     
  3449                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  3450  002170  0E40               	movlw	64
  3451  002172  EC2D  F00F         	call	_SendByteBBSPI
  3452                           
  3453                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  3454  002176  502B               	movf	WritePort_BBSPI@port_add^0,w,c
  3455  002178  EC2D  F00F         	call	_SendByteBBSPI
  3456                           
  3457                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  3458  00217C  502A               	movf	WritePort_BBSPI@a^0,w,c
  3459  00217E  EC2D  F00F         	call	_SendByteBBSPI
  3460  002182                     
  3461                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  3462  002182  8489               	bsf	137,2,c	;volatile
  3463  002184  0012               	return		;funcret
  3464  002186                     __end_of_WritePort_BBSPI:
  3465                           	opt callstack 0
  3466                           
  3467 ;; *************** function _SendByteBBSPI *****************
  3468 ;; Defined at:
  3469 ;;		line 91 in file "BBSPI_LCD.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  output          1    wreg     unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  output          1    8[COMRAM] unsigned char 
  3474 ;;  input           1   10[COMRAM] unsigned char 
  3475 ;;  bitcount        1    9[COMRAM] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:        3 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_Port_BBSPIInit
  3496 ;;		_WritePort_BBSPI
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text20
  3501  001E5A                     __ptext20:
  3502                           	opt callstack 0
  3503  001E5A                     _SendByteBBSPI:
  3504                           	opt callstack 23
  3505                           
  3506                           ;incstack = 0
  3507                           ;SendByteBBSPI@output stored from wreg
  3508  001E5A  6E27               	movwf	SendByteBBSPI@output^0,c
  3509  001E5C                     
  3510                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  3511  001E5C  C027  F029         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  3512  001E60                     
  3513                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  3514  001E60  0E00               	movlw	0
  3515  001E62  6E28               	movwf	SendByteBBSPI@bitcount^0,c
  3516  001E64                     l191:
  3517                           
  3518                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  3519  001E64  AE27               	btfss	SendByteBBSPI@output^0,7,c
  3520  001E66  EF37  F00F         	goto	u11
  3521  001E6A  EF39  F00F         	goto	u10
  3522  001E6E                     u11:
  3523  001E6E  EF3C  F00F         	goto	l193
  3524  001E72                     u10:
  3525  001E72                     
  3526                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  3527  001E72  8A8B               	bsf	139,5,c	;volatile
  3528  001E74  EF3D  F00F         	goto	l194
  3529  001E78                     l193:
  3530                           
  3531                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  3532  001E78  9A8B               	bcf	139,5,c	;volatile
  3533  001E7A                     l194:
  3534                           
  3535                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  3536  001E7A  A88B               	btfss	139,4,c	;volatile
  3537  001E7C  EF42  F00F         	goto	u21
  3538  001E80  EF44  F00F         	goto	u20
  3539  001E84                     u21:
  3540  001E84  EF48  F00F         	goto	l1151
  3541  001E88                     u20:
  3542  001E88                     
  3543                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  3544  001E88  80D8               	bsf	status,0,c
  3545  001E8A  3629               	rlcf	SendByteBBSPI@input^0,f,c
  3546  001E8C  EF4B  F00F         	goto	l1153
  3547  001E90                     l1151:
  3548                           
  3549                           ;BBSPI_LCD.c: 107:             input = input << 1;
  3550  001E90  5029               	movf	SendByteBBSPI@input^0,w,c
  3551  001E92  2429               	addwf	SendByteBBSPI@input^0,w,c
  3552  001E94  6E29               	movwf	SendByteBBSPI@input^0,c
  3553  001E96                     l1153:
  3554                           
  3555                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  3556  001E96  868B               	bsf	139,3,c	;volatile
  3557  001E98                     
  3558                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  3559  001E98  F000               	nop	
  3560  001E9A  F000               	nop	
  3561  001E9C  F000               	nop	
  3562  001E9E  F000               	nop	
  3563  001EA0  F000               	nop	
  3564  001EA2  F000               	nop	
  3565  001EA4                     
  3566                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  3567  001EA4  F000               	nop	
  3568  001EA6  F000               	nop	
  3569  001EA8  F000               	nop	
  3570  001EAA  F000               	nop	
  3571  001EAC  F000               	nop	
  3572  001EAE  F000               	nop	
  3573  001EB0                     
  3574                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  3575  001EB0  968B               	bcf	139,3,c	;volatile
  3576                           
  3577                           ;BBSPI_LCD.c: 112:         output <<= 1;
  3578  001EB2  90D8               	bcf	status,0,c
  3579  001EB4  3627               	rlcf	SendByteBBSPI@output^0,f,c
  3580  001EB6                     
  3581                           ;BBSPI_LCD.c: 113:     }
  3582  001EB6  2A28               	incf	SendByteBBSPI@bitcount^0,f,c
  3583  001EB8  0E07               	movlw	7
  3584  001EBA  6428               	cpfsgt	SendByteBBSPI@bitcount^0,c
  3585  001EBC  EF62  F00F         	goto	u31
  3586  001EC0  EF64  F00F         	goto	u30
  3587  001EC4                     u31:
  3588  001EC4  EF32  F00F         	goto	l191
  3589  001EC8                     u30:
  3590  001EC8  0012               	return		;funcret
  3591  001ECA                     __end_of_SendByteBBSPI:
  3592                           	opt callstack 0
  3593                           
  3594 ;; *************** function _InitBBSPI *****************
  3595 ;; Defined at:
  3596 ;;		line 70 in file "BBSPI_LCD.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;		None
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;		None
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		None
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;Total ram usage:        0 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    3
  3617 ;; This function calls:
  3618 ;;		Nothing
  3619 ;; This function is called by:
  3620 ;;		_LCDInit
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text21
  3625  002186                     __ptext21:
  3626                           	opt callstack 0
  3627  002186                     _InitBBSPI:
  3628                           	opt callstack 26
  3629  002186                     
  3630                           ;BBSPI_LCD.c: 72:     TRISAbits.TRISA2 = 0;
  3631  002186  9492               	bcf	146,2,c	;volatile
  3632                           
  3633                           ;BBSPI_LCD.c: 73:     TRISCbits.TRISC4 = 1;
  3634  002188  8894               	bsf	148,4,c	;volatile
  3635                           
  3636                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC5 = 0;
  3637  00218A  9A94               	bcf	148,5,c	;volatile
  3638                           
  3639                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC3 = 0;
  3640  00218C  9694               	bcf	148,3,c	;volatile
  3641                           
  3642                           ;BBSPI_LCD.c: 77:     LATAbits.LATA2 = 1;
  3643  00218E  8489               	bsf	137,2,c	;volatile
  3644                           
  3645                           ;BBSPI_LCD.c: 78:     LATCbits.LATC4 = 1;
  3646  002190  888B               	bsf	139,4,c	;volatile
  3647                           
  3648                           ;BBSPI_LCD.c: 79:     LATCbits.LATC5 = 0;
  3649  002192  9A8B               	bcf	139,5,c	;volatile
  3650                           
  3651                           ;BBSPI_LCD.c: 80:     LATCbits.LATC3 = 0;
  3652  002194  968B               	bcf	139,3,c	;volatile
  3653  002196  0012               	return		;funcret
  3654  002198                     __end_of_InitBBSPI:
  3655                           	opt callstack 0
  3656                           
  3657 ;; *************** function _deviceInterrupt *****************
  3658 ;; Defined at:
  3659 ;;		line 3 in file "interrupt.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;		None
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;Total ram usage:        0 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    2
  3680 ;; This function calls:
  3681 ;;		_button
  3682 ;; This function is called by:
  3683 ;;		Interrupt level 2
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	intcode
  3688  000008                     __pintcode:
  3689                           	opt callstack 0
  3690  000008                     _deviceInterrupt:
  3691                           	opt callstack 23
  3692                           
  3693                           ;incstack = 0
  3694  000008  823B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3695  00000A  ED62  F010         	call	int_func,f	;refresh shadow registers
  3696                           
  3697                           	psect	intcode_body
  3698  0020C4                     __pintcode_body:
  3699                           	opt callstack 23
  3700  0020C4                     int_func:
  3701                           	opt callstack 23
  3702  0020C4  0006               	pop		; remove dummy address from shadow register refresh
  3703  0020C6                     
  3704                           ;interrupt.c: 4:     if (INTCONbits.TMR0IF == 1 && INTCONbits.TMR0IE == 1) {
  3705  0020C6  A4F2               	btfss	242,2,c	;volatile
  3706  0020C8  EF68  F010         	goto	i2u110_41
  3707  0020CC  EF6A  F010         	goto	i2u110_40
  3708  0020D0                     i2u110_41:
  3709  0020D0  EF7E  F010         	goto	i2l253
  3710  0020D4                     i2u110_40:
  3711  0020D4  AAF2               	btfss	242,5,c	;volatile
  3712  0020D6  EF6F  F010         	goto	i2u111_41
  3713  0020DA  EF71  F010         	goto	i2u111_40
  3714  0020DE                     i2u111_41:
  3715  0020DE  EF7E  F010         	goto	i2l253
  3716  0020E2                     i2u111_40:
  3717  0020E2                     
  3718                           ;interrupt.c: 5:         INTCONbits.TMR0IF = 0;
  3719  0020E2  94F2               	bcf	242,2,c	;volatile
  3720  0020E4                     
  3721                           ;interrupt.c: 7:         TMR0H = (timer0ReloadVal << 16);
  3722  0020E4  0E00               	movlw	0
  3723  0020E6  6ED7               	movwf	215,c	;volatile
  3724  0020E8                     
  3725                           ;interrupt.c: 8:         TMR0L = (uint8_t)timer0ReloadVal;
  3726  0020E8  C038  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  3727  0020EC                     
  3728                           ;interrupt.c: 9:         count10ms++;
  3729  0020EC  4A13               	infsnz	_count10ms^0,f,c
  3730  0020EE  2A14               	incf	(_count10ms+1)^0,f,c
  3731  0020F0                     
  3732                           ;interrupt.c: 10:         timerFlag = 1;
  3733  0020F0  0E00               	movlw	0
  3734  0020F2  6E12               	movwf	(_timerFlag+1)^0,c
  3735  0020F4  0E01               	movlw	1
  3736  0020F6  6E11               	movwf	_timerFlag^0,c
  3737  0020F8                     
  3738                           ;interrupt.c: 11:         button();
  3739  0020F8  EC25  F00E         	call	_button	;wreg free
  3740  0020FC                     i2l253:
  3741  0020FC  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3742  0020FE  0011               	retfie		f
  3743  002100                     __end_of_deviceInterrupt:
  3744                           	opt callstack 0
  3745                           
  3746 ;; *************** function _button *****************
  3747 ;; Defined at:
  3748 ;;		line 27 in file "button.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  checkRB0        2    6[COMRAM] int 
  3753 ;;  checkRA5        2    4[COMRAM] int 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        4 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    1
  3770 ;; This function calls:
  3771 ;;		_readRA5Button
  3772 ;;		_readRB0Button
  3773 ;; This function is called by:
  3774 ;;		_deviceInterrupt
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text23
  3779  001C4A                     __ptext23:
  3780                           	opt callstack 0
  3781  001C4A                     _button:
  3782                           	opt callstack 23
  3783  001C4A                     
  3784                           ;button.c: 28:     int checkRA5 = readRA5Button();
  3785  001C4A  EC1F  F010         	call	_readRA5Button	;wreg free
  3786  001C4E  C01F  F023         	movff	?_readRA5Button,button@checkRA5
  3787  001C52  C020  F024         	movff	?_readRA5Button+1,button@checkRA5+1
  3788                           
  3789                           ;button.c: 29:     int checkRB0 = readRB0Button();
  3790  001C56  ECFB  F00F         	call	_readRB0Button	;wreg free
  3791  001C5A  C01F  F025         	movff	?_readRB0Button,button@checkRB0
  3792  001C5E  C020  F026         	movff	?_readRB0Button+1,button@checkRB0+1
  3793  001C62                     
  3794                           ;button.c: 30:     if (checkRA5 == 1) {
  3795  001C62  0423               	decf	button@checkRA5^0,w,c
  3796  001C64  1024               	iorwf	(button@checkRA5+1)^0,w,c
  3797  001C66  A4D8               	btfss	status,2,c
  3798  001C68  EF38  F00E         	goto	i2u100_41
  3799  001C6C  EF3A  F00E         	goto	i2u100_40
  3800  001C70                     i2u100_41:
  3801  001C70  EF40  F00E         	goto	i2l2157
  3802  001C74                     i2u100_40:
  3803  001C74                     
  3804                           ;button.c: 31:         changeModePressed = 1;
  3805  001C74  0E00               	movlw	0
  3806  001C76  6E18               	movwf	(_changeModePressed+1)^0,c
  3807  001C78  0E01               	movlw	1
  3808  001C7A  6E17               	movwf	_changeModePressed^0,c
  3809                           
  3810                           ;button.c: 32:     }
  3811  001C7C  EF85  F00E         	goto	i2l158
  3812  001C80                     i2l2157:
  3813  001C80  0425               	decf	button@checkRB0^0,w,c
  3814  001C82  1026               	iorwf	(button@checkRB0+1)^0,w,c
  3815  001C84  A4D8               	btfss	status,2,c
  3816  001C86  EF47  F00E         	goto	i2u101_41
  3817  001C8A  EF49  F00E         	goto	i2u101_40
  3818  001C8E                     i2u101_41:
  3819  001C8E  EF73  F00E         	goto	i2l2169
  3820  001C92                     i2u101_40:
  3821  001C92                     
  3822                           ;button.c: 34:         countPressed++;
  3823  001C92  4A1B               	infsnz	_countPressed^0,f,c
  3824  001C94  2A1C               	incf	(_countPressed+1)^0,f,c
  3825  001C96                     
  3826                           ;button.c: 35:         if (countPressed >= 100) {
  3827  001C96  BE1C               	btfsc	(_countPressed+1)^0,7,c
  3828  001C98  EF57  F00E         	goto	i2u102_41
  3829  001C9C  501C               	movf	(_countPressed+1)^0,w,c
  3830  001C9E  E109               	bnz	i2u102_40
  3831  001CA0  0E64               	movlw	100
  3832  001CA2  5C1B               	subwf	_countPressed^0,w,c
  3833  001CA4  A0D8               	btfss	status,0,c
  3834  001CA6  EF57  F00E         	goto	i2u102_41
  3835  001CAA  EF59  F00E         	goto	i2u102_40
  3836  001CAE                     i2u102_41:
  3837  001CAE  EF85  F00E         	goto	i2l158
  3838  001CB2                     i2u102_40:
  3839  001CB2                     
  3840                           ;button.c: 36:             countAuto++;
  3841  001CB2  4A19               	infsnz	_countAuto^0,f,c
  3842  001CB4  2A1A               	incf	(_countAuto+1)^0,f,c
  3843  001CB6                     
  3844                           ;button.c: 37:             if (countAuto > 20) {
  3845  001CB6  BE1A               	btfsc	(_countAuto+1)^0,7,c
  3846  001CB8  EF67  F00E         	goto	i2u103_41
  3847  001CBC  501A               	movf	(_countAuto+1)^0,w,c
  3848  001CBE  E109               	bnz	i2u103_40
  3849  001CC0  0E15               	movlw	21
  3850  001CC2  5C19               	subwf	_countAuto^0,w,c
  3851  001CC4  A0D8               	btfss	status,0,c
  3852  001CC6  EF67  F00E         	goto	i2u103_41
  3853  001CCA  EF69  F00E         	goto	i2u103_40
  3854  001CCE                     i2u103_41:
  3855  001CCE  EF85  F00E         	goto	i2l157
  3856  001CD2                     i2u103_40:
  3857  001CD2                     
  3858                           ;button.c: 38:                 increaseTime = 1;
  3859  001CD2  0E00               	movlw	0
  3860  001CD4  6E16               	movwf	(_increaseTime+1)^0,c
  3861  001CD6  0E01               	movlw	1
  3862  001CD8  6E15               	movwf	_increaseTime^0,c
  3863                           
  3864                           ;button.c: 39:                 countAuto = 0;
  3865  001CDA  0E00               	movlw	0
  3866  001CDC  6E1A               	movwf	(_countAuto+1)^0,c
  3867  001CDE  0E00               	movlw	0
  3868  001CE0  6E19               	movwf	_countAuto^0,c
  3869  001CE2  EF85  F00E         	goto	i2l158
  3870  001CE6                     i2l2169:
  3871                           
  3872                           ;button.c: 44:         countPressed = 0;
  3873  001CE6  0E00               	movlw	0
  3874  001CE8  6E1C               	movwf	(_countPressed+1)^0,c
  3875  001CEA  0E00               	movlw	0
  3876  001CEC  6E1B               	movwf	_countPressed^0,c
  3877                           
  3878                           ;button.c: 45:         countAuto = 0;
  3879  001CEE  0E00               	movlw	0
  3880  001CF0  6E1A               	movwf	(_countAuto+1)^0,c
  3881  001CF2  0E00               	movlw	0
  3882  001CF4  6E19               	movwf	_countAuto^0,c
  3883                           
  3884                           ;button.c: 46:         changeModePressed = 0;
  3885  001CF6  0E00               	movlw	0
  3886  001CF8  6E18               	movwf	(_changeModePressed+1)^0,c
  3887  001CFA  0E00               	movlw	0
  3888  001CFC  6E17               	movwf	_changeModePressed^0,c
  3889                           
  3890                           ;button.c: 47:         increaseTime = 0;
  3891  001CFE  0E00               	movlw	0
  3892  001D00  6E16               	movwf	(_increaseTime+1)^0,c
  3893  001D02  0E00               	movlw	0
  3894  001D04  6E15               	movwf	_increaseTime^0,c
  3895  001D06  EF85  F00E         	goto	i2l158
  3896  001D0A                     i2l157:
  3897  001D0A                     i2l158:
  3898  001D0A  0012               	return		;funcret
  3899  001D0C                     __end_of_button:
  3900                           	opt callstack 0
  3901                           
  3902 ;; *************** function _readRB0Button *****************
  3903 ;; Defined at:
  3904 ;;		line 15 in file "button.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  check           2    2[COMRAM] int 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  2    0[COMRAM] int 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3918 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;Total ram usage:        4 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_button
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text24
  3932  001FF6                     __ptext24:
  3933                           	opt callstack 0
  3934  001FF6                     _readRB0Button:
  3935                           	opt callstack 23
  3936  001FF6                     
  3937                           ;button.c: 16:     firstReadRB0 = secondReadRB0;
  3938  001FF6  C034  F035         	movff	_secondReadRB0,_firstReadRB0
  3939  001FFA                     
  3940                           ;button.c: 17:     secondReadRB0 = PORTBbits.RB0;
  3941  001FFA  0E00               	movlw	0
  3942  001FFC  B081               	btfsc	129,0,c	;volatile
  3943  001FFE  0E01               	movlw	1
  3944  002000  6E34               	movwf	_secondReadRB0^0,c
  3945  002002                     
  3946                           ;button.c: 18:     int check = 0;
  3947  002002  0E00               	movlw	0
  3948  002004  6E22               	movwf	(readRB0Button@check+1)^0,c
  3949  002006  0E00               	movlw	0
  3950  002008  6E21               	movwf	readRB0Button@check^0,c
  3951  00200A                     
  3952                           ;button.c: 19:     if (firstReadRB0 == secondReadRB0) {
  3953  00200A  5034               	movf	_secondReadRB0^0,w,c
  3954  00200C  1835               	xorwf	_firstReadRB0^0,w,c
  3955  00200E  A4D8               	btfss	status,2,c
  3956  002010  EF0C  F010         	goto	i2u79_41
  3957  002014  EF0E  F010         	goto	i2u79_40
  3958  002018                     i2u79_41:
  3959  002018  EF1A  F010         	goto	i2l1877
  3960  00201C                     i2u79_40:
  3961  00201C                     
  3962                           ;button.c: 20:         if (firstReadRB0 == 0) {
  3963  00201C  5035               	movf	_firstReadRB0^0,w,c
  3964  00201E  A4D8               	btfss	status,2,c
  3965  002020  EF14  F010         	goto	i2u80_41
  3966  002024  EF16  F010         	goto	i2u80_40
  3967  002028                     i2u80_41:
  3968  002028  EF1A  F010         	goto	i2l1877
  3969  00202C                     i2u80_40:
  3970  00202C                     
  3971                           ;button.c: 21:             check = 1;
  3972  00202C  0E00               	movlw	0
  3973  00202E  6E22               	movwf	(readRB0Button@check+1)^0,c
  3974  002030  0E01               	movlw	1
  3975  002032  6E21               	movwf	readRB0Button@check^0,c
  3976  002034                     i2l1877:
  3977                           
  3978                           ;button.c: 24:     return check;
  3979  002034  C021  F01F         	movff	readRB0Button@check,?_readRB0Button
  3980  002038  C022  F020         	movff	readRB0Button@check+1,?_readRB0Button+1
  3981  00203C  0012               	return		;funcret
  3982  00203E                     __end_of_readRB0Button:
  3983                           	opt callstack 0
  3984                           
  3985 ;; *************** function _readRA5Button *****************
  3986 ;; Defined at:
  3987 ;;		line 3 in file "button.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  check           2    2[COMRAM] int 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  2    0[COMRAM] int 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;Total ram usage:        4 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_button
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text25
  4015  00203E                     __ptext25:
  4016                           	opt callstack 0
  4017  00203E                     _readRA5Button:
  4018                           	opt callstack 23
  4019  00203E                     
  4020                           ;button.c: 4:     firstReadRA5 = secondReadRA5;
  4021  00203E  C036  F037         	movff	_secondReadRA5,_firstReadRA5
  4022  002042                     
  4023                           ;button.c: 5:     secondReadRA5 = PORTAbits.RA5;
  4024  002042  0E00               	movlw	0
  4025  002044  BA80               	btfsc	128,5,c	;volatile
  4026  002046  0E01               	movlw	1
  4027  002048  6E36               	movwf	_secondReadRA5^0,c
  4028  00204A                     
  4029                           ;button.c: 6:     int check = 0;
  4030  00204A  0E00               	movlw	0
  4031  00204C  6E22               	movwf	(readRA5Button@check+1)^0,c
  4032  00204E  0E00               	movlw	0
  4033  002050  6E21               	movwf	readRA5Button@check^0,c
  4034  002052                     
  4035                           ;button.c: 7:     if (firstReadRA5 == secondReadRA5) {
  4036  002052  5036               	movf	_secondReadRA5^0,w,c
  4037  002054  1837               	xorwf	_firstReadRA5^0,w,c
  4038  002056  A4D8               	btfss	status,2,c
  4039  002058  EF30  F010         	goto	i2u77_41
  4040  00205C  EF32  F010         	goto	i2u77_40
  4041  002060                     i2u77_41:
  4042  002060  EF3E  F010         	goto	i2l1861
  4043  002064                     i2u77_40:
  4044  002064                     
  4045                           ;button.c: 8:         if (firstReadRA5 == 0) {
  4046  002064  5037               	movf	_firstReadRA5^0,w,c
  4047  002066  A4D8               	btfss	status,2,c
  4048  002068  EF38  F010         	goto	i2u78_41
  4049  00206C  EF3A  F010         	goto	i2u78_40
  4050  002070                     i2u78_41:
  4051  002070  EF3E  F010         	goto	i2l1861
  4052  002074                     i2u78_40:
  4053  002074                     
  4054                           ;button.c: 9:             check = 1;
  4055  002074  0E00               	movlw	0
  4056  002076  6E22               	movwf	(readRA5Button@check+1)^0,c
  4057  002078  0E01               	movlw	1
  4058  00207A  6E21               	movwf	readRA5Button@check^0,c
  4059  00207C                     i2l1861:
  4060                           
  4061                           ;button.c: 12:    return check;
  4062  00207C  C021  F01F         	movff	readRA5Button@check,?_readRA5Button
  4063  002080  C022  F020         	movff	readRA5Button@check+1,?_readRA5Button+1
  4064  002084  0012               	return		;funcret
  4065  002086                     __end_of_readRA5Button:
  4066                           	opt callstack 0
  4067                           
  4068                           	psect	rparam
  4069  0000                     
  4070                           	psect	temp
  4071  00003B                     btemp:
  4072                           	opt callstack 0
  4073  00003B                     	ds	1
  4074  0000                     int$flags	set	btemp
  4075  0000                     wtemp8	set	btemp+1
  4076  0000                     ttemp5	set	btemp+1
  4077  0000                     ttemp6	set	btemp+4
  4078  0000                     ttemp7	set	btemp+8
  4079                           tosu	equ	0xFFF
  4080                           tosh	equ	0xFFE
  4081                           tosl	equ	0xFFD
  4082                           stkptr	equ	0xFFC
  4083                           pclatu	equ	0xFFB
  4084                           pclath	equ	0xFFA
  4085                           pcl	equ	0xFF9
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           indf0	equ	0xFEF
  4093                           postinc0	equ	0xFEE
  4094                           postdec0	equ	0xFED
  4095                           preinc0	equ	0xFEC
  4096                           plusw0	equ	0xFEB
  4097                           fsr0h	equ	0xFEA
  4098                           fsr0l	equ	0xFE9
  4099                           wreg	equ	0xFE8
  4100                           indf1	equ	0xFE7
  4101                           postinc1	equ	0xFE6
  4102                           postdec1	equ	0xFE5
  4103                           preinc1	equ	0xFE4
  4104                           plusw1	equ	0xFE3
  4105                           fsr1h	equ	0xFE2
  4106                           fsr1l	equ	0xFE1
  4107                           bsr	equ	0xFE0
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           preinc2	equ	0xFDC
  4112                           plusw2	equ	0xFDB
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    0
    Data        4
    BSS         30
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayModify
    _displayStpWatch->_LCDPutStr
    _displayModify->_LCDPutStr
    _displayClock->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _deviceInterrupt in COMRAM

    _deviceInterrupt->_button
    _button->_readRA5Button
    _button->_readRB0Button

Critical Paths under _main in BANK0

    None.

Critical Paths under _deviceInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _deviceInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _deviceInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _deviceInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _deviceInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _deviceInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _deviceInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _deviceInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _deviceInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _deviceInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _deviceInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _deviceInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _deviceInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _deviceInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _deviceInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _deviceInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   27434
                                             19 COMRAM     2     2      0
                            _LCDInit
                   _buttonInitialize
                       _displayClock
                      _displayModify
                    _displayStpWatch
                         _modifyHour
                       _modifyMinute
                       _modifySecond
                           _norClock
              _oscillationInitialize
                          _stopWatch
                    _timerInitialize
 ---------------------------------------------------------------------------------
 (1) _timerInitialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopWatch                                            2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _oscillationInitialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _norClock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modifySecond                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyMinute                                         2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modifyHour                                           2     2      0       0
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStpWatch                                      0     0      0    8557
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayModify                                        2     2      0    8557
                                             17 COMRAM     2     2      0
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayClock                                         0     0      0    8557
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3032
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2580
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1265
                                             15 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (1) _buttonInitialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1763
                                             15 COMRAM     1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (2) _Port_BBSPIInit                                       1     1      0     105
                                             11 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (2) _LCDPutInst                                           2     2      0     840
                                             13 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _WritePort_BBSPI                                      2     1      1     818
                                             11 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (5) _SendByteBBSPI                                        3     3      0      90
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _deviceInterrupt                                      0     0      0      94
                             _button
 ---------------------------------------------------------------------------------
 (7) _button                                               4     4      0      94
                                              4 COMRAM     4     4      0
                      _readRA5Button
                      _readRB0Button
 ---------------------------------------------------------------------------------
 (8) _readRB0Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _readRA5Button                                        4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _InitBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _Port_BBSPIInit
       _SendByteBBSPI
     _WritePort_BBSPI
       _SendByteBBSPI
   _buttonInitialize
   _displayClock
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayModify
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _displayStpWatch
     _LCDPutChar
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___awdiv
     ___awmod
   _modifyHour
   _modifyMinute
   _modifySecond
   _norClock
   _oscillationInitialize
   _stopWatch
   _timerInitialize

 _deviceInterrupt (ROOT)
   _button
     _readRA5Button
     _readRB0Button

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      3A       1       61.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A      32        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Sep 22 21:32:13 2019

                   ?_LCDPutChar 001F                              l86 1558                              u10 1E72  
                            u11 1E6E                              u20 1E88                              u21 1E84  
                            u30 1EC8                              u31 1EC4                    ___awdiv@sign 002C  
                   ?_LCDPutInst 001F                              _hr 000B                   ?_displayClock 001F  
               _timer0ReloadVal 0038           SendByteBBSPI@bitcount 0028                             l111 21A0  
                           l200 216A                             l114 2150                             l203 2184  
                           l117 21AA                             l206 1F2E                             l215 20C2  
                           l209 1F94                             l412 140E                             l191 1E64  
                           l193 1E78                             l185 1FF4                             l194 1E7A  
                           l188 2196                             l460 19E8                             l197 1EC8  
                           l357 18EA                             l710 1DBA                             l463 1AB6  
                           l375 17BA                             l296 1E58                             l393 168A  
                           l299 1B84                             l459 19E0                             l697 1C48  
                           u210 1DD8                             u211 1DD4                             u300 185C  
                           u220 1E00                             u301 1858                             u221 1DFC  
                           u310 186E                             u230 1E28                             u311 186A  
                           u231 1E24                             u320 1884                             u400 16A2  
                           u240 1E50                             u321 1880                             u401 169E  
                           u241 1E4C                             u330 18E2                             u250 17D2  
                           u410 16BC                             u331 18DE                             u251 17CE  
                           u411 16B8                             u260 17EC                             u420 16DA  
                           u500 158C                             u261 17E8                             u421 16D6  
                           u501 1588                             u270 180A                             u430 16EC  
                           u510 15AA                             u271 1806                             u431 16E8  
                           u511 15A6                             u280 181C                             u440 170A  
                           u520 15BC                             u600 1956                             u281 1818  
                           u441 1706                             u521 15B8                             u601 1952  
                           u290 183A                             u450 172C                             u530 15DA  
                           u610 1968                             u291 1836                             u451 1728  
                           u531 15D6                             u611 1964                             u460 173E  
                           u540 15FC                             u620 1988                             u461 173A  
                           u541 15F8                             u621 1984                             u470 1754  
                           u550 160E                             u630 19B0                             u471 1750  
                           u551 160A                             u631 19AC                             u480 17B2  
                           u560 1624                             u640 19D8                             u481 17AE  
                           u561 1620                             u641 19D4                             u810 20C2  
                           u570 1682                             u490 1572                             u811 20BE  
                           u571 167E                             u491 156E                             u820 1B98  
                           u900 1D52                             u580 1906                             u821 1B94  
                           u901 1D4E                             u581 1902                             u830 1BB2  
                           u910 1D70                             u590 1918                             u831 1BAE  
                           u911 1D6C                             u591 1914                             u840 1BD8  
                           u920 1D86                             u841 1BD4                             u921 1D82  
                           u850 1BF6                             u930 1DAA                             u851 1BF2  
                           u931 1DA6                             u860 1C12                             u940 1086  
                           u861 1C0E                             u941 1082                             u870 1C38  
                           u950 1098                             u871 1C34                             u951 1094  
                           u880 1D1E                             u960 11F0                             u881 1D1A  
                           u961 11EC                             u890 1D38                             u970 1202  
                           u891 1D34                             u971 11FE                             u980 135A  
                           u981 1356                             u990 136C                             u991 1368  
        __size_of_readRB0Button 0048                             _min 000D                             _sec 000F  
                           _run 0007         __end_of_displayStpWatch 1AB8                    ___awmod@sign 002C  
        __size_of_readRA5Button 0048                             wreg 000FE8                  ?_displayModify 001F  
               __end_of_LCDInit 1FF6                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l2001 1FC6                            l2011 1FEE                            l2003 1FD6  
                          l1141 1E60                            l2005 1FDC                            l2021 1AEC  
                          l2013 1AB8                            l2101 12D4                            l1151 1E90  
                          l2007 1FE2                            l2031 1B4C                            l2023 1B08  
                          l2015 1ABE                            l2111 1334                            l2103 12F0  
                          l1161 1E9E                            l1153 1E96                            l1241 2154  
                          l2009 1FE8                            l2033 1B68                            l2025 1B0E  
                          l2017 1ACA                            l2113 135A                            l2105 12F6  
                          l2041 105A                            l1401 1E08                            l2201 149C  
                          l1171 1EA8                            l1163 1EA0                            l1155 1E98  
                          l1147 1E72                            l1139 1E5C                            l1243 2156  
                          l2027 1B2A                            l2019 1AD0                            l2115 136C  
                          l2107 1312                            l2051 10E0                            l2043 1060  
                          l2123 13CC                            l2035 1044                            l2131 19F0  
                          l1411 1E50                            l1403 1E0C                            l2211 14D8  
                          l2203 14AE                            l1181 1EB6                            l1173 1EAA  
                          l1165 1EA2                            l1157 1E9A                            l1149 1E88  
                          l1245 2168                            l2029 1B46                            l2117 137C  
                          l2109 132E                            l2061 1138                            l2045 1086  
                          l2053 10F4                            l2037 1048                            l2141 1A40  
                          l2133 19FC                            l1405 1E28                            l2213 14E8  
                          l2205 14BE                            l1239 2186                            l1183 1EB8  
                          l1175 1EAC                            l1167 1EA4                            l1159 1E9C  
                          l2119 13B4                            l2071 118C                            l2063 1154  
                          l2055 10FA                            l2047 1098                            l2039 104E  
                          l2143 1A5C                            l2135 1A02                            l1407 1E30  
                          l1351 2198                            l2215 14F0                            l2207 14C2  
                          l2223 1516                            l1177 1EAE                            l1169 1EA6  
                          l1361 21A6                            l2081 1202                            l2073 11A8  
                          l2065 1174                            l2057 1116                            l2049 10A8  
                          l2145 1A78                            l2137 1A1E                            l2129 19EA  
                          l1441 17EC                            l1601 1754                            l1409 1E34  
                          l1353 2136                            l2217 14F4                            l2209 14C6  
                          l1179 1EB0                            l2091 1280                            l2083 1212  
                          l2075 11C4                            l2067 117A                            l2059 1132  
                          l2147 1A7E                            l2139 1A3A                            l1451 1820  
                          l1443 17F0                            l1435 17BC                            l1611 17B2  
                          l1603 175C                            l1355 213A                            l2219 1506  
                          l2171 1410                            l2093 12A0                            l2085 124A  
                          l2077 11CA                            l2069 1186                            l2149 1A9A  
                          l1461 1872                            l1453 183A                            l1445 17F8  
                          l1437 17C0                            l1621 1572                            l1357 2146  
                          l2181 1434                            l2173 141C                            l1359 21A2  
                          l2095 12A6                            l2079 11F0                            l2087 125E  
                          l2271 18A8                            l1463 1884                            l1455 184A  
                          l1447 180A                            l1439 17D2                            l1471 18C6  
                          l1607 1764                            l1631 15BC                            l1623 158C  
                          l1391 1DBC                            l2191 146E                            l2183 1438  
                          l2175 1420                            l2273 13E0                            l2097 12B2  
                          l2089 1264                            l1473 18E2                            l1465 188C  
                          l1457 185C                            l1449 181C                            l1609 1796  
                          l1641 160E                            l1633 15C0                            l1625 1590  
                          l1617 155C                            l1393 1DD8                            l2265 152A  
                          l2193 1472                            l2185 1448                            l2177 1424  
                          l2099 12B8                            l1459 186E                            l2267 1648  
                          l1643 1612                            l1635 15DA                            l1627 1598  
                          l1619 1560                            l1651 1634                            l1395 1DE0  
                          l2195 1484                            l2187 145A                            l2179 142C  
                          l1901 209E                            l1469 1894                            l2269 1778  
                          l1581 16C0                            l1573 168C                            l1645 1624  
                          l1637 15EA                            l1629 15AA                            l1653 1666  
                          l1397 1DE4                            l1661 18EC                            l2197 1494  
                          l2189 146A                            l1831 2182                            l1903 20A2  
                          l1911 1BA0                            l1591 170A                            l1583 16C8  
                          l1575 1690                            l1655 1682                            l1647 162C  
                          l1639 15FC                            l1399 1E00                            l1671 1956  
                          l1663 1906                            l2199 1498                            l1841 1EFE  
                          l1833 1ECC                            l1921 1BC6                            l1913 1BA4  
                          l1905 1B86                            l1593 171A                            l1585 16DA  
                          l1577 16A2                            l1681 1994                            l1673 1968  
                          l1665 1918                            l1827 216E                            l1843 1F0C  
                          l1835 1EDC                            l1931 1BFC                            l1923 1BD8  
                          l1915 1BB2                            l1907 1B8A                            l1595 172C  
                          l1587 16EC                            l1579 16BC                            l1683 19B0  
                          l1675 196C                            l1667 1930                            l1829 2170  
                          l1845 1F16                            l1837 1EE6                            l1933 1C12  
                          l1925 1BE0                            l1941 1C28                            l1917 1BBA  
                          l1909 1B98                            l1597 173E                            l1589 16F0  
                          l1685 19B8                            l1677 1988                            l1669 1944  
                          l1847 1F24                            l1839 1EF4                            l1943 1C38  
                          l1935 1C1A                            l1927 1BE8                            l1919 1BBE  
                          l1951 1D10                            l1599 1742                            l1687 19BC  
                          l1679 1990                            l1881 1F32                            l1945 1C40  
                          l1937 1C1C                            l1929 1BF6                            l1961 1D40  
                          l1953 1D1E                            l1689 19D8                            l1891 1F72  
                          l1883 1F42                            l1939 1C22                            l1971 1D86  
                          l1963 1D52                            l1955 1D26                            l1893 1F7C  
                          l1885 1F4C                            l1981 1DB2                            l1973 1D8E  
                          l1965 1D5A                            l1957 1D2A                            l1949 1D0C  
                          l1895 1F8A                            l1887 1F5A                            l1991 1F9E  
                          l1975 1D94                            l1967 1D62                            l1959 1D38  
                          l1889 1F64                            l1993 1FAE                            l1985 1F96  
                          l1897 2086                            l1969 1D70                            l1977 1D9A  
                          l1995 1FB0                            l1987 1F9A                            l1899 208A  
                          l1979 1DAA                            l1997 1FB6                            l1989 1F9C  
                          l1999 1FBC                            STR_1 1012                            STR_2 1023  
                          STR_3 1033                            STR_4 1033                            STR_5 1001  
                          u1040 1448                            u1041 1444                            u1050 145A  
                          u1051 1456                            u1060 1484                            u1061 1480  
                          u1070 14AE                            u1207 1F6A                            u1127 1ED2  
                          u1071 14AA                            u1080 14D8                            u1217 1F82  
                          u1137 1EEC                            u1081 14D4                            u1090 1506  
                          u1147 1F04                            u1091 1502                            u1157 1F1C  
                          u1167 1FA4                            u1177 1FCC                            u1187 1F38  
                          u1197 1F52                            _TMR0 000FD6                            _main 1410  
                          fsr1l 000FE1                            btemp 003B                ?_WritePort_BBSPI 002A  
                          start 000E              __size_of_LCDPutStr 003E                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000               _changeModePressed 0017  
               _deviceInterrupt 0008                  ??_displayClock 0030                           ?_main 001F  
               __end_of___awdiv 1C4A                 __end_of___awmod 1DBC                           _T0CON 000FD5  
               ___awdiv@divisor 0029                           i2l144 2084                           i2l149 203C  
                         i2l157 1D0A                           i2l253 20FC                           i2l158 1D0A  
               ___awdiv@counter 002B                           _TMR0H 000FD7                           _TMR0L 000FD6  
                 __CFG_PWRT$OFF 000000                  __CFG_FCMEN$OFF 000000         __size_of_Port_BBSPIInit 001A  
                         _blink 0009                           _state 001E  __size_of_oscillationInitialize 000A  
 __end_of_oscillationInitialize 21A2                  __CFG_BOREN$OFF 000000                           tablat 000FF5  
           __size_of_LCDPutChar 0066             __size_of_LCDPutInst 0066                           ttemp5 003C  
                         ttemp6 003F                           ttemp7 0043                           status 000FD8  
             ??_timerInitialize 0027                           wtemp8 003C                   _readRB0Button 1FF6  
                 _readRA5Button 203E                 __initialization 2100                    __end_of_main 155C  
                __CFG_OSC$HSPLL 000000                          ??_main 0032                   __activetblptr 000003  
                     ??_LCDInit 002E                    LCDPutChar@ch 002D               __end_of_LCDPutStr 20C4  
               ??_displayModify 0030                ?_displayStpWatch 001F                          _ADCON1 000FC1  
            __size_of_InitBBSPI 0012                ___awdiv@dividend 0027                    LCDPutInst@ch 002D  
                        i2l2151 1C4A                          i2l2231 20D4                          i2l2161 1C96  
                        i2l2153 1C62                          i2l2241 20F0                          i2l2233 20E2  
                        i2l2163 1CB2                          i2l2155 1C74                          i2l2243 20F8  
                        i2l2235 20E4                          i2l2165 1CB6                          i2l2157 1C80  
                        i2l2237 20E8                          i2l2229 20C6                          i2l2167 1CD2  
                        i2l2159 1C92                          i2l2239 20EC                          i2l2169 1CE6  
                        i2l1851 2042                          i2l1861 207C                          i2l1853 204A  
                        i2l1855 2052                          i2l1871 200A                          i2l1857 2064  
                        i2l1849 203E                          i2l1873 201C                          i2l1865 1FF6  
                        i2l1859 2074                          i2l1875 202C                          i2l1867 1FFA  
                        i2l1877 2034                          i2l1869 2002                          _OSCCON 000FD3  
                  LCDPutStr@ptr 002E                  ?_readRB0Button 001F                  ?_readRA5Button 001F  
       __end_of_deviceInterrupt 2100                  __CFG_XINST$OFF 000000                       ??___awdiv 002B  
                     ??___awmod 002B                          _minSTW 0005                          _secSTW 0003  
                        _button 1C4A                          clear_0 2126       __size_of_buttonInitialize 000A  
              ___awdiv@quotient 002D                 ___awmod@divisor 0029                 ___awmod@counter 002B  
              __end_of_norClock 1E5A                    __pdataCOMRAM 0034          Port_BBSPIInit@port_dir 002A  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __end_of_displayClock 1B86                      __accesstop 0060  
       __end_of__initialization 212C                   ___rparam_used 000001          __size_of_SendByteBBSPI 0070  
                 ?_modifyMinute 001F                   ?_modifySecond 001F                  __pcstackCOMRAM 001F  
             __end_of_InitBBSPI 2198                    ??_LCDPutChar 002C                    ??_LCDPutInst 002C  
                _Port_BBSPIInit 2152                 ??_readRB0Button 0021                 ??_readRA5Button 0021  
            __end_of_LCDPutChar 1F30                      __pnvCOMRAM 0038              __end_of_LCDPutInst 1F96  
              ?_deviceInterrupt 001F                  ??_modifyMinute 0027                  ??_modifySecond 0027  
                       ?_button 001F          __end_of_Port_BBSPIInit 216C                         _LCDInit 1F96  
                 _SendByteBBSPI 1E5A                 _timerInitialize 2136                         _OSCTUNE 000F9B  
                       i2u80_40 202C                         i2u80_41 2028                         i2u77_40 2064  
                       i2u77_41 2060                         i2u78_40 2074                         i2u78_41 2070  
                       i2u79_40 201C                         i2u79_41 2018              __size_of_stopWatch 00FE  
              WritePort_BBSPI@a 002A                       ?_norClock 001F                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 1B86                         ___awmod 1D0C  
                    _miliSecSTW 0001        __size_of_WritePort_BBSPI 001A                    __psmallconst 1000  
              _buttonInitialize 21A2                         __pcinit 2100                 __size_of_button 00C2  
                       __ramtop 1000                         __ptext0 1410                         __ptext1 2136  
                       __ptext2 18EC                         __ptext3 2198                         __ptext4 1DBC  
                       __ptext5 155C                         __ptext6 168C                         __ptext7 17BC  
                       __ptext8 19EA                         __ptext9 1044                  ?_SendByteBBSPI 001F  
               ?_Port_BBSPIInit 001F                ___awmod@dividend 0027                      _modifyHour 17BC  
         __size_of_displayClock 00CE                       _LCDPutStr 2086                  __pintcode_body 20C4  
          end_of_initialization 212C                         int_func 20C4           _oscillationInitialize 2198  
                    ??_norClock 0027                         postdec1 000FE5                         postinc0 000FEE  
       __end_of_timerInitialize 2152               __end_of_stopWatch 19EA                    _displayClock 1AB8  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _TRISAbits 000F92  
          __end_of_modifyMinute 17BC            __end_of_modifySecond 168C                       _TRISBbits 000F93  
                     _TRISCbits 000F94                       _TRISFbits 000F97           __end_of_displayModify 1410  
                    ?_LCDPutStr 002E             SendByteBBSPI@output 0027        __size_of_displayStpWatch 00CE  
                 __pidataCOMRAM 21AC                    _firstReadRB0 0035                    _firstReadRA5 0037  
               ??_SendByteBBSPI 0027                   _secondReadRB0 0034                   _secondReadRA5 0036  
                __end_of_button 1D0C                       _InitBBSPI 2186               ??_WritePort_BBSPI 002B  
           start_initialization 2100                    _countPressed 001B                     ?_modifyHour 001F  
        ?_oscillationInitialize 001F                    _increaseTime 0015                        ??_button 0023  
              ?_timerInitialize 001F                      ?_InitBBSPI 001F                        ?_LCDInit 001F  
                   __pbssCOMRAM 0001              readRB0Button@check 0021                     ??_LCDPutStr 0030  
      __end_of_buttonInitialize 21AC           __end_of_readRB0Button 203E           __end_of_readRA5Button 2086  
             ??_displayStpWatch 0030               __size_of_norClock 009E                       __pintcode 0008  
           __size_of_modifyHour 0130                  button@checkRB0 0025                  button@checkRA5 0023  
                      ?___awdiv 0027                        ?___awmod 0027                ??_Port_BBSPIInit 002A  
      __size_of_deviceInterrupt 20F8           __size_of_modifyMinute 0130           __size_of_modifySecond 0130  
                     _count10ms 0013                     __smallconst 1000                       _countAuto 0019  
                      _LATAbits 000F89                        _LATCbits 000F8B                        _LATFbits 000F8E  
                      i2u100_40 1C74                        i2u100_41 1C70                        i2u101_40 1C92  
                      i2u101_41 1C8E                        i2u102_40 1CB2                        i2u110_40 20D4  
                      i2u102_41 1CAE                        i2u110_41 20D0                        i2u103_40 1CD2  
                      i2u111_40 20E2                        i2u103_41 1CCE                        i2u111_41 20DE  
                  _modifyMinute 168C                    _modifySecond 155C                       _timerFlag 0011  
                   ??_InitBBSPI 0027              SendByteBBSPI@input 0029                       _stopWatch 18EC  
              __size_of_LCDInit 0060                       copy_data0 2114                        __Hrparam 0000  
                      __Lrparam 0000                 _WritePort_BBSPI 216C                __size_of___awdiv 00C4  
              __size_of___awmod 00B0                      ?_stopWatch 001F               ??_deviceInterrupt 0027  
                  ??_modifyHour 0027              readRA5Button@check 0021                        __ptext10 1AB8  
                      __ptext11 1D0C                        __ptext20 1E5A                        __ptext12 1B86  
                      __ptext21 2186                        __ptext13 2086                        __ptext14 1ECA  
                      __ptext23 1C4A                        __ptext15 21A2         ??_oscillationInitialize 0027  
                      __ptext24 1FF6                        __ptext16 1F96                        __ptext25 203E  
                      __ptext17 2152                        __ptext18 1F30                        __ptext19 216C  
                 __size_of_main 014C                        _norClock 1DBC                        _stModify 001D  
                      int$flags 003B          __size_of_displayModify 03CC              __end_of_modifyHour 18EC  
                    _LCDPutChar 1ECA                      _LCDPutInst 1F30           __end_of_SendByteBBSPI 1ECA  
                    _INTCONbits 000FF2                 _displayStpWatch 19EA                        intlevel2 0000  
             ?_buttonInitialize 001F         __end_of_WritePort_BBSPI 2186              ??_buttonInitialize 0027  
       WritePort_BBSPI@port_add 002B                     ??_stopWatch 0027        __size_of_timerInitialize 001C  
                 _displayModify 1044  
